
Project_Galwan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c198  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c34  0800c328  0800c328  0001c328  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf5c  0800cf5c  000200d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf5c  0800cf5c  0001cf5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf64  0800cf64  000200d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800cf64  0800cf64  0001cf64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800cf6c  0800cf6c  0001cf6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000d8  20000000  0800cf74  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002580  200000d8  0800d04c  000200d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002658  0800d04c  00022658  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00027aa4  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000043d9  00000000  00000000  00047bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001a50  00000000  00000000  0004bf88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000018b8  00000000  00000000  0004d9d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029b44  00000000  00000000  0004f290  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00016c87  00000000  00000000  00078dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e786e  00000000  00000000  0008fa5b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001772c9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008818  00000000  00000000  00177344  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000d8 	.word	0x200000d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c310 	.word	0x0800c310

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000dc 	.word	0x200000dc
 80001cc:	0800c310 	.word	0x0800c310

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b972 	b.w	800057c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	4688      	mov	r8, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14b      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4615      	mov	r5, r2
 80002c2:	d967      	bls.n	8000394 <__udivmoddi4+0xe4>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0720 	rsb	r7, r2, #32
 80002ce:	fa01 f302 	lsl.w	r3, r1, r2
 80002d2:	fa20 f707 	lsr.w	r7, r0, r7
 80002d6:	4095      	lsls	r5, r2
 80002d8:	ea47 0803 	orr.w	r8, r7, r3
 80002dc:	4094      	lsls	r4, r2
 80002de:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002e2:	0c23      	lsrs	r3, r4, #16
 80002e4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002e8:	fa1f fc85 	uxth.w	ip, r5
 80002ec:	fb0e 8817 	mls	r8, lr, r7, r8
 80002f0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f4:	fb07 f10c 	mul.w	r1, r7, ip
 80002f8:	4299      	cmp	r1, r3
 80002fa:	d909      	bls.n	8000310 <__udivmoddi4+0x60>
 80002fc:	18eb      	adds	r3, r5, r3
 80002fe:	f107 30ff 	add.w	r0, r7, #4294967295
 8000302:	f080 811b 	bcs.w	800053c <__udivmoddi4+0x28c>
 8000306:	4299      	cmp	r1, r3
 8000308:	f240 8118 	bls.w	800053c <__udivmoddi4+0x28c>
 800030c:	3f02      	subs	r7, #2
 800030e:	442b      	add	r3, r5
 8000310:	1a5b      	subs	r3, r3, r1
 8000312:	b2a4      	uxth	r4, r4
 8000314:	fbb3 f0fe 	udiv	r0, r3, lr
 8000318:	fb0e 3310 	mls	r3, lr, r0, r3
 800031c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000320:	fb00 fc0c 	mul.w	ip, r0, ip
 8000324:	45a4      	cmp	ip, r4
 8000326:	d909      	bls.n	800033c <__udivmoddi4+0x8c>
 8000328:	192c      	adds	r4, r5, r4
 800032a:	f100 33ff 	add.w	r3, r0, #4294967295
 800032e:	f080 8107 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000332:	45a4      	cmp	ip, r4
 8000334:	f240 8104 	bls.w	8000540 <__udivmoddi4+0x290>
 8000338:	3802      	subs	r0, #2
 800033a:	442c      	add	r4, r5
 800033c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000340:	eba4 040c 	sub.w	r4, r4, ip
 8000344:	2700      	movs	r7, #0
 8000346:	b11e      	cbz	r6, 8000350 <__udivmoddi4+0xa0>
 8000348:	40d4      	lsrs	r4, r2
 800034a:	2300      	movs	r3, #0
 800034c:	e9c6 4300 	strd	r4, r3, [r6]
 8000350:	4639      	mov	r1, r7
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0xbe>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80eb 	beq.w	8000536 <__udivmoddi4+0x286>
 8000360:	2700      	movs	r7, #0
 8000362:	e9c6 0100 	strd	r0, r1, [r6]
 8000366:	4638      	mov	r0, r7
 8000368:	4639      	mov	r1, r7
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f783 	clz	r7, r3
 8000372:	2f00      	cmp	r7, #0
 8000374:	d147      	bne.n	8000406 <__udivmoddi4+0x156>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0xd0>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80fa 	bhi.w	8000574 <__udivmoddi4+0x2c4>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0303 	sbc.w	r3, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	4698      	mov	r8, r3
 800038a:	2e00      	cmp	r6, #0
 800038c:	d0e0      	beq.n	8000350 <__udivmoddi4+0xa0>
 800038e:	e9c6 4800 	strd	r4, r8, [r6]
 8000392:	e7dd      	b.n	8000350 <__udivmoddi4+0xa0>
 8000394:	b902      	cbnz	r2, 8000398 <__udivmoddi4+0xe8>
 8000396:	deff      	udf	#255	; 0xff
 8000398:	fab2 f282 	clz	r2, r2
 800039c:	2a00      	cmp	r2, #0
 800039e:	f040 808f 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a2:	1b49      	subs	r1, r1, r5
 80003a4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003a8:	fa1f f885 	uxth.w	r8, r5
 80003ac:	2701      	movs	r7, #1
 80003ae:	fbb1 fcfe 	udiv	ip, r1, lr
 80003b2:	0c23      	lsrs	r3, r4, #16
 80003b4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb08 f10c 	mul.w	r1, r8, ip
 80003c0:	4299      	cmp	r1, r3
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c4:	18eb      	adds	r3, r5, r3
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4299      	cmp	r1, r3
 80003ce:	f200 80cd 	bhi.w	800056c <__udivmoddi4+0x2bc>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1a59      	subs	r1, r3, r1
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1410 	mls	r4, lr, r0, r1
 80003e0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x14c>
 80003ec:	192c      	adds	r4, r5, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x14a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80b6 	bhi.w	8000566 <__udivmoddi4+0x2b6>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e79f      	b.n	8000346 <__udivmoddi4+0x96>
 8000406:	f1c7 0c20 	rsb	ip, r7, #32
 800040a:	40bb      	lsls	r3, r7
 800040c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000410:	ea4e 0e03 	orr.w	lr, lr, r3
 8000414:	fa01 f407 	lsl.w	r4, r1, r7
 8000418:	fa20 f50c 	lsr.w	r5, r0, ip
 800041c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000420:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000424:	4325      	orrs	r5, r4
 8000426:	fbb3 f9f8 	udiv	r9, r3, r8
 800042a:	0c2c      	lsrs	r4, r5, #16
 800042c:	fb08 3319 	mls	r3, r8, r9, r3
 8000430:	fa1f fa8e 	uxth.w	sl, lr
 8000434:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000438:	fb09 f40a 	mul.w	r4, r9, sl
 800043c:	429c      	cmp	r4, r3
 800043e:	fa02 f207 	lsl.w	r2, r2, r7
 8000442:	fa00 f107 	lsl.w	r1, r0, r7
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1e 0303 	adds.w	r3, lr, r3
 800044c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000450:	f080 8087 	bcs.w	8000562 <__udivmoddi4+0x2b2>
 8000454:	429c      	cmp	r4, r3
 8000456:	f240 8084 	bls.w	8000562 <__udivmoddi4+0x2b2>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4473      	add	r3, lr
 8000460:	1b1b      	subs	r3, r3, r4
 8000462:	b2ad      	uxth	r5, r5
 8000464:	fbb3 f0f8 	udiv	r0, r3, r8
 8000468:	fb08 3310 	mls	r3, r8, r0, r3
 800046c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000470:	fb00 fa0a 	mul.w	sl, r0, sl
 8000474:	45a2      	cmp	sl, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1e 0404 	adds.w	r4, lr, r4
 800047c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000480:	d26b      	bcs.n	800055a <__udivmoddi4+0x2aa>
 8000482:	45a2      	cmp	sl, r4
 8000484:	d969      	bls.n	800055a <__udivmoddi4+0x2aa>
 8000486:	3802      	subs	r0, #2
 8000488:	4474      	add	r4, lr
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	fba0 8902 	umull	r8, r9, r0, r2
 8000492:	eba4 040a 	sub.w	r4, r4, sl
 8000496:	454c      	cmp	r4, r9
 8000498:	46c2      	mov	sl, r8
 800049a:	464b      	mov	r3, r9
 800049c:	d354      	bcc.n	8000548 <__udivmoddi4+0x298>
 800049e:	d051      	beq.n	8000544 <__udivmoddi4+0x294>
 80004a0:	2e00      	cmp	r6, #0
 80004a2:	d069      	beq.n	8000578 <__udivmoddi4+0x2c8>
 80004a4:	ebb1 050a 	subs.w	r5, r1, sl
 80004a8:	eb64 0403 	sbc.w	r4, r4, r3
 80004ac:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004b0:	40fd      	lsrs	r5, r7
 80004b2:	40fc      	lsrs	r4, r7
 80004b4:	ea4c 0505 	orr.w	r5, ip, r5
 80004b8:	e9c6 5400 	strd	r5, r4, [r6]
 80004bc:	2700      	movs	r7, #0
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0xa0>
 80004c0:	f1c2 0320 	rsb	r3, r2, #32
 80004c4:	fa20 f703 	lsr.w	r7, r0, r3
 80004c8:	4095      	lsls	r5, r2
 80004ca:	fa01 f002 	lsl.w	r0, r1, r2
 80004ce:	fa21 f303 	lsr.w	r3, r1, r3
 80004d2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004d6:	4338      	orrs	r0, r7
 80004d8:	0c01      	lsrs	r1, r0, #16
 80004da:	fbb3 f7fe 	udiv	r7, r3, lr
 80004de:	fa1f f885 	uxth.w	r8, r5
 80004e2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004e6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ea:	fb07 f308 	mul.w	r3, r7, r8
 80004ee:	428b      	cmp	r3, r1
 80004f0:	fa04 f402 	lsl.w	r4, r4, r2
 80004f4:	d907      	bls.n	8000506 <__udivmoddi4+0x256>
 80004f6:	1869      	adds	r1, r5, r1
 80004f8:	f107 3cff 	add.w	ip, r7, #4294967295
 80004fc:	d22f      	bcs.n	800055e <__udivmoddi4+0x2ae>
 80004fe:	428b      	cmp	r3, r1
 8000500:	d92d      	bls.n	800055e <__udivmoddi4+0x2ae>
 8000502:	3f02      	subs	r7, #2
 8000504:	4429      	add	r1, r5
 8000506:	1acb      	subs	r3, r1, r3
 8000508:	b281      	uxth	r1, r0
 800050a:	fbb3 f0fe 	udiv	r0, r3, lr
 800050e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000512:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000516:	fb00 f308 	mul.w	r3, r0, r8
 800051a:	428b      	cmp	r3, r1
 800051c:	d907      	bls.n	800052e <__udivmoddi4+0x27e>
 800051e:	1869      	adds	r1, r5, r1
 8000520:	f100 3cff 	add.w	ip, r0, #4294967295
 8000524:	d217      	bcs.n	8000556 <__udivmoddi4+0x2a6>
 8000526:	428b      	cmp	r3, r1
 8000528:	d915      	bls.n	8000556 <__udivmoddi4+0x2a6>
 800052a:	3802      	subs	r0, #2
 800052c:	4429      	add	r1, r5
 800052e:	1ac9      	subs	r1, r1, r3
 8000530:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000534:	e73b      	b.n	80003ae <__udivmoddi4+0xfe>
 8000536:	4637      	mov	r7, r6
 8000538:	4630      	mov	r0, r6
 800053a:	e709      	b.n	8000350 <__udivmoddi4+0xa0>
 800053c:	4607      	mov	r7, r0
 800053e:	e6e7      	b.n	8000310 <__udivmoddi4+0x60>
 8000540:	4618      	mov	r0, r3
 8000542:	e6fb      	b.n	800033c <__udivmoddi4+0x8c>
 8000544:	4541      	cmp	r1, r8
 8000546:	d2ab      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 8000548:	ebb8 0a02 	subs.w	sl, r8, r2
 800054c:	eb69 020e 	sbc.w	r2, r9, lr
 8000550:	3801      	subs	r0, #1
 8000552:	4613      	mov	r3, r2
 8000554:	e7a4      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000556:	4660      	mov	r0, ip
 8000558:	e7e9      	b.n	800052e <__udivmoddi4+0x27e>
 800055a:	4618      	mov	r0, r3
 800055c:	e795      	b.n	800048a <__udivmoddi4+0x1da>
 800055e:	4667      	mov	r7, ip
 8000560:	e7d1      	b.n	8000506 <__udivmoddi4+0x256>
 8000562:	4681      	mov	r9, r0
 8000564:	e77c      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000566:	3802      	subs	r0, #2
 8000568:	442c      	add	r4, r5
 800056a:	e747      	b.n	80003fc <__udivmoddi4+0x14c>
 800056c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000570:	442b      	add	r3, r5
 8000572:	e72f      	b.n	80003d4 <__udivmoddi4+0x124>
 8000574:	4638      	mov	r0, r7
 8000576:	e708      	b.n	800038a <__udivmoddi4+0xda>
 8000578:	4637      	mov	r7, r6
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0xa0>

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000580:	b5b0      	push	{r4, r5, r7, lr}
 8000582:	b09a      	sub	sp, #104	; 0x68
 8000584:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000586:	f001 fbf5 	bl	8001d74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058a:	f000 f855 	bl	8000638 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800058e:	f000 fd8b 	bl	80010a8 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000592:	f000 fd4b 	bl	800102c <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000596:	f000 f8e5 	bl	8000764 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 800059a:	f000 f93f 	bl	800081c <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 800059e:	f000 f971 	bl	8000884 <_ZL12MX_I2S3_Initv>
  MX_RTC_Init();
 80005a2:	f000 f9a3 	bl	80008ec <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 80005a6:	f000 fa41 	bl	8000a2c <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 80005aa:	f000 fa7b 	bl	8000aa4 <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 80005ae:	f000 fb8b 	bl	8000cc8 <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 80005b2:	f000 fbe7 	bl	8000d84 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 80005b6:	f000 fcdd 	bl	8000f74 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 80005ba:	f000 fd09 	bl	8000fd0 <_ZL19MX_USART2_UART_Initv>
  MX_TIM10_Init();
 80005be:	f000 fcb1 	bl	8000f24 <_ZL13MX_TIM10_Initv>
  /* USER CODE BEGIN 2 */

  HAL_TIM_Base_Start( &htim1);
 80005c2:	4818      	ldr	r0, [pc, #96]	; (8000624 <main+0xa4>)
 80005c4:	f007 f92d 	bl	8007822 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start( &htim2);
 80005c8:	4817      	ldr	r0, [pc, #92]	; (8000628 <main+0xa8>)
 80005ca:	f007 f92a 	bl	8007822 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT( &htim10);
 80005ce:	4817      	ldr	r0, [pc, #92]	; (800062c <main+0xac>)
 80005d0:	f007 f94b 	bl	800786a <HAL_TIM_Base_Start_IT>

  char print_info[100] = " \n Welcome to Project -- Galwan -- \r\n ";
 80005d4:	4b16      	ldr	r3, [pc, #88]	; (8000630 <main+0xb0>)
 80005d6:	1d3c      	adds	r4, r7, #4
 80005d8:	461d      	mov	r5, r3
 80005da:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005dc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005de:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80005e6:	6020      	str	r0, [r4, #0]
 80005e8:	3404      	adds	r4, #4
 80005ea:	8021      	strh	r1, [r4, #0]
 80005ec:	3402      	adds	r4, #2
 80005ee:	0c0b      	lsrs	r3, r1, #16
 80005f0:	7023      	strb	r3, [r4, #0]
 80005f2:	f107 032b 	add.w	r3, r7, #43	; 0x2b
 80005f6:	223d      	movs	r2, #61	; 0x3d
 80005f8:	2100      	movs	r1, #0
 80005fa:	4618      	mov	r0, r3
 80005fc:	f00b fa5a 	bl	800bab4 <memset>
  Print_Debug_Info_UART(print_info);
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	4618      	mov	r0, r3
 8000604:	f009 f980 	bl	8009908 <Print_Debug_Info_UART>

	OLED_Initial_Configuartion();		// 2 Sec wait inside
 8000608:	f00a fc9c 	bl	800af44 <_Z26OLED_Initial_Configuartionv>
  All_Devices_Initial_Configuration();
 800060c:	f009 f990 	bl	8009930 <All_Devices_Initial_Configuration>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);	// Blue LED
 8000610:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0xb4>)
 8000616:	f002 fc98 	bl	8002f4a <HAL_GPIO_TogglePin>



//	  HAL_Delay(500);

	  All_Device_Control_And_Schedule();
 800061a:	f009 f98f 	bl	800993c <All_Device_Control_And_Schedule>


	  OLED_Schedule_And_Event_Control();
 800061e:	f00a fdd7 	bl	800b1d0 <_Z31OLED_Schedule_And_Event_Controlv>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);	// Blue LED
 8000622:	e7f5      	b.n	8000610 <main+0x90>
 8000624:	200002b0 	.word	0x200002b0
 8000628:	200002f0 	.word	0x200002f0
 800062c:	20000370 	.word	0x20000370
 8000630:	0800c328 	.word	0x0800c328
 8000634:	40020c00 	.word	0x40020c00

08000638 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000638:	b580      	push	{r7, lr}
 800063a:	b098      	sub	sp, #96	; 0x60
 800063c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800063e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000642:	2230      	movs	r2, #48	; 0x30
 8000644:	2100      	movs	r1, #0
 8000646:	4618      	mov	r0, r3
 8000648:	f00b fa34 	bl	800bab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800064c:	f107 031c 	add.w	r3, r7, #28
 8000650:	2200      	movs	r2, #0
 8000652:	601a      	str	r2, [r3, #0]
 8000654:	605a      	str	r2, [r3, #4]
 8000656:	609a      	str	r2, [r3, #8]
 8000658:	60da      	str	r2, [r3, #12]
 800065a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2200      	movs	r2, #0
 8000662:	601a      	str	r2, [r3, #0]
 8000664:	605a      	str	r2, [r3, #4]
 8000666:	609a      	str	r2, [r3, #8]
 8000668:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	60bb      	str	r3, [r7, #8]
 800066e:	4b3b      	ldr	r3, [pc, #236]	; (800075c <_Z18SystemClock_Configv+0x124>)
 8000670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000672:	4a3a      	ldr	r2, [pc, #232]	; (800075c <_Z18SystemClock_Configv+0x124>)
 8000674:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000678:	6413      	str	r3, [r2, #64]	; 0x40
 800067a:	4b38      	ldr	r3, [pc, #224]	; (800075c <_Z18SystemClock_Configv+0x124>)
 800067c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800067e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000682:	60bb      	str	r3, [r7, #8]
 8000684:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	4b35      	ldr	r3, [pc, #212]	; (8000760 <_Z18SystemClock_Configv+0x128>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	4a34      	ldr	r2, [pc, #208]	; (8000760 <_Z18SystemClock_Configv+0x128>)
 8000690:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000694:	6013      	str	r3, [r2, #0]
 8000696:	4b32      	ldr	r3, [pc, #200]	; (8000760 <_Z18SystemClock_Configv+0x128>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800069e:	607b      	str	r3, [r7, #4]
 80006a0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 80006a2:	2309      	movs	r3, #9
 80006a4:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006a6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006aa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b0:	2302      	movs	r3, #2
 80006b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006b4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006ba:	2304      	movs	r3, #4
 80006bc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 80006be:	2354      	movs	r3, #84	; 0x54
 80006c0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006c2:	2302      	movs	r3, #2
 80006c4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006c6:	2307      	movs	r3, #7
 80006c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006ca:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006ce:	4618      	mov	r0, r3
 80006d0:	f005 f846 	bl	8005760 <HAL_RCC_OscConfig>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	bf14      	ite	ne
 80006da:	2301      	movne	r3, #1
 80006dc:	2300      	moveq	r3, #0
 80006de:	b2db      	uxtb	r3, r3
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	d001      	beq.n	80006e8 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 80006e4:	f000 fe0e 	bl	8001304 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006e8:	230f      	movs	r3, #15
 80006ea:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ec:	2302      	movs	r3, #2
 80006ee:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f0:	2300      	movs	r3, #0
 80006f2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006f8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f005 fa9a 	bl	8005c40 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	bf14      	ite	ne
 8000712:	2301      	movne	r3, #1
 8000714:	2300      	moveq	r3, #0
 8000716:	b2db      	uxtb	r3, r3
 8000718:	2b00      	cmp	r3, #0
 800071a:	d001      	beq.n	8000720 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 800071c:	f000 fdf2 	bl	8001304 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S|RCC_PERIPHCLK_RTC;
 8000720:	2303      	movs	r3, #3
 8000722:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000724:	2332      	movs	r3, #50	; 0x32
 8000726:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000728:	2302      	movs	r3, #2
 800072a:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800072c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000730:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 030c 	add.w	r3, r7, #12
 8000736:	4618      	mov	r0, r3
 8000738:	f005 fc9c 	bl	8006074 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	bf14      	ite	ne
 8000742:	2301      	movne	r3, #1
 8000744:	2300      	moveq	r3, #0
 8000746:	b2db      	uxtb	r3, r3
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <_Z18SystemClock_Configv+0x118>
  {
    Error_Handler();
 800074c:	f000 fdda 	bl	8001304 <Error_Handler>
  }
  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 8000750:	f005 fb5c 	bl	8005e0c <HAL_RCC_EnableCSS>
}
 8000754:	bf00      	nop
 8000756:	3760      	adds	r7, #96	; 0x60
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	40023800 	.word	0x40023800
 8000760:	40007000 	.word	0x40007000

08000764 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b084      	sub	sp, #16
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800076a:	463b      	mov	r3, r7
 800076c:	2200      	movs	r2, #0
 800076e:	601a      	str	r2, [r3, #0]
 8000770:	605a      	str	r2, [r3, #4]
 8000772:	609a      	str	r2, [r3, #8]
 8000774:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000776:	4b26      	ldr	r3, [pc, #152]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 8000778:	4a26      	ldr	r2, [pc, #152]	; (8000814 <_ZL12MX_ADC1_Initv+0xb0>)
 800077a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800077c:	4b24      	ldr	r3, [pc, #144]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 800077e:	2200      	movs	r2, #0
 8000780:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000782:	4b23      	ldr	r3, [pc, #140]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 8000784:	2200      	movs	r2, #0
 8000786:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000788:	4b21      	ldr	r3, [pc, #132]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 800078a:	2200      	movs	r2, #0
 800078c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800078e:	4b20      	ldr	r3, [pc, #128]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 8000790:	2201      	movs	r2, #1
 8000792:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000794:	4b1e      	ldr	r3, [pc, #120]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 8000796:	2200      	movs	r2, #0
 8000798:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 800079e:	2200      	movs	r2, #0
 80007a0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80007a2:	4b1b      	ldr	r3, [pc, #108]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007a4:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <_ZL12MX_ADC1_Initv+0xb4>)
 80007a6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80007ae:	4b18      	ldr	r3, [pc, #96]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80007b4:	4b16      	ldr	r3, [pc, #88]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80007bc:	4b14      	ldr	r3, [pc, #80]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007be:	2201      	movs	r2, #1
 80007c0:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80007c2:	4813      	ldr	r0, [pc, #76]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007c4:	f001 fb6a 	bl	8001e9c <HAL_ADC_Init>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	bf14      	ite	ne
 80007ce:	2301      	movne	r3, #1
 80007d0:	2300      	moveq	r3, #0
 80007d2:	b2db      	uxtb	r3, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	d001      	beq.n	80007dc <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 80007d8:	f000 fd94 	bl	8001304 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80007dc:	230a      	movs	r3, #10
 80007de:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80007e0:	2301      	movs	r3, #1
 80007e2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80007e8:	463b      	mov	r3, r7
 80007ea:	4619      	mov	r1, r3
 80007ec:	4808      	ldr	r0, [pc, #32]	; (8000810 <_ZL12MX_ADC1_Initv+0xac>)
 80007ee:	f001 fb99 	bl	8001f24 <HAL_ADC_ConfigChannel>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	bf14      	ite	ne
 80007f8:	2301      	movne	r3, #1
 80007fa:	2300      	moveq	r3, #0
 80007fc:	b2db      	uxtb	r3, r3
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000802:	f000 fd7f 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	3710      	adds	r7, #16
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	200000f4 	.word	0x200000f4
 8000814:	40012000 	.word	0x40012000
 8000818:	0f000001 	.word	0x0f000001

0800081c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000820:	4b15      	ldr	r3, [pc, #84]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 8000822:	4a16      	ldr	r2, [pc, #88]	; (800087c <_ZL12MX_I2C1_Initv+0x60>)
 8000824:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000826:	4b14      	ldr	r3, [pc, #80]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 8000828:	4a15      	ldr	r2, [pc, #84]	; (8000880 <_ZL12MX_I2C1_Initv+0x64>)
 800082a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800082c:	4b12      	ldr	r3, [pc, #72]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 800082e:	2200      	movs	r2, #0
 8000830:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000832:	4b11      	ldr	r3, [pc, #68]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 8000834:	2200      	movs	r2, #0
 8000836:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000838:	4b0f      	ldr	r3, [pc, #60]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 800083a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800083e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000840:	4b0d      	ldr	r3, [pc, #52]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 8000842:	2200      	movs	r2, #0
 8000844:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000846:	4b0c      	ldr	r3, [pc, #48]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 8000848:	2200      	movs	r2, #0
 800084a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800084c:	4b0a      	ldr	r3, [pc, #40]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 800084e:	2200      	movs	r2, #0
 8000850:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000852:	4b09      	ldr	r3, [pc, #36]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 8000854:	2200      	movs	r2, #0
 8000856:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000858:	4807      	ldr	r0, [pc, #28]	; (8000878 <_ZL12MX_I2C1_Initv+0x5c>)
 800085a:	f002 fba9 	bl	8002fb0 <HAL_I2C_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	bf14      	ite	ne
 8000864:	2301      	movne	r3, #1
 8000866:	2300      	moveq	r3, #0
 8000868:	b2db      	uxtb	r3, r3
 800086a:	2b00      	cmp	r3, #0
 800086c:	d001      	beq.n	8000872 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 800086e:	f000 fd49 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	2000019c 	.word	0x2000019c
 800087c:	40005400 	.word	0x40005400
 8000880:	00061a80 	.word	0x00061a80

08000884 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000888:	4b16      	ldr	r3, [pc, #88]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 800088a:	4a17      	ldr	r2, [pc, #92]	; (80008e8 <_ZL12MX_I2S3_Initv+0x64>)
 800088c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800088e:	4b15      	ldr	r3, [pc, #84]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 8000890:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000894:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000896:	4b13      	ldr	r3, [pc, #76]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 8000898:	2200      	movs	r2, #0
 800089a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 800089e:	2200      	movs	r2, #0
 80008a0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 80008a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_22K;
 80008aa:	4b0e      	ldr	r3, [pc, #56]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 80008ac:	f245 6222 	movw	r2, #22050	; 0x5622
 80008b0:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80008b2:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80008b8:	4b0a      	ldr	r3, [pc, #40]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80008be:	4b09      	ldr	r3, [pc, #36]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80008c4:	4807      	ldr	r0, [pc, #28]	; (80008e4 <_ZL12MX_I2S3_Initv+0x60>)
 80008c6:	f004 faab 	bl	8004e20 <HAL_I2S_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	bf14      	ite	ne
 80008d0:	2301      	movne	r3, #1
 80008d2:	2300      	moveq	r3, #0
 80008d4:	b2db      	uxtb	r3, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d001      	beq.n	80008de <_ZL12MX_I2S3_Initv+0x5a>
  {
    Error_Handler();
 80008da:	f000 fd13 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80008de:	bf00      	nop
 80008e0:	bd80      	pop	{r7, pc}
 80008e2:	bf00      	nop
 80008e4:	200001f0 	.word	0x200001f0
 80008e8:	40003c00 	.word	0x40003c00

080008ec <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b090      	sub	sp, #64	; 0x40
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80008f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008f6:	2200      	movs	r2, #0
 80008f8:	601a      	str	r2, [r3, #0]
 80008fa:	605a      	str	r2, [r3, #4]
 80008fc:	609a      	str	r2, [r3, #8]
 80008fe:	60da      	str	r2, [r3, #12]
 8000900:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8000902:	2300      	movs	r3, #0
 8000904:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 8000906:	463b      	mov	r3, r7
 8000908:	2228      	movs	r2, #40	; 0x28
 800090a:	2100      	movs	r1, #0
 800090c:	4618      	mov	r0, r3
 800090e:	f00b f8d1 	bl	800bab4 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8000912:	4b44      	ldr	r3, [pc, #272]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 8000914:	4a44      	ldr	r2, [pc, #272]	; (8000a28 <_ZL11MX_RTC_Initv+0x13c>)
 8000916:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000918:	4b42      	ldr	r3, [pc, #264]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 800091a:	2200      	movs	r2, #0
 800091c:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800091e:	4b41      	ldr	r3, [pc, #260]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 8000920:	227f      	movs	r2, #127	; 0x7f
 8000922:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000924:	4b3f      	ldr	r3, [pc, #252]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 8000926:	22ff      	movs	r2, #255	; 0xff
 8000928:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800092a:	4b3e      	ldr	r3, [pc, #248]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 800092c:	2200      	movs	r2, #0
 800092e:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000930:	4b3c      	ldr	r3, [pc, #240]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 8000932:	2200      	movs	r2, #0
 8000934:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000936:	4b3b      	ldr	r3, [pc, #236]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 8000938:	2200      	movs	r2, #0
 800093a:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800093c:	4839      	ldr	r0, [pc, #228]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 800093e:	f005 fcd7 	bl	80062f0 <HAL_RTC_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	bf14      	ite	ne
 8000948:	2301      	movne	r3, #1
 800094a:	2300      	moveq	r3, #0
 800094c:	b2db      	uxtb	r3, r3
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 8000952:	f000 fcd7 	bl	8001304 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8000956:	2300      	movs	r3, #0
 8000958:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 800095c:	2300      	movs	r3, #0
 800095e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 8000962:	2300      	movs	r3, #0
 8000964:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8000968:	2300      	movs	r3, #0
 800096a:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800096c:	2300      	movs	r3, #0
 800096e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8000970:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000974:	2201      	movs	r2, #1
 8000976:	4619      	mov	r1, r3
 8000978:	482a      	ldr	r0, [pc, #168]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 800097a:	f005 fd4a 	bl	8006412 <HAL_RTC_SetTime>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	bf14      	ite	ne
 8000984:	2301      	movne	r3, #1
 8000986:	2300      	moveq	r3, #0
 8000988:	b2db      	uxtb	r3, r3
 800098a:	2b00      	cmp	r3, #0
 800098c:	d001      	beq.n	8000992 <_ZL11MX_RTC_Initv+0xa6>
  {
    Error_Handler();
 800098e:	f000 fcb9 	bl	8001304 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000992:	2301      	movs	r3, #1
 8000994:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8000998:	2301      	movs	r3, #1
 800099a:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 800099e:	2301      	movs	r3, #1
 80009a0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80009aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009ae:	2201      	movs	r2, #1
 80009b0:	4619      	mov	r1, r3
 80009b2:	481c      	ldr	r0, [pc, #112]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 80009b4:	f005 fdea 	bl	800658c <HAL_RTC_SetDate>
 80009b8:	4603      	mov	r3, r0
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	bf14      	ite	ne
 80009be:	2301      	movne	r3, #1
 80009c0:	2300      	moveq	r3, #0
 80009c2:	b2db      	uxtb	r3, r3
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <_ZL11MX_RTC_Initv+0xe0>
  {
    Error_Handler();
 80009c8:	f000 fc9c 	bl	8001304 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80009cc:	2300      	movs	r3, #0
 80009ce:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80009d0:	2300      	movs	r3, #0
 80009d2:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80009d4:	2300      	movs	r3, #0
 80009d6:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80009d8:	2300      	movs	r3, #0
 80009da:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80009e0:	2300      	movs	r3, #0
 80009e2:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80009e4:	2300      	movs	r3, #0
 80009e6:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80009f6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80009fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80009fc:	463b      	mov	r3, r7
 80009fe:	2201      	movs	r2, #1
 8000a00:	4619      	mov	r1, r3
 8000a02:	4808      	ldr	r0, [pc, #32]	; (8000a24 <_ZL11MX_RTC_Initv+0x138>)
 8000a04:	f005 fe6a 	bl	80066dc <HAL_RTC_SetAlarm_IT>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	bf14      	ite	ne
 8000a0e:	2301      	movne	r3, #1
 8000a10:	2300      	moveq	r3, #0
 8000a12:	b2db      	uxtb	r3, r3
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <_ZL11MX_RTC_Initv+0x130>
  {
    Error_Handler();
 8000a18:	f000 fc74 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000a1c:	bf00      	nop
 8000a1e:	3740      	adds	r7, #64	; 0x40
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	20000238 	.word	0x20000238
 8000a28:	40002800 	.word	0x40002800

08000a2c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000a30:	4b1a      	ldr	r3, [pc, #104]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a32:	4a1b      	ldr	r2, [pc, #108]	; (8000aa0 <_ZL12MX_SPI1_Initv+0x74>)
 8000a34:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000a36:	4b19      	ldr	r3, [pc, #100]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a3c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000a3e:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a50:	4b12      	ldr	r3, [pc, #72]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000a56:	4b11      	ldr	r3, [pc, #68]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a5c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a5e:	4b0f      	ldr	r3, [pc, #60]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a60:	2228      	movs	r2, #40	; 0x28
 8000a62:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a70:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a78:	220a      	movs	r2, #10
 8000a7a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000a7c:	4807      	ldr	r0, [pc, #28]	; (8000a9c <_ZL12MX_SPI1_Initv+0x70>)
 8000a7e:	f006 f831 	bl	8006ae4 <HAL_SPI_Init>
 8000a82:	4603      	mov	r3, r0
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	bf14      	ite	ne
 8000a88:	2301      	movne	r3, #1
 8000a8a:	2300      	moveq	r3, #0
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d001      	beq.n	8000a96 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 8000a92:	f000 fc37 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	20000258 	.word	0x20000258
 8000aa0:	40013000 	.word	0x40013000

08000aa4 <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b09a      	sub	sp, #104	; 0x68
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000aaa:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000aba:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000ac4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]
 8000ae2:	615a      	str	r2, [r3, #20]
 8000ae4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ae6:	463b      	mov	r3, r7
 8000ae8:	2220      	movs	r2, #32
 8000aea:	2100      	movs	r1, #0
 8000aec:	4618      	mov	r0, r3
 8000aee:	f00a ffe1 	bl	800bab4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000af2:	4b73      	ldr	r3, [pc, #460]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000af4:	4a73      	ldr	r2, [pc, #460]	; (8000cc4 <_ZL12MX_TIM1_Initv+0x220>)
 8000af6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000af8:	4b71      	ldr	r3, [pc, #452]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000afe:	4b70      	ldr	r3, [pc, #448]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000b04:	4b6e      	ldr	r3, [pc, #440]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b0a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b0c:	4b6c      	ldr	r3, [pc, #432]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000b12:	4b6b      	ldr	r3, [pc, #428]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b18:	4b69      	ldr	r3, [pc, #420]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000b1e:	4868      	ldr	r0, [pc, #416]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b20:	f006 fe54 	bl	80077cc <HAL_TIM_Base_Init>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	bf14      	ite	ne
 8000b2a:	2301      	movne	r3, #1
 8000b2c:	2300      	moveq	r3, #0
 8000b2e:	b2db      	uxtb	r3, r3
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <_ZL12MX_TIM1_Initv+0x94>
  {
    Error_Handler();
 8000b34:	f000 fbe6 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000b38:	4861      	ldr	r0, [pc, #388]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b3a:	f006 ff24 	bl	8007986 <HAL_TIM_IC_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	bf14      	ite	ne
 8000b44:	2301      	movne	r3, #1
 8000b46:	2300      	moveq	r3, #0
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <_ZL12MX_TIM1_Initv+0xae>
  {
    Error_Handler();
 8000b4e:	f000 fbd9 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8000b52:	485b      	ldr	r0, [pc, #364]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b54:	f006 fead 	bl	80078b2 <HAL_TIM_OC_Init>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	bf14      	ite	ne
 8000b5e:	2301      	movne	r3, #1
 8000b60:	2300      	moveq	r3, #0
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	2b00      	cmp	r3, #0
 8000b66:	d001      	beq.n	8000b6c <_ZL12MX_TIM1_Initv+0xc8>
  {
    Error_Handler();
 8000b68:	f000 fbcc 	bl	8001304 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000b6c:	2307      	movs	r3, #7
 8000b6e:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000b70:	2300      	movs	r3, #0
 8000b72:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000b74:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b78:	4619      	mov	r1, r3
 8000b7a:	4851      	ldr	r0, [pc, #324]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000b7c:	f007 fa02 	bl	8007f84 <HAL_TIM_SlaveConfigSynchro>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	bf14      	ite	ne
 8000b86:	2301      	movne	r3, #1
 8000b88:	2300      	moveq	r3, #0
 8000b8a:	b2db      	uxtb	r3, r3
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d001      	beq.n	8000b94 <_ZL12MX_TIM1_Initv+0xf0>
  {
    Error_Handler();
 8000b90:	f000 fbb8 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b94:	2300      	movs	r3, #0
 8000b96:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000b9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	4847      	ldr	r0, [pc, #284]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000ba4:	f007 fee2 	bl	800896c <HAL_TIMEx_MasterConfigSynchronization>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	bf14      	ite	ne
 8000bae:	2301      	movne	r3, #1
 8000bb0:	2300      	moveq	r3, #0
 8000bb2:	b2db      	uxtb	r3, r3
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <_ZL12MX_TIM1_Initv+0x118>
  {
    Error_Handler();
 8000bb8:	f000 fba4 	bl	8001304 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICFilter = 0;
 8000bc8:	2300      	movs	r3, #0
 8000bca:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000bcc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	483a      	ldr	r0, [pc, #232]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000bd6:	f007 f873 	bl	8007cc0 <HAL_TIM_IC_ConfigChannel>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	bf14      	ite	ne
 8000be0:	2301      	movne	r3, #1
 8000be2:	2300      	moveq	r3, #0
 8000be4:	b2db      	uxtb	r3, r3
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d001      	beq.n	8000bee <_ZL12MX_TIM1_Initv+0x14a>
  {
    Error_Handler();
 8000bea:	f000 fb8b 	bl	8001304 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000bf2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bf6:	2204      	movs	r2, #4
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	4831      	ldr	r0, [pc, #196]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000bfc:	f007 f860 	bl	8007cc0 <HAL_TIM_IC_ConfigChannel>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	bf14      	ite	ne
 8000c06:	2301      	movne	r3, #1
 8000c08:	2300      	moveq	r3, #0
 8000c0a:	b2db      	uxtb	r3, r3
 8000c0c:	2b00      	cmp	r3, #0
 8000c0e:	d001      	beq.n	8000c14 <_ZL12MX_TIM1_Initv+0x170>
  {
    Error_Handler();
 8000c10:	f000 fb78 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000c14:	2300      	movs	r3, #0
 8000c16:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000c20:	2300      	movs	r3, #0
 8000c22:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000c24:	2300      	movs	r3, #0
 8000c26:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000c30:	f107 0320 	add.w	r3, r7, #32
 8000c34:	2208      	movs	r2, #8
 8000c36:	4619      	mov	r1, r3
 8000c38:	4821      	ldr	r0, [pc, #132]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000c3a:	f006 ffe1 	bl	8007c00 <HAL_TIM_OC_ConfigChannel>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	bf14      	ite	ne
 8000c44:	2301      	movne	r3, #1
 8000c46:	2300      	moveq	r3, #0
 8000c48:	b2db      	uxtb	r3, r3
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <_ZL12MX_TIM1_Initv+0x1ae>
  {
    Error_Handler();
 8000c4e:	f000 fb59 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000c52:	f107 0320 	add.w	r3, r7, #32
 8000c56:	220c      	movs	r2, #12
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4819      	ldr	r0, [pc, #100]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000c5c:	f006 ffd0 	bl	8007c00 <HAL_TIM_OC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	bf14      	ite	ne
 8000c66:	2301      	movne	r3, #1
 8000c68:	2300      	moveq	r3, #0
 8000c6a:	b2db      	uxtb	r3, r3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d001      	beq.n	8000c74 <_ZL12MX_TIM1_Initv+0x1d0>
  {
    Error_Handler();
 8000c70:	f000 fb48 	bl	8001304 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000c74:	2300      	movs	r3, #0
 8000c76:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000c88:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c8c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4619      	mov	r1, r3
 8000c96:	480a      	ldr	r0, [pc, #40]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000c98:	f007 fee4 	bl	8008a64 <HAL_TIMEx_ConfigBreakDeadTime>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	bf14      	ite	ne
 8000ca2:	2301      	movne	r3, #1
 8000ca4:	2300      	moveq	r3, #0
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <_ZL12MX_TIM1_Initv+0x20c>
  {
    Error_Handler();
 8000cac:	f000 fb2a 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <_ZL12MX_TIM1_Initv+0x21c>)
 8000cb2:	f000 fd99 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8000cb6:	bf00      	nop
 8000cb8:	3768      	adds	r7, #104	; 0x68
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200002b0 	.word	0x200002b0
 8000cc4:	40010000 	.word	0x40010000

08000cc8 <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b088      	sub	sp, #32
 8000ccc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000cce:	f107 030c 	add.w	r3, r7, #12
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	601a      	str	r2, [r3, #0]
 8000cd6:	605a      	str	r2, [r3, #4]
 8000cd8:	609a      	str	r2, [r3, #8]
 8000cda:	60da      	str	r2, [r3, #12]
 8000cdc:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cde:	1d3b      	adds	r3, r7, #4
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000ce6:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000ce8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000cec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000cee:	4b24      	ldr	r3, [pc, #144]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cf4:	4b22      	ldr	r3, [pc, #136]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000cfa:	4b21      	ldr	r3, [pc, #132]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000d00:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d02:	4b1f      	ldr	r3, [pc, #124]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d08:	4b1d      	ldr	r3, [pc, #116]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d0e:	481c      	ldr	r0, [pc, #112]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000d10:	f006 fd5c 	bl	80077cc <HAL_TIM_Base_Init>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	bf14      	ite	ne
 8000d1a:	2301      	movne	r3, #1
 8000d1c:	2300      	moveq	r3, #0
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <_ZL12MX_TIM2_Initv+0x60>
  {
    Error_Handler();
 8000d24:	f000 faee 	bl	8001304 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000d28:	2307      	movs	r3, #7
 8000d2a:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8000d2c:	2300      	movs	r3, #0
 8000d2e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8000d30:	f107 030c 	add.w	r3, r7, #12
 8000d34:	4619      	mov	r1, r3
 8000d36:	4812      	ldr	r0, [pc, #72]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000d38:	f007 f924 	bl	8007f84 <HAL_TIM_SlaveConfigSynchro>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	bf14      	ite	ne
 8000d42:	2301      	movne	r3, #1
 8000d44:	2300      	moveq	r3, #0
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <_ZL12MX_TIM2_Initv+0x88>
  {
    Error_Handler();
 8000d4c:	f000 fada 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d50:	2300      	movs	r3, #0
 8000d52:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d58:	1d3b      	adds	r3, r7, #4
 8000d5a:	4619      	mov	r1, r3
 8000d5c:	4808      	ldr	r0, [pc, #32]	; (8000d80 <_ZL12MX_TIM2_Initv+0xb8>)
 8000d5e:	f007 fe05 	bl	800896c <HAL_TIMEx_MasterConfigSynchronization>
 8000d62:	4603      	mov	r3, r0
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	bf14      	ite	ne
 8000d68:	2301      	movne	r3, #1
 8000d6a:	2300      	moveq	r3, #0
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d001      	beq.n	8000d76 <_ZL12MX_TIM2_Initv+0xae>
  {
    Error_Handler();
 8000d72:	f000 fac7 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000d76:	bf00      	nop
 8000d78:	3720      	adds	r7, #32
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
 8000d7e:	bf00      	nop
 8000d80:	200002f0 	.word	0x200002f0

08000d84 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b08e      	sub	sp, #56	; 0x38
 8000d88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000d8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
 8000d92:	605a      	str	r2, [r3, #4]
 8000d94:	609a      	str	r2, [r3, #8]
 8000d96:	60da      	str	r2, [r3, #12]
 8000d98:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d9a:	f107 031c 	add.w	r3, r7, #28
 8000d9e:	2200      	movs	r2, #0
 8000da0:	601a      	str	r2, [r3, #0]
 8000da2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000da4:	463b      	mov	r3, r7
 8000da6:	2200      	movs	r2, #0
 8000da8:	601a      	str	r2, [r3, #0]
 8000daa:	605a      	str	r2, [r3, #4]
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	60da      	str	r2, [r3, #12]
 8000db0:	611a      	str	r2, [r3, #16]
 8000db2:	615a      	str	r2, [r3, #20]
 8000db4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000db6:	4b59      	ldr	r3, [pc, #356]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000db8:	4a59      	ldr	r2, [pc, #356]	; (8000f20 <_ZL12MX_TIM3_Initv+0x19c>)
 8000dba:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000dbc:	4b57      	ldr	r3, [pc, #348]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc2:	4b56      	ldr	r3, [pc, #344]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000dc8:	4b54      	ldr	r3, [pc, #336]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000dca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dce:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd0:	4b52      	ldr	r3, [pc, #328]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dd6:	4b51      	ldr	r3, [pc, #324]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ddc:	484f      	ldr	r0, [pc, #316]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000dde:	f006 fcf5 	bl	80077cc <HAL_TIM_Base_Init>
 8000de2:	4603      	mov	r3, r0
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	bf14      	ite	ne
 8000de8:	2301      	movne	r3, #1
 8000dea:	2300      	moveq	r3, #0
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <_ZL12MX_TIM3_Initv+0x72>
  {
    Error_Handler();
 8000df2:	f000 fa87 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000df6:	4849      	ldr	r0, [pc, #292]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000df8:	f006 fd90 	bl	800791c <HAL_TIM_PWM_Init>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf14      	ite	ne
 8000e02:	2301      	movne	r3, #1
 8000e04:	2300      	moveq	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <_ZL12MX_TIM3_Initv+0x8c>
  {
    Error_Handler();
 8000e0c:	f000 fa7a 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8000e10:	4842      	ldr	r0, [pc, #264]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000e12:	f006 fd4e 	bl	80078b2 <HAL_TIM_OC_Init>
 8000e16:	4603      	mov	r3, r0
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	bf14      	ite	ne
 8000e1c:	2301      	movne	r3, #1
 8000e1e:	2300      	moveq	r3, #0
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d001      	beq.n	8000e2a <_ZL12MX_TIM3_Initv+0xa6>
  {
    Error_Handler();
 8000e26:	f000 fa6d 	bl	8001304 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000e2a:	2307      	movs	r3, #7
 8000e2c:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000e2e:	2310      	movs	r3, #16
 8000e30:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e36:	4619      	mov	r1, r3
 8000e38:	4838      	ldr	r0, [pc, #224]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000e3a:	f007 f8a3 	bl	8007f84 <HAL_TIM_SlaveConfigSynchro>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	bf14      	ite	ne
 8000e44:	2301      	movne	r3, #1
 8000e46:	2300      	moveq	r3, #0
 8000e48:	b2db      	uxtb	r3, r3
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <_ZL12MX_TIM3_Initv+0xce>
  {
    Error_Handler();
 8000e4e:	f000 fa59 	bl	8001304 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e52:	2300      	movs	r3, #0
 8000e54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e5a:	f107 031c 	add.w	r3, r7, #28
 8000e5e:	4619      	mov	r1, r3
 8000e60:	482e      	ldr	r0, [pc, #184]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000e62:	f007 fd83 	bl	800896c <HAL_TIMEx_MasterConfigSynchronization>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <_ZL12MX_TIM3_Initv+0xf6>
  {
    Error_Handler();
 8000e76:	f000 fa45 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7a:	2360      	movs	r3, #96	; 0x60
 8000e7c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	4619      	mov	r1, r3
 8000e90:	4822      	ldr	r0, [pc, #136]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000e92:	f006 ffb1 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	bf14      	ite	ne
 8000e9c:	2301      	movne	r3, #1
 8000e9e:	2300      	moveq	r3, #0
 8000ea0:	b2db      	uxtb	r3, r3
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <_ZL12MX_TIM3_Initv+0x126>
  {
    Error_Handler();
 8000ea6:	f000 fa2d 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eaa:	463b      	mov	r3, r7
 8000eac:	2204      	movs	r2, #4
 8000eae:	4619      	mov	r1, r3
 8000eb0:	481a      	ldr	r0, [pc, #104]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000eb2:	f006 ffa1 	bl	8007df8 <HAL_TIM_PWM_ConfigChannel>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	bf14      	ite	ne
 8000ebc:	2301      	movne	r3, #1
 8000ebe:	2300      	moveq	r3, #0
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <_ZL12MX_TIM3_Initv+0x146>
  {
    Error_Handler();
 8000ec6:	f000 fa1d 	bl	8001304 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ece:	463b      	mov	r3, r7
 8000ed0:	2208      	movs	r2, #8
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	4811      	ldr	r0, [pc, #68]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000ed6:	f006 fe93 	bl	8007c00 <HAL_TIM_OC_ConfigChannel>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	bf14      	ite	ne
 8000ee0:	2301      	movne	r3, #1
 8000ee2:	2300      	moveq	r3, #0
 8000ee4:	b2db      	uxtb	r3, r3
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <_ZL12MX_TIM3_Initv+0x16a>
  {
    Error_Handler();
 8000eea:	f000 fa0b 	bl	8001304 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eee:	463b      	mov	r3, r7
 8000ef0:	220c      	movs	r2, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4809      	ldr	r0, [pc, #36]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000ef6:	f006 fe83 	bl	8007c00 <HAL_TIM_OC_ConfigChannel>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	bf14      	ite	ne
 8000f00:	2301      	movne	r3, #1
 8000f02:	2300      	moveq	r3, #0
 8000f04:	b2db      	uxtb	r3, r3
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <_ZL12MX_TIM3_Initv+0x18a>
  {
    Error_Handler();
 8000f0a:	f000 f9fb 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f0e:	4803      	ldr	r0, [pc, #12]	; (8000f1c <_ZL12MX_TIM3_Initv+0x198>)
 8000f10:	f000 fc6a 	bl	80017e8 <HAL_TIM_MspPostInit>

}
 8000f14:	bf00      	nop
 8000f16:	3738      	adds	r7, #56	; 0x38
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	20000330 	.word	0x20000330
 8000f20:	40000400 	.word	0x40000400

08000f24 <_ZL13MX_TIM10_Initv>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000f28:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f2a:	4a11      	ldr	r2, [pc, #68]	; (8000f70 <_ZL13MX_TIM10_Initv+0x4c>)
 8000f2c:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 84;
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f30:	2254      	movs	r2, #84	; 0x54
 8000f32:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f34:	4b0d      	ldr	r3, [pc, #52]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 1000;
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f3c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f40:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000f48:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f4a:	2280      	movs	r2, #128	; 0x80
 8000f4c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000f4e:	4807      	ldr	r0, [pc, #28]	; (8000f6c <_ZL13MX_TIM10_Initv+0x48>)
 8000f50:	f006 fc3c 	bl	80077cc <HAL_TIM_Base_Init>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	bf14      	ite	ne
 8000f5a:	2301      	movne	r3, #1
 8000f5c:	2300      	moveq	r3, #0
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <_ZL13MX_TIM10_Initv+0x44>
  {
    Error_Handler();
 8000f64:	f000 f9ce 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	20000370 	.word	0x20000370
 8000f70:	40014400 	.word	0x40014400

08000f74 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f7a:	4a14      	ldr	r2, [pc, #80]	; (8000fcc <_ZL19MX_USART1_UART_Initv+0x58>)
 8000f7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000f7e:	4b12      	ldr	r3, [pc, #72]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f8c:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f98:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <_ZL19MX_USART1_UART_Initv+0x54>)
 8000fac:	f007 fdc0 	bl	8008b30 <HAL_UART_Init>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	bf14      	ite	ne
 8000fb6:	2301      	movne	r3, #1
 8000fb8:	2300      	moveq	r3, #0
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8000fc0:	f000 f9a0 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fc4:	bf00      	nop
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200003b0 	.word	0x200003b0
 8000fcc:	40011000 	.word	0x40011000

08000fd0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fd6:	4a14      	ldr	r2, [pc, #80]	; (8001028 <_ZL19MX_USART2_UART_Initv+0x58>)
 8000fd8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000fda:	4b12      	ldr	r3, [pc, #72]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fdc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000fe0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fe2:	4b10      	ldr	r3, [pc, #64]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fe8:	4b0e      	ldr	r3, [pc, #56]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fee:	4b0d      	ldr	r3, [pc, #52]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ff4:	4b0b      	ldr	r3, [pc, #44]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ff6:	220c      	movs	r2, #12
 8000ff8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ffa:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001006:	4807      	ldr	r0, [pc, #28]	; (8001024 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001008:	f007 fd92 	bl	8008b30 <HAL_UART_Init>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	bf14      	ite	ne
 8001012:	2301      	movne	r3, #1
 8001014:	2300      	moveq	r3, #0
 8001016:	b2db      	uxtb	r3, r3
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800101c:	f000 f972 	bl	8001304 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	200003f0 	.word	0x200003f0
 8001028:	40004400 	.word	0x40004400

0800102c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001032:	2300      	movs	r3, #0
 8001034:	607b      	str	r3, [r7, #4]
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <_ZL11MX_DMA_Initv+0x78>)
 8001038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <_ZL11MX_DMA_Initv+0x78>)
 800103c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001040:	6313      	str	r3, [r2, #48]	; 0x30
 8001042:	4b18      	ldr	r3, [pc, #96]	; (80010a4 <_ZL11MX_DMA_Initv+0x78>)
 8001044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001046:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800104a:	607b      	str	r3, [r7, #4]
 800104c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	603b      	str	r3, [r7, #0]
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <_ZL11MX_DMA_Initv+0x78>)
 8001054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001056:	4a13      	ldr	r2, [pc, #76]	; (80010a4 <_ZL11MX_DMA_Initv+0x78>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6313      	str	r3, [r2, #48]	; 0x30
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <_ZL11MX_DMA_Initv+0x78>)
 8001060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	603b      	str	r3, [r7, #0]
 8001068:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2100      	movs	r1, #0
 800106e:	2010      	movs	r0, #16
 8001070:	f001 fa51 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001074:	2010      	movs	r0, #16
 8001076:	f001 fa6a 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800107a:	2200      	movs	r2, #0
 800107c:	2100      	movs	r1, #0
 800107e:	2011      	movs	r0, #17
 8001080:	f001 fa49 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001084:	2011      	movs	r0, #17
 8001086:	f001 fa62 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800108a:	2200      	movs	r2, #0
 800108c:	2100      	movs	r1, #0
 800108e:	2038      	movs	r0, #56	; 0x38
 8001090:	f001 fa41 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001094:	2038      	movs	r0, #56	; 0x38
 8001096:	f001 fa5a 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 800109a:	bf00      	nop
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	40023800 	.word	0x40023800

080010a8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08c      	sub	sp, #48	; 0x30
 80010ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ae:	f107 031c 	add.w	r3, r7, #28
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	61bb      	str	r3, [r7, #24]
 80010c2:	4b80      	ldr	r3, [pc, #512]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c6:	4a7f      	ldr	r2, [pc, #508]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010c8:	f043 0310 	orr.w	r3, r3, #16
 80010cc:	6313      	str	r3, [r2, #48]	; 0x30
 80010ce:	4b7d      	ldr	r3, [pc, #500]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d2:	f003 0310 	and.w	r3, r3, #16
 80010d6:	61bb      	str	r3, [r7, #24]
 80010d8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	4b79      	ldr	r3, [pc, #484]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e2:	4a78      	ldr	r2, [pc, #480]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010e4:	f043 0304 	orr.w	r3, r3, #4
 80010e8:	6313      	str	r3, [r2, #48]	; 0x30
 80010ea:	4b76      	ldr	r3, [pc, #472]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	f003 0304 	and.w	r3, r3, #4
 80010f2:	617b      	str	r3, [r7, #20]
 80010f4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b72      	ldr	r3, [pc, #456]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 80010fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fe:	4a71      	ldr	r2, [pc, #452]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001100:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001104:	6313      	str	r3, [r2, #48]	; 0x30
 8001106:	4b6f      	ldr	r3, [pc, #444]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b6b      	ldr	r3, [pc, #428]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a6a      	ldr	r2, [pc, #424]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b68      	ldr	r3, [pc, #416]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	60bb      	str	r3, [r7, #8]
 8001132:	4b64      	ldr	r3, [pc, #400]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001136:	4a63      	ldr	r2, [pc, #396]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001138:	f043 0302 	orr.w	r3, r3, #2
 800113c:	6313      	str	r3, [r2, #48]	; 0x30
 800113e:	4b61      	ldr	r3, [pc, #388]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001142:	f003 0302 	and.w	r3, r3, #2
 8001146:	60bb      	str	r3, [r7, #8]
 8001148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	607b      	str	r3, [r7, #4]
 800114e:	4b5d      	ldr	r3, [pc, #372]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001152:	4a5c      	ldr	r2, [pc, #368]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 8001154:	f043 0308 	orr.w	r3, r3, #8
 8001158:	6313      	str	r3, [r2, #48]	; 0x30
 800115a:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <_ZL12MX_GPIO_Initv+0x21c>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	607b      	str	r3, [r7, #4]
 8001164:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001166:	2200      	movs	r2, #0
 8001168:	2108      	movs	r1, #8
 800116a:	4857      	ldr	r0, [pc, #348]	; (80012c8 <_ZL12MX_GPIO_Initv+0x220>)
 800116c:	f001 fed4 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 8001170:	2200      	movs	r2, #0
 8001172:	2130      	movs	r1, #48	; 0x30
 8001174:	4855      	ldr	r0, [pc, #340]	; (80012cc <_ZL12MX_GPIO_Initv+0x224>)
 8001176:	f001 fecf 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|CS4_Pin|GPIO_Output_01_Pin|GPIO_Output_02_Pin, GPIO_PIN_RESET);
 800117a:	2200      	movs	r2, #0
 800117c:	f24c 0103 	movw	r1, #49155	; 0xc003
 8001180:	4853      	ldr	r0, [pc, #332]	; (80012d0 <_ZL12MX_GPIO_Initv+0x228>)
 8001182:	f001 fec9 	bl	8002f18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_Output_03_Pin|GPIO_Output_04_Pin|CSN_Pin|CE_Pin
 8001186:	2200      	movs	r2, #0
 8001188:	f64f 7110 	movw	r1, #65296	; 0xff10
 800118c:	4851      	ldr	r0, [pc, #324]	; (80012d4 <_ZL12MX_GPIO_Initv+0x22c>)
 800118e:	f001 fec3 	bl	8002f18 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001192:	2308      	movs	r3, #8
 8001194:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001196:	2301      	movs	r3, #1
 8001198:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800119a:	2300      	movs	r3, #0
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80011a2:	f107 031c 	add.w	r3, r7, #28
 80011a6:	4619      	mov	r1, r3
 80011a8:	4847      	ldr	r0, [pc, #284]	; (80012c8 <_ZL12MX_GPIO_Initv+0x220>)
 80011aa:	f001 fd03 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80011ae:	2308      	movs	r3, #8
 80011b0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ba:	2300      	movs	r3, #0
 80011bc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80011be:	2305      	movs	r3, #5
 80011c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80011c2:	f107 031c 	add.w	r3, r7, #28
 80011c6:	4619      	mov	r1, r3
 80011c8:	4840      	ldr	r0, [pc, #256]	; (80012cc <_ZL12MX_GPIO_Initv+0x224>)
 80011ca:	f001 fcf3 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin;
 80011ce:	2330      	movs	r3, #48	; 0x30
 80011d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011d2:	2301      	movs	r3, #1
 80011d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d6:	2300      	movs	r3, #0
 80011d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011da:	2300      	movs	r3, #0
 80011dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011de:	f107 031c 	add.w	r3, r7, #28
 80011e2:	4619      	mov	r1, r3
 80011e4:	4839      	ldr	r0, [pc, #228]	; (80012cc <_ZL12MX_GPIO_Initv+0x224>)
 80011e6:	f001 fce5 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS4_Pin GPIO_Output_01_Pin GPIO_Output_02_Pin */
  GPIO_InitStruct.Pin = CS3_Pin|CS4_Pin|GPIO_Output_01_Pin|GPIO_Output_02_Pin;
 80011ea:	f24c 0303 	movw	r3, #49155	; 0xc003
 80011ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011f0:	2301      	movs	r3, #1
 80011f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f4:	2300      	movs	r3, #0
 80011f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011f8:	2300      	movs	r3, #0
 80011fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011fc:	f107 031c 	add.w	r3, r7, #28
 8001200:	4619      	mov	r1, r3
 8001202:	4833      	ldr	r0, [pc, #204]	; (80012d0 <_ZL12MX_GPIO_Initv+0x228>)
 8001204:	f001 fcd6 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : Radio_IRQ_Pin */
  GPIO_InitStruct.Pin = Radio_IRQ_Pin;
 8001208:	2304      	movs	r3, #4
 800120a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800120c:	4b32      	ldr	r3, [pc, #200]	; (80012d8 <_ZL12MX_GPIO_Initv+0x230>)
 800120e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001210:	2300      	movs	r3, #0
 8001212:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(Radio_IRQ_GPIO_Port, &GPIO_InitStruct);
 8001214:	f107 031c 	add.w	r3, r7, #28
 8001218:	4619      	mov	r1, r3
 800121a:	482d      	ldr	r0, [pc, #180]	; (80012d0 <_ZL12MX_GPIO_Initv+0x228>)
 800121c:	f001 fcca 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Input_01_Pin GPIO_Input_02_Pin GPIO_Input_03_Pin GPIO_Input_04_Pin */
  GPIO_InitStruct.Pin = GPIO_Input_01_Pin|GPIO_Input_02_Pin|GPIO_Input_03_Pin|GPIO_Input_04_Pin;
 8001220:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 8001224:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001226:	2300      	movs	r3, #0
 8001228:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800122e:	f107 031c 	add.w	r3, r7, #28
 8001232:	4619      	mov	r1, r3
 8001234:	4824      	ldr	r0, [pc, #144]	; (80012c8 <_ZL12MX_GPIO_Initv+0x220>)
 8001236:	f001 fcbd 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800123a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800123e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001240:	2302      	movs	r3, #2
 8001242:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800124c:	2305      	movs	r3, #5
 800124e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001250:	f107 031c 	add.w	r3, r7, #28
 8001254:	4619      	mov	r1, r3
 8001256:	481e      	ldr	r0, [pc, #120]	; (80012d0 <_ZL12MX_GPIO_Initv+0x228>)
 8001258:	f001 fcac 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : GPIO_Output_03_Pin GPIO_Output_04_Pin CSN_Pin CE_Pin
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_Output_03_Pin|GPIO_Output_04_Pin|CSN_Pin|CE_Pin
 800125c:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001260:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001262:	2301      	movs	r3, #1
 8001264:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800126a:	2300      	movs	r3, #0
 800126c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	4619      	mov	r1, r3
 8001274:	4817      	ldr	r0, [pc, #92]	; (80012d4 <_ZL12MX_GPIO_Initv+0x22c>)
 8001276:	f001 fc9d 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800127a:	2301      	movs	r3, #1
 800127c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <_ZL12MX_GPIO_Initv+0x234>)
 8001280:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001286:	f107 031c 	add.w	r3, r7, #28
 800128a:	4619      	mov	r1, r3
 800128c:	480e      	ldr	r0, [pc, #56]	; (80012c8 <_ZL12MX_GPIO_Initv+0x220>)
 800128e:	f001 fc91 	bl	8002bb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001292:	2302      	movs	r3, #2
 8001294:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001296:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <_ZL12MX_GPIO_Initv+0x238>)
 8001298:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800129a:	2300      	movs	r3, #0
 800129c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800129e:	f107 031c 	add.w	r3, r7, #28
 80012a2:	4619      	mov	r1, r3
 80012a4:	4808      	ldr	r0, [pc, #32]	; (80012c8 <_ZL12MX_GPIO_Initv+0x220>)
 80012a6:	f001 fc85 	bl	8002bb4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012aa:	2200      	movs	r2, #0
 80012ac:	2100      	movs	r1, #0
 80012ae:	2006      	movs	r0, #6
 80012b0:	f001 f931 	bl	8002516 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012b4:	2006      	movs	r0, #6
 80012b6:	f001 f94a 	bl	800254e <HAL_NVIC_EnableIRQ>

}
 80012ba:	bf00      	nop
 80012bc:	3730      	adds	r7, #48	; 0x30
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	40023800 	.word	0x40023800
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800
 80012d0:	40020400 	.word	0x40020400
 80012d4:	40020c00 	.word	0x40020c00
 80012d8:	10210000 	.word	0x10210000
 80012dc:	10110000 	.word	0x10110000
 80012e0:	10120000 	.word	0x10120000

080012e4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */

	gAccelerometer_DataReady_Flag = 1;
 80012ee:	4b04      	ldr	r3, [pc, #16]	; (8001300 <HAL_GPIO_EXTI_Callback+0x1c>)
 80012f0:	2201      	movs	r2, #1
 80012f2:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13 );		// Orange LED
}
 80012f4:	bf00      	nop
 80012f6:	370c      	adds	r7, #12
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr
 8001300:	200004fe 	.word	0x200004fe

08001304 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001308:	bf00      	nop
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
	...

08001314 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <HAL_MspInit+0x4c>)
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	4a0f      	ldr	r2, [pc, #60]	; (8001360 <HAL_MspInit+0x4c>)
 8001324:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001328:	6453      	str	r3, [r2, #68]	; 0x44
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <HAL_MspInit+0x4c>)
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001332:	607b      	str	r3, [r7, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
 800133a:	4b09      	ldr	r3, [pc, #36]	; (8001360 <HAL_MspInit+0x4c>)
 800133c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133e:	4a08      	ldr	r2, [pc, #32]	; (8001360 <HAL_MspInit+0x4c>)
 8001340:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001344:	6413      	str	r3, [r2, #64]	; 0x40
 8001346:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_MspInit+0x4c>)
 8001348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800134e:	603b      	str	r3, [r7, #0]
 8001350:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001352:	2007      	movs	r0, #7
 8001354:	f001 f8d4 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001358:	bf00      	nop
 800135a:	3708      	adds	r7, #8
 800135c:	46bd      	mov	sp, r7
 800135e:	bd80      	pop	{r7, pc}
 8001360:	40023800 	.word	0x40023800

08001364 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0314 	add.w	r3, r7, #20
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a2e      	ldr	r2, [pc, #184]	; (800143c <HAL_ADC_MspInit+0xd8>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d156      	bne.n	8001434 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	613b      	str	r3, [r7, #16]
 800138a:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_ADC_MspInit+0xdc>)
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	4a2c      	ldr	r2, [pc, #176]	; (8001440 <HAL_ADC_MspInit+0xdc>)
 8001390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001394:	6453      	str	r3, [r2, #68]	; 0x44
 8001396:	4b2a      	ldr	r3, [pc, #168]	; (8001440 <HAL_ADC_MspInit+0xdc>)
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800139e:	613b      	str	r3, [r7, #16]
 80013a0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	60fb      	str	r3, [r7, #12]
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_ADC_MspInit+0xdc>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a25      	ldr	r2, [pc, #148]	; (8001440 <HAL_ADC_MspInit+0xdc>)
 80013ac:	f043 0304 	orr.w	r3, r3, #4
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_ADC_MspInit+0xdc>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0304 	and.w	r3, r3, #4
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80013be:	2307      	movs	r3, #7
 80013c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c2:	2303      	movs	r3, #3
 80013c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013ca:	f107 0314 	add.w	r3, r7, #20
 80013ce:	4619      	mov	r1, r3
 80013d0:	481c      	ldr	r0, [pc, #112]	; (8001444 <HAL_ADC_MspInit+0xe0>)
 80013d2:	f001 fbef 	bl	8002bb4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 80013d8:	4a1c      	ldr	r2, [pc, #112]	; (800144c <HAL_ADC_MspInit+0xe8>)
 80013da:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80013e8:	4b17      	ldr	r3, [pc, #92]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80013ee:	4b16      	ldr	r3, [pc, #88]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 80013f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013f4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80013f6:	4b14      	ldr	r3, [pc, #80]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 80013f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80013fc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80013fe:	4b12      	ldr	r3, [pc, #72]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 8001400:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001404:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001406:	4b10      	ldr	r3, [pc, #64]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 8001408:	2200      	movs	r2, #0
 800140a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800140c:	4b0e      	ldr	r3, [pc, #56]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 800140e:	2200      	movs	r2, #0
 8001410:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001412:	4b0d      	ldr	r3, [pc, #52]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001418:	480b      	ldr	r0, [pc, #44]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 800141a:	f001 f8b3 	bl	8002584 <HAL_DMA_Init>
 800141e:	4603      	mov	r3, r0
 8001420:	2b00      	cmp	r3, #0
 8001422:	d001      	beq.n	8001428 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001424:	f7ff ff6e 	bl	8001304 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	4a07      	ldr	r2, [pc, #28]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 800142c:	639a      	str	r2, [r3, #56]	; 0x38
 800142e:	4a06      	ldr	r2, [pc, #24]	; (8001448 <HAL_ADC_MspInit+0xe4>)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001434:	bf00      	nop
 8001436:	3728      	adds	r7, #40	; 0x28
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40012000 	.word	0x40012000
 8001440:	40023800 	.word	0x40023800
 8001444:	40020800 	.word	0x40020800
 8001448:	2000013c 	.word	0x2000013c
 800144c:	40026410 	.word	0x40026410

08001450 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b08a      	sub	sp, #40	; 0x28
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001458:	f107 0314 	add.w	r3, r7, #20
 800145c:	2200      	movs	r2, #0
 800145e:	601a      	str	r2, [r3, #0]
 8001460:	605a      	str	r2, [r3, #4]
 8001462:	609a      	str	r2, [r3, #8]
 8001464:	60da      	str	r2, [r3, #12]
 8001466:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a1d      	ldr	r2, [pc, #116]	; (80014e4 <HAL_I2C_MspInit+0x94>)
 800146e:	4293      	cmp	r3, r2
 8001470:	d134      	bne.n	80014dc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	4b1c      	ldr	r3, [pc, #112]	; (80014e8 <HAL_I2C_MspInit+0x98>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	4a1b      	ldr	r2, [pc, #108]	; (80014e8 <HAL_I2C_MspInit+0x98>)
 800147c:	f043 0302 	orr.w	r3, r3, #2
 8001480:	6313      	str	r3, [r2, #48]	; 0x30
 8001482:	4b19      	ldr	r3, [pc, #100]	; (80014e8 <HAL_I2C_MspInit+0x98>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	613b      	str	r3, [r7, #16]
 800148c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 800148e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001492:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001494:	2312      	movs	r3, #18
 8001496:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001498:	2301      	movs	r3, #1
 800149a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800149c:	2300      	movs	r3, #0
 800149e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014a0:	2304      	movs	r3, #4
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a4:	f107 0314 	add.w	r3, r7, #20
 80014a8:	4619      	mov	r1, r3
 80014aa:	4810      	ldr	r0, [pc, #64]	; (80014ec <HAL_I2C_MspInit+0x9c>)
 80014ac:	f001 fb82 	bl	8002bb4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80014b0:	2300      	movs	r3, #0
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	4b0c      	ldr	r3, [pc, #48]	; (80014e8 <HAL_I2C_MspInit+0x98>)
 80014b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b8:	4a0b      	ldr	r2, [pc, #44]	; (80014e8 <HAL_I2C_MspInit+0x98>)
 80014ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80014be:	6413      	str	r3, [r2, #64]	; 0x40
 80014c0:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_I2C_MspInit+0x98>)
 80014c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80014c8:	60fb      	str	r3, [r7, #12]
 80014ca:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2100      	movs	r1, #0
 80014d0:	201f      	movs	r0, #31
 80014d2:	f001 f820 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80014d6:	201f      	movs	r0, #31
 80014d8:	f001 f839 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80014dc:	bf00      	nop
 80014de:	3728      	adds	r7, #40	; 0x28
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005400 	.word	0x40005400
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020400 	.word	0x40020400

080014f0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	2200      	movs	r2, #0
 80014fe:	601a      	str	r2, [r3, #0]
 8001500:	605a      	str	r2, [r3, #4]
 8001502:	609a      	str	r2, [r3, #8]
 8001504:	60da      	str	r2, [r3, #12]
 8001506:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a28      	ldr	r2, [pc, #160]	; (80015b0 <HAL_I2S_MspInit+0xc0>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d14a      	bne.n	80015a8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	613b      	str	r3, [r7, #16]
 8001516:	4b27      	ldr	r3, [pc, #156]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	4a26      	ldr	r2, [pc, #152]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 800151c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001520:	6413      	str	r3, [r2, #64]	; 0x40
 8001522:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001526:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800152a:	613b      	str	r3, [r7, #16]
 800152c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	4b20      	ldr	r3, [pc, #128]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a1f      	ldr	r2, [pc, #124]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b1d      	ldr	r3, [pc, #116]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	60bb      	str	r3, [r7, #8]
 800154e:	4b19      	ldr	r3, [pc, #100]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a18      	ldr	r2, [pc, #96]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 8001554:	f043 0304 	orr.w	r3, r3, #4
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b16      	ldr	r3, [pc, #88]	; (80015b4 <HAL_I2S_MspInit+0xc4>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0304 	and.w	r3, r3, #4
 8001562:	60bb      	str	r3, [r7, #8]
 8001564:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001566:	2310      	movs	r3, #16
 8001568:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156a:	2302      	movs	r3, #2
 800156c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001572:	2300      	movs	r3, #0
 8001574:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001576:	2306      	movs	r3, #6
 8001578:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 800157a:	f107 0314 	add.w	r3, r7, #20
 800157e:	4619      	mov	r1, r3
 8001580:	480d      	ldr	r0, [pc, #52]	; (80015b8 <HAL_I2S_MspInit+0xc8>)
 8001582:	f001 fb17 	bl	8002bb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001586:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800158c:	2302      	movs	r3, #2
 800158e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001590:	2300      	movs	r3, #0
 8001592:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001594:	2300      	movs	r3, #0
 8001596:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001598:	2306      	movs	r3, #6
 800159a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800159c:	f107 0314 	add.w	r3, r7, #20
 80015a0:	4619      	mov	r1, r3
 80015a2:	4806      	ldr	r0, [pc, #24]	; (80015bc <HAL_I2S_MspInit+0xcc>)
 80015a4:	f001 fb06 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80015a8:	bf00      	nop
 80015aa:	3728      	adds	r7, #40	; 0x28
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40003c00 	.word	0x40003c00
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020000 	.word	0x40020000
 80015bc:	40020800 	.word	0x40020800

080015c0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b082      	sub	sp, #8
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a08      	ldr	r2, [pc, #32]	; (80015f0 <HAL_RTC_MspInit+0x30>)
 80015ce:	4293      	cmp	r3, r2
 80015d0:	d10a      	bne.n	80015e8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80015d2:	4b08      	ldr	r3, [pc, #32]	; (80015f4 <HAL_RTC_MspInit+0x34>)
 80015d4:	2201      	movs	r2, #1
 80015d6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 80015d8:	2200      	movs	r2, #0
 80015da:	2100      	movs	r1, #0
 80015dc:	2029      	movs	r0, #41	; 0x29
 80015de:	f000 ff9a 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 80015e2:	2029      	movs	r0, #41	; 0x29
 80015e4:	f000 ffb3 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80015e8:	bf00      	nop
 80015ea:	3708      	adds	r7, #8
 80015ec:	46bd      	mov	sp, r7
 80015ee:	bd80      	pop	{r7, pc}
 80015f0:	40002800 	.word	0x40002800
 80015f4:	42470e3c 	.word	0x42470e3c

080015f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a1d      	ldr	r2, [pc, #116]	; (800168c <HAL_SPI_MspInit+0x94>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d133      	bne.n	8001682 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b1c      	ldr	r3, [pc, #112]	; (8001690 <HAL_SPI_MspInit+0x98>)
 8001620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001622:	4a1b      	ldr	r2, [pc, #108]	; (8001690 <HAL_SPI_MspInit+0x98>)
 8001624:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001628:	6453      	str	r3, [r2, #68]	; 0x44
 800162a:	4b19      	ldr	r3, [pc, #100]	; (8001690 <HAL_SPI_MspInit+0x98>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b15      	ldr	r3, [pc, #84]	; (8001690 <HAL_SPI_MspInit+0x98>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163e:	4a14      	ldr	r2, [pc, #80]	; (8001690 <HAL_SPI_MspInit+0x98>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	6313      	str	r3, [r2, #48]	; 0x30
 8001646:	4b12      	ldr	r3, [pc, #72]	; (8001690 <HAL_SPI_MspInit+0x98>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001652:	23e0      	movs	r3, #224	; 0xe0
 8001654:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001662:	2305      	movs	r3, #5
 8001664:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001666:	f107 0314 	add.w	r3, r7, #20
 800166a:	4619      	mov	r1, r3
 800166c:	4809      	ldr	r0, [pc, #36]	; (8001694 <HAL_SPI_MspInit+0x9c>)
 800166e:	f001 faa1 	bl	8002bb4 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001672:	2200      	movs	r2, #0
 8001674:	2100      	movs	r1, #0
 8001676:	2023      	movs	r0, #35	; 0x23
 8001678:	f000 ff4d 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 800167c:	2023      	movs	r0, #35	; 0x23
 800167e:	f000 ff66 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001682:	bf00      	nop
 8001684:	3728      	adds	r7, #40	; 0x28
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40013000 	.word	0x40013000
 8001690:	40023800 	.word	0x40023800
 8001694:	40020000 	.word	0x40020000

08001698 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08c      	sub	sp, #48	; 0x30
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 031c 	add.w	r3, r7, #28
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a47      	ldr	r2, [pc, #284]	; (80017d4 <HAL_TIM_Base_MspInit+0x13c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d13d      	bne.n	8001736 <HAL_TIM_Base_MspInit+0x9e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	61bb      	str	r3, [r7, #24]
 80016be:	4b46      	ldr	r3, [pc, #280]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c2:	4a45      	ldr	r2, [pc, #276]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ca:	4b43      	ldr	r3, [pc, #268]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
 80016d4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	617b      	str	r3, [r7, #20]
 80016da:	4b3f      	ldr	r3, [pc, #252]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80016dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016de:	4a3e      	ldr	r2, [pc, #248]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80016e0:	f043 0301 	orr.w	r3, r3, #1
 80016e4:	6313      	str	r3, [r2, #48]	; 0x30
 80016e6:	4b3c      	ldr	r3, [pc, #240]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80016e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	617b      	str	r3, [r7, #20]
 80016f0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80016f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80016f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	2302      	movs	r3, #2
 80016fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fc:	2300      	movs	r3, #0
 80016fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	2300      	movs	r3, #0
 8001702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001704:	2301      	movs	r3, #1
 8001706:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001708:	f107 031c 	add.w	r3, r7, #28
 800170c:	4619      	mov	r1, r3
 800170e:	4833      	ldr	r0, [pc, #204]	; (80017dc <HAL_TIM_Base_MspInit+0x144>)
 8001710:	f001 fa50 	bl	8002bb4 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001714:	2200      	movs	r2, #0
 8001716:	2100      	movs	r1, #0
 8001718:	2018      	movs	r0, #24
 800171a:	f000 fefc 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800171e:	2018      	movs	r0, #24
 8001720:	f000 ff15 	bl	800254e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2019      	movs	r0, #25
 800172a:	f000 fef4 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800172e:	2019      	movs	r0, #25
 8001730:	f000 ff0d 	bl	800254e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001734:	e04a      	b.n	80017cc <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM2)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800173e:	d10e      	bne.n	800175e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001740:	2300      	movs	r3, #0
 8001742:	613b      	str	r3, [r7, #16]
 8001744:	4b24      	ldr	r3, [pc, #144]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 8001746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001748:	4a23      	ldr	r2, [pc, #140]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 800174a:	f043 0301 	orr.w	r3, r3, #1
 800174e:	6413      	str	r3, [r2, #64]	; 0x40
 8001750:	4b21      	ldr	r3, [pc, #132]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 8001752:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001754:	f003 0301 	and.w	r3, r3, #1
 8001758:	613b      	str	r3, [r7, #16]
 800175a:	693b      	ldr	r3, [r7, #16]
}
 800175c:	e036      	b.n	80017cc <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM3)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <HAL_TIM_Base_MspInit+0x148>)
 8001764:	4293      	cmp	r3, r2
 8001766:	d116      	bne.n	8001796 <HAL_TIM_Base_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001768:	2300      	movs	r3, #0
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	4b1a      	ldr	r3, [pc, #104]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 800176e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001770:	4a19      	ldr	r2, [pc, #100]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 8001772:	f043 0302 	orr.w	r3, r3, #2
 8001776:	6413      	str	r3, [r2, #64]	; 0x40
 8001778:	4b17      	ldr	r3, [pc, #92]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 800177a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001784:	2200      	movs	r2, #0
 8001786:	2100      	movs	r1, #0
 8001788:	201d      	movs	r0, #29
 800178a:	f000 fec4 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800178e:	201d      	movs	r0, #29
 8001790:	f000 fedd 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001794:	e01a      	b.n	80017cc <HAL_TIM_Base_MspInit+0x134>
  else if(htim_base->Instance==TIM10)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	4a12      	ldr	r2, [pc, #72]	; (80017e4 <HAL_TIM_Base_MspInit+0x14c>)
 800179c:	4293      	cmp	r3, r2
 800179e:	d115      	bne.n	80017cc <HAL_TIM_Base_MspInit+0x134>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80017a0:	2300      	movs	r3, #0
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	4b0c      	ldr	r3, [pc, #48]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80017a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a8:	4a0b      	ldr	r2, [pc, #44]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80017aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017ae:	6453      	str	r3, [r2, #68]	; 0x44
 80017b0:	4b09      	ldr	r3, [pc, #36]	; (80017d8 <HAL_TIM_Base_MspInit+0x140>)
 80017b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b8:	60bb      	str	r3, [r7, #8]
 80017ba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80017bc:	2200      	movs	r2, #0
 80017be:	2100      	movs	r1, #0
 80017c0:	2019      	movs	r0, #25
 80017c2:	f000 fea8 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80017c6:	2019      	movs	r0, #25
 80017c8:	f000 fec1 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 80017cc:	bf00      	nop
 80017ce:	3730      	adds	r7, #48	; 0x30
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd80      	pop	{r7, pc}
 80017d4:	40010000 	.word	0x40010000
 80017d8:	40023800 	.word	0x40023800
 80017dc:	40020000 	.word	0x40020000
 80017e0:	40000400 	.word	0x40000400
 80017e4:	40014400 	.word	0x40014400

080017e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	b08a      	sub	sp, #40	; 0x28
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f0:	f107 0314 	add.w	r3, r7, #20
 80017f4:	2200      	movs	r2, #0
 80017f6:	601a      	str	r2, [r3, #0]
 80017f8:	605a      	str	r2, [r3, #4]
 80017fa:	609a      	str	r2, [r3, #8]
 80017fc:	60da      	str	r2, [r3, #12]
 80017fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a33      	ldr	r2, [pc, #204]	; (80018d4 <HAL_TIM_MspPostInit+0xec>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d11f      	bne.n	800184a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800180a:	2300      	movs	r3, #0
 800180c:	613b      	str	r3, [r7, #16]
 800180e:	4b32      	ldr	r3, [pc, #200]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	4a31      	ldr	r2, [pc, #196]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 8001814:	f043 0310 	orr.w	r3, r3, #16
 8001818:	6313      	str	r3, [r2, #48]	; 0x30
 800181a:	4b2f      	ldr	r3, [pc, #188]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	f003 0310 	and.w	r3, r3, #16
 8001822:	613b      	str	r3, [r7, #16]
 8001824:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001826:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800182a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182c:	2302      	movs	r3, #2
 800182e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001830:	2300      	movs	r3, #0
 8001832:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001834:	2300      	movs	r3, #0
 8001836:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001838:	2301      	movs	r3, #1
 800183a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	4619      	mov	r1, r3
 8001842:	4826      	ldr	r0, [pc, #152]	; (80018dc <HAL_TIM_MspPostInit+0xf4>)
 8001844:	f001 f9b6 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001848:	e040      	b.n	80018cc <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a24      	ldr	r2, [pc, #144]	; (80018e0 <HAL_TIM_MspPostInit+0xf8>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d13b      	bne.n	80018cc <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	2300      	movs	r3, #0
 8001856:	60fb      	str	r3, [r7, #12]
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 800185a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185c:	4a1e      	ldr	r2, [pc, #120]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 800185e:	f043 0304 	orr.w	r3, r3, #4
 8001862:	6313      	str	r3, [r2, #48]	; 0x30
 8001864:	4b1c      	ldr	r3, [pc, #112]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 8001866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	60fb      	str	r3, [r7, #12]
 800186e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]
 8001874:	4b18      	ldr	r3, [pc, #96]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	4a17      	ldr	r2, [pc, #92]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 800187a:	f043 0302 	orr.w	r3, r3, #2
 800187e:	6313      	str	r3, [r2, #48]	; 0x30
 8001880:	4b15      	ldr	r3, [pc, #84]	; (80018d8 <HAL_TIM_MspPostInit+0xf0>)
 8001882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	60bb      	str	r3, [r7, #8]
 800188a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800188c:	2340      	movs	r3, #64	; 0x40
 800188e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001890:	2302      	movs	r3, #2
 8001892:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001894:	2300      	movs	r3, #0
 8001896:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001898:	2300      	movs	r3, #0
 800189a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800189c:	2302      	movs	r3, #2
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018a0:	f107 0314 	add.w	r3, r7, #20
 80018a4:	4619      	mov	r1, r3
 80018a6:	480f      	ldr	r0, [pc, #60]	; (80018e4 <HAL_TIM_MspPostInit+0xfc>)
 80018a8:	f001 f984 	bl	8002bb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018ac:	2320      	movs	r3, #32
 80018ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b0:	2302      	movs	r3, #2
 80018b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b4:	2300      	movs	r3, #0
 80018b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018b8:	2300      	movs	r3, #0
 80018ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018bc:	2302      	movs	r3, #2
 80018be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018c0:	f107 0314 	add.w	r3, r7, #20
 80018c4:	4619      	mov	r1, r3
 80018c6:	4808      	ldr	r0, [pc, #32]	; (80018e8 <HAL_TIM_MspPostInit+0x100>)
 80018c8:	f001 f974 	bl	8002bb4 <HAL_GPIO_Init>
}
 80018cc:	bf00      	nop
 80018ce:	3728      	adds	r7, #40	; 0x28
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}
 80018d4:	40010000 	.word	0x40010000
 80018d8:	40023800 	.word	0x40023800
 80018dc:	40021000 	.word	0x40021000
 80018e0:	40000400 	.word	0x40000400
 80018e4:	40020800 	.word	0x40020800
 80018e8:	40020400 	.word	0x40020400

080018ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018ec:	b580      	push	{r7, lr}
 80018ee:	b08c      	sub	sp, #48	; 0x30
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f4:	f107 031c 	add.w	r3, r7, #28
 80018f8:	2200      	movs	r2, #0
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	605a      	str	r2, [r3, #4]
 80018fe:	609a      	str	r2, [r3, #8]
 8001900:	60da      	str	r2, [r3, #12]
 8001902:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a65      	ldr	r2, [pc, #404]	; (8001aa0 <HAL_UART_MspInit+0x1b4>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d12d      	bne.n	800196a <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	61bb      	str	r3, [r7, #24]
 8001912:	4b64      	ldr	r3, [pc, #400]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001916:	4a63      	ldr	r2, [pc, #396]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001918:	f043 0310 	orr.w	r3, r3, #16
 800191c:	6453      	str	r3, [r2, #68]	; 0x44
 800191e:	4b61      	ldr	r3, [pc, #388]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	f003 0310 	and.w	r3, r3, #16
 8001926:	61bb      	str	r3, [r7, #24]
 8001928:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800192a:	2300      	movs	r3, #0
 800192c:	617b      	str	r3, [r7, #20]
 800192e:	4b5d      	ldr	r3, [pc, #372]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	4a5c      	ldr	r2, [pc, #368]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001934:	f043 0301 	orr.w	r3, r3, #1
 8001938:	6313      	str	r3, [r2, #48]	; 0x30
 800193a:	4b5a      	ldr	r3, [pc, #360]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	617b      	str	r3, [r7, #20]
 8001944:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001946:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800194a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800194c:	2302      	movs	r3, #2
 800194e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	2303      	movs	r3, #3
 8001956:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001958:	2307      	movs	r3, #7
 800195a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	f107 031c 	add.w	r3, r7, #28
 8001960:	4619      	mov	r1, r3
 8001962:	4851      	ldr	r0, [pc, #324]	; (8001aa8 <HAL_UART_MspInit+0x1bc>)
 8001964:	f001 f926 	bl	8002bb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001968:	e095      	b.n	8001a96 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a4f      	ldr	r2, [pc, #316]	; (8001aac <HAL_UART_MspInit+0x1c0>)
 8001970:	4293      	cmp	r3, r2
 8001972:	f040 8090 	bne.w	8001a96 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001976:	2300      	movs	r3, #0
 8001978:	613b      	str	r3, [r7, #16]
 800197a:	4b4a      	ldr	r3, [pc, #296]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	4a49      	ldr	r2, [pc, #292]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001980:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001984:	6413      	str	r3, [r2, #64]	; 0x40
 8001986:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001988:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800198e:	613b      	str	r3, [r7, #16]
 8001990:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
 8001996:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a42      	ldr	r2, [pc, #264]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 800199c:	f043 0301 	orr.w	r3, r3, #1
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b40      	ldr	r3, [pc, #256]	; (8001aa4 <HAL_UART_MspInit+0x1b8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f003 0301 	and.w	r3, r3, #1
 80019aa:	60fb      	str	r3, [r7, #12]
 80019ac:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80019ae:	230c      	movs	r3, #12
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b2:	2302      	movs	r3, #2
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b6:	2300      	movs	r3, #0
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ba:	2303      	movs	r3, #3
 80019bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019be:	2307      	movs	r3, #7
 80019c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019c2:	f107 031c 	add.w	r3, r7, #28
 80019c6:	4619      	mov	r1, r3
 80019c8:	4837      	ldr	r0, [pc, #220]	; (8001aa8 <HAL_UART_MspInit+0x1bc>)
 80019ca:	f001 f8f3 	bl	8002bb4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019d0:	4a38      	ldr	r2, [pc, #224]	; (8001ab4 <HAL_UART_MspInit+0x1c8>)
 80019d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80019d4:	4b36      	ldr	r3, [pc, #216]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80019da:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019dc:	4b34      	ldr	r3, [pc, #208]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019de:	2200      	movs	r2, #0
 80019e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019e2:	4b33      	ldr	r3, [pc, #204]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019e8:	4b31      	ldr	r3, [pc, #196]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019f0:	4b2f      	ldr	r3, [pc, #188]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019f6:	4b2e      	ldr	r3, [pc, #184]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80019fc:	4b2c      	ldr	r3, [pc, #176]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a02:	4b2b      	ldr	r3, [pc, #172]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a08:	4b29      	ldr	r3, [pc, #164]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a0e:	4828      	ldr	r0, [pc, #160]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 8001a10:	f000 fdb8 	bl	8002584 <HAL_DMA_Init>
 8001a14:	4603      	mov	r3, r0
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d001      	beq.n	8001a1e <HAL_UART_MspInit+0x132>
      Error_Handler();
 8001a1a:	f7ff fc73 	bl	8001304 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	4a23      	ldr	r2, [pc, #140]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 8001a22:	635a      	str	r2, [r3, #52]	; 0x34
 8001a24:	4a22      	ldr	r2, [pc, #136]	; (8001ab0 <HAL_UART_MspInit+0x1c4>)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001a2a:	4b23      	ldr	r3, [pc, #140]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_UART_MspInit+0x1d0>)
 8001a2e:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001a30:	4b21      	ldr	r3, [pc, #132]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a36:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a38:	4b1f      	ldr	r3, [pc, #124]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a3a:	2240      	movs	r2, #64	; 0x40
 8001a3c:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a3e:	4b1e      	ldr	r3, [pc, #120]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a44:	4b1c      	ldr	r3, [pc, #112]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a46:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4a:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a4c:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a52:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a54:	2200      	movs	r2, #0
 8001a56:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001a58:	4b17      	ldr	r3, [pc, #92]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a64:	4b14      	ldr	r3, [pc, #80]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a66:	2200      	movs	r2, #0
 8001a68:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001a6a:	4813      	ldr	r0, [pc, #76]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a6c:	f000 fd8a 	bl	8002584 <HAL_DMA_Init>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d001      	beq.n	8001a7a <HAL_UART_MspInit+0x18e>
      Error_Handler();
 8001a76:	f7ff fc45 	bl	8001304 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4a0e      	ldr	r2, [pc, #56]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8001a80:	4a0d      	ldr	r2, [pc, #52]	; (8001ab8 <HAL_UART_MspInit+0x1cc>)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001a86:	2200      	movs	r2, #0
 8001a88:	2100      	movs	r1, #0
 8001a8a:	2026      	movs	r0, #38	; 0x26
 8001a8c:	f000 fd43 	bl	8002516 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001a90:	2026      	movs	r0, #38	; 0x26
 8001a92:	f000 fd5c 	bl	800254e <HAL_NVIC_EnableIRQ>
}
 8001a96:	bf00      	nop
 8001a98:	3730      	adds	r7, #48	; 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	40011000 	.word	0x40011000
 8001aa4:	40023800 	.word	0x40023800
 8001aa8:	40020000 	.word	0x40020000
 8001aac:	40004400 	.word	0x40004400
 8001ab0:	20000430 	.word	0x20000430
 8001ab4:	40026088 	.word	0x40026088
 8001ab8:	20000490 	.word	0x20000490
 8001abc:	400260a0 	.word	0x400260a0

08001ac0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001ac4:	f004 faba 	bl	800603c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001ac8:	bf00      	nop
 8001aca:	bd80      	pop	{r7, pc}

08001acc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001acc:	b480      	push	{r7}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad0:	e7fe      	b.n	8001ad0 <HardFault_Handler+0x4>

08001ad2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad2:	b480      	push	{r7}
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad6:	e7fe      	b.n	8001ad6 <MemManage_Handler+0x4>

08001ad8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001adc:	e7fe      	b.n	8001adc <BusFault_Handler+0x4>

08001ade <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae2:	e7fe      	b.n	8001ae2 <UsageFault_Handler+0x4>

08001ae4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af2:	b480      	push	{r7}
 8001af4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af6:	bf00      	nop
 8001af8:	46bd      	mov	sp, r7
 8001afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afe:	4770      	bx	lr

08001b00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b00:	b480      	push	{r7}
 8001b02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr

08001b0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b12:	f000 f981 	bl	8001e18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001b1a:	b580      	push	{r7, lr}
 8001b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001b1e:	2001      	movs	r0, #1
 8001b20:	f001 fa2e 	bl	8002f80 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */



  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001b2c:	4802      	ldr	r0, [pc, #8]	; (8001b38 <DMA1_Stream5_IRQHandler+0x10>)
 8001b2e:	f000 fdf9 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */



  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001b32:	bf00      	nop
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	20000430 	.word	0x20000430

08001b3c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0




  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001b40:	4802      	ldr	r0, [pc, #8]	; (8001b4c <DMA1_Stream6_IRQHandler+0x10>)
 8001b42:	f000 fdef 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */



  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001b46:	bf00      	nop
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000490 	.word	0x20000490

08001b50 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0




  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001b54:	4802      	ldr	r0, [pc, #8]	; (8001b60 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b56:	f005 ff4b 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200002b0 	.word	0x200002b0

08001b64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

	if(gTimer_Display_RF_Info != 0)
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <TIM1_UP_TIM10_IRQHandler+0x50>)
 8001b6a:	881b      	ldrh	r3, [r3, #0]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <TIM1_UP_TIM10_IRQHandler+0x18>
		gTimer_Display_RF_Info--;
 8001b70:	4b10      	ldr	r3, [pc, #64]	; (8001bb4 <TIM1_UP_TIM10_IRQHandler+0x50>)
 8001b72:	881b      	ldrh	r3, [r3, #0]
 8001b74:	3b01      	subs	r3, #1
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b0e      	ldr	r3, [pc, #56]	; (8001bb4 <TIM1_UP_TIM10_IRQHandler+0x50>)
 8001b7a:	801a      	strh	r2, [r3, #0]

	if(gTimer_Radio_Schedule != 0)
 8001b7c:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8001b7e:	881b      	ldrh	r3, [r3, #0]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d005      	beq.n	8001b90 <TIM1_UP_TIM10_IRQHandler+0x2c>
		gTimer_Radio_Schedule--;
 8001b84:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8001b86:	881b      	ldrh	r3, [r3, #0]
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b0a      	ldr	r3, [pc, #40]	; (8001bb8 <TIM1_UP_TIM10_IRQHandler+0x54>)
 8001b8e:	801a      	strh	r2, [r3, #0]

	if(gTimer_Accelerometer_Schedule != 0)
 8001b90:	4b0a      	ldr	r3, [pc, #40]	; (8001bbc <TIM1_UP_TIM10_IRQHandler+0x58>)
 8001b92:	881b      	ldrh	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d005      	beq.n	8001ba4 <TIM1_UP_TIM10_IRQHandler+0x40>
		gTimer_Accelerometer_Schedule--;
 8001b98:	4b08      	ldr	r3, [pc, #32]	; (8001bbc <TIM1_UP_TIM10_IRQHandler+0x58>)
 8001b9a:	881b      	ldrh	r3, [r3, #0]
 8001b9c:	3b01      	subs	r3, #1
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <TIM1_UP_TIM10_IRQHandler+0x58>)
 8001ba2:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001ba4:	4806      	ldr	r0, [pc, #24]	; (8001bc0 <TIM1_UP_TIM10_IRQHandler+0x5c>)
 8001ba6:	f005 ff23 	bl	80079f0 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim10);
 8001baa:	4806      	ldr	r0, [pc, #24]	; (8001bc4 <TIM1_UP_TIM10_IRQHandler+0x60>)
 8001bac:	f005 ff20 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001bb0:	bf00      	nop
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	200004f8 	.word	0x200004f8
 8001bb8:	200004fa 	.word	0x200004fa
 8001bbc:	200004fc 	.word	0x200004fc
 8001bc0:	200002b0 	.word	0x200002b0
 8001bc4:	20000370 	.word	0x20000370

08001bc8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

	if(timer_count != 0)
 8001bcc:	4b07      	ldr	r3, [pc, #28]	; (8001bec <TIM3_IRQHandler+0x24>)
 8001bce:	881b      	ldrh	r3, [r3, #0]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <TIM3_IRQHandler+0x18>
		timer_count--;
 8001bd4:	4b05      	ldr	r3, [pc, #20]	; (8001bec <TIM3_IRQHandler+0x24>)
 8001bd6:	881b      	ldrh	r3, [r3, #0]
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b03      	ldr	r3, [pc, #12]	; (8001bec <TIM3_IRQHandler+0x24>)
 8001bde:	801a      	strh	r2, [r3, #0]

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be0:	4803      	ldr	r0, [pc, #12]	; (8001bf0 <TIM3_IRQHandler+0x28>)
 8001be2:	f005 ff05 	bl	80079f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001be6:	bf00      	nop
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	200004f0 	.word	0x200004f0
 8001bf0:	20000330 	.word	0x20000330

08001bf4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001bf4:	b580      	push	{r7, lr}
 8001bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001bf8:	4802      	ldr	r0, [pc, #8]	; (8001c04 <I2C1_EV_IRQHandler+0x10>)
 8001bfa:	f001 fc0f 	bl	800341c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001bfe:	bf00      	nop
 8001c00:	bd80      	pop	{r7, pc}
 8001c02:	bf00      	nop
 8001c04:	2000019c 	.word	0x2000019c

08001c08 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c0c:	4802      	ldr	r0, [pc, #8]	; (8001c18 <SPI1_IRQHandler+0x10>)
 8001c0e:	f005 fbad 	bl	800736c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c12:	bf00      	nop
 8001c14:	bd80      	pop	{r7, pc}
 8001c16:	bf00      	nop
 8001c18:	20000258 	.word	0x20000258

08001c1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001c20:	4802      	ldr	r0, [pc, #8]	; (8001c2c <USART2_IRQHandler+0x10>)
 8001c22:	f007 f86b 	bl	8008cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001c26:	bf00      	nop
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	200003f0 	.word	0x200003f0

08001c30 <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8001c34:	4802      	ldr	r0, [pc, #8]	; (8001c40 <RTC_Alarm_IRQHandler+0x10>)
 8001c36:	f004 fe89 	bl	800694c <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8001c3a:	bf00      	nop
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000238 	.word	0x20000238

08001c44 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001c48:	4802      	ldr	r0, [pc, #8]	; (8001c54 <DMA2_Stream0_IRQHandler+0x10>)
 8001c4a:	f000 fd6b 	bl	8002724 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001c4e:	bf00      	nop
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	2000013c 	.word	0x2000013c

08001c58 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
	return 1;
 8001c5c:	2301      	movs	r3, #1
}
 8001c5e:	4618      	mov	r0, r3
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <_kill>:

int _kill(int pid, int sig)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001c72:	f009 fec1 	bl	800b9f8 <__errno>
 8001c76:	4602      	mov	r2, r0
 8001c78:	2316      	movs	r3, #22
 8001c7a:	6013      	str	r3, [r2, #0]
	return -1;
 8001c7c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3708      	adds	r7, #8
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <_exit>:

void _exit (int status)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001c90:	f04f 31ff 	mov.w	r1, #4294967295
 8001c94:	6878      	ldr	r0, [r7, #4]
 8001c96:	f7ff ffe7 	bl	8001c68 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001c9a:	e7fe      	b.n	8001c9a <_exit+0x12>

08001c9c <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001ca4:	4b11      	ldr	r3, [pc, #68]	; (8001cec <_sbrk+0x50>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d102      	bne.n	8001cb2 <_sbrk+0x16>
		heap_end = &end;
 8001cac:	4b0f      	ldr	r3, [pc, #60]	; (8001cec <_sbrk+0x50>)
 8001cae:	4a10      	ldr	r2, [pc, #64]	; (8001cf0 <_sbrk+0x54>)
 8001cb0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001cb2:	4b0e      	ldr	r3, [pc, #56]	; (8001cec <_sbrk+0x50>)
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001cb8:	4b0c      	ldr	r3, [pc, #48]	; (8001cec <_sbrk+0x50>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	4413      	add	r3, r2
 8001cc0:	466a      	mov	r2, sp
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d907      	bls.n	8001cd6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001cc6:	f009 fe97 	bl	800b9f8 <__errno>
 8001cca:	4602      	mov	r2, r0
 8001ccc:	230c      	movs	r3, #12
 8001cce:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001cd0:	f04f 33ff 	mov.w	r3, #4294967295
 8001cd4:	e006      	b.n	8001ce4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001cd6:	4b05      	ldr	r3, [pc, #20]	; (8001cec <_sbrk+0x50>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4413      	add	r3, r2
 8001cde:	4a03      	ldr	r2, [pc, #12]	; (8001cec <_sbrk+0x50>)
 8001ce0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	3710      	adds	r7, #16
 8001ce8:	46bd      	mov	sp, r7
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	200004f4 	.word	0x200004f4
 8001cf0:	20002658 	.word	0x20002658

08001cf4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cf8:	4b08      	ldr	r3, [pc, #32]	; (8001d1c <SystemInit+0x28>)
 8001cfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cfe:	4a07      	ldr	r2, [pc, #28]	; (8001d1c <SystemInit+0x28>)
 8001d00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001d08:	4b04      	ldr	r3, [pc, #16]	; (8001d1c <SystemInit+0x28>)
 8001d0a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d0e:	609a      	str	r2, [r3, #8]
#endif
}
 8001d10:	bf00      	nop
 8001d12:	46bd      	mov	sp, r7
 8001d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d18:	4770      	bx	lr
 8001d1a:	bf00      	nop
 8001d1c:	e000ed00 	.word	0xe000ed00

08001d20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001d20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d58 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001d24:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001d26:	e003      	b.n	8001d30 <LoopCopyDataInit>

08001d28 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001d28:	4b0c      	ldr	r3, [pc, #48]	; (8001d5c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001d2a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001d2c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001d2e:	3104      	adds	r1, #4

08001d30 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001d30:	480b      	ldr	r0, [pc, #44]	; (8001d60 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001d32:	4b0c      	ldr	r3, [pc, #48]	; (8001d64 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001d34:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001d36:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001d38:	d3f6      	bcc.n	8001d28 <CopyDataInit>
  ldr  r2, =_sbss
 8001d3a:	4a0b      	ldr	r2, [pc, #44]	; (8001d68 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001d3c:	e002      	b.n	8001d44 <LoopFillZerobss>

08001d3e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001d3e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001d40:	f842 3b04 	str.w	r3, [r2], #4

08001d44 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001d46:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001d48:	d3f9      	bcc.n	8001d3e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001d4a:	f7ff ffd3 	bl	8001cf4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d4e:	f009 fe59 	bl	800ba04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d52:	f7fe fc15 	bl	8000580 <main>
  bx  lr    
 8001d56:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001d58:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8001d5c:	0800cf74 	.word	0x0800cf74
  ldr  r0, =_sdata
 8001d60:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001d64:	200000d8 	.word	0x200000d8
  ldr  r2, =_sbss
 8001d68:	200000d8 	.word	0x200000d8
  ldr  r3, = _ebss
 8001d6c:	20002658 	.word	0x20002658

08001d70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d70:	e7fe      	b.n	8001d70 <ADC_IRQHandler>
	...

08001d74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_Init+0x40>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a0d      	ldr	r2, [pc, #52]	; (8001db4 <HAL_Init+0x40>)
 8001d7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001d82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001d84:	4b0b      	ldr	r3, [pc, #44]	; (8001db4 <HAL_Init+0x40>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	4a0a      	ldr	r2, [pc, #40]	; (8001db4 <HAL_Init+0x40>)
 8001d8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001d8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001d90:	4b08      	ldr	r3, [pc, #32]	; (8001db4 <HAL_Init+0x40>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a07      	ldr	r2, [pc, #28]	; (8001db4 <HAL_Init+0x40>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001d9c:	2003      	movs	r0, #3
 8001d9e:	f000 fbaf 	bl	8002500 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001da2:	2000      	movs	r0, #0
 8001da4:	f000 f808 	bl	8001db8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001da8:	f7ff fab4 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	40023c00 	.word	0x40023c00

08001db8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001dc0:	4b12      	ldr	r3, [pc, #72]	; (8001e0c <HAL_InitTick+0x54>)
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	4b12      	ldr	r3, [pc, #72]	; (8001e10 <HAL_InitTick+0x58>)
 8001dc6:	781b      	ldrb	r3, [r3, #0]
 8001dc8:	4619      	mov	r1, r3
 8001dca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001dce:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f000 fbc7 	bl	800256a <HAL_SYSTICK_Config>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d001      	beq.n	8001de6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00e      	b.n	8001e04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	2b0f      	cmp	r3, #15
 8001dea:	d80a      	bhi.n	8001e02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001dec:	2200      	movs	r2, #0
 8001dee:	6879      	ldr	r1, [r7, #4]
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f000 fb8f 	bl	8002516 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001df8:	4a06      	ldr	r2, [pc, #24]	; (8001e14 <HAL_InitTick+0x5c>)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	e000      	b.n	8001e04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3708      	adds	r7, #8
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}
 8001e0c:	20000000 	.word	0x20000000
 8001e10:	20000008 	.word	0x20000008
 8001e14:	20000004 	.word	0x20000004

08001e18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e1c:	4b06      	ldr	r3, [pc, #24]	; (8001e38 <HAL_IncTick+0x20>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_IncTick+0x24>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	4a04      	ldr	r2, [pc, #16]	; (8001e3c <HAL_IncTick+0x24>)
 8001e2a:	6013      	str	r3, [r2, #0]
}
 8001e2c:	bf00      	nop
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e34:	4770      	bx	lr
 8001e36:	bf00      	nop
 8001e38:	20000008 	.word	0x20000008
 8001e3c:	20002598 	.word	0x20002598

08001e40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  return uwTick;
 8001e44:	4b03      	ldr	r3, [pc, #12]	; (8001e54 <HAL_GetTick+0x14>)
 8001e46:	681b      	ldr	r3, [r3, #0]
}
 8001e48:	4618      	mov	r0, r3
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20002598 	.word	0x20002598

08001e58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e60:	f7ff ffee 	bl	8001e40 <HAL_GetTick>
 8001e64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e70:	d005      	beq.n	8001e7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e72:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <HAL_Delay+0x40>)
 8001e74:	781b      	ldrb	r3, [r3, #0]
 8001e76:	461a      	mov	r2, r3
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	4413      	add	r3, r2
 8001e7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001e7e:	bf00      	nop
 8001e80:	f7ff ffde 	bl	8001e40 <HAL_GetTick>
 8001e84:	4602      	mov	r2, r0
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	1ad3      	subs	r3, r2, r3
 8001e8a:	68fa      	ldr	r2, [r7, #12]
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d8f7      	bhi.n	8001e80 <HAL_Delay+0x28>
  {
  }
}
 8001e90:	bf00      	nop
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	20000008 	.word	0x20000008

08001e9c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b084      	sub	sp, #16
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d101      	bne.n	8001eb2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e033      	b.n	8001f1a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d109      	bne.n	8001ece <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fa52 	bl	8001364 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed2:	f003 0310 	and.w	r3, r3, #16
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d118      	bne.n	8001f0c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001ee2:	f023 0302 	bic.w	r3, r3, #2
 8001ee6:	f043 0202 	orr.w	r2, r3, #2
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001eee:	6878      	ldr	r0, [r7, #4]
 8001ef0:	f000 f93a 	bl	8002168 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001efe:	f023 0303 	bic.w	r3, r3, #3
 8001f02:	f043 0201 	orr.w	r2, r3, #1
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	641a      	str	r2, [r3, #64]	; 0x40
 8001f0a:	e001      	b.n	8001f10 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001f18:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
	...

08001f24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001f24:	b480      	push	{r7}
 8001f26:	b085      	sub	sp, #20
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
 8001f2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d101      	bne.n	8001f40 <HAL_ADC_ConfigChannel+0x1c>
 8001f3c:	2302      	movs	r3, #2
 8001f3e:	e105      	b.n	800214c <HAL_ADC_ConfigChannel+0x228>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2201      	movs	r2, #1
 8001f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	2b09      	cmp	r3, #9
 8001f4e:	d925      	bls.n	8001f9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68d9      	ldr	r1, [r3, #12]
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	461a      	mov	r2, r3
 8001f5e:	4613      	mov	r3, r2
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	4413      	add	r3, r2
 8001f64:	3b1e      	subs	r3, #30
 8001f66:	2207      	movs	r2, #7
 8001f68:	fa02 f303 	lsl.w	r3, r2, r3
 8001f6c:	43da      	mvns	r2, r3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	400a      	ands	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	68d9      	ldr	r1, [r3, #12]
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	683b      	ldr	r3, [r7, #0]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	b29b      	uxth	r3, r3
 8001f86:	4618      	mov	r0, r3
 8001f88:	4603      	mov	r3, r0
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4403      	add	r3, r0
 8001f8e:	3b1e      	subs	r3, #30
 8001f90:	409a      	lsls	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	430a      	orrs	r2, r1
 8001f98:	60da      	str	r2, [r3, #12]
 8001f9a:	e022      	b.n	8001fe2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	6919      	ldr	r1, [r3, #16]
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	461a      	mov	r2, r3
 8001faa:	4613      	mov	r3, r2
 8001fac:	005b      	lsls	r3, r3, #1
 8001fae:	4413      	add	r3, r2
 8001fb0:	2207      	movs	r2, #7
 8001fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8001fb6:	43da      	mvns	r2, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	400a      	ands	r2, r1
 8001fbe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	6919      	ldr	r1, [r3, #16]
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	689a      	ldr	r2, [r3, #8]
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	4403      	add	r3, r0
 8001fd8:	409a      	lsls	r2, r3
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	430a      	orrs	r2, r1
 8001fe0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	2b06      	cmp	r3, #6
 8001fe8:	d824      	bhi.n	8002034 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	4613      	mov	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4413      	add	r3, r2
 8001ffa:	3b05      	subs	r3, #5
 8001ffc:	221f      	movs	r2, #31
 8001ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8002002:	43da      	mvns	r2, r3
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	400a      	ands	r2, r1
 800200a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	b29b      	uxth	r3, r3
 8002018:	4618      	mov	r0, r3
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	685a      	ldr	r2, [r3, #4]
 800201e:	4613      	mov	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	4413      	add	r3, r2
 8002024:	3b05      	subs	r3, #5
 8002026:	fa00 f203 	lsl.w	r2, r0, r3
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	430a      	orrs	r2, r1
 8002030:	635a      	str	r2, [r3, #52]	; 0x34
 8002032:	e04c      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	2b0c      	cmp	r3, #12
 800203a:	d824      	bhi.n	8002086 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	009b      	lsls	r3, r3, #2
 800204a:	4413      	add	r3, r2
 800204c:	3b23      	subs	r3, #35	; 0x23
 800204e:	221f      	movs	r2, #31
 8002050:	fa02 f303 	lsl.w	r3, r2, r3
 8002054:	43da      	mvns	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	400a      	ands	r2, r1
 800205c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	b29b      	uxth	r3, r3
 800206a:	4618      	mov	r0, r3
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b23      	subs	r3, #35	; 0x23
 8002078:	fa00 f203 	lsl.w	r2, r0, r3
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	430a      	orrs	r2, r1
 8002082:	631a      	str	r2, [r3, #48]	; 0x30
 8002084:	e023      	b.n	80020ce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	685a      	ldr	r2, [r3, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4413      	add	r3, r2
 8002096:	3b41      	subs	r3, #65	; 0x41
 8002098:	221f      	movs	r2, #31
 800209a:	fa02 f303 	lsl.w	r3, r2, r3
 800209e:	43da      	mvns	r2, r3
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	400a      	ands	r2, r1
 80020a6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	4618      	mov	r0, r3
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	685a      	ldr	r2, [r3, #4]
 80020ba:	4613      	mov	r3, r2
 80020bc:	009b      	lsls	r3, r3, #2
 80020be:	4413      	add	r3, r2
 80020c0:	3b41      	subs	r3, #65	; 0x41
 80020c2:	fa00 f203 	lsl.w	r2, r0, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80020ce:	4b22      	ldr	r3, [pc, #136]	; (8002158 <HAL_ADC_ConfigChannel+0x234>)
 80020d0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	4a21      	ldr	r2, [pc, #132]	; (800215c <HAL_ADC_ConfigChannel+0x238>)
 80020d8:	4293      	cmp	r3, r2
 80020da:	d109      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1cc>
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	2b12      	cmp	r3, #18
 80020e2:	d105      	bne.n	80020f0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a19      	ldr	r2, [pc, #100]	; (800215c <HAL_ADC_ConfigChannel+0x238>)
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d123      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x21e>
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	2b10      	cmp	r3, #16
 8002100:	d003      	beq.n	800210a <HAL_ADC_ConfigChannel+0x1e6>
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	2b11      	cmp	r3, #17
 8002108:	d11b      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2b10      	cmp	r3, #16
 800211c:	d111      	bne.n	8002142 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800211e:	4b10      	ldr	r3, [pc, #64]	; (8002160 <HAL_ADC_ConfigChannel+0x23c>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a10      	ldr	r2, [pc, #64]	; (8002164 <HAL_ADC_ConfigChannel+0x240>)
 8002124:	fba2 2303 	umull	r2, r3, r2, r3
 8002128:	0c9a      	lsrs	r2, r3, #18
 800212a:	4613      	mov	r3, r2
 800212c:	009b      	lsls	r3, r3, #2
 800212e:	4413      	add	r3, r2
 8002130:	005b      	lsls	r3, r3, #1
 8002132:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002134:	e002      	b.n	800213c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	3b01      	subs	r3, #1
 800213a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b00      	cmp	r3, #0
 8002140:	d1f9      	bne.n	8002136 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800214a:	2300      	movs	r3, #0
}
 800214c:	4618      	mov	r0, r3
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	40012300 	.word	0x40012300
 800215c:	40012000 	.word	0x40012000
 8002160:	20000000 	.word	0x20000000
 8002164:	431bde83 	.word	0x431bde83

08002168 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002170:	4b79      	ldr	r3, [pc, #484]	; (8002358 <ADC_Init+0x1f0>)
 8002172:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800219c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	6859      	ldr	r1, [r3, #4]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	691b      	ldr	r3, [r3, #16]
 80021a8:	021a      	lsls	r2, r3, #8
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	430a      	orrs	r2, r1
 80021b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80021c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	6859      	ldr	r1, [r3, #4]
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	689a      	ldr	r2, [r3, #8]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	430a      	orrs	r2, r1
 80021d2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	689a      	ldr	r2, [r3, #8]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021e2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	6899      	ldr	r1, [r3, #8]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68da      	ldr	r2, [r3, #12]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	430a      	orrs	r2, r1
 80021f4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021fa:	4a58      	ldr	r2, [pc, #352]	; (800235c <ADC_Init+0x1f4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d022      	beq.n	8002246 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	689a      	ldr	r2, [r3, #8]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800220e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	6899      	ldr	r1, [r3, #8]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	430a      	orrs	r2, r1
 8002220:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	689a      	ldr	r2, [r3, #8]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	6899      	ldr	r1, [r3, #8]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	430a      	orrs	r2, r1
 8002242:	609a      	str	r2, [r3, #8]
 8002244:	e00f      	b.n	8002266 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	689a      	ldr	r2, [r3, #8]
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002254:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	689a      	ldr	r2, [r3, #8]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002264:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	689a      	ldr	r2, [r3, #8]
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f022 0202 	bic.w	r2, r2, #2
 8002274:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	6899      	ldr	r1, [r3, #8]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	7e1b      	ldrb	r3, [r3, #24]
 8002280:	005a      	lsls	r2, r3, #1
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	430a      	orrs	r2, r1
 8002288:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002290:	2b00      	cmp	r3, #0
 8002292:	d01b      	beq.n	80022cc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	685a      	ldr	r2, [r3, #4]
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80022b2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	6859      	ldr	r1, [r3, #4]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022be:	3b01      	subs	r3, #1
 80022c0:	035a      	lsls	r2, r3, #13
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	430a      	orrs	r2, r1
 80022c8:	605a      	str	r2, [r3, #4]
 80022ca:	e007      	b.n	80022dc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	685a      	ldr	r2, [r3, #4]
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80022da:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	3b01      	subs	r3, #1
 80022f8:	051a      	lsls	r2, r3, #20
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	430a      	orrs	r2, r1
 8002300:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	689a      	ldr	r2, [r3, #8]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002310:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	6899      	ldr	r1, [r3, #8]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800231e:	025a      	lsls	r2, r3, #9
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	430a      	orrs	r2, r1
 8002326:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002336:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	6899      	ldr	r1, [r3, #8]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	695b      	ldr	r3, [r3, #20]
 8002342:	029a      	lsls	r2, r3, #10
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	430a      	orrs	r2, r1
 800234a:	609a      	str	r2, [r3, #8]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40012300 	.word	0x40012300
 800235c:	0f000001 	.word	0x0f000001

08002360 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002370:	4b0c      	ldr	r3, [pc, #48]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002376:	68ba      	ldr	r2, [r7, #8]
 8002378:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800237c:	4013      	ands	r3, r2
 800237e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002388:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800238c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002392:	4a04      	ldr	r2, [pc, #16]	; (80023a4 <__NVIC_SetPriorityGrouping+0x44>)
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	60d3      	str	r3, [r2, #12]
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr
 80023a4:	e000ed00 	.word	0xe000ed00

080023a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80023ac:	4b04      	ldr	r3, [pc, #16]	; (80023c0 <__NVIC_GetPriorityGrouping+0x18>)
 80023ae:	68db      	ldr	r3, [r3, #12]
 80023b0:	0a1b      	lsrs	r3, r3, #8
 80023b2:	f003 0307 	and.w	r3, r3, #7
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr
 80023c0:	e000ed00 	.word	0xe000ed00

080023c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b083      	sub	sp, #12
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	4603      	mov	r3, r0
 80023cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	db0b      	blt.n	80023ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4907      	ldr	r1, [pc, #28]	; (80023fc <__NVIC_EnableIRQ+0x38>)
 80023de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	2001      	movs	r0, #1
 80023e6:	fa00 f202 	lsl.w	r2, r0, r2
 80023ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr
 80023fa:	bf00      	nop
 80023fc:	e000e100 	.word	0xe000e100

08002400 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002400:	b480      	push	{r7}
 8002402:	b083      	sub	sp, #12
 8002404:	af00      	add	r7, sp, #0
 8002406:	4603      	mov	r3, r0
 8002408:	6039      	str	r1, [r7, #0]
 800240a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800240c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002410:	2b00      	cmp	r3, #0
 8002412:	db0a      	blt.n	800242a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	b2da      	uxtb	r2, r3
 8002418:	490c      	ldr	r1, [pc, #48]	; (800244c <__NVIC_SetPriority+0x4c>)
 800241a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800241e:	0112      	lsls	r2, r2, #4
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	440b      	add	r3, r1
 8002424:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002428:	e00a      	b.n	8002440 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800242a:	683b      	ldr	r3, [r7, #0]
 800242c:	b2da      	uxtb	r2, r3
 800242e:	4908      	ldr	r1, [pc, #32]	; (8002450 <__NVIC_SetPriority+0x50>)
 8002430:	79fb      	ldrb	r3, [r7, #7]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	3b04      	subs	r3, #4
 8002438:	0112      	lsls	r2, r2, #4
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	440b      	add	r3, r1
 800243e:	761a      	strb	r2, [r3, #24]
}
 8002440:	bf00      	nop
 8002442:	370c      	adds	r7, #12
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	e000e100 	.word	0xe000e100
 8002450:	e000ed00 	.word	0xe000ed00

08002454 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002454:	b480      	push	{r7}
 8002456:	b089      	sub	sp, #36	; 0x24
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	f003 0307 	and.w	r3, r3, #7
 8002466:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	f1c3 0307 	rsb	r3, r3, #7
 800246e:	2b04      	cmp	r3, #4
 8002470:	bf28      	it	cs
 8002472:	2304      	movcs	r3, #4
 8002474:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	3304      	adds	r3, #4
 800247a:	2b06      	cmp	r3, #6
 800247c:	d902      	bls.n	8002484 <NVIC_EncodePriority+0x30>
 800247e:	69fb      	ldr	r3, [r7, #28]
 8002480:	3b03      	subs	r3, #3
 8002482:	e000      	b.n	8002486 <NVIC_EncodePriority+0x32>
 8002484:	2300      	movs	r3, #0
 8002486:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002488:	f04f 32ff 	mov.w	r2, #4294967295
 800248c:	69bb      	ldr	r3, [r7, #24]
 800248e:	fa02 f303 	lsl.w	r3, r2, r3
 8002492:	43da      	mvns	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	401a      	ands	r2, r3
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800249c:	f04f 31ff 	mov.w	r1, #4294967295
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	fa01 f303 	lsl.w	r3, r1, r3
 80024a6:	43d9      	mvns	r1, r3
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024ac:	4313      	orrs	r3, r2
         );
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3724      	adds	r7, #36	; 0x24
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
	...

080024bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b082      	sub	sp, #8
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3b01      	subs	r3, #1
 80024c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80024cc:	d301      	bcc.n	80024d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00f      	b.n	80024f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <SysTick_Config+0x40>)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	3b01      	subs	r3, #1
 80024d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024da:	210f      	movs	r1, #15
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f7ff ff8e 	bl	8002400 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024e4:	4b05      	ldr	r3, [pc, #20]	; (80024fc <SysTick_Config+0x40>)
 80024e6:	2200      	movs	r2, #0
 80024e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024ea:	4b04      	ldr	r3, [pc, #16]	; (80024fc <SysTick_Config+0x40>)
 80024ec:	2207      	movs	r2, #7
 80024ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024f0:	2300      	movs	r3, #0
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3708      	adds	r7, #8
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}
 80024fa:	bf00      	nop
 80024fc:	e000e010 	.word	0xe000e010

08002500 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b082      	sub	sp, #8
 8002504:	af00      	add	r7, sp, #0
 8002506:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff29 	bl	8002360 <__NVIC_SetPriorityGrouping>
}
 800250e:	bf00      	nop
 8002510:	3708      	adds	r7, #8
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}

08002516 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002516:	b580      	push	{r7, lr}
 8002518:	b086      	sub	sp, #24
 800251a:	af00      	add	r7, sp, #0
 800251c:	4603      	mov	r3, r0
 800251e:	60b9      	str	r1, [r7, #8]
 8002520:	607a      	str	r2, [r7, #4]
 8002522:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002524:	2300      	movs	r3, #0
 8002526:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002528:	f7ff ff3e 	bl	80023a8 <__NVIC_GetPriorityGrouping>
 800252c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	68b9      	ldr	r1, [r7, #8]
 8002532:	6978      	ldr	r0, [r7, #20]
 8002534:	f7ff ff8e 	bl	8002454 <NVIC_EncodePriority>
 8002538:	4602      	mov	r2, r0
 800253a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800253e:	4611      	mov	r1, r2
 8002540:	4618      	mov	r0, r3
 8002542:	f7ff ff5d 	bl	8002400 <__NVIC_SetPriority>
}
 8002546:	bf00      	nop
 8002548:	3718      	adds	r7, #24
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800254e:	b580      	push	{r7, lr}
 8002550:	b082      	sub	sp, #8
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002558:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800255c:	4618      	mov	r0, r3
 800255e:	f7ff ff31 	bl	80023c4 <__NVIC_EnableIRQ>
}
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}

0800256a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800256a:	b580      	push	{r7, lr}
 800256c:	b082      	sub	sp, #8
 800256e:	af00      	add	r7, sp, #0
 8002570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002572:	6878      	ldr	r0, [r7, #4]
 8002574:	f7ff ffa2 	bl	80024bc <SysTick_Config>
 8002578:	4603      	mov	r3, r0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002590:	f7ff fc56 	bl	8001e40 <HAL_GetTick>
 8002594:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d101      	bne.n	80025a0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	e099      	b.n	80026d4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2202      	movs	r2, #2
 80025ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	681a      	ldr	r2, [r3, #0]
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f022 0201 	bic.w	r2, r2, #1
 80025be:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025c0:	e00f      	b.n	80025e2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80025c2:	f7ff fc3d 	bl	8001e40 <HAL_GetTick>
 80025c6:	4602      	mov	r2, r0
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	1ad3      	subs	r3, r2, r3
 80025cc:	2b05      	cmp	r3, #5
 80025ce:	d908      	bls.n	80025e2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2220      	movs	r2, #32
 80025d4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2203      	movs	r2, #3
 80025da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80025de:	2303      	movs	r3, #3
 80025e0:	e078      	b.n	80026d4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d1e8      	bne.n	80025c2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80025f8:	697a      	ldr	r2, [r7, #20]
 80025fa:	4b38      	ldr	r3, [pc, #224]	; (80026dc <HAL_DMA_Init+0x158>)
 80025fc:	4013      	ands	r3, r2
 80025fe:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	685a      	ldr	r2, [r3, #4]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	689b      	ldr	r3, [r3, #8]
 8002608:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800260e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800261a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	699b      	ldr	r3, [r3, #24]
 8002620:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002626:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800262e:	697a      	ldr	r2, [r7, #20]
 8002630:	4313      	orrs	r3, r2
 8002632:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002638:	2b04      	cmp	r3, #4
 800263a:	d107      	bne.n	800264c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4313      	orrs	r3, r2
 8002646:	697a      	ldr	r2, [r7, #20]
 8002648:	4313      	orrs	r3, r2
 800264a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	695b      	ldr	r3, [r3, #20]
 800265a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f023 0307 	bic.w	r3, r3, #7
 8002662:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002668:	697a      	ldr	r2, [r7, #20]
 800266a:	4313      	orrs	r3, r2
 800266c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002672:	2b04      	cmp	r3, #4
 8002674:	d117      	bne.n	80026a6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800267a:	697a      	ldr	r2, [r7, #20]
 800267c:	4313      	orrs	r3, r2
 800267e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002688:	6878      	ldr	r0, [r7, #4]
 800268a:	f000 fa19 	bl	8002ac0 <DMA_CheckFifoParam>
 800268e:	4603      	mov	r3, r0
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	2240      	movs	r2, #64	; 0x40
 8002698:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80026a2:	2301      	movs	r3, #1
 80026a4:	e016      	b.n	80026d4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	697a      	ldr	r2, [r7, #20]
 80026ac:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	f000 f9d0 	bl	8002a54 <DMA_CalcBaseAndBitshift>
 80026b4:	4603      	mov	r3, r0
 80026b6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026bc:	223f      	movs	r2, #63	; 0x3f
 80026be:	409a      	lsls	r2, r3
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2200      	movs	r2, #0
 80026c8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2201      	movs	r2, #1
 80026ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80026d2:	2300      	movs	r3, #0
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	3718      	adds	r7, #24
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	f010803f 	.word	0xf010803f

080026e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026ee:	b2db      	uxtb	r3, r3
 80026f0:	2b02      	cmp	r3, #2
 80026f2:	d004      	beq.n	80026fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2280      	movs	r2, #128	; 0x80
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e00c      	b.n	8002718 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2205      	movs	r2, #5
 8002702:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681a      	ldr	r2, [r3, #0]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f022 0201 	bic.w	r2, r2, #1
 8002714:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002716:	2300      	movs	r3, #0
}
 8002718:	4618      	mov	r0, r3
 800271a:	370c      	adds	r7, #12
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr

08002724 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b086      	sub	sp, #24
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800272c:	2300      	movs	r3, #0
 800272e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002730:	4b92      	ldr	r3, [pc, #584]	; (800297c <HAL_DMA_IRQHandler+0x258>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4a92      	ldr	r2, [pc, #584]	; (8002980 <HAL_DMA_IRQHandler+0x25c>)
 8002736:	fba2 2303 	umull	r2, r3, r2, r3
 800273a:	0a9b      	lsrs	r3, r3, #10
 800273c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002742:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002744:	693b      	ldr	r3, [r7, #16]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274e:	2208      	movs	r2, #8
 8002750:	409a      	lsls	r2, r3
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	4013      	ands	r3, r2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d01a      	beq.n	8002790 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f003 0304 	and.w	r3, r3, #4
 8002764:	2b00      	cmp	r3, #0
 8002766:	d013      	beq.n	8002790 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0204 	bic.w	r2, r2, #4
 8002776:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800277c:	2208      	movs	r2, #8
 800277e:	409a      	lsls	r2, r3
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002788:	f043 0201 	orr.w	r2, r3, #1
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002794:	2201      	movs	r2, #1
 8002796:	409a      	lsls	r2, r3
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	4013      	ands	r3, r2
 800279c:	2b00      	cmp	r3, #0
 800279e:	d012      	beq.n	80027c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	695b      	ldr	r3, [r3, #20]
 80027a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00b      	beq.n	80027c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027b2:	2201      	movs	r2, #1
 80027b4:	409a      	lsls	r2, r3
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027be:	f043 0202 	orr.w	r2, r3, #2
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027ca:	2204      	movs	r2, #4
 80027cc:	409a      	lsls	r2, r3
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	4013      	ands	r3, r2
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d012      	beq.n	80027fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0302 	and.w	r3, r3, #2
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d00b      	beq.n	80027fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	2204      	movs	r2, #4
 80027ea:	409a      	lsls	r2, r3
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f4:	f043 0204 	orr.w	r2, r3, #4
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	2210      	movs	r2, #16
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	4013      	ands	r3, r2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d043      	beq.n	8002894 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0308 	and.w	r3, r3, #8
 8002816:	2b00      	cmp	r3, #0
 8002818:	d03c      	beq.n	8002894 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800281e:	2210      	movs	r2, #16
 8002820:	409a      	lsls	r2, r3
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d018      	beq.n	8002866 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283e:	2b00      	cmp	r3, #0
 8002840:	d108      	bne.n	8002854 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002846:	2b00      	cmp	r3, #0
 8002848:	d024      	beq.n	8002894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284e:	6878      	ldr	r0, [r7, #4]
 8002850:	4798      	blx	r3
 8002852:	e01f      	b.n	8002894 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002858:	2b00      	cmp	r3, #0
 800285a:	d01b      	beq.n	8002894 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	4798      	blx	r3
 8002864:	e016      	b.n	8002894 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002870:	2b00      	cmp	r3, #0
 8002872:	d107      	bne.n	8002884 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0208 	bic.w	r2, r2, #8
 8002882:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002898:	2220      	movs	r2, #32
 800289a:	409a      	lsls	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	4013      	ands	r3, r2
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	f000 808e 	beq.w	80029c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f003 0310 	and.w	r3, r3, #16
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f000 8086 	beq.w	80029c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028ba:	2220      	movs	r2, #32
 80028bc:	409a      	lsls	r2, r3
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	2b05      	cmp	r3, #5
 80028cc:	d136      	bne.n	800293c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681a      	ldr	r2, [r3, #0]
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f022 0216 	bic.w	r2, r2, #22
 80028dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	695a      	ldr	r2, [r3, #20]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80028ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d103      	bne.n	80028fe <HAL_DMA_IRQHandler+0x1da>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d007      	beq.n	800290e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f022 0208 	bic.w	r2, r2, #8
 800290c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002912:	223f      	movs	r2, #63	; 0x3f
 8002914:	409a      	lsls	r2, r3
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2200      	movs	r2, #0
 800291e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	2201      	movs	r2, #1
 8002926:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292e:	2b00      	cmp	r3, #0
 8002930:	d07d      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	4798      	blx	r3
        }
        return;
 800293a:	e078      	b.n	8002a2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d01c      	beq.n	8002984 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002954:	2b00      	cmp	r3, #0
 8002956:	d108      	bne.n	800296a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800295c:	2b00      	cmp	r3, #0
 800295e:	d030      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002964:	6878      	ldr	r0, [r7, #4]
 8002966:	4798      	blx	r3
 8002968:	e02b      	b.n	80029c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800296e:	2b00      	cmp	r3, #0
 8002970:	d027      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	4798      	blx	r3
 800297a:	e022      	b.n	80029c2 <HAL_DMA_IRQHandler+0x29e>
 800297c:	20000000 	.word	0x20000000
 8002980:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800298e:	2b00      	cmp	r3, #0
 8002990:	d10f      	bne.n	80029b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	681a      	ldr	r2, [r3, #0]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0210 	bic.w	r2, r2, #16
 80029a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2201      	movs	r2, #1
 80029ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029be:	6878      	ldr	r0, [r7, #4]
 80029c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d032      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029ce:	f003 0301 	and.w	r3, r3, #1
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d022      	beq.n	8002a1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2205      	movs	r2, #5
 80029da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	681a      	ldr	r2, [r3, #0]
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	f022 0201 	bic.w	r2, r2, #1
 80029ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	3301      	adds	r3, #1
 80029f2:	60bb      	str	r3, [r7, #8]
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d307      	bcc.n	8002a0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f2      	bne.n	80029ee <HAL_DMA_IRQHandler+0x2ca>
 8002a08:	e000      	b.n	8002a0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002a0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d005      	beq.n	8002a30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e000      	b.n	8002a30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002a2e:	bf00      	nop
    }
  }
}
 8002a30:	3718      	adds	r7, #24
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop

08002a38 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002a46:	b2db      	uxtb	r3, r3
}
 8002a48:	4618      	mov	r0, r3
 8002a4a:	370c      	adds	r7, #12
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a52:	4770      	bx	lr

08002a54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b085      	sub	sp, #20
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	3b10      	subs	r3, #16
 8002a64:	4a14      	ldr	r2, [pc, #80]	; (8002ab8 <DMA_CalcBaseAndBitshift+0x64>)
 8002a66:	fba2 2303 	umull	r2, r3, r2, r3
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002a6e:	4a13      	ldr	r2, [pc, #76]	; (8002abc <DMA_CalcBaseAndBitshift+0x68>)
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	461a      	mov	r2, r3
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b03      	cmp	r3, #3
 8002a80:	d909      	bls.n	8002a96 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a8a:	f023 0303 	bic.w	r3, r3, #3
 8002a8e:	1d1a      	adds	r2, r3, #4
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	659a      	str	r2, [r3, #88]	; 0x58
 8002a94:	e007      	b.n	8002aa6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002a9e:	f023 0303 	bic.w	r3, r3, #3
 8002aa2:	687a      	ldr	r2, [r7, #4]
 8002aa4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	aaaaaaab 	.word	0xaaaaaaab
 8002abc:	0800c9bc 	.word	0x0800c9bc

08002ac0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	b085      	sub	sp, #20
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d11f      	bne.n	8002b1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	2b03      	cmp	r3, #3
 8002ade:	d855      	bhi.n	8002b8c <DMA_CheckFifoParam+0xcc>
 8002ae0:	a201      	add	r2, pc, #4	; (adr r2, 8002ae8 <DMA_CheckFifoParam+0x28>)
 8002ae2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae6:	bf00      	nop
 8002ae8:	08002af9 	.word	0x08002af9
 8002aec:	08002b0b 	.word	0x08002b0b
 8002af0:	08002af9 	.word	0x08002af9
 8002af4:	08002b8d 	.word	0x08002b8d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002afc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d045      	beq.n	8002b90 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b08:	e042      	b.n	8002b90 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b0e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b12:	d13f      	bne.n	8002b94 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b18:	e03c      	b.n	8002b94 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002b22:	d121      	bne.n	8002b68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	2b03      	cmp	r3, #3
 8002b28:	d836      	bhi.n	8002b98 <DMA_CheckFifoParam+0xd8>
 8002b2a:	a201      	add	r2, pc, #4	; (adr r2, 8002b30 <DMA_CheckFifoParam+0x70>)
 8002b2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b30:	08002b41 	.word	0x08002b41
 8002b34:	08002b47 	.word	0x08002b47
 8002b38:	08002b41 	.word	0x08002b41
 8002b3c:	08002b59 	.word	0x08002b59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	73fb      	strb	r3, [r7, #15]
      break;
 8002b44:	e02f      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d024      	beq.n	8002b9c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b56:	e021      	b.n	8002b9c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b5c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002b60:	d11e      	bne.n	8002ba0 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002b66:	e01b      	b.n	8002ba0 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d902      	bls.n	8002b74 <DMA_CheckFifoParam+0xb4>
 8002b6e:	2b03      	cmp	r3, #3
 8002b70:	d003      	beq.n	8002b7a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002b72:	e018      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8002b74:	2301      	movs	r3, #1
 8002b76:	73fb      	strb	r3, [r7, #15]
      break;
 8002b78:	e015      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d00e      	beq.n	8002ba4 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	73fb      	strb	r3, [r7, #15]
      break;
 8002b8a:	e00b      	b.n	8002ba4 <DMA_CheckFifoParam+0xe4>
      break;
 8002b8c:	bf00      	nop
 8002b8e:	e00a      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b90:	bf00      	nop
 8002b92:	e008      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b94:	bf00      	nop
 8002b96:	e006      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b98:	bf00      	nop
 8002b9a:	e004      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8002b9c:	bf00      	nop
 8002b9e:	e002      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      break;   
 8002ba0:	bf00      	nop
 8002ba2:	e000      	b.n	8002ba6 <DMA_CheckFifoParam+0xe6>
      break;
 8002ba4:	bf00      	nop
    }
  } 
  
  return status; 
 8002ba6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3714      	adds	r7, #20
 8002bac:	46bd      	mov	sp, r7
 8002bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb2:	4770      	bx	lr

08002bb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b089      	sub	sp, #36	; 0x24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	61fb      	str	r3, [r7, #28]
 8002bce:	e16b      	b.n	8002ea8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	697a      	ldr	r2, [r7, #20]
 8002be0:	4013      	ands	r3, r2
 8002be2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002be4:	693a      	ldr	r2, [r7, #16]
 8002be6:	697b      	ldr	r3, [r7, #20]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	f040 815a 	bne.w	8002ea2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	2b01      	cmp	r3, #1
 8002bf4:	d00b      	beq.n	8002c0e <HAL_GPIO_Init+0x5a>
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d007      	beq.n	8002c0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002c02:	2b11      	cmp	r3, #17
 8002c04:	d003      	beq.n	8002c0e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	685b      	ldr	r3, [r3, #4]
 8002c0a:	2b12      	cmp	r3, #18
 8002c0c:	d130      	bne.n	8002c70 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0201 	and.w	r2, r3, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	68db      	ldr	r3, [r3, #12]
 8002c74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002c76:	69fb      	ldr	r3, [r7, #28]
 8002c78:	005b      	lsls	r3, r3, #1
 8002c7a:	2203      	movs	r2, #3
 8002c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c80:	43db      	mvns	r3, r3
 8002c82:	69ba      	ldr	r2, [r7, #24]
 8002c84:	4013      	ands	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	689a      	ldr	r2, [r3, #8]
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	005b      	lsls	r3, r3, #1
 8002c90:	fa02 f303 	lsl.w	r3, r2, r3
 8002c94:	69ba      	ldr	r2, [r7, #24]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d003      	beq.n	8002cb0 <HAL_GPIO_Init+0xfc>
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	2b12      	cmp	r3, #18
 8002cae:	d123      	bne.n	8002cf8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	08da      	lsrs	r2, r3, #3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3208      	adds	r2, #8
 8002cb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	f003 0307 	and.w	r3, r3, #7
 8002cc4:	009b      	lsls	r3, r3, #2
 8002cc6:	220f      	movs	r2, #15
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	691a      	ldr	r2, [r3, #16]
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	f003 0307 	and.w	r3, r3, #7
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	08da      	lsrs	r2, r3, #3
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	3208      	adds	r2, #8
 8002cf2:	69b9      	ldr	r1, [r7, #24]
 8002cf4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002cfe:	69fb      	ldr	r3, [r7, #28]
 8002d00:	005b      	lsls	r3, r3, #1
 8002d02:	2203      	movs	r2, #3
 8002d04:	fa02 f303 	lsl.w	r3, r2, r3
 8002d08:	43db      	mvns	r3, r3
 8002d0a:	69ba      	ldr	r2, [r7, #24]
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	685b      	ldr	r3, [r3, #4]
 8002d14:	f003 0203 	and.w	r2, r3, #3
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 80b4 	beq.w	8002ea2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	60fb      	str	r3, [r7, #12]
 8002d3e:	4b5f      	ldr	r3, [pc, #380]	; (8002ebc <HAL_GPIO_Init+0x308>)
 8002d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d42:	4a5e      	ldr	r2, [pc, #376]	; (8002ebc <HAL_GPIO_Init+0x308>)
 8002d44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d48:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4a:	4b5c      	ldr	r3, [pc, #368]	; (8002ebc <HAL_GPIO_Init+0x308>)
 8002d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d52:	60fb      	str	r3, [r7, #12]
 8002d54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d56:	4a5a      	ldr	r2, [pc, #360]	; (8002ec0 <HAL_GPIO_Init+0x30c>)
 8002d58:	69fb      	ldr	r3, [r7, #28]
 8002d5a:	089b      	lsrs	r3, r3, #2
 8002d5c:	3302      	adds	r3, #2
 8002d5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	f003 0303 	and.w	r3, r3, #3
 8002d6a:	009b      	lsls	r3, r3, #2
 8002d6c:	220f      	movs	r2, #15
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43db      	mvns	r3, r3
 8002d74:	69ba      	ldr	r2, [r7, #24]
 8002d76:	4013      	ands	r3, r2
 8002d78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a51      	ldr	r2, [pc, #324]	; (8002ec4 <HAL_GPIO_Init+0x310>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d02b      	beq.n	8002dda <HAL_GPIO_Init+0x226>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a50      	ldr	r2, [pc, #320]	; (8002ec8 <HAL_GPIO_Init+0x314>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d025      	beq.n	8002dd6 <HAL_GPIO_Init+0x222>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a4f      	ldr	r2, [pc, #316]	; (8002ecc <HAL_GPIO_Init+0x318>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d01f      	beq.n	8002dd2 <HAL_GPIO_Init+0x21e>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a4e      	ldr	r2, [pc, #312]	; (8002ed0 <HAL_GPIO_Init+0x31c>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d019      	beq.n	8002dce <HAL_GPIO_Init+0x21a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a4d      	ldr	r2, [pc, #308]	; (8002ed4 <HAL_GPIO_Init+0x320>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d013      	beq.n	8002dca <HAL_GPIO_Init+0x216>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a4c      	ldr	r2, [pc, #304]	; (8002ed8 <HAL_GPIO_Init+0x324>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d00d      	beq.n	8002dc6 <HAL_GPIO_Init+0x212>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4b      	ldr	r2, [pc, #300]	; (8002edc <HAL_GPIO_Init+0x328>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d007      	beq.n	8002dc2 <HAL_GPIO_Init+0x20e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	4a4a      	ldr	r2, [pc, #296]	; (8002ee0 <HAL_GPIO_Init+0x32c>)
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d101      	bne.n	8002dbe <HAL_GPIO_Init+0x20a>
 8002dba:	2307      	movs	r3, #7
 8002dbc:	e00e      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dbe:	2308      	movs	r3, #8
 8002dc0:	e00c      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e00a      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e008      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x228>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f002 0203 	and.w	r2, r2, #3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002dec:	4934      	ldr	r1, [pc, #208]	; (8002ec0 <HAL_GPIO_Init+0x30c>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002dfa:	4b3a      	ldr	r3, [pc, #232]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e1e:	4a31      	ldr	r2, [pc, #196]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002e24:	4b2f      	ldr	r3, [pc, #188]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e48:	4a26      	ldr	r2, [pc, #152]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e4e:	4b25      	ldr	r3, [pc, #148]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e78:	4b1a      	ldr	r3, [pc, #104]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e7a:	68db      	ldr	r3, [r3, #12]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e9c:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_GPIO_Init+0x330>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	f67f ae90 	bls.w	8002bd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	3724      	adds	r7, #36	; 0x24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	40023800 	.word	0x40023800
 8002ec0:	40013800 	.word	0x40013800
 8002ec4:	40020000 	.word	0x40020000
 8002ec8:	40020400 	.word	0x40020400
 8002ecc:	40020800 	.word	0x40020800
 8002ed0:	40020c00 	.word	0x40020c00
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	40021400 	.word	0x40021400
 8002edc:	40021800 	.word	0x40021800
 8002ee0:	40021c00 	.word	0x40021c00
 8002ee4:	40013c00 	.word	0x40013c00

08002ee8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
 8002ef0:	460b      	mov	r3, r1
 8002ef2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	691a      	ldr	r2, [r3, #16]
 8002ef8:	887b      	ldrh	r3, [r7, #2]
 8002efa:	4013      	ands	r3, r2
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d002      	beq.n	8002f06 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f00:	2301      	movs	r3, #1
 8002f02:	73fb      	strb	r3, [r7, #15]
 8002f04:	e001      	b.n	8002f0a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f06:	2300      	movs	r3, #0
 8002f08:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3714      	adds	r7, #20
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr

08002f18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f18:	b480      	push	{r7}
 8002f1a:	b083      	sub	sp, #12
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	460b      	mov	r3, r1
 8002f22:	807b      	strh	r3, [r7, #2]
 8002f24:	4613      	mov	r3, r2
 8002f26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f28:	787b      	ldrb	r3, [r7, #1]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f2e:	887a      	ldrh	r2, [r7, #2]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f34:	e003      	b.n	8002f3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f36:	887b      	ldrh	r3, [r7, #2]
 8002f38:	041a      	lsls	r2, r3, #16
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	619a      	str	r2, [r3, #24]
}
 8002f3e:	bf00      	nop
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr

08002f4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f4a:	b480      	push	{r7}
 8002f4c:	b083      	sub	sp, #12
 8002f4e:	af00      	add	r7, sp, #0
 8002f50:	6078      	str	r0, [r7, #4]
 8002f52:	460b      	mov	r3, r1
 8002f54:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	695a      	ldr	r2, [r3, #20]
 8002f5a:	887b      	ldrh	r3, [r7, #2]
 8002f5c:	401a      	ands	r2, r3
 8002f5e:	887b      	ldrh	r3, [r7, #2]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d104      	bne.n	8002f6e <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002f64:	887b      	ldrh	r3, [r7, #2]
 8002f66:	041a      	lsls	r2, r3, #16
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002f6c:	e002      	b.n	8002f74 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002f6e:	887a      	ldrh	r2, [r7, #2]
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	619a      	str	r2, [r3, #24]
}
 8002f74:	bf00      	nop
 8002f76:	370c      	adds	r7, #12
 8002f78:	46bd      	mov	sp, r7
 8002f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7e:	4770      	bx	lr

08002f80 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f8a:	4b08      	ldr	r3, [pc, #32]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f8c:	695a      	ldr	r2, [r3, #20]
 8002f8e:	88fb      	ldrh	r3, [r7, #6]
 8002f90:	4013      	ands	r3, r2
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d006      	beq.n	8002fa4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f96:	4a05      	ldr	r2, [pc, #20]	; (8002fac <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	88fb      	ldrh	r3, [r7, #6]
 8002f9a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f9c:	88fb      	ldrh	r3, [r7, #6]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe f9a0 	bl	80012e4 <HAL_GPIO_EXTI_Callback>
  }
}
 8002fa4:	bf00      	nop
 8002fa6:	3708      	adds	r7, #8
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}
 8002fac:	40013c00 	.word	0x40013c00

08002fb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b084      	sub	sp, #16
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d101      	bne.n	8002fc2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e11f      	b.n	8003202 <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d106      	bne.n	8002fdc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f7fe fa3a 	bl	8001450 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2224      	movs	r2, #36	; 0x24
 8002fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f022 0201 	bic.w	r2, r2, #1
 8002ff2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003012:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003014:	f002 ffea 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 8003018:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	4a7b      	ldr	r2, [pc, #492]	; (800320c <HAL_I2C_Init+0x25c>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d807      	bhi.n	8003034 <HAL_I2C_Init+0x84>
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	4a7a      	ldr	r2, [pc, #488]	; (8003210 <HAL_I2C_Init+0x260>)
 8003028:	4293      	cmp	r3, r2
 800302a:	bf94      	ite	ls
 800302c:	2301      	movls	r3, #1
 800302e:	2300      	movhi	r3, #0
 8003030:	b2db      	uxtb	r3, r3
 8003032:	e006      	b.n	8003042 <HAL_I2C_Init+0x92>
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	4a77      	ldr	r2, [pc, #476]	; (8003214 <HAL_I2C_Init+0x264>)
 8003038:	4293      	cmp	r3, r2
 800303a:	bf94      	ite	ls
 800303c:	2301      	movls	r3, #1
 800303e:	2300      	movhi	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	2b00      	cmp	r3, #0
 8003044:	d001      	beq.n	800304a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e0db      	b.n	8003202 <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	4a72      	ldr	r2, [pc, #456]	; (8003218 <HAL_I2C_Init+0x268>)
 800304e:	fba2 2303 	umull	r2, r3, r2, r3
 8003052:	0c9b      	lsrs	r3, r3, #18
 8003054:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	68ba      	ldr	r2, [r7, #8]
 8003066:	430a      	orrs	r2, r1
 8003068:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6a1b      	ldr	r3, [r3, #32]
 8003070:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	4a64      	ldr	r2, [pc, #400]	; (800320c <HAL_I2C_Init+0x25c>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d802      	bhi.n	8003084 <HAL_I2C_Init+0xd4>
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	3301      	adds	r3, #1
 8003082:	e009      	b.n	8003098 <HAL_I2C_Init+0xe8>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800308a:	fb02 f303 	mul.w	r3, r2, r3
 800308e:	4a63      	ldr	r2, [pc, #396]	; (800321c <HAL_I2C_Init+0x26c>)
 8003090:	fba2 2303 	umull	r2, r3, r2, r3
 8003094:	099b      	lsrs	r3, r3, #6
 8003096:	3301      	adds	r3, #1
 8003098:	687a      	ldr	r2, [r7, #4]
 800309a:	6812      	ldr	r2, [r2, #0]
 800309c:	430b      	orrs	r3, r1
 800309e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	69db      	ldr	r3, [r3, #28]
 80030a6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80030aa:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	4956      	ldr	r1, [pc, #344]	; (800320c <HAL_I2C_Init+0x25c>)
 80030b4:	428b      	cmp	r3, r1
 80030b6:	d80d      	bhi.n	80030d4 <HAL_I2C_Init+0x124>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	1e59      	subs	r1, r3, #1
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	005b      	lsls	r3, r3, #1
 80030c2:	fbb1 f3f3 	udiv	r3, r1, r3
 80030c6:	3301      	adds	r3, #1
 80030c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030cc:	2b04      	cmp	r3, #4
 80030ce:	bf38      	it	cc
 80030d0:	2304      	movcc	r3, #4
 80030d2:	e04f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	689b      	ldr	r3, [r3, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d111      	bne.n	8003100 <HAL_I2C_Init+0x150>
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	1e58      	subs	r0, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6859      	ldr	r1, [r3, #4]
 80030e4:	460b      	mov	r3, r1
 80030e6:	005b      	lsls	r3, r3, #1
 80030e8:	440b      	add	r3, r1
 80030ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ee:	3301      	adds	r3, #1
 80030f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	bf0c      	ite	eq
 80030f8:	2301      	moveq	r3, #1
 80030fa:	2300      	movne	r3, #0
 80030fc:	b2db      	uxtb	r3, r3
 80030fe:	e012      	b.n	8003126 <HAL_I2C_Init+0x176>
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	1e58      	subs	r0, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6859      	ldr	r1, [r3, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	009b      	lsls	r3, r3, #2
 800310c:	440b      	add	r3, r1
 800310e:	0099      	lsls	r1, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	fbb0 f3f3 	udiv	r3, r0, r3
 8003116:	3301      	adds	r3, #1
 8003118:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800311c:	2b00      	cmp	r3, #0
 800311e:	bf0c      	ite	eq
 8003120:	2301      	moveq	r3, #1
 8003122:	2300      	movne	r3, #0
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d001      	beq.n	800312e <HAL_I2C_Init+0x17e>
 800312a:	2301      	movs	r3, #1
 800312c:	e022      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10e      	bne.n	8003154 <HAL_I2C_Init+0x1a4>
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1e58      	subs	r0, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6859      	ldr	r1, [r3, #4]
 800313e:	460b      	mov	r3, r1
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	440b      	add	r3, r1
 8003144:	fbb0 f3f3 	udiv	r3, r0, r3
 8003148:	3301      	adds	r3, #1
 800314a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800314e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003152:	e00f      	b.n	8003174 <HAL_I2C_Init+0x1c4>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	1e58      	subs	r0, r3, #1
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6859      	ldr	r1, [r3, #4]
 800315c:	460b      	mov	r3, r1
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	0099      	lsls	r1, r3, #2
 8003164:	440b      	add	r3, r1
 8003166:	fbb0 f3f3 	udiv	r3, r0, r3
 800316a:	3301      	adds	r3, #1
 800316c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003170:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	6809      	ldr	r1, [r1, #0]
 8003178:	4313      	orrs	r3, r2
 800317a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	69da      	ldr	r2, [r3, #28]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	431a      	orrs	r2, r3
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	430a      	orrs	r2, r1
 8003196:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	689b      	ldr	r3, [r3, #8]
 800319e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80031a2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	6911      	ldr	r1, [r2, #16]
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	68d2      	ldr	r2, [r2, #12]
 80031ae:	4311      	orrs	r1, r2
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	6812      	ldr	r2, [r2, #0]
 80031b4:	430b      	orrs	r3, r1
 80031b6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	68db      	ldr	r3, [r3, #12]
 80031be:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	695a      	ldr	r2, [r3, #20]
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	430a      	orrs	r2, r1
 80031d2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f042 0201 	orr.w	r2, r2, #1
 80031e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2220      	movs	r2, #32
 80031ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2200      	movs	r2, #0
 80031f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}
 800320a:	bf00      	nop
 800320c:	000186a0 	.word	0x000186a0
 8003210:	001e847f 	.word	0x001e847f
 8003214:	003d08ff 	.word	0x003d08ff
 8003218:	431bde83 	.word	0x431bde83
 800321c:	10624dd3 	.word	0x10624dd3

08003220 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b088      	sub	sp, #32
 8003224:	af02      	add	r7, sp, #8
 8003226:	60f8      	str	r0, [r7, #12]
 8003228:	607a      	str	r2, [r7, #4]
 800322a:	461a      	mov	r2, r3
 800322c:	460b      	mov	r3, r1
 800322e:	817b      	strh	r3, [r7, #10]
 8003230:	4613      	mov	r3, r2
 8003232:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003234:	f7fe fe04 	bl	8001e40 <HAL_GetTick>
 8003238:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003240:	b2db      	uxtb	r3, r3
 8003242:	2b20      	cmp	r3, #32
 8003244:	f040 80e0 	bne.w	8003408 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003248:	697b      	ldr	r3, [r7, #20]
 800324a:	9300      	str	r3, [sp, #0]
 800324c:	2319      	movs	r3, #25
 800324e:	2201      	movs	r2, #1
 8003250:	4970      	ldr	r1, [pc, #448]	; (8003414 <HAL_I2C_Master_Transmit+0x1f4>)
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f001 fc41 	bl	8004ada <I2C_WaitOnFlagUntilTimeout>
 8003258:	4603      	mov	r3, r0
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800325e:	2302      	movs	r3, #2
 8003260:	e0d3      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003268:	2b01      	cmp	r3, #1
 800326a:	d101      	bne.n	8003270 <HAL_I2C_Master_Transmit+0x50>
 800326c:	2302      	movs	r3, #2
 800326e:	e0cc      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0301 	and.w	r3, r3, #1
 8003282:	2b01      	cmp	r3, #1
 8003284:	d007      	beq.n	8003296 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f042 0201 	orr.w	r2, r2, #1
 8003294:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80032a4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2221      	movs	r2, #33	; 0x21
 80032aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	2210      	movs	r2, #16
 80032b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	2200      	movs	r2, #0
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	687a      	ldr	r2, [r7, #4]
 80032c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	893a      	ldrh	r2, [r7, #8]
 80032c6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	4a50      	ldr	r2, [pc, #320]	; (8003418 <HAL_I2C_Master_Transmit+0x1f8>)
 80032d6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032d8:	8979      	ldrh	r1, [r7, #10]
 80032da:	697b      	ldr	r3, [r7, #20]
 80032dc:	6a3a      	ldr	r2, [r7, #32]
 80032de:	68f8      	ldr	r0, [r7, #12]
 80032e0:	f001 fafa 	bl	80048d8 <I2C_MasterRequestWrite>
 80032e4:	4603      	mov	r3, r0
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d001      	beq.n	80032ee <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ea:	2301      	movs	r3, #1
 80032ec:	e08d      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	695b      	ldr	r3, [r3, #20]
 80032f8:	613b      	str	r3, [r7, #16]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	699b      	ldr	r3, [r3, #24]
 8003300:	613b      	str	r3, [r7, #16]
 8003302:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003304:	e066      	b.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	6a39      	ldr	r1, [r7, #32]
 800330a:	68f8      	ldr	r0, [r7, #12]
 800330c:	f001 fcbb 	bl	8004c86 <I2C_WaitOnTXEFlagUntilTimeout>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d00d      	beq.n	8003332 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800331a:	2b04      	cmp	r3, #4
 800331c:	d107      	bne.n	800332e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	681a      	ldr	r2, [r3, #0]
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800332c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800332e:	2301      	movs	r3, #1
 8003330:	e06b      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003336:	781a      	ldrb	r2, [r3, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003342:	1c5a      	adds	r2, r3, #1
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800334c:	b29b      	uxth	r3, r3
 800334e:	3b01      	subs	r3, #1
 8003350:	b29a      	uxth	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800335a:	3b01      	subs	r3, #1
 800335c:	b29a      	uxth	r2, r3
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	695b      	ldr	r3, [r3, #20]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d11b      	bne.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003374:	2b00      	cmp	r3, #0
 8003376:	d017      	beq.n	80033a8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800337c:	781a      	ldrb	r2, [r3, #0]
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003388:	1c5a      	adds	r2, r3, #1
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003392:	b29b      	uxth	r3, r3
 8003394:	3b01      	subs	r3, #1
 8003396:	b29a      	uxth	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033a0:	3b01      	subs	r3, #1
 80033a2:	b29a      	uxth	r2, r3
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033a8:	697a      	ldr	r2, [r7, #20]
 80033aa:	6a39      	ldr	r1, [r7, #32]
 80033ac:	68f8      	ldr	r0, [r7, #12]
 80033ae:	f001 fcab 	bl	8004d08 <I2C_WaitOnBTFFlagUntilTimeout>
 80033b2:	4603      	mov	r3, r0
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d00d      	beq.n	80033d4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033bc:	2b04      	cmp	r3, #4
 80033be:	d107      	bne.n	80033d0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033d0:	2301      	movs	r3, #1
 80033d2:	e01a      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d194      	bne.n	8003306 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80033ea:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	2200      	movs	r2, #0
 80033f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2200      	movs	r2, #0
 8003400:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003404:	2300      	movs	r3, #0
 8003406:	e000      	b.n	800340a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003408:	2302      	movs	r3, #2
  }
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	00100002 	.word	0x00100002
 8003418:	ffff0000 	.word	0xffff0000

0800341c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800341c:	b580      	push	{r7, lr}
 800341e:	b088      	sub	sp, #32
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003424:	2300      	movs	r3, #0
 8003426:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003434:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800343c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003444:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003446:	7bfb      	ldrb	r3, [r7, #15]
 8003448:	2b10      	cmp	r3, #16
 800344a:	d003      	beq.n	8003454 <HAL_I2C_EV_IRQHandler+0x38>
 800344c:	7bfb      	ldrb	r3, [r7, #15]
 800344e:	2b40      	cmp	r3, #64	; 0x40
 8003450:	f040 80b6 	bne.w	80035c0 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	699b      	ldr	r3, [r3, #24]
 800345a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003464:	69fb      	ldr	r3, [r7, #28]
 8003466:	f003 0301 	and.w	r3, r3, #1
 800346a:	2b00      	cmp	r3, #0
 800346c:	d10d      	bne.n	800348a <HAL_I2C_EV_IRQHandler+0x6e>
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003474:	d003      	beq.n	800347e <HAL_I2C_EV_IRQHandler+0x62>
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800347c:	d101      	bne.n	8003482 <HAL_I2C_EV_IRQHandler+0x66>
 800347e:	2301      	movs	r3, #1
 8003480:	e000      	b.n	8003484 <HAL_I2C_EV_IRQHandler+0x68>
 8003482:	2300      	movs	r3, #0
 8003484:	2b01      	cmp	r3, #1
 8003486:	f000 8127 	beq.w	80036d8 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d00c      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0x92>
 8003494:	697b      	ldr	r3, [r7, #20]
 8003496:	0a5b      	lsrs	r3, r3, #9
 8003498:	f003 0301 	and.w	r3, r3, #1
 800349c:	2b00      	cmp	r3, #0
 800349e:	d006      	beq.n	80034ae <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f001 fca1 	bl	8004de8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fc75 	bl	8003d96 <I2C_Master_SB>
 80034ac:	e087      	b.n	80035be <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	08db      	lsrs	r3, r3, #3
 80034b2:	f003 0301 	and.w	r3, r3, #1
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d009      	beq.n	80034ce <HAL_I2C_EV_IRQHandler+0xb2>
 80034ba:	697b      	ldr	r3, [r7, #20]
 80034bc:	0a5b      	lsrs	r3, r3, #9
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d003      	beq.n	80034ce <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f000 fceb 	bl	8003ea2 <I2C_Master_ADD10>
 80034cc:	e077      	b.n	80035be <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	085b      	lsrs	r3, r3, #1
 80034d2:	f003 0301 	and.w	r3, r3, #1
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d009      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0xd2>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	0a5b      	lsrs	r3, r3, #9
 80034de:	f003 0301 	and.w	r3, r3, #1
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fd05 	bl	8003ef6 <I2C_Master_ADDR>
 80034ec:	e067      	b.n	80035be <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	089b      	lsrs	r3, r3, #2
 80034f2:	f003 0301 	and.w	r3, r3, #1
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d030      	beq.n	800355c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003504:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003508:	f000 80e8 	beq.w	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	09db      	lsrs	r3, r3, #7
 8003510:	f003 0301 	and.w	r3, r3, #1
 8003514:	2b00      	cmp	r3, #0
 8003516:	d00f      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x11c>
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	0a9b      	lsrs	r3, r3, #10
 800351c:	f003 0301 	and.w	r3, r3, #1
 8003520:	2b00      	cmp	r3, #0
 8003522:	d009      	beq.n	8003538 <HAL_I2C_EV_IRQHandler+0x11c>
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	089b      	lsrs	r3, r3, #2
 8003528:	f003 0301 	and.w	r3, r3, #1
 800352c:	2b00      	cmp	r3, #0
 800352e:	d103      	bne.n	8003538 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003530:	6878      	ldr	r0, [r7, #4]
 8003532:	f000 f941 	bl	80037b8 <I2C_MasterTransmit_TXE>
 8003536:	e042      	b.n	80035be <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003538:	69fb      	ldr	r3, [r7, #28]
 800353a:	089b      	lsrs	r3, r3, #2
 800353c:	f003 0301 	and.w	r3, r3, #1
 8003540:	2b00      	cmp	r3, #0
 8003542:	f000 80cb 	beq.w	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	0a5b      	lsrs	r3, r3, #9
 800354a:	f003 0301 	and.w	r3, r3, #1
 800354e:	2b00      	cmp	r3, #0
 8003550:	f000 80c4 	beq.w	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003554:	6878      	ldr	r0, [r7, #4]
 8003556:	f000 f9cb 	bl	80038f0 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800355a:	e0bf      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003566:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356a:	f000 80b7 	beq.w	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800356e:	69fb      	ldr	r3, [r7, #28]
 8003570:	099b      	lsrs	r3, r3, #6
 8003572:	f003 0301 	and.w	r3, r3, #1
 8003576:	2b00      	cmp	r3, #0
 8003578:	d00f      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x17e>
 800357a:	697b      	ldr	r3, [r7, #20]
 800357c:	0a9b      	lsrs	r3, r3, #10
 800357e:	f003 0301 	and.w	r3, r3, #1
 8003582:	2b00      	cmp	r3, #0
 8003584:	d009      	beq.n	800359a <HAL_I2C_EV_IRQHandler+0x17e>
 8003586:	69fb      	ldr	r3, [r7, #28]
 8003588:	089b      	lsrs	r3, r3, #2
 800358a:	f003 0301 	and.w	r3, r3, #1
 800358e:	2b00      	cmp	r3, #0
 8003590:	d103      	bne.n	800359a <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa93 	bl	8003abe <I2C_MasterReceive_RXNE>
 8003598:	e011      	b.n	80035be <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	089b      	lsrs	r3, r3, #2
 800359e:	f003 0301 	and.w	r3, r3, #1
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	f000 809a 	beq.w	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	0a5b      	lsrs	r3, r3, #9
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	f000 8093 	beq.w	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f000 fb03 	bl	8003bc2 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035bc:	e08e      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
 80035be:	e08d      	b.n	80036dc <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d004      	beq.n	80035d2 <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	61fb      	str	r3, [r7, #28]
 80035d0:	e007      	b.n	80035e2 <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	699b      	ldr	r3, [r3, #24]
 80035d8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	695b      	ldr	r3, [r3, #20]
 80035e0:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	085b      	lsrs	r3, r3, #1
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d012      	beq.n	8003614 <HAL_I2C_EV_IRQHandler+0x1f8>
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	0a5b      	lsrs	r3, r3, #9
 80035f2:	f003 0301 	and.w	r3, r3, #1
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00c      	beq.n	8003614 <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d003      	beq.n	800360a <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	699b      	ldr	r3, [r3, #24]
 8003608:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800360a:	69b9      	ldr	r1, [r7, #24]
 800360c:	6878      	ldr	r0, [r7, #4]
 800360e:	f000 fec1 	bl	8004394 <I2C_Slave_ADDR>
 8003612:	e066      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003614:	69fb      	ldr	r3, [r7, #28]
 8003616:	091b      	lsrs	r3, r3, #4
 8003618:	f003 0301 	and.w	r3, r3, #1
 800361c:	2b00      	cmp	r3, #0
 800361e:	d009      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0x218>
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	0a5b      	lsrs	r3, r3, #9
 8003624:	f003 0301 	and.w	r3, r3, #1
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 800362c:	6878      	ldr	r0, [r7, #4]
 800362e:	f000 fef5 	bl	800441c <I2C_Slave_STOPF>
 8003632:	e056      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003634:	7bbb      	ldrb	r3, [r7, #14]
 8003636:	2b21      	cmp	r3, #33	; 0x21
 8003638:	d002      	beq.n	8003640 <HAL_I2C_EV_IRQHandler+0x224>
 800363a:	7bbb      	ldrb	r3, [r7, #14]
 800363c:	2b29      	cmp	r3, #41	; 0x29
 800363e:	d125      	bne.n	800368c <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	09db      	lsrs	r3, r3, #7
 8003644:	f003 0301 	and.w	r3, r3, #1
 8003648:	2b00      	cmp	r3, #0
 800364a:	d00f      	beq.n	800366c <HAL_I2C_EV_IRQHandler+0x250>
 800364c:	697b      	ldr	r3, [r7, #20]
 800364e:	0a9b      	lsrs	r3, r3, #10
 8003650:	f003 0301 	and.w	r3, r3, #1
 8003654:	2b00      	cmp	r3, #0
 8003656:	d009      	beq.n	800366c <HAL_I2C_EV_IRQHandler+0x250>
 8003658:	69fb      	ldr	r3, [r7, #28]
 800365a:	089b      	lsrs	r3, r3, #2
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b00      	cmp	r3, #0
 8003662:	d103      	bne.n	800366c <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f000 fdd7 	bl	8004218 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800366a:	e039      	b.n	80036e0 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800366c:	69fb      	ldr	r3, [r7, #28]
 800366e:	089b      	lsrs	r3, r3, #2
 8003670:	f003 0301 	and.w	r3, r3, #1
 8003674:	2b00      	cmp	r3, #0
 8003676:	d033      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	0a5b      	lsrs	r3, r3, #9
 800367c:	f003 0301 	and.w	r3, r3, #1
 8003680:	2b00      	cmp	r3, #0
 8003682:	d02d      	beq.n	80036e0 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003684:	6878      	ldr	r0, [r7, #4]
 8003686:	f000 fe04 	bl	8004292 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800368a:	e029      	b.n	80036e0 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800368c:	69fb      	ldr	r3, [r7, #28]
 800368e:	099b      	lsrs	r3, r3, #6
 8003690:	f003 0301 	and.w	r3, r3, #1
 8003694:	2b00      	cmp	r3, #0
 8003696:	d00f      	beq.n	80036b8 <HAL_I2C_EV_IRQHandler+0x29c>
 8003698:	697b      	ldr	r3, [r7, #20]
 800369a:	0a9b      	lsrs	r3, r3, #10
 800369c:	f003 0301 	and.w	r3, r3, #1
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d009      	beq.n	80036b8 <HAL_I2C_EV_IRQHandler+0x29c>
 80036a4:	69fb      	ldr	r3, [r7, #28]
 80036a6:	089b      	lsrs	r3, r3, #2
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d103      	bne.n	80036b8 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80036b0:	6878      	ldr	r0, [r7, #4]
 80036b2:	f000 fe0f 	bl	80042d4 <I2C_SlaveReceive_RXNE>
 80036b6:	e014      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	089b      	lsrs	r3, r3, #2
 80036bc:	f003 0301 	and.w	r3, r3, #1
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d00e      	beq.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
 80036c4:	697b      	ldr	r3, [r7, #20]
 80036c6:	0a5b      	lsrs	r3, r3, #9
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d008      	beq.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f000 fe3d 	bl	8004350 <I2C_SlaveReceive_BTF>
 80036d6:	e004      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 80036d8:	bf00      	nop
 80036da:	e002      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036dc:	bf00      	nop
 80036de:	e000      	b.n	80036e2 <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80036e0:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80036e2:	3720      	adds	r7, #32
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}

080036e8 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80036f0:	bf00      	nop
 80036f2:	370c      	adds	r7, #12
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr

080036fc <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036fc:	b480      	push	{r7}
 80036fe:	b083      	sub	sp, #12
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003704:	bf00      	nop
 8003706:	370c      	adds	r7, #12
 8003708:	46bd      	mov	sp, r7
 800370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370e:	4770      	bx	lr

08003710 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003710:	b480      	push	{r7}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr

08003724 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800372c:	bf00      	nop
 800372e:	370c      	adds	r7, #12
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr

08003738 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	70fb      	strb	r3, [r7, #3]
 8003744:	4613      	mov	r3, r2
 8003746:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003748:	bf00      	nop
 800374a:	370c      	adds	r7, #12
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003754:	b480      	push	{r7}
 8003756:	b083      	sub	sp, #12
 8003758:	af00      	add	r7, sp, #0
 800375a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800375c:	bf00      	nop
 800375e:	370c      	adds	r7, #12
 8003760:	46bd      	mov	sp, r7
 8003762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003766:	4770      	bx	lr

08003768 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003768:	b480      	push	{r7}
 800376a:	b083      	sub	sp, #12
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003770:	bf00      	nop
 8003772:	370c      	adds	r7, #12
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800377c:	b480      	push	{r7}
 800377e:	b083      	sub	sp, #12
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003784:	bf00      	nop
 8003786:	370c      	adds	r7, #12
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr

08003790 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003790:	b480      	push	{r7}
 8003792:	b083      	sub	sp, #12
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003798:	bf00      	nop
 800379a:	370c      	adds	r7, #12
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b084      	sub	sp, #16
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037c6:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037ce:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d150      	bne.n	8003880 <I2C_MasterTransmit_TXE+0xc8>
 80037de:	7bfb      	ldrb	r3, [r7, #15]
 80037e0:	2b21      	cmp	r3, #33	; 0x21
 80037e2:	d14d      	bne.n	8003880 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	2b08      	cmp	r3, #8
 80037e8:	d01d      	beq.n	8003826 <I2C_MasterTransmit_TXE+0x6e>
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	2b20      	cmp	r3, #32
 80037ee:	d01a      	beq.n	8003826 <I2C_MasterTransmit_TXE+0x6e>
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f6:	d016      	beq.n	8003826 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	685a      	ldr	r2, [r3, #4]
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003806:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2211      	movs	r2, #17
 800380c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2220      	movs	r2, #32
 800381a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7ff ff62 	bl	80036e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003824:	e060      	b.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003834:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003844:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2200      	movs	r2, #0
 800384a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2220      	movs	r2, #32
 8003850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800385a:	b2db      	uxtb	r3, r3
 800385c:	2b40      	cmp	r3, #64	; 0x40
 800385e:	d107      	bne.n	8003870 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff7d 	bl	8003768 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800386e:	e03b      	b.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f7ff ff35 	bl	80036e8 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800387e:	e033      	b.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003880:	7bfb      	ldrb	r3, [r7, #15]
 8003882:	2b21      	cmp	r3, #33	; 0x21
 8003884:	d005      	beq.n	8003892 <I2C_MasterTransmit_TXE+0xda>
 8003886:	7bbb      	ldrb	r3, [r7, #14]
 8003888:	2b40      	cmp	r3, #64	; 0x40
 800388a:	d12d      	bne.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800388c:	7bfb      	ldrb	r3, [r7, #15]
 800388e:	2b22      	cmp	r3, #34	; 0x22
 8003890:	d12a      	bne.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	d108      	bne.n	80038ae <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	685a      	ldr	r2, [r3, #4]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038aa:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80038ac:	e01c      	b.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80038b4:	b2db      	uxtb	r3, r3
 80038b6:	2b40      	cmp	r3, #64	; 0x40
 80038b8:	d103      	bne.n	80038c2 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f898 	bl	80039f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80038c0:	e012      	b.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038c6:	781a      	ldrb	r2, [r3, #0]
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80038e6:	e7ff      	b.n	80038e8 <I2C_MasterTransmit_TXE+0x130>
 80038e8:	bf00      	nop
 80038ea:	3710      	adds	r7, #16
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003904:	b2db      	uxtb	r3, r3
 8003906:	2b21      	cmp	r3, #33	; 0x21
 8003908:	d165      	bne.n	80039d6 <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	2b00      	cmp	r3, #0
 8003912:	d012      	beq.n	800393a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003918:	781a      	ldrb	r2, [r3, #0]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003924:	1c5a      	adds	r2, r3, #1
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800392e:	b29b      	uxth	r3, r3
 8003930:	3b01      	subs	r3, #1
 8003932:	b29a      	uxth	r2, r3
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003938:	e056      	b.n	80039e8 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b08      	cmp	r3, #8
 800393e:	d01d      	beq.n	800397c <I2C_MasterTransmit_BTF+0x8c>
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2b20      	cmp	r3, #32
 8003944:	d01a      	beq.n	800397c <I2C_MasterTransmit_BTF+0x8c>
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800394c:	d016      	beq.n	800397c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800395c:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2211      	movs	r2, #17
 8003962:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2200      	movs	r2, #0
 8003968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2220      	movs	r2, #32
 8003970:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff feb7 	bl	80036e8 <HAL_I2C_MasterTxCpltCallback>
}
 800397a:	e035      	b.n	80039e8 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	685a      	ldr	r2, [r3, #4]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800398a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800399a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2200      	movs	r2, #0
 80039a0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	2220      	movs	r2, #32
 80039a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b40      	cmp	r3, #64	; 0x40
 80039b4:	d107      	bne.n	80039c6 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2200      	movs	r2, #0
 80039ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff fed2 	bl	8003768 <HAL_I2C_MemTxCpltCallback>
}
 80039c4:	e010      	b.n	80039e8 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f7ff fe8a 	bl	80036e8 <HAL_I2C_MasterTxCpltCallback>
}
 80039d4:	e008      	b.n	80039e8 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	2b40      	cmp	r3, #64	; 0x40
 80039e0:	d102      	bne.n	80039e8 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 f804 	bl	80039f0 <I2C_MemoryTransmit_TXE_BTF>
}
 80039e8:	bf00      	nop
 80039ea:	3710      	adds	r7, #16
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}

080039f0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b083      	sub	sp, #12
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d11d      	bne.n	8003a3c <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	d10b      	bne.n	8003a20 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a0c:	b2da      	uxtb	r2, r3
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	1c9a      	adds	r2, r3, #2
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003a1e:	e048      	b.n	8003ab2 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	121b      	asrs	r3, r3, #8
 8003a28:	b2da      	uxtb	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a34:	1c5a      	adds	r2, r3, #1
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a3a:	e03a      	b.n	8003ab2 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d10b      	bne.n	8003a5c <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a48:	b2da      	uxtb	r2, r3
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003a5a:	e02a      	b.n	8003ab2 <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a60:	2b02      	cmp	r3, #2
 8003a62:	d126      	bne.n	8003ab2 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b22      	cmp	r3, #34	; 0x22
 8003a6e:	d108      	bne.n	8003a82 <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	e017      	b.n	8003ab2 <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a88:	b2db      	uxtb	r3, r3
 8003a8a:	2b21      	cmp	r3, #33	; 0x21
 8003a8c:	d111      	bne.n	8003ab2 <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	781a      	ldrb	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003ab2:	bf00      	nop
 8003ab4:	370c      	adds	r7, #12
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abc:	4770      	bx	lr

08003abe <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003abe:	b580      	push	{r7, lr}
 8003ac0:	b084      	sub	sp, #16
 8003ac2:	af00      	add	r7, sp, #0
 8003ac4:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003acc:	b2db      	uxtb	r3, r3
 8003ace:	2b22      	cmp	r3, #34	; 0x22
 8003ad0:	d173      	bne.n	8003bba <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2b03      	cmp	r3, #3
 8003ade:	d920      	bls.n	8003b22 <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	691a      	ldr	r2, [r3, #16]
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af2:	1c5a      	adds	r2, r3, #1
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	3b01      	subs	r3, #1
 8003b00:	b29a      	uxth	r2, r3
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b0a:	b29b      	uxth	r3, r3
 8003b0c:	2b03      	cmp	r3, #3
 8003b0e:	d154      	bne.n	8003bba <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b1e:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003b20:	e04b      	b.n	8003bba <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b26:	2b02      	cmp	r3, #2
 8003b28:	d047      	beq.n	8003bba <I2C_MasterReceive_RXNE+0xfc>
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d002      	beq.n	8003b36 <I2C_MasterReceive_RXNE+0x78>
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d141      	bne.n	8003bba <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b44:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003b54:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	691a      	ldr	r2, [r3, #16]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	b2d2      	uxtb	r2, r2
 8003b62:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	1c5a      	adds	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b40      	cmp	r3, #64	; 0x40
 8003b8e:	d10a      	bne.n	8003ba6 <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2200      	movs	r2, #0
 8003b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f7ff fdec 	bl	800377c <HAL_I2C_MemRxCpltCallback>
}
 8003ba4:	e009      	b.n	8003bba <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2212      	movs	r2, #18
 8003bb2:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff fda1 	bl	80036fc <HAL_I2C_MasterRxCpltCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bce:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	2b04      	cmp	r3, #4
 8003bd8:	d11b      	bne.n	8003c12 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	685a      	ldr	r2, [r3, #4]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003be8:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	691a      	ldr	r2, [r3, #16]
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	b2d2      	uxtb	r2, r2
 8003bf6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003c10:	e0bd      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c16:	b29b      	uxth	r3, r3
 8003c18:	2b03      	cmp	r3, #3
 8003c1a:	d129      	bne.n	8003c70 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c2a:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2b04      	cmp	r3, #4
 8003c30:	d00a      	beq.n	8003c48 <I2C_MasterReceive_BTF+0x86>
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2b02      	cmp	r3, #2
 8003c36:	d007      	beq.n	8003c48 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	681a      	ldr	r2, [r3, #0]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c46:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c64:	b29b      	uxth	r3, r3
 8003c66:	3b01      	subs	r3, #1
 8003c68:	b29a      	uxth	r2, r3
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003c6e:	e08e      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c74:	b29b      	uxth	r3, r3
 8003c76:	2b02      	cmp	r3, #2
 8003c78:	d176      	bne.n	8003d68 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	2b01      	cmp	r3, #1
 8003c7e:	d002      	beq.n	8003c86 <I2C_MasterReceive_BTF+0xc4>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b10      	cmp	r3, #16
 8003c84:	d108      	bne.n	8003c98 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c94:	601a      	str	r2, [r3, #0]
 8003c96:	e019      	b.n	8003ccc <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b04      	cmp	r3, #4
 8003c9c:	d002      	beq.n	8003ca4 <I2C_MasterReceive_BTF+0xe2>
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d108      	bne.n	8003cb6 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	e00a      	b.n	8003ccc <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	2b10      	cmp	r3, #16
 8003cba:	d007      	beq.n	8003ccc <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cca:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	691a      	ldr	r2, [r3, #16]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd6:	b2d2      	uxtb	r2, r2
 8003cd8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cde:	1c5a      	adds	r2, r3, #1
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691a      	ldr	r2, [r3, #16]
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfc:	b2d2      	uxtb	r2, r2
 8003cfe:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	1c5a      	adds	r2, r3, #1
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	3b01      	subs	r3, #1
 8003d12:	b29a      	uxth	r2, r3
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8003d26:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2220      	movs	r2, #32
 8003d2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d36:	b2db      	uxtb	r3, r3
 8003d38:	2b40      	cmp	r3, #64	; 0x40
 8003d3a:	d10a      	bne.n	8003d52 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8003d4a:	6878      	ldr	r0, [r7, #4]
 8003d4c:	f7ff fd16 	bl	800377c <HAL_I2C_MemRxCpltCallback>
}
 8003d50:	e01d      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2212      	movs	r2, #18
 8003d5e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f7ff fccb 	bl	80036fc <HAL_I2C_MasterRxCpltCallback>
}
 8003d66:	e012      	b.n	8003d8e <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	691a      	ldr	r2, [r3, #16]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d72:	b2d2      	uxtb	r2, r2
 8003d74:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7a:	1c5a      	adds	r2, r3, #1
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	3b01      	subs	r3, #1
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d8e:	bf00      	nop
 8003d90:	3710      	adds	r7, #16
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003da4:	b2db      	uxtb	r3, r3
 8003da6:	2b40      	cmp	r3, #64	; 0x40
 8003da8:	d117      	bne.n	8003dda <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d109      	bne.n	8003dc6 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	461a      	mov	r2, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003dc2:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8003dc4:	e067      	b.n	8003e96 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dca:	b2db      	uxtb	r3, r3
 8003dcc:	f043 0301 	orr.w	r3, r3, #1
 8003dd0:	b2da      	uxtb	r2, r3
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	611a      	str	r2, [r3, #16]
}
 8003dd8:	e05d      	b.n	8003e96 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003de2:	d133      	bne.n	8003e4c <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dea:	b2db      	uxtb	r3, r3
 8003dec:	2b21      	cmp	r3, #33	; 0x21
 8003dee:	d109      	bne.n	8003e04 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df4:	b2db      	uxtb	r3, r3
 8003df6:	461a      	mov	r2, r3
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003e00:	611a      	str	r2, [r3, #16]
 8003e02:	e008      	b.n	8003e16 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	f043 0301 	orr.w	r3, r3, #1
 8003e0e:	b2da      	uxtb	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d004      	beq.n	8003e28 <I2C_Master_SB+0x92>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d108      	bne.n	8003e3a <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d032      	beq.n	8003e96 <I2C_Master_SB+0x100>
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d02d      	beq.n	8003e96 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e48:	605a      	str	r2, [r3, #4]
}
 8003e4a:	e024      	b.n	8003e96 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d10e      	bne.n	8003e72 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e58:	b29b      	uxth	r3, r3
 8003e5a:	11db      	asrs	r3, r3, #7
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	f003 0306 	and.w	r3, r3, #6
 8003e62:	b2db      	uxtb	r3, r3
 8003e64:	f063 030f 	orn	r3, r3, #15
 8003e68:	b2da      	uxtb	r2, r3
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	611a      	str	r2, [r3, #16]
}
 8003e70:	e011      	b.n	8003e96 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d10d      	bne.n	8003e96 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e7e:	b29b      	uxth	r3, r3
 8003e80:	11db      	asrs	r3, r3, #7
 8003e82:	b2db      	uxtb	r3, r3
 8003e84:	f003 0306 	and.w	r3, r3, #6
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	f063 030e 	orn	r3, r3, #14
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	611a      	str	r2, [r3, #16]
}
 8003e96:	bf00      	nop
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eae:	b2da      	uxtb	r2, r3
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <I2C_Master_ADD10+0x24>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d011      	beq.n	8003eea <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d104      	bne.n	8003eda <I2C_Master_ADD10+0x38>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d007      	beq.n	8003eea <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	685a      	ldr	r2, [r3, #4]
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ee8:	605a      	str	r2, [r3, #4]
    }
  }
}
 8003eea:	bf00      	nop
 8003eec:	370c      	adds	r7, #12
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b091      	sub	sp, #68	; 0x44
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f04:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f12:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f1a:	b2db      	uxtb	r3, r3
 8003f1c:	2b22      	cmp	r3, #34	; 0x22
 8003f1e:	f040 8169 	bne.w	80041f4 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10f      	bne.n	8003f4a <I2C_Master_ADDR+0x54>
 8003f2a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003f2e:	2b40      	cmp	r3, #64	; 0x40
 8003f30:	d10b      	bne.n	8003f4a <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f32:	2300      	movs	r3, #0
 8003f34:	633b      	str	r3, [r7, #48]	; 0x30
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	695b      	ldr	r3, [r3, #20]
 8003f3c:	633b      	str	r3, [r7, #48]	; 0x30
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	633b      	str	r3, [r7, #48]	; 0x30
 8003f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f48:	e160      	b.n	800420c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d11d      	bne.n	8003f8e <I2C_Master_ADDR+0x98>
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	691b      	ldr	r3, [r3, #16]
 8003f56:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003f5a:	d118      	bne.n	8003f8e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	699b      	ldr	r3, [r3, #24]
 8003f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f80:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	651a      	str	r2, [r3, #80]	; 0x50
 8003f8c:	e13e      	b.n	800420c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f92:	b29b      	uxth	r3, r3
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d113      	bne.n	8003fc0 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	62bb      	str	r3, [r7, #40]	; 0x28
 8003fac:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	e115      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc4:	b29b      	uxth	r3, r3
 8003fc6:	2b01      	cmp	r3, #1
 8003fc8:	f040 808a 	bne.w	80040e0 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8003fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fce:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fd2:	d137      	bne.n	8004044 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	681a      	ldr	r2, [r3, #0]
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe2:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003ff2:	d113      	bne.n	800401c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004002:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	; 0x24
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	627b      	str	r3, [r7, #36]	; 0x24
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	699b      	ldr	r3, [r3, #24]
 8004016:	627b      	str	r3, [r7, #36]	; 0x24
 8004018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800401a:	e0e7      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800401c:	2300      	movs	r3, #0
 800401e:	623b      	str	r3, [r7, #32]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	623b      	str	r3, [r7, #32]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	699b      	ldr	r3, [r3, #24]
 800402e:	623b      	str	r3, [r7, #32]
 8004030:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	681a      	ldr	r2, [r3, #0]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004040:	601a      	str	r2, [r3, #0]
 8004042:	e0d3      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004044:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004046:	2b08      	cmp	r3, #8
 8004048:	d02e      	beq.n	80040a8 <I2C_Master_ADDR+0x1b2>
 800404a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800404c:	2b20      	cmp	r3, #32
 800404e:	d02b      	beq.n	80040a8 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004052:	2b12      	cmp	r3, #18
 8004054:	d102      	bne.n	800405c <I2C_Master_ADDR+0x166>
 8004056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004058:	2b01      	cmp	r3, #1
 800405a:	d125      	bne.n	80040a8 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800405c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800405e:	2b04      	cmp	r3, #4
 8004060:	d00e      	beq.n	8004080 <I2C_Master_ADDR+0x18a>
 8004062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004064:	2b02      	cmp	r3, #2
 8004066:	d00b      	beq.n	8004080 <I2C_Master_ADDR+0x18a>
 8004068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800406a:	2b10      	cmp	r3, #16
 800406c:	d008      	beq.n	8004080 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681a      	ldr	r2, [r3, #0]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800407c:	601a      	str	r2, [r3, #0]
 800407e:	e007      	b.n	8004090 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800408e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004090:	2300      	movs	r3, #0
 8004092:	61fb      	str	r3, [r7, #28]
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	61fb      	str	r3, [r7, #28]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	699b      	ldr	r3, [r3, #24]
 80040a2:	61fb      	str	r3, [r7, #28]
 80040a4:	69fb      	ldr	r3, [r7, #28]
 80040a6:	e0a1      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b6:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040b8:	2300      	movs	r3, #0
 80040ba:	61bb      	str	r3, [r7, #24]
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	61bb      	str	r3, [r7, #24]
 80040cc:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	681a      	ldr	r2, [r3, #0]
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040dc:	601a      	str	r2, [r3, #0]
 80040de:	e085      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e4:	b29b      	uxth	r3, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d14d      	bne.n	8004186 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	2b04      	cmp	r3, #4
 80040ee:	d016      	beq.n	800411e <I2C_Master_ADDR+0x228>
 80040f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d013      	beq.n	800411e <I2C_Master_ADDR+0x228>
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b10      	cmp	r3, #16
 80040fa:	d010      	beq.n	800411e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800410a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	681a      	ldr	r2, [r3, #0]
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	e007      	b.n	800412e <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800412c:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004138:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800413c:	d117      	bne.n	800416e <I2C_Master_ADDR+0x278>
 800413e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004140:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004144:	d00b      	beq.n	800415e <I2C_Master_ADDR+0x268>
 8004146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004148:	2b01      	cmp	r3, #1
 800414a:	d008      	beq.n	800415e <I2C_Master_ADDR+0x268>
 800414c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800414e:	2b08      	cmp	r3, #8
 8004150:	d005      	beq.n	800415e <I2C_Master_ADDR+0x268>
 8004152:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004154:	2b10      	cmp	r3, #16
 8004156:	d002      	beq.n	800415e <I2C_Master_ADDR+0x268>
 8004158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800415a:	2b20      	cmp	r3, #32
 800415c:	d107      	bne.n	800416e <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800416c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800416e:	2300      	movs	r3, #0
 8004170:	617b      	str	r3, [r7, #20]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	699b      	ldr	r3, [r3, #24]
 8004180:	617b      	str	r3, [r7, #20]
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	e032      	b.n	80041ec <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	681a      	ldr	r2, [r3, #0]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004194:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041a4:	d117      	bne.n	80041d6 <I2C_Master_ADDR+0x2e0>
 80041a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041ac:	d00b      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b0:	2b01      	cmp	r3, #1
 80041b2:	d008      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041b6:	2b08      	cmp	r3, #8
 80041b8:	d005      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	2b10      	cmp	r3, #16
 80041be:	d002      	beq.n	80041c6 <I2C_Master_ADDR+0x2d0>
 80041c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c2:	2b20      	cmp	r3, #32
 80041c4:	d107      	bne.n	80041d6 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	685a      	ldr	r2, [r3, #4]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80041d4:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041d6:	2300      	movs	r3, #0
 80041d8:	613b      	str	r3, [r7, #16]
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	695b      	ldr	r3, [r3, #20]
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	699b      	ldr	r3, [r3, #24]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80041f2:	e00b      	b.n	800420c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041f4:	2300      	movs	r3, #0
 80041f6:	60fb      	str	r3, [r7, #12]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	695b      	ldr	r3, [r3, #20]
 80041fe:	60fb      	str	r3, [r7, #12]
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	e7ff      	b.n	800420c <I2C_Master_ADDR+0x316>
 800420c:	bf00      	nop
 800420e:	3744      	adds	r7, #68	; 0x44
 8004210:	46bd      	mov	sp, r7
 8004212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004216:	4770      	bx	lr

08004218 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004226:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800422c:	b29b      	uxth	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d02b      	beq.n	800428a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	781a      	ldrb	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	1c5a      	adds	r2, r3, #1
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800424c:	b29b      	uxth	r3, r3
 800424e:	3b01      	subs	r3, #1
 8004250:	b29a      	uxth	r2, r3
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800425a:	b29b      	uxth	r3, r3
 800425c:	2b00      	cmp	r3, #0
 800425e:	d114      	bne.n	800428a <I2C_SlaveTransmit_TXE+0x72>
 8004260:	7bfb      	ldrb	r3, [r7, #15]
 8004262:	2b29      	cmp	r3, #41	; 0x29
 8004264:	d111      	bne.n	800428a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004274:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2221      	movs	r2, #33	; 0x21
 800427a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2228      	movs	r2, #40	; 0x28
 8004280:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff fa43 	bl	8003710 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}

08004292 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004292:	b480      	push	{r7}
 8004294:	b083      	sub	sp, #12
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429e:	b29b      	uxth	r3, r3
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d011      	beq.n	80042c8 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	781a      	ldrb	r2, [r3, #0]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	1c5a      	adds	r2, r3, #1
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	3b01      	subs	r3, #1
 80042c2:	b29a      	uxth	r2, r3
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80042c8:	bf00      	nop
 80042ca:	370c      	adds	r7, #12
 80042cc:	46bd      	mov	sp, r7
 80042ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d2:	4770      	bx	lr

080042d4 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042d4:	b580      	push	{r7, lr}
 80042d6:	b084      	sub	sp, #16
 80042d8:	af00      	add	r7, sp, #0
 80042da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d02c      	beq.n	8004348 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	691a      	ldr	r2, [r3, #16]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f8:	b2d2      	uxtb	r2, r2
 80042fa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004300:	1c5a      	adds	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800430a:	b29b      	uxth	r3, r3
 800430c:	3b01      	subs	r3, #1
 800430e:	b29a      	uxth	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004318:	b29b      	uxth	r3, r3
 800431a:	2b00      	cmp	r3, #0
 800431c:	d114      	bne.n	8004348 <I2C_SlaveReceive_RXNE+0x74>
 800431e:	7bfb      	ldrb	r3, [r7, #15]
 8004320:	2b2a      	cmp	r3, #42	; 0x2a
 8004322:	d111      	bne.n	8004348 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	685a      	ldr	r2, [r3, #4]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004332:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2222      	movs	r2, #34	; 0x22
 8004338:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2228      	movs	r2, #40	; 0x28
 800433e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f7ff f9ee 	bl	8003724 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004348:	bf00      	nop
 800434a:	3710      	adds	r7, #16
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004350:	b480      	push	{r7}
 8004352:	b083      	sub	sp, #12
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d012      	beq.n	8004388 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800437e:	b29b      	uxth	r3, r3
 8004380:	3b01      	subs	r3, #1
 8004382:	b29a      	uxth	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr

08004394 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004394:	b580      	push	{r7, lr}
 8004396:	b084      	sub	sp, #16
 8004398:	af00      	add	r7, sp, #0
 800439a:	6078      	str	r0, [r7, #4]
 800439c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800439e:	2300      	movs	r3, #0
 80043a0:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043ae:	2b28      	cmp	r3, #40	; 0x28
 80043b0:	d127      	bne.n	8004402 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043c0:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	089b      	lsrs	r3, r3, #2
 80043c6:	f003 0301 	and.w	r3, r3, #1
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80043ce:	2301      	movs	r3, #1
 80043d0:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	09db      	lsrs	r3, r3, #7
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d103      	bne.n	80043e6 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	81bb      	strh	r3, [r7, #12]
 80043e4:	e002      	b.n	80043ec <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	699b      	ldr	r3, [r3, #24]
 80043ea:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2200      	movs	r2, #0
 80043f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80043f4:	89ba      	ldrh	r2, [r7, #12]
 80043f6:	7bfb      	ldrb	r3, [r7, #15]
 80043f8:	4619      	mov	r1, r3
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff f99c 	bl	8003738 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004400:	e008      	b.n	8004414 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f06f 0202 	mvn.w	r2, #2
 800440a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2200      	movs	r2, #0
 8004410:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004414:	bf00      	nop
 8004416:	3710      	adds	r7, #16
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800442a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	685a      	ldr	r2, [r3, #4]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800443a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800443c:	2300      	movs	r3, #0
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	60bb      	str	r3, [r7, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0201 	orr.w	r2, r2, #1
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004468:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004474:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004478:	d172      	bne.n	8004560 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800447a:	7bfb      	ldrb	r3, [r7, #15]
 800447c:	2b22      	cmp	r3, #34	; 0x22
 800447e:	d002      	beq.n	8004486 <I2C_Slave_STOPF+0x6a>
 8004480:	7bfb      	ldrb	r3, [r7, #15]
 8004482:	2b2a      	cmp	r3, #42	; 0x2a
 8004484:	d135      	bne.n	80044f2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b29a      	uxth	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d005      	beq.n	80044aa <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044a2:	f043 0204 	orr.w	r2, r3, #4
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	685a      	ldr	r2, [r3, #4]
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044b8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044be:	4618      	mov	r0, r3
 80044c0:	f7fe faba 	bl	8002a38 <HAL_DMA_GetState>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b01      	cmp	r3, #1
 80044c8:	d049      	beq.n	800455e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044ce:	4a69      	ldr	r2, [pc, #420]	; (8004674 <I2C_Slave_STOPF+0x258>)
 80044d0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044d6:	4618      	mov	r0, r3
 80044d8:	f7fe f902 	bl	80026e0 <HAL_DMA_Abort_IT>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d03d      	beq.n	800455e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ec:	4610      	mov	r0, r2
 80044ee:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80044f0:	e035      	b.n	800455e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	b29a      	uxth	r2, r3
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004504:	b29b      	uxth	r3, r3
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	f043 0204 	orr.w	r2, r3, #4
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004524:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fa84 	bl	8002a38 <HAL_DMA_GetState>
 8004530:	4603      	mov	r3, r0
 8004532:	2b01      	cmp	r3, #1
 8004534:	d014      	beq.n	8004560 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800453a:	4a4e      	ldr	r2, [pc, #312]	; (8004674 <I2C_Slave_STOPF+0x258>)
 800453c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004542:	4618      	mov	r0, r3
 8004544:	f7fe f8cc 	bl	80026e0 <HAL_DMA_Abort_IT>
 8004548:	4603      	mov	r3, r0
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004552:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004558:	4610      	mov	r0, r2
 800455a:	4798      	blx	r3
 800455c:	e000      	b.n	8004560 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800455e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004564:	b29b      	uxth	r3, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	d03e      	beq.n	80045e8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695b      	ldr	r3, [r3, #20]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b04      	cmp	r3, #4
 8004576:	d112      	bne.n	800459e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	691a      	ldr	r2, [r3, #16]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	b2d2      	uxtb	r2, r2
 8004584:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458a:	1c5a      	adds	r2, r3, #1
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004594:	b29b      	uxth	r3, r3
 8004596:	3b01      	subs	r3, #1
 8004598:	b29a      	uxth	r2, r3
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	695b      	ldr	r3, [r3, #20]
 80045a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a8:	2b40      	cmp	r3, #64	; 0x40
 80045aa:	d112      	bne.n	80045d2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	691a      	ldr	r2, [r3, #16]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b6:	b2d2      	uxtb	r2, r2
 80045b8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045be:	1c5a      	adds	r2, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045c8:	b29b      	uxth	r3, r3
 80045ca:	3b01      	subs	r3, #1
 80045cc:	b29a      	uxth	r2, r3
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d005      	beq.n	80045e8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045e0:	f043 0204 	orr.w	r2, r3, #4
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f000 f843 	bl	800467c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80045f6:	e039      	b.n	800466c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80045f8:	7bfb      	ldrb	r3, [r7, #15]
 80045fa:	2b2a      	cmp	r3, #42	; 0x2a
 80045fc:	d109      	bne.n	8004612 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2228      	movs	r2, #40	; 0x28
 8004608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800460c:	6878      	ldr	r0, [r7, #4]
 800460e:	f7ff f889 	bl	8003724 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004618:	b2db      	uxtb	r3, r3
 800461a:	2b28      	cmp	r3, #40	; 0x28
 800461c:	d111      	bne.n	8004642 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	4a15      	ldr	r2, [pc, #84]	; (8004678 <I2C_Slave_STOPF+0x25c>)
 8004622:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2220      	movs	r2, #32
 800462e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800463a:	6878      	ldr	r0, [r7, #4]
 800463c:	f7ff f88a 	bl	8003754 <HAL_I2C_ListenCpltCallback>
}
 8004640:	e014      	b.n	800466c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	2b22      	cmp	r3, #34	; 0x22
 8004648:	d002      	beq.n	8004650 <I2C_Slave_STOPF+0x234>
 800464a:	7bfb      	ldrb	r3, [r7, #15]
 800464c:	2b22      	cmp	r3, #34	; 0x22
 800464e:	d10d      	bne.n	800466c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2200      	movs	r2, #0
 8004654:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2220      	movs	r2, #32
 800465a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2200      	movs	r2, #0
 8004662:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004666:	6878      	ldr	r0, [r7, #4]
 8004668:	f7ff f85c 	bl	8003724 <HAL_I2C_SlaveRxCpltCallback>
}
 800466c:	bf00      	nop
 800466e:	3710      	adds	r7, #16
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	080049dd 	.word	0x080049dd
 8004678:	ffff0000 	.word	0xffff0000

0800467c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800467c:	b580      	push	{r7, lr}
 800467e:	b084      	sub	sp, #16
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800468a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004692:	b2db      	uxtb	r3, r3
 8004694:	2b10      	cmp	r3, #16
 8004696:	d10a      	bne.n	80046ae <I2C_ITError+0x32>
 8004698:	7bfb      	ldrb	r3, [r7, #15]
 800469a:	2b22      	cmp	r3, #34	; 0x22
 800469c:	d107      	bne.n	80046ae <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	681a      	ldr	r2, [r3, #0]
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ac:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80046ae:	7bfb      	ldrb	r3, [r7, #15]
 80046b0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046b4:	2b28      	cmp	r3, #40	; 0x28
 80046b6:	d107      	bne.n	80046c8 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2228      	movs	r2, #40	; 0x28
 80046c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80046c6:	e015      	b.n	80046f4 <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	685b      	ldr	r3, [r3, #4]
 80046ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80046d6:	d006      	beq.n	80046e6 <I2C_ITError+0x6a>
 80046d8:	7bfb      	ldrb	r3, [r7, #15]
 80046da:	2b60      	cmp	r3, #96	; 0x60
 80046dc:	d003      	beq.n	80046e6 <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2220      	movs	r2, #32
 80046e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2200      	movs	r2, #0
 80046ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2200      	movs	r2, #0
 80046f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	685b      	ldr	r3, [r3, #4]
 80046fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004702:	d162      	bne.n	80047ca <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	685a      	ldr	r2, [r3, #4]
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004712:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004718:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b01      	cmp	r3, #1
 8004720:	d020      	beq.n	8004764 <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004726:	4a6a      	ldr	r2, [pc, #424]	; (80048d0 <I2C_ITError+0x254>)
 8004728:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800472e:	4618      	mov	r0, r3
 8004730:	f7fd ffd6 	bl	80026e0 <HAL_DMA_Abort_IT>
 8004734:	4603      	mov	r3, r0
 8004736:	2b00      	cmp	r3, #0
 8004738:	f000 8089 	beq.w	800484e <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	681a      	ldr	r2, [r3, #0]
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f022 0201 	bic.w	r2, r2, #1
 800474a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2220      	movs	r2, #32
 8004750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800475e:	4610      	mov	r0, r2
 8004760:	4798      	blx	r3
 8004762:	e074      	b.n	800484e <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004768:	4a59      	ldr	r2, [pc, #356]	; (80048d0 <I2C_ITError+0x254>)
 800476a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004770:	4618      	mov	r0, r3
 8004772:	f7fd ffb5 	bl	80026e0 <HAL_DMA_Abort_IT>
 8004776:	4603      	mov	r3, r0
 8004778:	2b00      	cmp	r3, #0
 800477a:	d068      	beq.n	800484e <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d10b      	bne.n	80047a2 <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	691a      	ldr	r2, [r3, #16]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004794:	b2d2      	uxtb	r2, r2
 8004796:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479c:	1c5a      	adds	r2, r3, #1
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681a      	ldr	r2, [r3, #0]
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f022 0201 	bic.w	r2, r2, #1
 80047b0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2220      	movs	r2, #32
 80047b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047c4:	4610      	mov	r0, r2
 80047c6:	4798      	blx	r3
 80047c8:	e041      	b.n	800484e <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047d0:	b2db      	uxtb	r3, r3
 80047d2:	2b60      	cmp	r3, #96	; 0x60
 80047d4:	d125      	bne.n	8004822 <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2220      	movs	r2, #32
 80047da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047ee:	2b40      	cmp	r3, #64	; 0x40
 80047f0:	d10b      	bne.n	800480a <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	691a      	ldr	r2, [r3, #16]
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fc:	b2d2      	uxtb	r2, r2
 80047fe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004804:	1c5a      	adds	r2, r3, #1
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	f022 0201 	bic.w	r2, r2, #1
 8004818:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7fe ffc2 	bl	80037a4 <HAL_I2C_AbortCpltCallback>
 8004820:	e015      	b.n	800484e <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	695b      	ldr	r3, [r3, #20]
 8004828:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800482c:	2b40      	cmp	r3, #64	; 0x40
 800482e:	d10b      	bne.n	8004848 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	691a      	ldr	r2, [r3, #16]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004842:	1c5a      	adds	r2, r3, #1
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004848:	6878      	ldr	r0, [r7, #4]
 800484a:	f7fe ffa1 	bl	8003790 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004852:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004854:	68bb      	ldr	r3, [r7, #8]
 8004856:	f003 0301 	and.w	r3, r3, #1
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10e      	bne.n	800487c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004864:	2b00      	cmp	r3, #0
 8004866:	d109      	bne.n	800487c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800486e:	2b00      	cmp	r3, #0
 8004870:	d104      	bne.n	800487c <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800488a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004892:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b04      	cmp	r3, #4
 800489e:	d113      	bne.n	80048c8 <I2C_ITError+0x24c>
 80048a0:	7bfb      	ldrb	r3, [r7, #15]
 80048a2:	2b28      	cmp	r3, #40	; 0x28
 80048a4:	d110      	bne.n	80048c8 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a0a      	ldr	r2, [pc, #40]	; (80048d4 <I2C_ITError+0x258>)
 80048aa:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2220      	movs	r2, #32
 80048b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	2200      	movs	r2, #0
 80048be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80048c2:	6878      	ldr	r0, [r7, #4]
 80048c4:	f7fe ff46 	bl	8003754 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80048c8:	bf00      	nop
 80048ca:	3710      	adds	r7, #16
 80048cc:	46bd      	mov	sp, r7
 80048ce:	bd80      	pop	{r7, pc}
 80048d0:	080049dd 	.word	0x080049dd
 80048d4:	ffff0000 	.word	0xffff0000

080048d8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b088      	sub	sp, #32
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	603b      	str	r3, [r7, #0]
 80048e4:	460b      	mov	r3, r1
 80048e6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ec:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80048ee:	697b      	ldr	r3, [r7, #20]
 80048f0:	2b08      	cmp	r3, #8
 80048f2:	d006      	beq.n	8004902 <I2C_MasterRequestWrite+0x2a>
 80048f4:	697b      	ldr	r3, [r7, #20]
 80048f6:	2b01      	cmp	r3, #1
 80048f8:	d003      	beq.n	8004902 <I2C_MasterRequestWrite+0x2a>
 80048fa:	697b      	ldr	r3, [r7, #20]
 80048fc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004900:	d108      	bne.n	8004914 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004910:	601a      	str	r2, [r3, #0]
 8004912:	e00b      	b.n	800492c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004918:	2b12      	cmp	r3, #18
 800491a:	d107      	bne.n	800492c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800492a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	9300      	str	r3, [sp, #0]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	2200      	movs	r2, #0
 8004934:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004938:	68f8      	ldr	r0, [r7, #12]
 800493a:	f000 f8ce 	bl	8004ada <I2C_WaitOnFlagUntilTimeout>
 800493e:	4603      	mov	r3, r0
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00c      	beq.n	800495e <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004958:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800495a:	2303      	movs	r3, #3
 800495c:	e035      	b.n	80049ca <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004966:	d108      	bne.n	800497a <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004968:	897b      	ldrh	r3, [r7, #10]
 800496a:	b2db      	uxtb	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004976:	611a      	str	r2, [r3, #16]
 8004978:	e01b      	b.n	80049b2 <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800497a:	897b      	ldrh	r3, [r7, #10]
 800497c:	11db      	asrs	r3, r3, #7
 800497e:	b2db      	uxtb	r3, r3
 8004980:	f003 0306 	and.w	r3, r3, #6
 8004984:	b2db      	uxtb	r3, r3
 8004986:	f063 030f 	orn	r3, r3, #15
 800498a:	b2da      	uxtb	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	490f      	ldr	r1, [pc, #60]	; (80049d4 <I2C_MasterRequestWrite+0xfc>)
 8004998:	68f8      	ldr	r0, [r7, #12]
 800499a:	f000 f8f5 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800499e:	4603      	mov	r3, r0
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d001      	beq.n	80049a8 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80049a4:	2301      	movs	r3, #1
 80049a6:	e010      	b.n	80049ca <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80049a8:	897b      	ldrh	r3, [r7, #10]
 80049aa:	b2da      	uxtb	r2, r3
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	687a      	ldr	r2, [r7, #4]
 80049b6:	4908      	ldr	r1, [pc, #32]	; (80049d8 <I2C_MasterRequestWrite+0x100>)
 80049b8:	68f8      	ldr	r0, [r7, #12]
 80049ba:	f000 f8e5 	bl	8004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e000      	b.n	80049ca <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80049c8:	2300      	movs	r3, #0
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3718      	adds	r7, #24
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}
 80049d2:	bf00      	nop
 80049d4:	00010008 	.word	0x00010008
 80049d8:	00010002 	.word	0x00010002

080049dc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b084      	sub	sp, #16
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e8:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049f0:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d003      	beq.n	8004a02 <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049fe:	2200      	movs	r2, #0
 8004a00:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d003      	beq.n	8004a12 <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a0e:	2200      	movs	r2, #0
 8004a10:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a20:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d003      	beq.n	8004a38 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a34:	2200      	movs	r2, #0
 8004a36:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d003      	beq.n	8004a48 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a44:	2200      	movs	r2, #0
 8004a46:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681a      	ldr	r2, [r3, #0]
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f022 0201 	bic.w	r2, r2, #1
 8004a56:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	2b60      	cmp	r3, #96	; 0x60
 8004a62:	d10e      	bne.n	8004a82 <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2200      	movs	r2, #0
 8004a70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	2200      	movs	r2, #0
 8004a78:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004a7a:	68f8      	ldr	r0, [r7, #12]
 8004a7c:	f7fe fe92 	bl	80037a4 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004a80:	e027      	b.n	8004ad2 <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004a82:	7afb      	ldrb	r3, [r7, #11]
 8004a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004a88:	2b28      	cmp	r3, #40	; 0x28
 8004a8a:	d117      	bne.n	8004abc <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	681a      	ldr	r2, [r3, #0]
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f042 0201 	orr.w	r2, r2, #1
 8004a9a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	681a      	ldr	r2, [r3, #0]
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004aaa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2228      	movs	r2, #40	; 0x28
 8004ab6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004aba:	e007      	b.n	8004acc <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2220      	movs	r2, #32
 8004ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004acc:	68f8      	ldr	r0, [r7, #12]
 8004ace:	f7fe fe5f 	bl	8003790 <HAL_I2C_ErrorCallback>
}
 8004ad2:	bf00      	nop
 8004ad4:	3710      	adds	r7, #16
 8004ad6:	46bd      	mov	sp, r7
 8004ad8:	bd80      	pop	{r7, pc}

08004ada <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ada:	b580      	push	{r7, lr}
 8004adc:	b084      	sub	sp, #16
 8004ade:	af00      	add	r7, sp, #0
 8004ae0:	60f8      	str	r0, [r7, #12]
 8004ae2:	60b9      	str	r1, [r7, #8]
 8004ae4:	603b      	str	r3, [r7, #0]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004aea:	e025      	b.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af2:	d021      	beq.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004af4:	f7fd f9a4 	bl	8001e40 <HAL_GetTick>
 8004af8:	4602      	mov	r2, r0
 8004afa:	69bb      	ldr	r3, [r7, #24]
 8004afc:	1ad3      	subs	r3, r2, r3
 8004afe:	683a      	ldr	r2, [r7, #0]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d302      	bcc.n	8004b0a <I2C_WaitOnFlagUntilTimeout+0x30>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d116      	bne.n	8004b38 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	2200      	movs	r2, #0
 8004b0e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	2220      	movs	r2, #32
 8004b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b24:	f043 0220 	orr.w	r2, r3, #32
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2200      	movs	r2, #0
 8004b30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	e023      	b.n	8004b80 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	0c1b      	lsrs	r3, r3, #16
 8004b3c:	b2db      	uxtb	r3, r3
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d10d      	bne.n	8004b5e <I2C_WaitOnFlagUntilTimeout+0x84>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	695b      	ldr	r3, [r3, #20]
 8004b48:	43da      	mvns	r2, r3
 8004b4a:	68bb      	ldr	r3, [r7, #8]
 8004b4c:	4013      	ands	r3, r2
 8004b4e:	b29b      	uxth	r3, r3
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	bf0c      	ite	eq
 8004b54:	2301      	moveq	r3, #1
 8004b56:	2300      	movne	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	461a      	mov	r2, r3
 8004b5c:	e00c      	b.n	8004b78 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	699b      	ldr	r3, [r3, #24]
 8004b64:	43da      	mvns	r2, r3
 8004b66:	68bb      	ldr	r3, [r7, #8]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	b29b      	uxth	r3, r3
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	bf0c      	ite	eq
 8004b70:	2301      	moveq	r3, #1
 8004b72:	2300      	movne	r3, #0
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	79fb      	ldrb	r3, [r7, #7]
 8004b7a:	429a      	cmp	r2, r3
 8004b7c:	d0b6      	beq.n	8004aec <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004b96:	e051      	b.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	695b      	ldr	r3, [r3, #20]
 8004b9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ba2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ba6:	d123      	bne.n	8004bf0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004bb6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bc0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2220      	movs	r2, #32
 8004bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bdc:	f043 0204 	orr.w	r2, r3, #4
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	e046      	b.n	8004c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bf6:	d021      	beq.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004bf8:	f7fd f922 	bl	8001e40 <HAL_GetTick>
 8004bfc:	4602      	mov	r2, r0
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	1ad3      	subs	r3, r2, r3
 8004c02:	687a      	ldr	r2, [r7, #4]
 8004c04:	429a      	cmp	r2, r3
 8004c06:	d302      	bcc.n	8004c0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d116      	bne.n	8004c3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2200      	movs	r2, #0
 8004c12:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004c38:	2301      	movs	r3, #1
 8004c3a:	e020      	b.n	8004c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	0c1b      	lsrs	r3, r3, #16
 8004c40:	b2db      	uxtb	r3, r3
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d10c      	bne.n	8004c60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	695b      	ldr	r3, [r3, #20]
 8004c4c:	43da      	mvns	r2, r3
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	4013      	ands	r3, r2
 8004c52:	b29b      	uxth	r3, r3
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	bf14      	ite	ne
 8004c58:	2301      	movne	r3, #1
 8004c5a:	2300      	moveq	r3, #0
 8004c5c:	b2db      	uxtb	r3, r3
 8004c5e:	e00b      	b.n	8004c78 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	43da      	mvns	r2, r3
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	b29b      	uxth	r3, r3
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	bf14      	ite	ne
 8004c72:	2301      	movne	r3, #1
 8004c74:	2300      	moveq	r3, #0
 8004c76:	b2db      	uxtb	r3, r3
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d18d      	bne.n	8004b98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004c7c:	2300      	movs	r3, #0
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	3710      	adds	r7, #16
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}

08004c86 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	60f8      	str	r0, [r7, #12]
 8004c8e:	60b9      	str	r1, [r7, #8]
 8004c90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004c92:	e02d      	b.n	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004c94:	68f8      	ldr	r0, [r7, #12]
 8004c96:	f000 f878 	bl	8004d8a <I2C_IsAcknowledgeFailed>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d001      	beq.n	8004ca4 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e02d      	b.n	8004d00 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ca4:	68bb      	ldr	r3, [r7, #8]
 8004ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004caa:	d021      	beq.n	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004cac:	f7fd f8c8 	bl	8001e40 <HAL_GetTick>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	1ad3      	subs	r3, r2, r3
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d302      	bcc.n	8004cc2 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2220      	movs	r2, #32
 8004ccc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004cec:	2301      	movs	r3, #1
 8004cee:	e007      	b.n	8004d00 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cfa:	2b80      	cmp	r3, #128	; 0x80
 8004cfc:	d1ca      	bne.n	8004c94 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3710      	adds	r7, #16
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b084      	sub	sp, #16
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	60f8      	str	r0, [r7, #12]
 8004d10:	60b9      	str	r1, [r7, #8]
 8004d12:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d14:	e02d      	b.n	8004d72 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004d16:	68f8      	ldr	r0, [r7, #12]
 8004d18:	f000 f837 	bl	8004d8a <I2C_IsAcknowledgeFailed>
 8004d1c:	4603      	mov	r3, r0
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d001      	beq.n	8004d26 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e02d      	b.n	8004d82 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d26:	68bb      	ldr	r3, [r7, #8]
 8004d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d2c:	d021      	beq.n	8004d72 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d2e:	f7fd f887 	bl	8001e40 <HAL_GetTick>
 8004d32:	4602      	mov	r2, r0
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	1ad3      	subs	r3, r2, r3
 8004d38:	68ba      	ldr	r2, [r7, #8]
 8004d3a:	429a      	cmp	r2, r3
 8004d3c:	d302      	bcc.n	8004d44 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d116      	bne.n	8004d72 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2200      	movs	r2, #0
 8004d48:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	2220      	movs	r2, #32
 8004d4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	2200      	movs	r2, #0
 8004d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d6e:	2301      	movs	r3, #1
 8004d70:	e007      	b.n	8004d82 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	695b      	ldr	r3, [r3, #20]
 8004d78:	f003 0304 	and.w	r3, r3, #4
 8004d7c:	2b04      	cmp	r3, #4
 8004d7e:	d1ca      	bne.n	8004d16 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004d80:	2300      	movs	r3, #0
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3710      	adds	r7, #16
 8004d86:	46bd      	mov	sp, r7
 8004d88:	bd80      	pop	{r7, pc}

08004d8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004d8a:	b480      	push	{r7}
 8004d8c:	b083      	sub	sp, #12
 8004d8e:	af00      	add	r7, sp, #0
 8004d90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	695b      	ldr	r3, [r3, #20]
 8004d98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da0:	d11b      	bne.n	8004dda <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004daa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	2220      	movs	r2, #32
 8004db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0204 	orr.w	r2, r3, #4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e000      	b.n	8004ddc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004dda:	2300      	movs	r3, #0
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004df8:	d103      	bne.n	8004e02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004e00:	e007      	b.n	8004e12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e06:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e0a:	d102      	bne.n	8004e12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2208      	movs	r2, #8
 8004e10:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004e12:	bf00      	nop
 8004e14:	370c      	adds	r7, #12
 8004e16:	46bd      	mov	sp, r7
 8004e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e1c:	4770      	bx	lr
	...

08004e20 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d101      	bne.n	8004e32 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004e2e:	2301      	movs	r3, #1
 8004e30:	e128      	b.n	8005084 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d109      	bne.n	8004e52 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	4a90      	ldr	r2, [pc, #576]	; (800508c <HAL_I2S_Init+0x26c>)
 8004e4a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7fc fb4f 	bl	80014f0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	69db      	ldr	r3, [r3, #28]
 8004e60:	687a      	ldr	r2, [r7, #4]
 8004e62:	6812      	ldr	r2, [r2, #0]
 8004e64:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004e68:	f023 030f 	bic.w	r3, r3, #15
 8004e6c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2202      	movs	r2, #2
 8004e74:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	695b      	ldr	r3, [r3, #20]
 8004e7a:	2b02      	cmp	r3, #2
 8004e7c:	d060      	beq.n	8004f40 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	68db      	ldr	r3, [r3, #12]
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d102      	bne.n	8004e8c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004e86:	2310      	movs	r3, #16
 8004e88:	617b      	str	r3, [r7, #20]
 8004e8a:	e001      	b.n	8004e90 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004e8c:	2320      	movs	r3, #32
 8004e8e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	2b20      	cmp	r3, #32
 8004e96:	d802      	bhi.n	8004e9e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	005b      	lsls	r3, r3, #1
 8004e9c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004e9e:	2001      	movs	r0, #1
 8004ea0:	f001 f9ca 	bl	8006238 <HAL_RCCEx_GetPeriphCLKFreq>
 8004ea4:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eae:	d125      	bne.n	8004efc <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	68db      	ldr	r3, [r3, #12]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d010      	beq.n	8004eda <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	68fa      	ldr	r2, [r7, #12]
 8004ebe:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ec2:	4613      	mov	r3, r2
 8004ec4:	009b      	lsls	r3, r3, #2
 8004ec6:	4413      	add	r3, r2
 8004ec8:	005b      	lsls	r3, r3, #1
 8004eca:	461a      	mov	r2, r3
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	695b      	ldr	r3, [r3, #20]
 8004ed0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ed4:	3305      	adds	r3, #5
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	e01f      	b.n	8004f1a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	00db      	lsls	r3, r3, #3
 8004ede:	68fa      	ldr	r2, [r7, #12]
 8004ee0:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	005b      	lsls	r3, r3, #1
 8004eec:	461a      	mov	r2, r3
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	695b      	ldr	r3, [r3, #20]
 8004ef2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef6:	3305      	adds	r3, #5
 8004ef8:	613b      	str	r3, [r7, #16]
 8004efa:	e00e      	b.n	8004f1a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	697b      	ldr	r3, [r7, #20]
 8004f00:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f04:	4613      	mov	r3, r2
 8004f06:	009b      	lsls	r3, r3, #2
 8004f08:	4413      	add	r3, r2
 8004f0a:	005b      	lsls	r3, r3, #1
 8004f0c:	461a      	mov	r2, r3
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	695b      	ldr	r3, [r3, #20]
 8004f12:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f16:	3305      	adds	r3, #5
 8004f18:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	4a5c      	ldr	r2, [pc, #368]	; (8005090 <HAL_I2S_Init+0x270>)
 8004f1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004f22:	08db      	lsrs	r3, r3, #3
 8004f24:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	69bb      	ldr	r3, [r7, #24]
 8004f32:	1ad3      	subs	r3, r2, r3
 8004f34:	085b      	lsrs	r3, r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	021b      	lsls	r3, r3, #8
 8004f3c:	61bb      	str	r3, [r7, #24]
 8004f3e:	e003      	b.n	8004f48 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004f40:	2302      	movs	r3, #2
 8004f42:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004f44:	2300      	movs	r3, #0
 8004f46:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	2b01      	cmp	r3, #1
 8004f4c:	d902      	bls.n	8004f54 <HAL_I2S_Init+0x134>
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	2bff      	cmp	r3, #255	; 0xff
 8004f52:	d907      	bls.n	8004f64 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f58:	f043 0210 	orr.w	r2, r3, #16
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004f60:	2301      	movs	r3, #1
 8004f62:	e08f      	b.n	8005084 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691a      	ldr	r2, [r3, #16]
 8004f68:	69bb      	ldr	r3, [r7, #24]
 8004f6a:	ea42 0103 	orr.w	r1, r2, r3
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	69fa      	ldr	r2, [r7, #28]
 8004f74:	430a      	orrs	r2, r1
 8004f76:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	69db      	ldr	r3, [r3, #28]
 8004f7e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004f82:	f023 030f 	bic.w	r3, r3, #15
 8004f86:	687a      	ldr	r2, [r7, #4]
 8004f88:	6851      	ldr	r1, [r2, #4]
 8004f8a:	687a      	ldr	r2, [r7, #4]
 8004f8c:	6892      	ldr	r2, [r2, #8]
 8004f8e:	4311      	orrs	r1, r2
 8004f90:	687a      	ldr	r2, [r7, #4]
 8004f92:	68d2      	ldr	r2, [r2, #12]
 8004f94:	4311      	orrs	r1, r2
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6992      	ldr	r2, [r2, #24]
 8004f9a:	430a      	orrs	r2, r1
 8004f9c:	431a      	orrs	r2, r3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fa6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a1b      	ldr	r3, [r3, #32]
 8004fac:	2b01      	cmp	r3, #1
 8004fae:	d161      	bne.n	8005074 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	4a38      	ldr	r2, [pc, #224]	; (8005094 <HAL_I2S_Init+0x274>)
 8004fb4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a37      	ldr	r2, [pc, #220]	; (8005098 <HAL_I2S_Init+0x278>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d101      	bne.n	8004fc4 <HAL_I2S_Init+0x1a4>
 8004fc0:	4b36      	ldr	r3, [pc, #216]	; (800509c <HAL_I2S_Init+0x27c>)
 8004fc2:	e001      	b.n	8004fc8 <HAL_I2S_Init+0x1a8>
 8004fc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004fc8:	69db      	ldr	r3, [r3, #28]
 8004fca:	687a      	ldr	r2, [r7, #4]
 8004fcc:	6812      	ldr	r2, [r2, #0]
 8004fce:	4932      	ldr	r1, [pc, #200]	; (8005098 <HAL_I2S_Init+0x278>)
 8004fd0:	428a      	cmp	r2, r1
 8004fd2:	d101      	bne.n	8004fd8 <HAL_I2S_Init+0x1b8>
 8004fd4:	4a31      	ldr	r2, [pc, #196]	; (800509c <HAL_I2S_Init+0x27c>)
 8004fd6:	e001      	b.n	8004fdc <HAL_I2S_Init+0x1bc>
 8004fd8:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004fdc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004fe0:	f023 030f 	bic.w	r3, r3, #15
 8004fe4:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	4a2b      	ldr	r2, [pc, #172]	; (8005098 <HAL_I2S_Init+0x278>)
 8004fec:	4293      	cmp	r3, r2
 8004fee:	d101      	bne.n	8004ff4 <HAL_I2S_Init+0x1d4>
 8004ff0:	4b2a      	ldr	r3, [pc, #168]	; (800509c <HAL_I2S_Init+0x27c>)
 8004ff2:	e001      	b.n	8004ff8 <HAL_I2S_Init+0x1d8>
 8004ff4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	4a25      	ldr	r2, [pc, #148]	; (8005098 <HAL_I2S_Init+0x278>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d101      	bne.n	800500a <HAL_I2S_Init+0x1ea>
 8005006:	4b25      	ldr	r3, [pc, #148]	; (800509c <HAL_I2S_Init+0x27c>)
 8005008:	e001      	b.n	800500e <HAL_I2S_Init+0x1ee>
 800500a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800501a:	d003      	beq.n	8005024 <HAL_I2S_Init+0x204>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d103      	bne.n	800502c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8005024:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005028:	613b      	str	r3, [r7, #16]
 800502a:	e001      	b.n	8005030 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800502c:	2300      	movs	r3, #0
 800502e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	b299      	uxth	r1, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	68db      	ldr	r3, [r3, #12]
 800503e:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 8005046:	4303      	orrs	r3, r0
 8005048:	b29b      	uxth	r3, r3
 800504a:	430b      	orrs	r3, r1
 800504c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 800504e:	4313      	orrs	r3, r2
 8005050:	b29a      	uxth	r2, r3
 8005052:	897b      	ldrh	r3, [r7, #10]
 8005054:	4313      	orrs	r3, r2
 8005056:	b29b      	uxth	r3, r3
 8005058:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800505c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a0d      	ldr	r2, [pc, #52]	; (8005098 <HAL_I2S_Init+0x278>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d101      	bne.n	800506c <HAL_I2S_Init+0x24c>
 8005068:	4b0c      	ldr	r3, [pc, #48]	; (800509c <HAL_I2S_Init+0x27c>)
 800506a:	e001      	b.n	8005070 <HAL_I2S_Init+0x250>
 800506c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005070:	897a      	ldrh	r2, [r7, #10]
 8005072:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2201      	movs	r2, #1
 800507e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8005082:	2300      	movs	r3, #0
}
 8005084:	4618      	mov	r0, r3
 8005086:	3720      	adds	r7, #32
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	08005197 	.word	0x08005197
 8005090:	cccccccd 	.word	0xcccccccd
 8005094:	080052ad 	.word	0x080052ad
 8005098:	40003800 	.word	0x40003800
 800509c:	40003400 	.word	0x40003400

080050a0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050a0:	b480      	push	{r7}
 80050a2:	b083      	sub	sp, #12
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80050a8:	bf00      	nop
 80050aa:	370c      	adds	r7, #12
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr

080050dc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	881a      	ldrh	r2, [r3, #0]
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f4:	1c9a      	adds	r2, r3, #2
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050fe:	b29b      	uxth	r3, r3
 8005100:	3b01      	subs	r3, #1
 8005102:	b29a      	uxth	r2, r3
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800510c:	b29b      	uxth	r3, r3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d10e      	bne.n	8005130 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	685a      	ldr	r2, [r3, #4]
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005120:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	2201      	movs	r2, #1
 8005126:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800512a:	6878      	ldr	r0, [r7, #4]
 800512c:	f7ff ffb8 	bl	80050a0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005130:	bf00      	nop
 8005132:	3708      	adds	r7, #8
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b082      	sub	sp, #8
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800514a:	b292      	uxth	r2, r2
 800514c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005152:	1c9a      	adds	r2, r3, #2
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800515c:	b29b      	uxth	r3, r3
 800515e:	3b01      	subs	r3, #1
 8005160:	b29a      	uxth	r2, r3
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800516a:	b29b      	uxth	r3, r3
 800516c:	2b00      	cmp	r3, #0
 800516e:	d10e      	bne.n	800518e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800517e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	2201      	movs	r2, #1
 8005184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005188:	6878      	ldr	r0, [r7, #4]
 800518a:	f7ff ff93 	bl	80050b4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800518e:	bf00      	nop
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005196:	b580      	push	{r7, lr}
 8005198:	b086      	sub	sp, #24
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b04      	cmp	r3, #4
 80051b0:	d13a      	bne.n	8005228 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	f003 0301 	and.w	r3, r3, #1
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d109      	bne.n	80051d0 <I2S_IRQHandler+0x3a>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c6:	2b40      	cmp	r3, #64	; 0x40
 80051c8:	d102      	bne.n	80051d0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f7ff ffb4 	bl	8005138 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d126      	bne.n	8005228 <I2S_IRQHandler+0x92>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	685b      	ldr	r3, [r3, #4]
 80051e0:	f003 0320 	and.w	r3, r3, #32
 80051e4:	2b20      	cmp	r3, #32
 80051e6:	d11f      	bne.n	8005228 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	685a      	ldr	r2, [r3, #4]
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051f6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80051f8:	2300      	movs	r3, #0
 80051fa:	613b      	str	r3, [r7, #16]
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	68db      	ldr	r3, [r3, #12]
 8005202:	613b      	str	r3, [r7, #16]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	689b      	ldr	r3, [r3, #8]
 800520a:	613b      	str	r3, [r7, #16]
 800520c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800521a:	f043 0202 	orr.w	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f7ff ff50 	bl	80050c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b03      	cmp	r3, #3
 8005232:	d136      	bne.n	80052a2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b02      	cmp	r3, #2
 800523c:	d109      	bne.n	8005252 <I2S_IRQHandler+0xbc>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005248:	2b80      	cmp	r3, #128	; 0x80
 800524a:	d102      	bne.n	8005252 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800524c:	6878      	ldr	r0, [r7, #4]
 800524e:	f7ff ff45 	bl	80050dc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005252:	697b      	ldr	r3, [r7, #20]
 8005254:	f003 0308 	and.w	r3, r3, #8
 8005258:	2b08      	cmp	r3, #8
 800525a:	d122      	bne.n	80052a2 <I2S_IRQHandler+0x10c>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685b      	ldr	r3, [r3, #4]
 8005262:	f003 0320 	and.w	r3, r3, #32
 8005266:	2b20      	cmp	r3, #32
 8005268:	d11b      	bne.n	80052a2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	685a      	ldr	r2, [r3, #4]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005278:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800527a:	2300      	movs	r3, #0
 800527c:	60fb      	str	r3, [r7, #12]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005294:	f043 0204 	orr.w	r2, r3, #4
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff ff13 	bl	80050c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80052a2:	bf00      	nop
 80052a4:	3718      	adds	r7, #24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
	...

080052ac <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b088      	sub	sp, #32
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	4aa2      	ldr	r2, [pc, #648]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d101      	bne.n	80052ca <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80052c6:	4ba2      	ldr	r3, [pc, #648]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052c8:	e001      	b.n	80052ce <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80052ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	685b      	ldr	r3, [r3, #4]
 80052d8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	4a9b      	ldr	r2, [pc, #620]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d101      	bne.n	80052e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80052e4:	4b9a      	ldr	r3, [pc, #616]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80052e6:	e001      	b.n	80052ec <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80052e8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052f8:	d004      	beq.n	8005304 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	685b      	ldr	r3, [r3, #4]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 8099 	bne.w	8005436 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005304:	69fb      	ldr	r3, [r7, #28]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d107      	bne.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005314:	2b00      	cmp	r3, #0
 8005316:	d002      	beq.n	800531e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005318:	6878      	ldr	r0, [r7, #4]
 800531a:	f000 f925 	bl	8005568 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800531e:	69bb      	ldr	r3, [r7, #24]
 8005320:	f003 0301 	and.w	r3, r3, #1
 8005324:	2b01      	cmp	r3, #1
 8005326:	d107      	bne.n	8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532e:	2b00      	cmp	r3, #0
 8005330:	d002      	beq.n	8005338 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005332:	6878      	ldr	r0, [r7, #4]
 8005334:	f000 f9c8 	bl	80056c8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005338:	69bb      	ldr	r3, [r7, #24]
 800533a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800533e:	2b40      	cmp	r3, #64	; 0x40
 8005340:	d13a      	bne.n	80053b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005342:	693b      	ldr	r3, [r7, #16]
 8005344:	f003 0320 	and.w	r3, r3, #32
 8005348:	2b00      	cmp	r3, #0
 800534a:	d035      	beq.n	80053b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	4a7e      	ldr	r2, [pc, #504]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d101      	bne.n	800535a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005356:	4b7e      	ldr	r3, [pc, #504]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005358:	e001      	b.n	800535e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800535a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	4979      	ldr	r1, [pc, #484]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005366:	428b      	cmp	r3, r1
 8005368:	d101      	bne.n	800536e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800536a:	4b79      	ldr	r3, [pc, #484]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800536c:	e001      	b.n	8005372 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800536e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005372:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005376:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	685a      	ldr	r2, [r3, #4]
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005386:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005388:	2300      	movs	r3, #0
 800538a:	60fb      	str	r3, [r7, #12]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689b      	ldr	r3, [r3, #8]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053aa:	f043 0202 	orr.w	r2, r3, #2
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80053b2:	6878      	ldr	r0, [r7, #4]
 80053b4:	f7ff fe88 	bl	80050c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80053b8:	69fb      	ldr	r3, [r7, #28]
 80053ba:	f003 0308 	and.w	r3, r3, #8
 80053be:	2b08      	cmp	r3, #8
 80053c0:	f040 80be 	bne.w	8005540 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	f000 80b8 	beq.w	8005540 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	685a      	ldr	r2, [r3, #4]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80053de:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a59      	ldr	r2, [pc, #356]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053e6:	4293      	cmp	r3, r2
 80053e8:	d101      	bne.n	80053ee <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80053ea:	4b59      	ldr	r3, [pc, #356]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80053ec:	e001      	b.n	80053f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80053ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80053f2:	685a      	ldr	r2, [r3, #4]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4954      	ldr	r1, [pc, #336]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80053fa:	428b      	cmp	r3, r1
 80053fc:	d101      	bne.n	8005402 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80053fe:	4b54      	ldr	r3, [pc, #336]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005400:	e001      	b.n	8005406 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005402:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005406:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800540a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800540c:	2300      	movs	r3, #0
 800540e:	60bb      	str	r3, [r7, #8]
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689b      	ldr	r3, [r3, #8]
 8005416:	60bb      	str	r3, [r7, #8]
 8005418:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005426:	f043 0204 	orr.w	r2, r3, #4
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800542e:	6878      	ldr	r0, [r7, #4]
 8005430:	f7ff fe4a 	bl	80050c8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005434:	e084      	b.n	8005540 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005436:	69bb      	ldr	r3, [r7, #24]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b02      	cmp	r3, #2
 800543e:	d107      	bne.n	8005450 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f8be 	bl	80055cc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005450:	69fb      	ldr	r3, [r7, #28]
 8005452:	f003 0301 	and.w	r3, r3, #1
 8005456:	2b01      	cmp	r3, #1
 8005458:	d107      	bne.n	800546a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005460:	2b00      	cmp	r3, #0
 8005462:	d002      	beq.n	800546a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005464:	6878      	ldr	r0, [r7, #4]
 8005466:	f000 f8fd 	bl	8005664 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800546a:	69fb      	ldr	r3, [r7, #28]
 800546c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005470:	2b40      	cmp	r3, #64	; 0x40
 8005472:	d12f      	bne.n	80054d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005474:	697b      	ldr	r3, [r7, #20]
 8005476:	f003 0320 	and.w	r3, r3, #32
 800547a:	2b00      	cmp	r3, #0
 800547c:	d02a      	beq.n	80054d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	685a      	ldr	r2, [r3, #4]
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800548c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	4a2e      	ldr	r2, [pc, #184]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005494:	4293      	cmp	r3, r2
 8005496:	d101      	bne.n	800549c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005498:	4b2d      	ldr	r3, [pc, #180]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800549a:	e001      	b.n	80054a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800549c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054a0:	685a      	ldr	r2, [r3, #4]
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4929      	ldr	r1, [pc, #164]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054a8:	428b      	cmp	r3, r1
 80054aa:	d101      	bne.n	80054b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80054ac:	4b28      	ldr	r3, [pc, #160]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054ae:	e001      	b.n	80054b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80054b0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054b4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80054b8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2201      	movs	r2, #1
 80054be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	f043 0202 	orr.w	r2, r3, #2
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fdfa 	bl	80050c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80054d4:	69bb      	ldr	r3, [r7, #24]
 80054d6:	f003 0308 	and.w	r3, r3, #8
 80054da:	2b08      	cmp	r3, #8
 80054dc:	d131      	bne.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d02c      	beq.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4a17      	ldr	r2, [pc, #92]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80054f2:	4b17      	ldr	r3, [pc, #92]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 80054f4:	e001      	b.n	80054fa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80054f6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80054fa:	685a      	ldr	r2, [r3, #4]
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	4912      	ldr	r1, [pc, #72]	; (800554c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005502:	428b      	cmp	r3, r1
 8005504:	d101      	bne.n	800550a <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005506:	4b12      	ldr	r3, [pc, #72]	; (8005550 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005508:	e001      	b.n	800550e <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 800550a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800550e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005512:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	685a      	ldr	r2, [r3, #4]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005522:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005530:	f043 0204 	orr.w	r2, r3, #4
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005538:	6878      	ldr	r0, [r7, #4]
 800553a:	f7ff fdc5 	bl	80050c8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800553e:	e000      	b.n	8005542 <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005540:	bf00      	nop
}
 8005542:	bf00      	nop
 8005544:	3720      	adds	r7, #32
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}
 800554a:	bf00      	nop
 800554c:	40003800 	.word	0x40003800
 8005550:	40003400 	.word	0x40003400

08005554 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005554:	b480      	push	{r7}
 8005556:	b083      	sub	sp, #12
 8005558:	af00      	add	r7, sp, #0
 800555a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800555c:	bf00      	nop
 800555e:	370c      	adds	r7, #12
 8005560:	46bd      	mov	sp, r7
 8005562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005566:	4770      	bx	lr

08005568 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b082      	sub	sp, #8
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005574:	1c99      	adds	r1, r3, #2
 8005576:	687a      	ldr	r2, [r7, #4]
 8005578:	6251      	str	r1, [r2, #36]	; 0x24
 800557a:	881a      	ldrh	r2, [r3, #0]
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005586:	b29b      	uxth	r3, r3
 8005588:	3b01      	subs	r3, #1
 800558a:	b29a      	uxth	r2, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	d113      	bne.n	80055c2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80055a8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d106      	bne.n	80055c2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7ff ffc9 	bl	8005554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80055c2:	bf00      	nop
 80055c4:	3708      	adds	r7, #8
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
	...

080055cc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80055cc:	b580      	push	{r7, lr}
 80055ce:	b082      	sub	sp, #8
 80055d0:	af00      	add	r7, sp, #0
 80055d2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d8:	1c99      	adds	r1, r3, #2
 80055da:	687a      	ldr	r2, [r7, #4]
 80055dc:	6251      	str	r1, [r2, #36]	; 0x24
 80055de:	8819      	ldrh	r1, [r3, #0]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	4a1d      	ldr	r2, [pc, #116]	; (800565c <I2SEx_TxISR_I2SExt+0x90>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	d101      	bne.n	80055ee <I2SEx_TxISR_I2SExt+0x22>
 80055ea:	4b1d      	ldr	r3, [pc, #116]	; (8005660 <I2SEx_TxISR_I2SExt+0x94>)
 80055ec:	e001      	b.n	80055f2 <I2SEx_TxISR_I2SExt+0x26>
 80055ee:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80055f2:	460a      	mov	r2, r1
 80055f4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055fa:	b29b      	uxth	r3, r3
 80055fc:	3b01      	subs	r3, #1
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d121      	bne.n	8005652 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	4a12      	ldr	r2, [pc, #72]	; (800565c <I2SEx_TxISR_I2SExt+0x90>)
 8005614:	4293      	cmp	r3, r2
 8005616:	d101      	bne.n	800561c <I2SEx_TxISR_I2SExt+0x50>
 8005618:	4b11      	ldr	r3, [pc, #68]	; (8005660 <I2SEx_TxISR_I2SExt+0x94>)
 800561a:	e001      	b.n	8005620 <I2SEx_TxISR_I2SExt+0x54>
 800561c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	490d      	ldr	r1, [pc, #52]	; (800565c <I2SEx_TxISR_I2SExt+0x90>)
 8005628:	428b      	cmp	r3, r1
 800562a:	d101      	bne.n	8005630 <I2SEx_TxISR_I2SExt+0x64>
 800562c:	4b0c      	ldr	r3, [pc, #48]	; (8005660 <I2SEx_TxISR_I2SExt+0x94>)
 800562e:	e001      	b.n	8005634 <I2SEx_TxISR_I2SExt+0x68>
 8005630:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005634:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005638:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800563e:	b29b      	uxth	r3, r3
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f7ff ff81 	bl	8005554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005652:	bf00      	nop
 8005654:	3708      	adds	r7, #8
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	40003800 	.word	0x40003800
 8005660:	40003400 	.word	0x40003400

08005664 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	68d8      	ldr	r0, [r3, #12]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005676:	1c99      	adds	r1, r3, #2
 8005678:	687a      	ldr	r2, [r7, #4]
 800567a:	62d1      	str	r1, [r2, #44]	; 0x2c
 800567c:	b282      	uxth	r2, r0
 800567e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005684:	b29b      	uxth	r3, r3
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005692:	b29b      	uxth	r3, r3
 8005694:	2b00      	cmp	r3, #0
 8005696:	d113      	bne.n	80056c0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	685a      	ldr	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80056a6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ac:	b29b      	uxth	r3, r3
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d106      	bne.n	80056c0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2201      	movs	r2, #1
 80056b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f7ff ff4a 	bl	8005554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80056c0:	bf00      	nop
 80056c2:	3708      	adds	r7, #8
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a20      	ldr	r2, [pc, #128]	; (8005758 <I2SEx_RxISR_I2SExt+0x90>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <I2SEx_RxISR_I2SExt+0x16>
 80056da:	4b20      	ldr	r3, [pc, #128]	; (800575c <I2SEx_RxISR_I2SExt+0x94>)
 80056dc:	e001      	b.n	80056e2 <I2SEx_RxISR_I2SExt+0x1a>
 80056de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80056e2:	68d8      	ldr	r0, [r3, #12]
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056e8:	1c99      	adds	r1, r3, #2
 80056ea:	687a      	ldr	r2, [r7, #4]
 80056ec:	62d1      	str	r1, [r2, #44]	; 0x2c
 80056ee:	b282      	uxth	r2, r0
 80056f0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80056f6:	b29b      	uxth	r3, r3
 80056f8:	3b01      	subs	r3, #1
 80056fa:	b29a      	uxth	r2, r3
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005704:	b29b      	uxth	r3, r3
 8005706:	2b00      	cmp	r3, #0
 8005708:	d121      	bne.n	800574e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a12      	ldr	r2, [pc, #72]	; (8005758 <I2SEx_RxISR_I2SExt+0x90>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d101      	bne.n	8005718 <I2SEx_RxISR_I2SExt+0x50>
 8005714:	4b11      	ldr	r3, [pc, #68]	; (800575c <I2SEx_RxISR_I2SExt+0x94>)
 8005716:	e001      	b.n	800571c <I2SEx_RxISR_I2SExt+0x54>
 8005718:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800571c:	685a      	ldr	r2, [r3, #4]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	490d      	ldr	r1, [pc, #52]	; (8005758 <I2SEx_RxISR_I2SExt+0x90>)
 8005724:	428b      	cmp	r3, r1
 8005726:	d101      	bne.n	800572c <I2SEx_RxISR_I2SExt+0x64>
 8005728:	4b0c      	ldr	r3, [pc, #48]	; (800575c <I2SEx_RxISR_I2SExt+0x94>)
 800572a:	e001      	b.n	8005730 <I2SEx_RxISR_I2SExt+0x68>
 800572c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005730:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005734:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800573a:	b29b      	uxth	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d106      	bne.n	800574e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2201      	movs	r2, #1
 8005744:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff03 	bl	8005554 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800574e:	bf00      	nop
 8005750:	3708      	adds	r7, #8
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40003800 	.word	0x40003800
 800575c:	40003400 	.word	0x40003400

08005760 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	2b00      	cmp	r3, #0
 800576c:	d101      	bne.n	8005772 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800576e:	2301      	movs	r3, #1
 8005770:	e25b      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f003 0301 	and.w	r3, r3, #1
 800577a:	2b00      	cmp	r3, #0
 800577c:	d075      	beq.n	800586a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800577e:	4ba3      	ldr	r3, [pc, #652]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	f003 030c 	and.w	r3, r3, #12
 8005786:	2b04      	cmp	r3, #4
 8005788:	d00c      	beq.n	80057a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800578a:	4ba0      	ldr	r3, [pc, #640]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 800578c:	689b      	ldr	r3, [r3, #8]
 800578e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005792:	2b08      	cmp	r3, #8
 8005794:	d112      	bne.n	80057bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005796:	4b9d      	ldr	r3, [pc, #628]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800579e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057a2:	d10b      	bne.n	80057bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057a4:	4b99      	ldr	r3, [pc, #612]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d05b      	beq.n	8005868 <HAL_RCC_OscConfig+0x108>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d157      	bne.n	8005868 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e236      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057c4:	d106      	bne.n	80057d4 <HAL_RCC_OscConfig+0x74>
 80057c6:	4b91      	ldr	r3, [pc, #580]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4a90      	ldr	r2, [pc, #576]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057d0:	6013      	str	r3, [r2, #0]
 80057d2:	e01d      	b.n	8005810 <HAL_RCC_OscConfig+0xb0>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80057dc:	d10c      	bne.n	80057f8 <HAL_RCC_OscConfig+0x98>
 80057de:	4b8b      	ldr	r3, [pc, #556]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a8a      	ldr	r2, [pc, #552]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80057e8:	6013      	str	r3, [r2, #0]
 80057ea:	4b88      	ldr	r3, [pc, #544]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a87      	ldr	r2, [pc, #540]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80057f4:	6013      	str	r3, [r2, #0]
 80057f6:	e00b      	b.n	8005810 <HAL_RCC_OscConfig+0xb0>
 80057f8:	4b84      	ldr	r3, [pc, #528]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a83      	ldr	r2, [pc, #524]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80057fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005802:	6013      	str	r3, [r2, #0]
 8005804:	4b81      	ldr	r3, [pc, #516]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	4a80      	ldr	r2, [pc, #512]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 800580a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800580e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	685b      	ldr	r3, [r3, #4]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d013      	beq.n	8005840 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005818:	f7fc fb12 	bl	8001e40 <HAL_GetTick>
 800581c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800581e:	e008      	b.n	8005832 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005820:	f7fc fb0e 	bl	8001e40 <HAL_GetTick>
 8005824:	4602      	mov	r2, r0
 8005826:	693b      	ldr	r3, [r7, #16]
 8005828:	1ad3      	subs	r3, r2, r3
 800582a:	2b64      	cmp	r3, #100	; 0x64
 800582c:	d901      	bls.n	8005832 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800582e:	2303      	movs	r3, #3
 8005830:	e1fb      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005832:	4b76      	ldr	r3, [pc, #472]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800583a:	2b00      	cmp	r3, #0
 800583c:	d0f0      	beq.n	8005820 <HAL_RCC_OscConfig+0xc0>
 800583e:	e014      	b.n	800586a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005840:	f7fc fafe 	bl	8001e40 <HAL_GetTick>
 8005844:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005846:	e008      	b.n	800585a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005848:	f7fc fafa 	bl	8001e40 <HAL_GetTick>
 800584c:	4602      	mov	r2, r0
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	1ad3      	subs	r3, r2, r3
 8005852:	2b64      	cmp	r3, #100	; 0x64
 8005854:	d901      	bls.n	800585a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e1e7      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800585a:	4b6c      	ldr	r3, [pc, #432]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d1f0      	bne.n	8005848 <HAL_RCC_OscConfig+0xe8>
 8005866:	e000      	b.n	800586a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005868:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d063      	beq.n	800593e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005876:	4b65      	ldr	r3, [pc, #404]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f003 030c 	and.w	r3, r3, #12
 800587e:	2b00      	cmp	r3, #0
 8005880:	d00b      	beq.n	800589a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005882:	4b62      	ldr	r3, [pc, #392]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005884:	689b      	ldr	r3, [r3, #8]
 8005886:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800588a:	2b08      	cmp	r3, #8
 800588c:	d11c      	bne.n	80058c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800588e:	4b5f      	ldr	r3, [pc, #380]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005896:	2b00      	cmp	r3, #0
 8005898:	d116      	bne.n	80058c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800589a:	4b5c      	ldr	r3, [pc, #368]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0302 	and.w	r3, r3, #2
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d005      	beq.n	80058b2 <HAL_RCC_OscConfig+0x152>
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	68db      	ldr	r3, [r3, #12]
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80058ae:	2301      	movs	r3, #1
 80058b0:	e1bb      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058b2:	4b56      	ldr	r3, [pc, #344]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	691b      	ldr	r3, [r3, #16]
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4952      	ldr	r1, [pc, #328]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80058c2:	4313      	orrs	r3, r2
 80058c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80058c6:	e03a      	b.n	800593e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	68db      	ldr	r3, [r3, #12]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d020      	beq.n	8005912 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80058d0:	4b4f      	ldr	r3, [pc, #316]	; (8005a10 <HAL_RCC_OscConfig+0x2b0>)
 80058d2:	2201      	movs	r2, #1
 80058d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058d6:	f7fc fab3 	bl	8001e40 <HAL_GetTick>
 80058da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058dc:	e008      	b.n	80058f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80058de:	f7fc faaf 	bl	8001e40 <HAL_GetTick>
 80058e2:	4602      	mov	r2, r0
 80058e4:	693b      	ldr	r3, [r7, #16]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	2b02      	cmp	r3, #2
 80058ea:	d901      	bls.n	80058f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80058ec:	2303      	movs	r3, #3
 80058ee:	e19c      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80058f0:	4b46      	ldr	r3, [pc, #280]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	f003 0302 	and.w	r3, r3, #2
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d0f0      	beq.n	80058de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058fc:	4b43      	ldr	r3, [pc, #268]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	691b      	ldr	r3, [r3, #16]
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4940      	ldr	r1, [pc, #256]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 800590c:	4313      	orrs	r3, r2
 800590e:	600b      	str	r3, [r1, #0]
 8005910:	e015      	b.n	800593e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005912:	4b3f      	ldr	r3, [pc, #252]	; (8005a10 <HAL_RCC_OscConfig+0x2b0>)
 8005914:	2200      	movs	r2, #0
 8005916:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005918:	f7fc fa92 	bl	8001e40 <HAL_GetTick>
 800591c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800591e:	e008      	b.n	8005932 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005920:	f7fc fa8e 	bl	8001e40 <HAL_GetTick>
 8005924:	4602      	mov	r2, r0
 8005926:	693b      	ldr	r3, [r7, #16]
 8005928:	1ad3      	subs	r3, r2, r3
 800592a:	2b02      	cmp	r3, #2
 800592c:	d901      	bls.n	8005932 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800592e:	2303      	movs	r3, #3
 8005930:	e17b      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005932:	4b36      	ldr	r3, [pc, #216]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	f003 0302 	and.w	r3, r3, #2
 800593a:	2b00      	cmp	r3, #0
 800593c:	d1f0      	bne.n	8005920 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0308 	and.w	r3, r3, #8
 8005946:	2b00      	cmp	r3, #0
 8005948:	d030      	beq.n	80059ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d016      	beq.n	8005980 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005952:	4b30      	ldr	r3, [pc, #192]	; (8005a14 <HAL_RCC_OscConfig+0x2b4>)
 8005954:	2201      	movs	r2, #1
 8005956:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005958:	f7fc fa72 	bl	8001e40 <HAL_GetTick>
 800595c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800595e:	e008      	b.n	8005972 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005960:	f7fc fa6e 	bl	8001e40 <HAL_GetTick>
 8005964:	4602      	mov	r2, r0
 8005966:	693b      	ldr	r3, [r7, #16]
 8005968:	1ad3      	subs	r3, r2, r3
 800596a:	2b02      	cmp	r3, #2
 800596c:	d901      	bls.n	8005972 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800596e:	2303      	movs	r3, #3
 8005970:	e15b      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005972:	4b26      	ldr	r3, [pc, #152]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 8005974:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005976:	f003 0302 	and.w	r3, r3, #2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d0f0      	beq.n	8005960 <HAL_RCC_OscConfig+0x200>
 800597e:	e015      	b.n	80059ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005980:	4b24      	ldr	r3, [pc, #144]	; (8005a14 <HAL_RCC_OscConfig+0x2b4>)
 8005982:	2200      	movs	r2, #0
 8005984:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005986:	f7fc fa5b 	bl	8001e40 <HAL_GetTick>
 800598a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800598c:	e008      	b.n	80059a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800598e:	f7fc fa57 	bl	8001e40 <HAL_GetTick>
 8005992:	4602      	mov	r2, r0
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	1ad3      	subs	r3, r2, r3
 8005998:	2b02      	cmp	r3, #2
 800599a:	d901      	bls.n	80059a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800599c:	2303      	movs	r3, #3
 800599e:	e144      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80059a0:	4b1a      	ldr	r3, [pc, #104]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80059a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80059a4:	f003 0302 	and.w	r3, r3, #2
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d1f0      	bne.n	800598e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f003 0304 	and.w	r3, r3, #4
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	f000 80a0 	beq.w	8005afa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ba:	2300      	movs	r3, #0
 80059bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80059c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d10f      	bne.n	80059ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80059ca:	2300      	movs	r3, #0
 80059cc:	60bb      	str	r3, [r7, #8]
 80059ce:	4b0f      	ldr	r3, [pc, #60]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d2:	4a0e      	ldr	r2, [pc, #56]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80059d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059d8:	6413      	str	r3, [r2, #64]	; 0x40
 80059da:	4b0c      	ldr	r3, [pc, #48]	; (8005a0c <HAL_RCC_OscConfig+0x2ac>)
 80059dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059e2:	60bb      	str	r3, [r7, #8]
 80059e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059e6:	2301      	movs	r3, #1
 80059e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80059ea:	4b0b      	ldr	r3, [pc, #44]	; (8005a18 <HAL_RCC_OscConfig+0x2b8>)
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d121      	bne.n	8005a3a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80059f6:	4b08      	ldr	r3, [pc, #32]	; (8005a18 <HAL_RCC_OscConfig+0x2b8>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <HAL_RCC_OscConfig+0x2b8>)
 80059fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005a02:	f7fc fa1d 	bl	8001e40 <HAL_GetTick>
 8005a06:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a08:	e011      	b.n	8005a2e <HAL_RCC_OscConfig+0x2ce>
 8005a0a:	bf00      	nop
 8005a0c:	40023800 	.word	0x40023800
 8005a10:	42470000 	.word	0x42470000
 8005a14:	42470e80 	.word	0x42470e80
 8005a18:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a1c:	f7fc fa10 	bl	8001e40 <HAL_GetTick>
 8005a20:	4602      	mov	r2, r0
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	1ad3      	subs	r3, r2, r3
 8005a26:	2b02      	cmp	r3, #2
 8005a28:	d901      	bls.n	8005a2e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005a2a:	2303      	movs	r3, #3
 8005a2c:	e0fd      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005a2e:	4b81      	ldr	r3, [pc, #516]	; (8005c34 <HAL_RCC_OscConfig+0x4d4>)
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d0f0      	beq.n	8005a1c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	689b      	ldr	r3, [r3, #8]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d106      	bne.n	8005a50 <HAL_RCC_OscConfig+0x2f0>
 8005a42:	4b7d      	ldr	r3, [pc, #500]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a46:	4a7c      	ldr	r2, [pc, #496]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a48:	f043 0301 	orr.w	r3, r3, #1
 8005a4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a4e:	e01c      	b.n	8005a8a <HAL_RCC_OscConfig+0x32a>
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	689b      	ldr	r3, [r3, #8]
 8005a54:	2b05      	cmp	r3, #5
 8005a56:	d10c      	bne.n	8005a72 <HAL_RCC_OscConfig+0x312>
 8005a58:	4b77      	ldr	r3, [pc, #476]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a5c:	4a76      	ldr	r2, [pc, #472]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a5e:	f043 0304 	orr.w	r3, r3, #4
 8005a62:	6713      	str	r3, [r2, #112]	; 0x70
 8005a64:	4b74      	ldr	r3, [pc, #464]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a68:	4a73      	ldr	r2, [pc, #460]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a6a:	f043 0301 	orr.w	r3, r3, #1
 8005a6e:	6713      	str	r3, [r2, #112]	; 0x70
 8005a70:	e00b      	b.n	8005a8a <HAL_RCC_OscConfig+0x32a>
 8005a72:	4b71      	ldr	r3, [pc, #452]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a76:	4a70      	ldr	r2, [pc, #448]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a78:	f023 0301 	bic.w	r3, r3, #1
 8005a7c:	6713      	str	r3, [r2, #112]	; 0x70
 8005a7e:	4b6e      	ldr	r3, [pc, #440]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005a82:	4a6d      	ldr	r2, [pc, #436]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005a84:	f023 0304 	bic.w	r3, r3, #4
 8005a88:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d015      	beq.n	8005abe <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005a92:	f7fc f9d5 	bl	8001e40 <HAL_GetTick>
 8005a96:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005a98:	e00a      	b.n	8005ab0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005a9a:	f7fc f9d1 	bl	8001e40 <HAL_GetTick>
 8005a9e:	4602      	mov	r2, r0
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	1ad3      	subs	r3, r2, r3
 8005aa4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e0bc      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ab0:	4b61      	ldr	r3, [pc, #388]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005ab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ab4:	f003 0302 	and.w	r3, r3, #2
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d0ee      	beq.n	8005a9a <HAL_RCC_OscConfig+0x33a>
 8005abc:	e014      	b.n	8005ae8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005abe:	f7fc f9bf 	bl	8001e40 <HAL_GetTick>
 8005ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ac4:	e00a      	b.n	8005adc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ac6:	f7fc f9bb 	bl	8001e40 <HAL_GetTick>
 8005aca:	4602      	mov	r2, r0
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	1ad3      	subs	r3, r2, r3
 8005ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d901      	bls.n	8005adc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005ad8:	2303      	movs	r3, #3
 8005ada:	e0a6      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005adc:	4b56      	ldr	r3, [pc, #344]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae0:	f003 0302 	and.w	r3, r3, #2
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d1ee      	bne.n	8005ac6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ae8:	7dfb      	ldrb	r3, [r7, #23]
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d105      	bne.n	8005afa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005aee:	4b52      	ldr	r3, [pc, #328]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005af2:	4a51      	ldr	r2, [pc, #324]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005af4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005af8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	699b      	ldr	r3, [r3, #24]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	f000 8092 	beq.w	8005c28 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005b04:	4b4c      	ldr	r3, [pc, #304]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005b06:	689b      	ldr	r3, [r3, #8]
 8005b08:	f003 030c 	and.w	r3, r3, #12
 8005b0c:	2b08      	cmp	r3, #8
 8005b0e:	d05c      	beq.n	8005bca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	699b      	ldr	r3, [r3, #24]
 8005b14:	2b02      	cmp	r3, #2
 8005b16:	d141      	bne.n	8005b9c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b18:	4b48      	ldr	r3, [pc, #288]	; (8005c3c <HAL_RCC_OscConfig+0x4dc>)
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b1e:	f7fc f98f 	bl	8001e40 <HAL_GetTick>
 8005b22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b24:	e008      	b.n	8005b38 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b26:	f7fc f98b 	bl	8001e40 <HAL_GetTick>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	1ad3      	subs	r3, r2, r3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d901      	bls.n	8005b38 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005b34:	2303      	movs	r3, #3
 8005b36:	e078      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005b38:	4b3f      	ldr	r3, [pc, #252]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1f0      	bne.n	8005b26 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69da      	ldr	r2, [r3, #28]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	431a      	orrs	r2, r3
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b52:	019b      	lsls	r3, r3, #6
 8005b54:	431a      	orrs	r2, r3
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	085b      	lsrs	r3, r3, #1
 8005b5c:	3b01      	subs	r3, #1
 8005b5e:	041b      	lsls	r3, r3, #16
 8005b60:	431a      	orrs	r2, r3
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b66:	061b      	lsls	r3, r3, #24
 8005b68:	4933      	ldr	r1, [pc, #204]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005b6e:	4b33      	ldr	r3, [pc, #204]	; (8005c3c <HAL_RCC_OscConfig+0x4dc>)
 8005b70:	2201      	movs	r2, #1
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b74:	f7fc f964 	bl	8001e40 <HAL_GetTick>
 8005b78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b7a:	e008      	b.n	8005b8e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005b7c:	f7fc f960 	bl	8001e40 <HAL_GetTick>
 8005b80:	4602      	mov	r2, r0
 8005b82:	693b      	ldr	r3, [r7, #16]
 8005b84:	1ad3      	subs	r3, r2, r3
 8005b86:	2b02      	cmp	r3, #2
 8005b88:	d901      	bls.n	8005b8e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8005b8a:	2303      	movs	r3, #3
 8005b8c:	e04d      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005b8e:	4b2a      	ldr	r3, [pc, #168]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d0f0      	beq.n	8005b7c <HAL_RCC_OscConfig+0x41c>
 8005b9a:	e045      	b.n	8005c28 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b9c:	4b27      	ldr	r3, [pc, #156]	; (8005c3c <HAL_RCC_OscConfig+0x4dc>)
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ba2:	f7fc f94d 	bl	8001e40 <HAL_GetTick>
 8005ba6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005ba8:	e008      	b.n	8005bbc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005baa:	f7fc f949 	bl	8001e40 <HAL_GetTick>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	1ad3      	subs	r3, r2, r3
 8005bb4:	2b02      	cmp	r3, #2
 8005bb6:	d901      	bls.n	8005bbc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005bb8:	2303      	movs	r3, #3
 8005bba:	e036      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005bbc:	4b1e      	ldr	r3, [pc, #120]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d1f0      	bne.n	8005baa <HAL_RCC_OscConfig+0x44a>
 8005bc8:	e02e      	b.n	8005c28 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	699b      	ldr	r3, [r3, #24]
 8005bce:	2b01      	cmp	r3, #1
 8005bd0:	d101      	bne.n	8005bd6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005bd2:	2301      	movs	r3, #1
 8005bd4:	e029      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005bd6:	4b18      	ldr	r3, [pc, #96]	; (8005c38 <HAL_RCC_OscConfig+0x4d8>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	69db      	ldr	r3, [r3, #28]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d11c      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d115      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005bf8:	68fa      	ldr	r2, [r7, #12]
 8005bfa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005bfe:	4013      	ands	r3, r2
 8005c00:	687a      	ldr	r2, [r7, #4]
 8005c02:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d10d      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005c12:	429a      	cmp	r2, r3
 8005c14:	d106      	bne.n	8005c24 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c20:	429a      	cmp	r2, r3
 8005c22:	d001      	beq.n	8005c28 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8005c24:	2301      	movs	r3, #1
 8005c26:	e000      	b.n	8005c2a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40007000 	.word	0x40007000
 8005c38:	40023800 	.word	0x40023800
 8005c3c:	42470060 	.word	0x42470060

08005c40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005c40:	b580      	push	{r7, lr}
 8005c42:	b084      	sub	sp, #16
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	6078      	str	r0, [r7, #4]
 8005c48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d101      	bne.n	8005c54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005c50:	2301      	movs	r3, #1
 8005c52:	e0cc      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005c54:	4b68      	ldr	r3, [pc, #416]	; (8005df8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f003 030f 	and.w	r3, r3, #15
 8005c5c:	683a      	ldr	r2, [r7, #0]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d90c      	bls.n	8005c7c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c62:	4b65      	ldr	r3, [pc, #404]	; (8005df8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c64:	683a      	ldr	r2, [r7, #0]
 8005c66:	b2d2      	uxtb	r2, r2
 8005c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005c6a:	4b63      	ldr	r3, [pc, #396]	; (8005df8 <HAL_RCC_ClockConfig+0x1b8>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 030f 	and.w	r3, r3, #15
 8005c72:	683a      	ldr	r2, [r7, #0]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d001      	beq.n	8005c7c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	e0b8      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f003 0302 	and.w	r3, r3, #2
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d020      	beq.n	8005cca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	f003 0304 	and.w	r3, r3, #4
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d005      	beq.n	8005ca0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c94:	4b59      	ldr	r3, [pc, #356]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	4a58      	ldr	r2, [pc, #352]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005c9a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005c9e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0308 	and.w	r3, r3, #8
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d005      	beq.n	8005cb8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005cac:	4b53      	ldr	r3, [pc, #332]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	4a52      	ldr	r2, [pc, #328]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cb2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005cb6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005cb8:	4b50      	ldr	r3, [pc, #320]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cba:	689b      	ldr	r3, [r3, #8]
 8005cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	689b      	ldr	r3, [r3, #8]
 8005cc4:	494d      	ldr	r1, [pc, #308]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005cc6:	4313      	orrs	r3, r2
 8005cc8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f003 0301 	and.w	r3, r3, #1
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d044      	beq.n	8005d60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	2b01      	cmp	r3, #1
 8005cdc:	d107      	bne.n	8005cee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005cde:	4b47      	ldr	r3, [pc, #284]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d119      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005cea:	2301      	movs	r3, #1
 8005cec:	e07f      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	685b      	ldr	r3, [r3, #4]
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d003      	beq.n	8005cfe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005cfa:	2b03      	cmp	r3, #3
 8005cfc:	d107      	bne.n	8005d0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005cfe:	4b3f      	ldr	r3, [pc, #252]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d109      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e06f      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005d0e:	4b3b      	ldr	r3, [pc, #236]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f003 0302 	and.w	r3, r3, #2
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d101      	bne.n	8005d1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	e067      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005d1e:	4b37      	ldr	r3, [pc, #220]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	f023 0203 	bic.w	r2, r3, #3
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	4934      	ldr	r1, [pc, #208]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005d30:	f7fc f886 	bl	8001e40 <HAL_GetTick>
 8005d34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d36:	e00a      	b.n	8005d4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d38:	f7fc f882 	bl	8001e40 <HAL_GetTick>
 8005d3c:	4602      	mov	r2, r0
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	1ad3      	subs	r3, r2, r3
 8005d42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d46:	4293      	cmp	r3, r2
 8005d48:	d901      	bls.n	8005d4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005d4a:	2303      	movs	r3, #3
 8005d4c:	e04f      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005d4e:	4b2b      	ldr	r3, [pc, #172]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f003 020c 	and.w	r2, r3, #12
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	009b      	lsls	r3, r3, #2
 8005d5c:	429a      	cmp	r2, r3
 8005d5e:	d1eb      	bne.n	8005d38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005d60:	4b25      	ldr	r3, [pc, #148]	; (8005df8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	f003 030f 	and.w	r3, r3, #15
 8005d68:	683a      	ldr	r2, [r7, #0]
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d20c      	bcs.n	8005d88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d6e:	4b22      	ldr	r3, [pc, #136]	; (8005df8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d70:	683a      	ldr	r2, [r7, #0]
 8005d72:	b2d2      	uxtb	r2, r2
 8005d74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005d76:	4b20      	ldr	r3, [pc, #128]	; (8005df8 <HAL_RCC_ClockConfig+0x1b8>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f003 030f 	and.w	r3, r3, #15
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d001      	beq.n	8005d88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005d84:	2301      	movs	r3, #1
 8005d86:	e032      	b.n	8005dee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f003 0304 	and.w	r3, r3, #4
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d008      	beq.n	8005da6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d94:	4b19      	ldr	r3, [pc, #100]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005d96:	689b      	ldr	r3, [r3, #8]
 8005d98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	4916      	ldr	r1, [pc, #88]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005da2:	4313      	orrs	r3, r2
 8005da4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f003 0308 	and.w	r3, r3, #8
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d009      	beq.n	8005dc6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005db2:	4b12      	ldr	r3, [pc, #72]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	00db      	lsls	r3, r3, #3
 8005dc0:	490e      	ldr	r1, [pc, #56]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005dc2:	4313      	orrs	r3, r2
 8005dc4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005dc6:	f000 f82d 	bl	8005e24 <HAL_RCC_GetSysClockFreq>
 8005dca:	4601      	mov	r1, r0
 8005dcc:	4b0b      	ldr	r3, [pc, #44]	; (8005dfc <HAL_RCC_ClockConfig+0x1bc>)
 8005dce:	689b      	ldr	r3, [r3, #8]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	4a0a      	ldr	r2, [pc, #40]	; (8005e00 <HAL_RCC_ClockConfig+0x1c0>)
 8005dd8:	5cd3      	ldrb	r3, [r2, r3]
 8005dda:	fa21 f303 	lsr.w	r3, r1, r3
 8005dde:	4a09      	ldr	r2, [pc, #36]	; (8005e04 <HAL_RCC_ClockConfig+0x1c4>)
 8005de0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005de2:	4b09      	ldr	r3, [pc, #36]	; (8005e08 <HAL_RCC_ClockConfig+0x1c8>)
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	4618      	mov	r0, r3
 8005de8:	f7fb ffe6 	bl	8001db8 <HAL_InitTick>

  return HAL_OK;
 8005dec:	2300      	movs	r3, #0
}
 8005dee:	4618      	mov	r0, r3
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}
 8005df6:	bf00      	nop
 8005df8:	40023c00 	.word	0x40023c00
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	0800c9a4 	.word	0x0800c9a4
 8005e04:	20000000 	.word	0x20000000
 8005e08:	20000004 	.word	0x20000004

08005e0c <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8005e0c:	b480      	push	{r7}
 8005e0e:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8005e10:	4b03      	ldr	r3, [pc, #12]	; (8005e20 <HAL_RCC_EnableCSS+0x14>)
 8005e12:	2201      	movs	r2, #1
 8005e14:	601a      	str	r2, [r3, #0]
}
 8005e16:	bf00      	nop
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	4247004c 	.word	0x4247004c

08005e24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005e24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e26:	b085      	sub	sp, #20
 8005e28:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	607b      	str	r3, [r7, #4]
 8005e2e:	2300      	movs	r3, #0
 8005e30:	60fb      	str	r3, [r7, #12]
 8005e32:	2300      	movs	r3, #0
 8005e34:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005e36:	2300      	movs	r3, #0
 8005e38:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005e3a:	4b63      	ldr	r3, [pc, #396]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	f003 030c 	and.w	r3, r3, #12
 8005e42:	2b04      	cmp	r3, #4
 8005e44:	d007      	beq.n	8005e56 <HAL_RCC_GetSysClockFreq+0x32>
 8005e46:	2b08      	cmp	r3, #8
 8005e48:	d008      	beq.n	8005e5c <HAL_RCC_GetSysClockFreq+0x38>
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	f040 80b4 	bne.w	8005fb8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005e50:	4b5e      	ldr	r3, [pc, #376]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005e52:	60bb      	str	r3, [r7, #8]
       break;
 8005e54:	e0b3      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005e56:	4b5e      	ldr	r3, [pc, #376]	; (8005fd0 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8005e58:	60bb      	str	r3, [r7, #8]
      break;
 8005e5a:	e0b0      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005e5c:	4b5a      	ldr	r3, [pc, #360]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e5e:	685b      	ldr	r3, [r3, #4]
 8005e60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005e64:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005e66:	4b58      	ldr	r3, [pc, #352]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e68:	685b      	ldr	r3, [r3, #4]
 8005e6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d04a      	beq.n	8005f08 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005e72:	4b55      	ldr	r3, [pc, #340]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005e74:	685b      	ldr	r3, [r3, #4]
 8005e76:	099b      	lsrs	r3, r3, #6
 8005e78:	f04f 0400 	mov.w	r4, #0
 8005e7c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005e80:	f04f 0200 	mov.w	r2, #0
 8005e84:	ea03 0501 	and.w	r5, r3, r1
 8005e88:	ea04 0602 	and.w	r6, r4, r2
 8005e8c:	4629      	mov	r1, r5
 8005e8e:	4632      	mov	r2, r6
 8005e90:	f04f 0300 	mov.w	r3, #0
 8005e94:	f04f 0400 	mov.w	r4, #0
 8005e98:	0154      	lsls	r4, r2, #5
 8005e9a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005e9e:	014b      	lsls	r3, r1, #5
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4622      	mov	r2, r4
 8005ea4:	1b49      	subs	r1, r1, r5
 8005ea6:	eb62 0206 	sbc.w	r2, r2, r6
 8005eaa:	f04f 0300 	mov.w	r3, #0
 8005eae:	f04f 0400 	mov.w	r4, #0
 8005eb2:	0194      	lsls	r4, r2, #6
 8005eb4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005eb8:	018b      	lsls	r3, r1, #6
 8005eba:	1a5b      	subs	r3, r3, r1
 8005ebc:	eb64 0402 	sbc.w	r4, r4, r2
 8005ec0:	f04f 0100 	mov.w	r1, #0
 8005ec4:	f04f 0200 	mov.w	r2, #0
 8005ec8:	00e2      	lsls	r2, r4, #3
 8005eca:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005ece:	00d9      	lsls	r1, r3, #3
 8005ed0:	460b      	mov	r3, r1
 8005ed2:	4614      	mov	r4, r2
 8005ed4:	195b      	adds	r3, r3, r5
 8005ed6:	eb44 0406 	adc.w	r4, r4, r6
 8005eda:	f04f 0100 	mov.w	r1, #0
 8005ede:	f04f 0200 	mov.w	r2, #0
 8005ee2:	0262      	lsls	r2, r4, #9
 8005ee4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8005ee8:	0259      	lsls	r1, r3, #9
 8005eea:	460b      	mov	r3, r1
 8005eec:	4614      	mov	r4, r2
 8005eee:	4618      	mov	r0, r3
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f04f 0400 	mov.w	r4, #0
 8005ef8:	461a      	mov	r2, r3
 8005efa:	4623      	mov	r3, r4
 8005efc:	f7fa f9c0 	bl	8000280 <__aeabi_uldivmod>
 8005f00:	4603      	mov	r3, r0
 8005f02:	460c      	mov	r4, r1
 8005f04:	60fb      	str	r3, [r7, #12]
 8005f06:	e049      	b.n	8005f9c <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005f08:	4b2f      	ldr	r3, [pc, #188]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f0a:	685b      	ldr	r3, [r3, #4]
 8005f0c:	099b      	lsrs	r3, r3, #6
 8005f0e:	f04f 0400 	mov.w	r4, #0
 8005f12:	f240 11ff 	movw	r1, #511	; 0x1ff
 8005f16:	f04f 0200 	mov.w	r2, #0
 8005f1a:	ea03 0501 	and.w	r5, r3, r1
 8005f1e:	ea04 0602 	and.w	r6, r4, r2
 8005f22:	4629      	mov	r1, r5
 8005f24:	4632      	mov	r2, r6
 8005f26:	f04f 0300 	mov.w	r3, #0
 8005f2a:	f04f 0400 	mov.w	r4, #0
 8005f2e:	0154      	lsls	r4, r2, #5
 8005f30:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8005f34:	014b      	lsls	r3, r1, #5
 8005f36:	4619      	mov	r1, r3
 8005f38:	4622      	mov	r2, r4
 8005f3a:	1b49      	subs	r1, r1, r5
 8005f3c:	eb62 0206 	sbc.w	r2, r2, r6
 8005f40:	f04f 0300 	mov.w	r3, #0
 8005f44:	f04f 0400 	mov.w	r4, #0
 8005f48:	0194      	lsls	r4, r2, #6
 8005f4a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8005f4e:	018b      	lsls	r3, r1, #6
 8005f50:	1a5b      	subs	r3, r3, r1
 8005f52:	eb64 0402 	sbc.w	r4, r4, r2
 8005f56:	f04f 0100 	mov.w	r1, #0
 8005f5a:	f04f 0200 	mov.w	r2, #0
 8005f5e:	00e2      	lsls	r2, r4, #3
 8005f60:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8005f64:	00d9      	lsls	r1, r3, #3
 8005f66:	460b      	mov	r3, r1
 8005f68:	4614      	mov	r4, r2
 8005f6a:	195b      	adds	r3, r3, r5
 8005f6c:	eb44 0406 	adc.w	r4, r4, r6
 8005f70:	f04f 0100 	mov.w	r1, #0
 8005f74:	f04f 0200 	mov.w	r2, #0
 8005f78:	02a2      	lsls	r2, r4, #10
 8005f7a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8005f7e:	0299      	lsls	r1, r3, #10
 8005f80:	460b      	mov	r3, r1
 8005f82:	4614      	mov	r4, r2
 8005f84:	4618      	mov	r0, r3
 8005f86:	4621      	mov	r1, r4
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f04f 0400 	mov.w	r4, #0
 8005f8e:	461a      	mov	r2, r3
 8005f90:	4623      	mov	r3, r4
 8005f92:	f7fa f975 	bl	8000280 <__aeabi_uldivmod>
 8005f96:	4603      	mov	r3, r0
 8005f98:	460c      	mov	r4, r1
 8005f9a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	0c1b      	lsrs	r3, r3, #16
 8005fa2:	f003 0303 	and.w	r3, r3, #3
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	005b      	lsls	r3, r3, #1
 8005faa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005fac:	68fa      	ldr	r2, [r7, #12]
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fb4:	60bb      	str	r3, [r7, #8]
      break;
 8005fb6:	e002      	b.n	8005fbe <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8005fba:	60bb      	str	r3, [r7, #8]
      break;
 8005fbc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005fbe:	68bb      	ldr	r3, [r7, #8]
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	3714      	adds	r7, #20
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc8:	40023800 	.word	0x40023800
 8005fcc:	00f42400 	.word	0x00f42400
 8005fd0:	007a1200 	.word	0x007a1200

08005fd4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005fd8:	4b03      	ldr	r3, [pc, #12]	; (8005fe8 <HAL_RCC_GetHCLKFreq+0x14>)
 8005fda:	681b      	ldr	r3, [r3, #0]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr
 8005fe6:	bf00      	nop
 8005fe8:	20000000 	.word	0x20000000

08005fec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005fec:	b580      	push	{r7, lr}
 8005fee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005ff0:	f7ff fff0 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 8005ff4:	4601      	mov	r1, r0
 8005ff6:	4b05      	ldr	r3, [pc, #20]	; (800600c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	0a9b      	lsrs	r3, r3, #10
 8005ffc:	f003 0307 	and.w	r3, r3, #7
 8006000:	4a03      	ldr	r2, [pc, #12]	; (8006010 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006002:	5cd3      	ldrb	r3, [r2, r3]
 8006004:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006008:	4618      	mov	r0, r3
 800600a:	bd80      	pop	{r7, pc}
 800600c:	40023800 	.word	0x40023800
 8006010:	0800c9b4 	.word	0x0800c9b4

08006014 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006018:	f7ff ffdc 	bl	8005fd4 <HAL_RCC_GetHCLKFreq>
 800601c:	4601      	mov	r1, r0
 800601e:	4b05      	ldr	r3, [pc, #20]	; (8006034 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006020:	689b      	ldr	r3, [r3, #8]
 8006022:	0b5b      	lsrs	r3, r3, #13
 8006024:	f003 0307 	and.w	r3, r3, #7
 8006028:	4a03      	ldr	r2, [pc, #12]	; (8006038 <HAL_RCC_GetPCLK2Freq+0x24>)
 800602a:	5cd3      	ldrb	r3, [r2, r3]
 800602c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006030:	4618      	mov	r0, r3
 8006032:	bd80      	pop	{r7, pc}
 8006034:	40023800 	.word	0x40023800
 8006038:	0800c9b4 	.word	0x0800c9b4

0800603c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006040:	4b06      	ldr	r3, [pc, #24]	; (800605c <HAL_RCC_NMI_IRQHandler+0x20>)
 8006042:	68db      	ldr	r3, [r3, #12]
 8006044:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006048:	2b80      	cmp	r3, #128	; 0x80
 800604a:	d104      	bne.n	8006056 <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800604c:	f000 f80a 	bl	8006064 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006050:	4b03      	ldr	r3, [pc, #12]	; (8006060 <HAL_RCC_NMI_IRQHandler+0x24>)
 8006052:	2280      	movs	r2, #128	; 0x80
 8006054:	701a      	strb	r2, [r3, #0]
  }
}
 8006056:	bf00      	nop
 8006058:	bd80      	pop	{r7, pc}
 800605a:	bf00      	nop
 800605c:	40023800 	.word	0x40023800
 8006060:	4002380e 	.word	0x4002380e

08006064 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006068:	bf00      	nop
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
	...

08006074 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b086      	sub	sp, #24
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8006080:	2300      	movs	r3, #0
 8006082:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 0301 	and.w	r3, r3, #1
 800608c:	2b00      	cmp	r3, #0
 800608e:	d105      	bne.n	800609c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006098:	2b00      	cmp	r3, #0
 800609a:	d035      	beq.n	8006108 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800609c:	4b62      	ldr	r3, [pc, #392]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800609e:	2200      	movs	r2, #0
 80060a0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060a2:	f7fb fecd 	bl	8001e40 <HAL_GetTick>
 80060a6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060a8:	e008      	b.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060aa:	f7fb fec9 	bl	8001e40 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e0b0      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80060bc:	4b5b      	ldr	r3, [pc, #364]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d1f0      	bne.n	80060aa <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	019a      	lsls	r2, r3, #6
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	689b      	ldr	r3, [r3, #8]
 80060d2:	071b      	lsls	r3, r3, #28
 80060d4:	4955      	ldr	r1, [pc, #340]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060d6:	4313      	orrs	r3, r2
 80060d8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80060dc:	4b52      	ldr	r3, [pc, #328]	; (8006228 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80060de:	2201      	movs	r2, #1
 80060e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80060e2:	f7fb fead 	bl	8001e40 <HAL_GetTick>
 80060e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060e8:	e008      	b.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80060ea:	f7fb fea9 	bl	8001e40 <HAL_GetTick>
 80060ee:	4602      	mov	r2, r0
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	1ad3      	subs	r3, r2, r3
 80060f4:	2b02      	cmp	r3, #2
 80060f6:	d901      	bls.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e090      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80060fc:	4b4b      	ldr	r3, [pc, #300]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d0f0      	beq.n	80060ea <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	f003 0302 	and.w	r3, r3, #2
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8083 	beq.w	800621c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006116:	2300      	movs	r3, #0
 8006118:	60fb      	str	r3, [r7, #12]
 800611a:	4b44      	ldr	r3, [pc, #272]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800611c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800611e:	4a43      	ldr	r2, [pc, #268]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006120:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006124:	6413      	str	r3, [r2, #64]	; 0x40
 8006126:	4b41      	ldr	r3, [pc, #260]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800612a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800612e:	60fb      	str	r3, [r7, #12]
 8006130:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006132:	4b3f      	ldr	r3, [pc, #252]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a3e      	ldr	r2, [pc, #248]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006138:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800613c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800613e:	f7fb fe7f 	bl	8001e40 <HAL_GetTick>
 8006142:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006144:	e008      	b.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006146:	f7fb fe7b 	bl	8001e40 <HAL_GetTick>
 800614a:	4602      	mov	r2, r0
 800614c:	697b      	ldr	r3, [r7, #20]
 800614e:	1ad3      	subs	r3, r2, r3
 8006150:	2b02      	cmp	r3, #2
 8006152:	d901      	bls.n	8006158 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006154:	2303      	movs	r3, #3
 8006156:	e062      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006158:	4b35      	ldr	r3, [pc, #212]	; (8006230 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006160:	2b00      	cmp	r3, #0
 8006162:	d0f0      	beq.n	8006146 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006164:	4b31      	ldr	r3, [pc, #196]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006168:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800616c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d02f      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800617c:	693a      	ldr	r2, [r7, #16]
 800617e:	429a      	cmp	r2, r3
 8006180:	d028      	beq.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006182:	4b2a      	ldr	r3, [pc, #168]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006184:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006186:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800618a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800618c:	4b29      	ldr	r3, [pc, #164]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800618e:	2201      	movs	r2, #1
 8006190:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006192:	4b28      	ldr	r3, [pc, #160]	; (8006234 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006194:	2200      	movs	r2, #0
 8006196:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006198:	4a24      	ldr	r2, [pc, #144]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800619a:	693b      	ldr	r3, [r7, #16]
 800619c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800619e:	4b23      	ldr	r3, [pc, #140]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061a2:	f003 0301 	and.w	r3, r3, #1
 80061a6:	2b01      	cmp	r3, #1
 80061a8:	d114      	bne.n	80061d4 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80061aa:	f7fb fe49 	bl	8001e40 <HAL_GetTick>
 80061ae:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061b0:	e00a      	b.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80061b2:	f7fb fe45 	bl	8001e40 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d901      	bls.n	80061c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80061c4:	2303      	movs	r3, #3
 80061c6:	e02a      	b.n	800621e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80061c8:	4b18      	ldr	r3, [pc, #96]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d0ee      	beq.n	80061b2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	68db      	ldr	r3, [r3, #12]
 80061d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80061dc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80061e0:	d10d      	bne.n	80061fe <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80061e2:	4b12      	ldr	r3, [pc, #72]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061e4:	689b      	ldr	r3, [r3, #8]
 80061e6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	68db      	ldr	r3, [r3, #12]
 80061ee:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80061f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061f6:	490d      	ldr	r1, [pc, #52]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	608b      	str	r3, [r1, #8]
 80061fc:	e005      	b.n	800620a <HAL_RCCEx_PeriphCLKConfig+0x196>
 80061fe:	4b0b      	ldr	r3, [pc, #44]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006200:	689b      	ldr	r3, [r3, #8]
 8006202:	4a0a      	ldr	r2, [pc, #40]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006204:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006208:	6093      	str	r3, [r2, #8]
 800620a:	4b08      	ldr	r3, [pc, #32]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800620c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	68db      	ldr	r3, [r3, #12]
 8006212:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006216:	4905      	ldr	r1, [pc, #20]	; (800622c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006218:	4313      	orrs	r3, r2
 800621a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800621c:	2300      	movs	r3, #0
}
 800621e:	4618      	mov	r0, r3
 8006220:	3718      	adds	r7, #24
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}
 8006226:	bf00      	nop
 8006228:	42470068 	.word	0x42470068
 800622c:	40023800 	.word	0x40023800
 8006230:	40007000 	.word	0x40007000
 8006234:	42470e40 	.word	0x42470e40

08006238 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006238:	b480      	push	{r7}
 800623a:	b087      	sub	sp, #28
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006240:	2300      	movs	r3, #0
 8006242:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006244:	2300      	movs	r3, #0
 8006246:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006248:	2300      	movs	r3, #0
 800624a:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800624c:	2300      	movs	r3, #0
 800624e:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d13d      	bne.n	80062d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006256:	4b22      	ldr	r3, [pc, #136]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006258:	689b      	ldr	r3, [r3, #8]
 800625a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800625e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d004      	beq.n	8006270 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006266:	2b01      	cmp	r3, #1
 8006268:	d12f      	bne.n	80062ca <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800626a:	4b1e      	ldr	r3, [pc, #120]	; (80062e4 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800626c:	617b      	str	r3, [r7, #20]
          break;
 800626e:	e02f      	b.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006270:	4b1b      	ldr	r3, [pc, #108]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006278:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800627c:	d108      	bne.n	8006290 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800627e:	4b18      	ldr	r3, [pc, #96]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006286:	4a18      	ldr	r2, [pc, #96]	; (80062e8 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006288:	fbb2 f3f3 	udiv	r3, r2, r3
 800628c:	613b      	str	r3, [r7, #16]
 800628e:	e007      	b.n	80062a0 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006290:	4b13      	ldr	r3, [pc, #76]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006298:	4a14      	ldr	r2, [pc, #80]	; (80062ec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800629a:	fbb2 f3f3 	udiv	r3, r2, r3
 800629e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80062a0:	4b0f      	ldr	r3, [pc, #60]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80062a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062a6:	099b      	lsrs	r3, r3, #6
 80062a8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	fb02 f303 	mul.w	r3, r2, r3
 80062b2:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80062b4:	4b0a      	ldr	r3, [pc, #40]	; (80062e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 80062b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80062ba:	0f1b      	lsrs	r3, r3, #28
 80062bc:	f003 0307 	and.w	r3, r3, #7
 80062c0:	68ba      	ldr	r2, [r7, #8]
 80062c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80062c6:	617b      	str	r3, [r7, #20]
          break;
 80062c8:	e002      	b.n	80062d0 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	617b      	str	r3, [r7, #20]
          break;
 80062ce:	bf00      	nop
        }
      }
      break;
 80062d0:	bf00      	nop
    }
  }
  return frequency;
 80062d2:	697b      	ldr	r3, [r7, #20]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	371c      	adds	r7, #28
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr
 80062e0:	40023800 	.word	0x40023800
 80062e4:	00bb8000 	.word	0x00bb8000
 80062e8:	007a1200 	.word	0x007a1200
 80062ec:	00f42400 	.word	0x00f42400

080062f0 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b082      	sub	sp, #8
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d101      	bne.n	8006302 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	e083      	b.n	800640a <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	7f5b      	ldrb	r3, [r3, #29]
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b00      	cmp	r3, #0
 800630a:	d105      	bne.n	8006318 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006312:	6878      	ldr	r0, [r7, #4]
 8006314:	f7fb f954 	bl	80015c0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2202      	movs	r2, #2
 800631c:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	22ca      	movs	r2, #202	; 0xca
 8006324:	625a      	str	r2, [r3, #36]	; 0x24
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2253      	movs	r2, #83	; 0x53
 800632c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 fb84 	bl	8006a3c <RTC_EnterInitMode>
 8006334:	4603      	mov	r3, r0
 8006336:	2b00      	cmp	r3, #0
 8006338:	d008      	beq.n	800634c <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	22ff      	movs	r2, #255	; 0xff
 8006340:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2204      	movs	r2, #4
 8006346:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006348:	2301      	movs	r3, #1
 800634a:	e05e      	b.n	800640a <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6812      	ldr	r2, [r2, #0]
 8006356:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800635a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800635e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	6899      	ldr	r1, [r3, #8]
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	685a      	ldr	r2, [r3, #4]
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	431a      	orrs	r2, r3
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	695b      	ldr	r3, [r3, #20]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	430a      	orrs	r2, r1
 800637c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	68d2      	ldr	r2, [r2, #12]
 8006386:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	6919      	ldr	r1, [r3, #16]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	689b      	ldr	r3, [r3, #8]
 8006392:	041a      	lsls	r2, r3, #16
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	430a      	orrs	r2, r1
 800639a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68da      	ldr	r2, [r3, #12]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063aa:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	689b      	ldr	r3, [r3, #8]
 80063b2:	f003 0320 	and.w	r3, r3, #32
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d10e      	bne.n	80063d8 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fb16 	bl	80069ec <HAL_RTC_WaitForSynchro>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d008      	beq.n	80063d8 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	22ff      	movs	r2, #255	; 0xff
 80063cc:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2204      	movs	r2, #4
 80063d2:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e018      	b.n	800640a <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80063e6:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699a      	ldr	r2, [r3, #24]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	430a      	orrs	r2, r1
 80063f8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	22ff      	movs	r2, #255	; 0xff
 8006400:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006408:	2300      	movs	r3, #0
  }
}
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006412:	b590      	push	{r4, r7, lr}
 8006414:	b087      	sub	sp, #28
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800641e:	2300      	movs	r3, #0
 8006420:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	7f1b      	ldrb	r3, [r3, #28]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d101      	bne.n	800642e <HAL_RTC_SetTime+0x1c>
 800642a:	2302      	movs	r3, #2
 800642c:	e0aa      	b.n	8006584 <HAL_RTC_SetTime+0x172>
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	2201      	movs	r2, #1
 8006432:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2202      	movs	r2, #2
 8006438:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d126      	bne.n	800648e <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644a:	2b00      	cmp	r3, #0
 800644c:	d102      	bne.n	8006454 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	2200      	movs	r2, #0
 8006452:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	781b      	ldrb	r3, [r3, #0]
 8006458:	4618      	mov	r0, r3
 800645a:	f000 fb1b 	bl	8006a94 <RTC_ByteToBcd2>
 800645e:	4603      	mov	r3, r0
 8006460:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006462:	68bb      	ldr	r3, [r7, #8]
 8006464:	785b      	ldrb	r3, [r3, #1]
 8006466:	4618      	mov	r0, r3
 8006468:	f000 fb14 	bl	8006a94 <RTC_ByteToBcd2>
 800646c:	4603      	mov	r3, r0
 800646e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006470:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	789b      	ldrb	r3, [r3, #2]
 8006476:	4618      	mov	r0, r3
 8006478:	f000 fb0c 	bl	8006a94 <RTC_ByteToBcd2>
 800647c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800647e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006482:	68bb      	ldr	r3, [r7, #8]
 8006484:	78db      	ldrb	r3, [r3, #3]
 8006486:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006488:	4313      	orrs	r3, r2
 800648a:	617b      	str	r3, [r7, #20]
 800648c:	e018      	b.n	80064c0 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	689b      	ldr	r3, [r3, #8]
 8006494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006498:	2b00      	cmp	r3, #0
 800649a:	d102      	bne.n	80064a2 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	2200      	movs	r2, #0
 80064a0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	781b      	ldrb	r3, [r3, #0]
 80064a6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	785b      	ldrb	r3, [r3, #1]
 80064ac:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80064ae:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80064b0:	68ba      	ldr	r2, [r7, #8]
 80064b2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 80064b4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	78db      	ldrb	r3, [r3, #3]
 80064ba:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 80064bc:	4313      	orrs	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	22ca      	movs	r2, #202	; 0xca
 80064c6:	625a      	str	r2, [r3, #36]	; 0x24
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2253      	movs	r2, #83	; 0x53
 80064ce:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80064d0:	68f8      	ldr	r0, [r7, #12]
 80064d2:	f000 fab3 	bl	8006a3c <RTC_EnterInitMode>
 80064d6:	4603      	mov	r3, r0
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00b      	beq.n	80064f4 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	22ff      	movs	r2, #255	; 0xff
 80064e2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	2204      	movs	r2, #4
 80064e8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	2200      	movs	r2, #0
 80064ee:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e047      	b.n	8006584 <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681a      	ldr	r2, [r3, #0]
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80064fe:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006502:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	689a      	ldr	r2, [r3, #8]
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006512:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	6899      	ldr	r1, [r3, #8]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	68da      	ldr	r2, [r3, #12]
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	691b      	ldr	r3, [r3, #16]
 8006522:	431a      	orrs	r2, r3
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	430a      	orrs	r2, r1
 800652a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800653a:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f003 0320 	and.w	r3, r3, #32
 8006546:	2b00      	cmp	r3, #0
 8006548:	d111      	bne.n	800656e <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 fa4e 	bl	80069ec <HAL_RTC_WaitForSynchro>
 8006550:	4603      	mov	r3, r0
 8006552:	2b00      	cmp	r3, #0
 8006554:	d00b      	beq.n	800656e <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	22ff      	movs	r2, #255	; 0xff
 800655c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2204      	movs	r2, #4
 8006562:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2200      	movs	r2, #0
 8006568:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 800656a:	2301      	movs	r3, #1
 800656c:	e00a      	b.n	8006584 <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	22ff      	movs	r2, #255	; 0xff
 8006574:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	2200      	movs	r2, #0
 8006580:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006582:	2300      	movs	r3, #0
  }
}
 8006584:	4618      	mov	r0, r3
 8006586:	371c      	adds	r7, #28
 8006588:	46bd      	mov	sp, r7
 800658a:	bd90      	pop	{r4, r7, pc}

0800658c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800658c:	b590      	push	{r4, r7, lr}
 800658e:	b087      	sub	sp, #28
 8006590:	af00      	add	r7, sp, #0
 8006592:	60f8      	str	r0, [r7, #12]
 8006594:	60b9      	str	r1, [r7, #8]
 8006596:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006598:	2300      	movs	r3, #0
 800659a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	7f1b      	ldrb	r3, [r3, #28]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d101      	bne.n	80065a8 <HAL_RTC_SetDate+0x1c>
 80065a4:	2302      	movs	r3, #2
 80065a6:	e094      	b.n	80066d2 <HAL_RTC_SetDate+0x146>
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2201      	movs	r2, #1
 80065ac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2202      	movs	r2, #2
 80065b2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d10e      	bne.n	80065d8 <HAL_RTC_SetDate+0x4c>
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	785b      	ldrb	r3, [r3, #1]
 80065be:	f003 0310 	and.w	r3, r3, #16
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d008      	beq.n	80065d8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80065c6:	68bb      	ldr	r3, [r7, #8]
 80065c8:	785b      	ldrb	r3, [r3, #1]
 80065ca:	f023 0310 	bic.w	r3, r3, #16
 80065ce:	b2db      	uxtb	r3, r3
 80065d0:	330a      	adds	r3, #10
 80065d2:	b2da      	uxtb	r2, r3
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d11c      	bne.n	8006618 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065de:	68bb      	ldr	r3, [r7, #8]
 80065e0:	78db      	ldrb	r3, [r3, #3]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fa56 	bl	8006a94 <RTC_ByteToBcd2>
 80065e8:	4603      	mov	r3, r0
 80065ea:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	785b      	ldrb	r3, [r3, #1]
 80065f0:	4618      	mov	r0, r3
 80065f2:	f000 fa4f 	bl	8006a94 <RTC_ByteToBcd2>
 80065f6:	4603      	mov	r3, r0
 80065f8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80065fa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	789b      	ldrb	r3, [r3, #2]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fa47 	bl	8006a94 <RTC_ByteToBcd2>
 8006606:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006608:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	781b      	ldrb	r3, [r3, #0]
 8006610:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006612:	4313      	orrs	r3, r2
 8006614:	617b      	str	r3, [r7, #20]
 8006616:	e00e      	b.n	8006636 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006618:	68bb      	ldr	r3, [r7, #8]
 800661a:	78db      	ldrb	r3, [r3, #3]
 800661c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	785b      	ldrb	r3, [r3, #1]
 8006622:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006624:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 800662a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006632:	4313      	orrs	r3, r2
 8006634:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	22ca      	movs	r2, #202	; 0xca
 800663c:	625a      	str	r2, [r3, #36]	; 0x24
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	2253      	movs	r2, #83	; 0x53
 8006644:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 f9f8 	bl	8006a3c <RTC_EnterInitMode>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d00b      	beq.n	800666a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	22ff      	movs	r2, #255	; 0xff
 8006658:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	2204      	movs	r2, #4
 800665e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	2200      	movs	r2, #0
 8006664:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e033      	b.n	80066d2 <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681a      	ldr	r2, [r3, #0]
 800666e:	697b      	ldr	r3, [r7, #20]
 8006670:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006674:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006678:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	68da      	ldr	r2, [r3, #12]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006688:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	f003 0320 	and.w	r3, r3, #32
 8006694:	2b00      	cmp	r3, #0
 8006696:	d111      	bne.n	80066bc <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006698:	68f8      	ldr	r0, [r7, #12]
 800669a:	f000 f9a7 	bl	80069ec <HAL_RTC_WaitForSynchro>
 800669e:	4603      	mov	r3, r0
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d00b      	beq.n	80066bc <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	22ff      	movs	r2, #255	; 0xff
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2204      	movs	r2, #4
 80066b0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80066b8:	2301      	movs	r3, #1
 80066ba:	e00a      	b.n	80066d2 <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	22ff      	movs	r2, #255	; 0xff
 80066c2:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	2201      	movs	r2, #1
 80066c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 80066d0:	2300      	movs	r3, #0
  }
}
 80066d2:	4618      	mov	r0, r3
 80066d4:	371c      	adds	r7, #28
 80066d6:	46bd      	mov	sp, r7
 80066d8:	bd90      	pop	{r4, r7, pc}
	...

080066dc <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 80066dc:	b590      	push	{r4, r7, lr}
 80066de:	b089      	sub	sp, #36	; 0x24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 80066e8:	2300      	movs	r3, #0
 80066ea:	61fb      	str	r3, [r7, #28]
 80066ec:	2300      	movs	r3, #0
 80066ee:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 80066f0:	4b93      	ldr	r3, [pc, #588]	; (8006940 <HAL_RTC_SetAlarm_IT+0x264>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	4a93      	ldr	r2, [pc, #588]	; (8006944 <HAL_RTC_SetAlarm_IT+0x268>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	0adb      	lsrs	r3, r3, #11
 80066fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006700:	fb02 f303 	mul.w	r3, r2, r3
 8006704:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	7f1b      	ldrb	r3, [r3, #28]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d101      	bne.n	8006712 <HAL_RTC_SetAlarm_IT+0x36>
 800670e:	2302      	movs	r3, #2
 8006710:	e111      	b.n	8006936 <HAL_RTC_SetAlarm_IT+0x25a>
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	2201      	movs	r2, #1
 8006716:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2202      	movs	r2, #2
 800671c:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d137      	bne.n	8006794 <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800672e:	2b00      	cmp	r3, #0
 8006730:	d102      	bne.n	8006738 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 8006732:	68bb      	ldr	r3, [r7, #8]
 8006734:	2200      	movs	r2, #0
 8006736:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	781b      	ldrb	r3, [r3, #0]
 800673c:	4618      	mov	r0, r3
 800673e:	f000 f9a9 	bl	8006a94 <RTC_ByteToBcd2>
 8006742:	4603      	mov	r3, r0
 8006744:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	785b      	ldrb	r3, [r3, #1]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 f9a2 	bl	8006a94 <RTC_ByteToBcd2>
 8006750:	4603      	mov	r3, r0
 8006752:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8006754:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	789b      	ldrb	r3, [r3, #2]
 800675a:	4618      	mov	r0, r3
 800675c:	f000 f99a 	bl	8006a94 <RTC_ByteToBcd2>
 8006760:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 8006762:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006766:	68bb      	ldr	r3, [r7, #8]
 8006768:	78db      	ldrb	r3, [r3, #3]
 800676a:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800676c:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006776:	4618      	mov	r0, r3
 8006778:	f000 f98c 	bl	8006a94 <RTC_ByteToBcd2>
 800677c:	4603      	mov	r3, r0
 800677e:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 8006780:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8006788:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 800678a:	68bb      	ldr	r3, [r7, #8]
 800678c:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800678e:	4313      	orrs	r3, r2
 8006790:	61fb      	str	r3, [r7, #28]
 8006792:	e023      	b.n	80067dc <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	689b      	ldr	r3, [r3, #8]
 800679a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d102      	bne.n	80067a8 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80067a2:	68bb      	ldr	r3, [r7, #8]
 80067a4:	2200      	movs	r2, #0
 80067a6:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80067ae:	68bb      	ldr	r3, [r7, #8]
 80067b0:	785b      	ldrb	r3, [r3, #1]
 80067b2:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80067b4:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80067b6:	68ba      	ldr	r2, [r7, #8]
 80067b8:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80067ba:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80067bc:	68bb      	ldr	r3, [r7, #8]
 80067be:	78db      	ldrb	r3, [r3, #3]
 80067c0:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80067c2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80067c4:	68bb      	ldr	r3, [r7, #8]
 80067c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067ca:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80067cc:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80067ce:	68bb      	ldr	r3, [r7, #8]
 80067d0:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80067d2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80067d4:	68bb      	ldr	r3, [r7, #8]
 80067d6:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80067d8:	4313      	orrs	r3, r2
 80067da:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	699b      	ldr	r3, [r3, #24]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	22ca      	movs	r2, #202	; 0xca
 80067ee:	625a      	str	r2, [r3, #36]	; 0x24
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	2253      	movs	r2, #83	; 0x53
 80067f6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067fc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006800:	d141      	bne.n	8006886 <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	689a      	ldr	r2, [r3, #8]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006810:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	68db      	ldr	r3, [r3, #12]
 8006818:	b2da      	uxtb	r2, r3
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006822:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	1e5a      	subs	r2, r3, #1
 8006828:	617a      	str	r2, [r7, #20]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d10b      	bne.n	8006846 <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	22ff      	movs	r2, #255	; 0xff
 8006834:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2203      	movs	r2, #3
 800683a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	2200      	movs	r2, #0
 8006840:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8006842:	2303      	movs	r3, #3
 8006844:	e077      	b.n	8006936 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	68db      	ldr	r3, [r3, #12]
 800684c:	f003 0301 	and.w	r3, r3, #1
 8006850:	2b00      	cmp	r3, #0
 8006852:	d0e7      	beq.n	8006824 <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	69fa      	ldr	r2, [r7, #28]
 800685a:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	69ba      	ldr	r2, [r7, #24]
 8006862:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	689a      	ldr	r2, [r3, #8]
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006872:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	689a      	ldr	r2, [r3, #8]
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	e040      	b.n	8006908 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689a      	ldr	r2, [r3, #8]
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006894:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	f462 7220 	orn	r2, r2, #640	; 0x280
 80068a6:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	1e5a      	subs	r2, r3, #1
 80068ac:	617a      	str	r2, [r7, #20]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d10b      	bne.n	80068ca <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	22ff      	movs	r2, #255	; 0xff
 80068b8:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	2203      	movs	r2, #3
 80068be:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	2200      	movs	r2, #0
 80068c4:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80068c6:	2303      	movs	r3, #3
 80068c8:	e035      	b.n	8006936 <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	68db      	ldr	r3, [r3, #12]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d0e7      	beq.n	80068a8 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	69fa      	ldr	r2, [r7, #28]
 80068de:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	69ba      	ldr	r2, [r7, #24]
 80068e6:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	689a      	ldr	r2, [r3, #8]
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80068f6:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689a      	ldr	r2, [r3, #8]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006906:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8006908:	4b0f      	ldr	r3, [pc, #60]	; (8006948 <HAL_RTC_SetAlarm_IT+0x26c>)
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	4a0e      	ldr	r2, [pc, #56]	; (8006948 <HAL_RTC_SetAlarm_IT+0x26c>)
 800690e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006912:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 8006914:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <HAL_RTC_SetAlarm_IT+0x26c>)
 8006916:	689b      	ldr	r3, [r3, #8]
 8006918:	4a0b      	ldr	r2, [pc, #44]	; (8006948 <HAL_RTC_SetAlarm_IT+0x26c>)
 800691a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800691e:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	22ff      	movs	r2, #255	; 0xff
 8006926:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2200      	movs	r2, #0
 8006932:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3724      	adds	r7, #36	; 0x24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd90      	pop	{r4, r7, pc}
 800693e:	bf00      	nop
 8006940:	20000000 	.word	0x20000000
 8006944:	10624dd3 	.word	0x10624dd3
 8006948:	40013c00 	.word	0x40013c00

0800694c <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	689b      	ldr	r3, [r3, #8]
 800695a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800695e:	2b00      	cmp	r3, #0
 8006960:	d012      	beq.n	8006988 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	68db      	ldr	r3, [r3, #12]
 8006968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800696c:	2b00      	cmp	r3, #0
 800696e:	d00b      	beq.n	8006988 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8006970:	6878      	ldr	r0, [r7, #4]
 8006972:	f000 f831 	bl	80069d8 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	b2da      	uxtb	r2, r3
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	f462 72c0 	orn	r2, r2, #384	; 0x180
 8006986:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	689b      	ldr	r3, [r3, #8]
 800698e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006992:	2b00      	cmp	r3, #0
 8006994:	d012      	beq.n	80069bc <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	68db      	ldr	r3, [r3, #12]
 800699c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d00b      	beq.n	80069bc <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f000 f893 	bl	8006ad0 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	68db      	ldr	r3, [r3, #12]
 80069b0:	b2da      	uxtb	r2, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	f462 7220 	orn	r2, r2, #640	; 0x280
 80069ba:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80069bc:	4b05      	ldr	r3, [pc, #20]	; (80069d4 <HAL_RTC_AlarmIRQHandler+0x88>)
 80069be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80069c2:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	2201      	movs	r2, #1
 80069c8:	775a      	strb	r2, [r3, #29]
}
 80069ca:	bf00      	nop
 80069cc:	3708      	adds	r7, #8
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}
 80069d2:	bf00      	nop
 80069d4:	40013c00 	.word	0x40013c00

080069d8 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 80069d8:	b480      	push	{r7}
 80069da:	b083      	sub	sp, #12
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 80069e0:	bf00      	nop
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069f4:	2300      	movs	r3, #0
 80069f6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68da      	ldr	r2, [r3, #12]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8006a06:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a08:	f7fb fa1a 	bl	8001e40 <HAL_GetTick>
 8006a0c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a0e:	e009      	b.n	8006a24 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a10:	f7fb fa16 	bl	8001e40 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a1e:	d901      	bls.n	8006a24 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e007      	b.n	8006a34 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	68db      	ldr	r3, [r3, #12]
 8006a2a:	f003 0320 	and.w	r3, r3, #32
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d0ee      	beq.n	8006a10 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8006a32:	2300      	movs	r3, #0
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	b084      	sub	sp, #16
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006a44:	2300      	movs	r3, #0
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68db      	ldr	r3, [r3, #12]
 8006a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d119      	bne.n	8006a8a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f04f 32ff 	mov.w	r2, #4294967295
 8006a5e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a60:	f7fb f9ee 	bl	8001e40 <HAL_GetTick>
 8006a64:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a66:	e009      	b.n	8006a7c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8006a68:	f7fb f9ea 	bl	8001e40 <HAL_GetTick>
 8006a6c:	4602      	mov	r2, r0
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	1ad3      	subs	r3, r2, r3
 8006a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a76:	d901      	bls.n	8006a7c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8006a78:	2303      	movs	r3, #3
 8006a7a:	e007      	b.n	8006a8c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68db      	ldr	r3, [r3, #12]
 8006a82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d0ee      	beq.n	8006a68 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3710      	adds	r7, #16
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}

08006a94 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8006a9e:	2300      	movs	r3, #0
 8006aa0:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 8006aa2:	e005      	b.n	8006ab0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	3b0a      	subs	r3, #10
 8006aae:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 8006ab0:	79fb      	ldrb	r3, [r7, #7]
 8006ab2:	2b09      	cmp	r3, #9
 8006ab4:	d8f6      	bhi.n	8006aa4 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	b2db      	uxtb	r3, r3
 8006aba:	011b      	lsls	r3, r3, #4
 8006abc:	b2da      	uxtb	r2, r3
 8006abe:	79fb      	ldrb	r3, [r7, #7]
 8006ac0:	4313      	orrs	r3, r2
 8006ac2:	b2db      	uxtb	r3, r3
}
 8006ac4:	4618      	mov	r0, r3
 8006ac6:	3714      	adds	r7, #20
 8006ac8:	46bd      	mov	sp, r7
 8006aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ace:	4770      	bx	lr

08006ad0 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr

08006ae4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b082      	sub	sp, #8
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d101      	bne.n	8006af6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006af2:	2301      	movs	r3, #1
 8006af4:	e056      	b.n	8006ba4 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2200      	movs	r2, #0
 8006afa:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006b02:	b2db      	uxtb	r3, r3
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d106      	bne.n	8006b16 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006b10:	6878      	ldr	r0, [r7, #4]
 8006b12:	f7fa fd71 	bl	80015f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2202      	movs	r2, #2
 8006b1a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b2c:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	685a      	ldr	r2, [r3, #4]
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	431a      	orrs	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	68db      	ldr	r3, [r3, #12]
 8006b3c:	431a      	orrs	r2, r3
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	695b      	ldr	r3, [r3, #20]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	699b      	ldr	r3, [r3, #24]
 8006b4e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b52:	431a      	orrs	r2, r3
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	431a      	orrs	r2, r3
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6a1b      	ldr	r3, [r3, #32]
 8006b5e:	ea42 0103 	orr.w	r1, r2, r3
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	430a      	orrs	r2, r1
 8006b6c:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	699b      	ldr	r3, [r3, #24]
 8006b72:	0c1b      	lsrs	r3, r3, #16
 8006b74:	f003 0104 	and.w	r1, r3, #4
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	430a      	orrs	r2, r1
 8006b82:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	69da      	ldr	r2, [r3, #28]
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006b92:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006ba2:	2300      	movs	r3, #0
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3708      	adds	r7, #8
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b088      	sub	sp, #32
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	603b      	str	r3, [r7, #0]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006bc6:	2b01      	cmp	r3, #1
 8006bc8:	d101      	bne.n	8006bce <HAL_SPI_Transmit+0x22>
 8006bca:	2302      	movs	r3, #2
 8006bcc:	e11e      	b.n	8006e0c <HAL_SPI_Transmit+0x260>
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006bd6:	f7fb f933 	bl	8001e40 <HAL_GetTick>
 8006bda:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006be6:	b2db      	uxtb	r3, r3
 8006be8:	2b01      	cmp	r3, #1
 8006bea:	d002      	beq.n	8006bf2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006bec:	2302      	movs	r3, #2
 8006bee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006bf0:	e103      	b.n	8006dfa <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d002      	beq.n	8006bfe <HAL_SPI_Transmit+0x52>
 8006bf8:	88fb      	ldrh	r3, [r7, #6]
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d102      	bne.n	8006c04 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006c02:	e0fa      	b.n	8006dfa <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	2203      	movs	r2, #3
 8006c08:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	2200      	movs	r2, #0
 8006c10:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	68ba      	ldr	r2, [r7, #8]
 8006c16:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	88fa      	ldrh	r2, [r7, #6]
 8006c1c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	88fa      	ldrh	r2, [r7, #6]
 8006c22:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	2200      	movs	r2, #0
 8006c28:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2200      	movs	r2, #0
 8006c34:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c36:	68fb      	ldr	r3, [r7, #12]
 8006c38:	2200      	movs	r2, #0
 8006c3a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	2200      	movs	r2, #0
 8006c40:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	689b      	ldr	r3, [r3, #8]
 8006c46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006c4a:	d107      	bne.n	8006c5c <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	681a      	ldr	r2, [r3, #0]
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006c5a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c66:	2b40      	cmp	r3, #64	; 0x40
 8006c68:	d007      	beq.n	8006c7a <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	68db      	ldr	r3, [r3, #12]
 8006c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c82:	d14b      	bne.n	8006d1c <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	685b      	ldr	r3, [r3, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d002      	beq.n	8006c92 <HAL_SPI_Transmit+0xe6>
 8006c8c:	8afb      	ldrh	r3, [r7, #22]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	d13e      	bne.n	8006d10 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c96:	881a      	ldrh	r2, [r3, #0]
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca2:	1c9a      	adds	r2, r3, #2
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cac:	b29b      	uxth	r3, r3
 8006cae:	3b01      	subs	r3, #1
 8006cb0:	b29a      	uxth	r2, r3
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006cb6:	e02b      	b.n	8006d10 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 0302 	and.w	r3, r3, #2
 8006cc2:	2b02      	cmp	r3, #2
 8006cc4:	d112      	bne.n	8006cec <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cca:	881a      	ldrh	r2, [r3, #0]
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd6:	1c9a      	adds	r2, r3, #2
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	3b01      	subs	r3, #1
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	86da      	strh	r2, [r3, #54]	; 0x36
 8006cea:	e011      	b.n	8006d10 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cec:	f7fb f8a8 	bl	8001e40 <HAL_GetTick>
 8006cf0:	4602      	mov	r2, r0
 8006cf2:	69bb      	ldr	r3, [r7, #24]
 8006cf4:	1ad3      	subs	r3, r2, r3
 8006cf6:	683a      	ldr	r2, [r7, #0]
 8006cf8:	429a      	cmp	r2, r3
 8006cfa:	d803      	bhi.n	8006d04 <HAL_SPI_Transmit+0x158>
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d02:	d102      	bne.n	8006d0a <HAL_SPI_Transmit+0x15e>
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	2b00      	cmp	r3, #0
 8006d08:	d102      	bne.n	8006d10 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8006d0a:	2303      	movs	r3, #3
 8006d0c:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d0e:	e074      	b.n	8006dfa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d14:	b29b      	uxth	r3, r3
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1ce      	bne.n	8006cb8 <HAL_SPI_Transmit+0x10c>
 8006d1a:	e04c      	b.n	8006db6 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d002      	beq.n	8006d2a <HAL_SPI_Transmit+0x17e>
 8006d24:	8afb      	ldrh	r3, [r7, #22]
 8006d26:	2b01      	cmp	r3, #1
 8006d28:	d140      	bne.n	8006dac <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	681b      	ldr	r3, [r3, #0]
 8006d32:	330c      	adds	r3, #12
 8006d34:	7812      	ldrb	r2, [r2, #0]
 8006d36:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d3c:	1c5a      	adds	r2, r3, #1
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d46:	b29b      	uxth	r3, r3
 8006d48:	3b01      	subs	r3, #1
 8006d4a:	b29a      	uxth	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006d50:	e02c      	b.n	8006dac <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b02      	cmp	r3, #2
 8006d5e:	d113      	bne.n	8006d88 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	330c      	adds	r3, #12
 8006d6a:	7812      	ldrb	r2, [r2, #0]
 8006d6c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d72:	1c5a      	adds	r2, r3, #1
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006d7c:	b29b      	uxth	r3, r3
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	b29a      	uxth	r2, r3
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	86da      	strh	r2, [r3, #54]	; 0x36
 8006d86:	e011      	b.n	8006dac <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d88:	f7fb f85a 	bl	8001e40 <HAL_GetTick>
 8006d8c:	4602      	mov	r2, r0
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	683a      	ldr	r2, [r7, #0]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d803      	bhi.n	8006da0 <HAL_SPI_Transmit+0x1f4>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d9e:	d102      	bne.n	8006da6 <HAL_SPI_Transmit+0x1fa>
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d102      	bne.n	8006dac <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8006da6:	2303      	movs	r3, #3
 8006da8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006daa:	e026      	b.n	8006dfa <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006db0:	b29b      	uxth	r3, r3
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d1cd      	bne.n	8006d52 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006db6:	69ba      	ldr	r2, [r7, #24]
 8006db8:	6839      	ldr	r1, [r7, #0]
 8006dba:	68f8      	ldr	r0, [r7, #12]
 8006dbc:	f000 fcc4 	bl	8007748 <SPI_EndRxTxTransaction>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d002      	beq.n	8006dcc <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	2220      	movs	r2, #32
 8006dca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d10a      	bne.n	8006dea <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	613b      	str	r3, [r7, #16]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	68db      	ldr	r3, [r3, #12]
 8006dde:	613b      	str	r3, [r7, #16]
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	689b      	ldr	r3, [r3, #8]
 8006de6:	613b      	str	r3, [r7, #16]
 8006de8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d002      	beq.n	8006df8 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8006df2:	2301      	movs	r3, #1
 8006df4:	77fb      	strb	r3, [r7, #31]
 8006df6:	e000      	b.n	8006dfa <HAL_SPI_Transmit+0x24e>
  }

error:
 8006df8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2200      	movs	r2, #0
 8006e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006e0a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	3720      	adds	r7, #32
 8006e10:	46bd      	mov	sp, r7
 8006e12:	bd80      	pop	{r7, pc}

08006e14 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006e14:	b580      	push	{r7, lr}
 8006e16:	b088      	sub	sp, #32
 8006e18:	af02      	add	r7, sp, #8
 8006e1a:	60f8      	str	r0, [r7, #12]
 8006e1c:	60b9      	str	r1, [r7, #8]
 8006e1e:	603b      	str	r3, [r7, #0]
 8006e20:	4613      	mov	r3, r2
 8006e22:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006e24:	2300      	movs	r3, #0
 8006e26:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	685b      	ldr	r3, [r3, #4]
 8006e2c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e30:	d112      	bne.n	8006e58 <HAL_SPI_Receive+0x44>
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d10e      	bne.n	8006e58 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2204      	movs	r2, #4
 8006e3e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006e42:	88fa      	ldrh	r2, [r7, #6]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	9300      	str	r3, [sp, #0]
 8006e48:	4613      	mov	r3, r2
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	68b9      	ldr	r1, [r7, #8]
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f000 f8e9 	bl	8007026 <HAL_SPI_TransmitReceive>
 8006e54:	4603      	mov	r3, r0
 8006e56:	e0e2      	b.n	800701e <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d101      	bne.n	8006e66 <HAL_SPI_Receive+0x52>
 8006e62:	2302      	movs	r3, #2
 8006e64:	e0db      	b.n	800701e <HAL_SPI_Receive+0x20a>
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e6e:	f7fa ffe7 	bl	8001e40 <HAL_GetTick>
 8006e72:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8006e7a:	b2db      	uxtb	r3, r3
 8006e7c:	2b01      	cmp	r3, #1
 8006e7e:	d002      	beq.n	8006e86 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
 8006e82:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e84:	e0c2      	b.n	800700c <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d002      	beq.n	8006e92 <HAL_SPI_Receive+0x7e>
 8006e8c:	88fb      	ldrh	r3, [r7, #6]
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d102      	bne.n	8006e98 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e96:	e0b9      	b.n	800700c <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	2204      	movs	r2, #4
 8006e9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	88fa      	ldrh	r2, [r7, #6]
 8006eb0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	88fa      	ldrh	r2, [r7, #6]
 8006eb6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	2200      	movs	r2, #0
 8006ec2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	2200      	movs	r2, #0
 8006ec8:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	2200      	movs	r2, #0
 8006ece:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ede:	d107      	bne.n	8006ef0 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681a      	ldr	r2, [r3, #0]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006eee:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006efa:	2b40      	cmp	r3, #64	; 0x40
 8006efc:	d007      	beq.n	8006f0e <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	681a      	ldr	r2, [r3, #0]
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f0c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	68db      	ldr	r3, [r3, #12]
 8006f12:	2b00      	cmp	r3, #0
 8006f14:	d162      	bne.n	8006fdc <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006f16:	e02e      	b.n	8006f76 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	f003 0301 	and.w	r3, r3, #1
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d115      	bne.n	8006f52 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	f103 020c 	add.w	r2, r3, #12
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f32:	7812      	ldrb	r2, [r2, #0]
 8006f34:	b2d2      	uxtb	r2, r2
 8006f36:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f3c:	1c5a      	adds	r2, r3, #1
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f46:	b29b      	uxth	r3, r3
 8006f48:	3b01      	subs	r3, #1
 8006f4a:	b29a      	uxth	r2, r3
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006f50:	e011      	b.n	8006f76 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f52:	f7fa ff75 	bl	8001e40 <HAL_GetTick>
 8006f56:	4602      	mov	r2, r0
 8006f58:	693b      	ldr	r3, [r7, #16]
 8006f5a:	1ad3      	subs	r3, r2, r3
 8006f5c:	683a      	ldr	r2, [r7, #0]
 8006f5e:	429a      	cmp	r2, r3
 8006f60:	d803      	bhi.n	8006f6a <HAL_SPI_Receive+0x156>
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f68:	d102      	bne.n	8006f70 <HAL_SPI_Receive+0x15c>
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d102      	bne.n	8006f76 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f74:	e04a      	b.n	800700c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006f7a:	b29b      	uxth	r3, r3
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1cb      	bne.n	8006f18 <HAL_SPI_Receive+0x104>
 8006f80:	e031      	b.n	8006fe6 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	689b      	ldr	r3, [r3, #8]
 8006f88:	f003 0301 	and.w	r3, r3, #1
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d113      	bne.n	8006fb8 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	68da      	ldr	r2, [r3, #12]
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f9a:	b292      	uxth	r2, r2
 8006f9c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fa2:	1c9a      	adds	r2, r3, #2
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	3b01      	subs	r3, #1
 8006fb0:	b29a      	uxth	r2, r3
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006fb6:	e011      	b.n	8006fdc <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fb8:	f7fa ff42 	bl	8001e40 <HAL_GetTick>
 8006fbc:	4602      	mov	r2, r0
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	1ad3      	subs	r3, r2, r3
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d803      	bhi.n	8006fd0 <HAL_SPI_Receive+0x1bc>
 8006fc8:	683b      	ldr	r3, [r7, #0]
 8006fca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fce:	d102      	bne.n	8006fd6 <HAL_SPI_Receive+0x1c2>
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d102      	bne.n	8006fdc <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fda:	e017      	b.n	800700c <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d1cd      	bne.n	8006f82 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fe6:	693a      	ldr	r2, [r7, #16]
 8006fe8:	6839      	ldr	r1, [r7, #0]
 8006fea:	68f8      	ldr	r0, [r7, #12]
 8006fec:	f000 fb46 	bl	800767c <SPI_EndRxTransaction>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d002      	beq.n	8006ffc <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2220      	movs	r2, #32
 8006ffa:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007000:	2b00      	cmp	r3, #0
 8007002:	d002      	beq.n	800700a <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 8007004:	2301      	movs	r3, #1
 8007006:	75fb      	strb	r3, [r7, #23]
 8007008:	e000      	b.n	800700c <HAL_SPI_Receive+0x1f8>
  }

error :
 800700a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	2201      	movs	r2, #1
 8007010:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2200      	movs	r2, #0
 8007018:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800701c:	7dfb      	ldrb	r3, [r7, #23]
}
 800701e:	4618      	mov	r0, r3
 8007020:	3718      	adds	r7, #24
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}

08007026 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b08c      	sub	sp, #48	; 0x30
 800702a:	af00      	add	r7, sp, #0
 800702c:	60f8      	str	r0, [r7, #12]
 800702e:	60b9      	str	r1, [r7, #8]
 8007030:	607a      	str	r2, [r7, #4]
 8007032:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007034:	2301      	movs	r3, #1
 8007036:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8007038:	2300      	movs	r3, #0
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8007044:	2b01      	cmp	r3, #1
 8007046:	d101      	bne.n	800704c <HAL_SPI_TransmitReceive+0x26>
 8007048:	2302      	movs	r3, #2
 800704a:	e18a      	b.n	8007362 <HAL_SPI_TransmitReceive+0x33c>
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007054:	f7fa fef4 	bl	8001e40 <HAL_GetTick>
 8007058:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800706a:	887b      	ldrh	r3, [r7, #2]
 800706c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800706e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8007072:	2b01      	cmp	r3, #1
 8007074:	d00f      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x70>
 8007076:	69fb      	ldr	r3, [r7, #28]
 8007078:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800707c:	d107      	bne.n	800708e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	689b      	ldr	r3, [r3, #8]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d103      	bne.n	800708e <HAL_SPI_TransmitReceive+0x68>
 8007086:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800708a:	2b04      	cmp	r3, #4
 800708c:	d003      	beq.n	8007096 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800708e:	2302      	movs	r3, #2
 8007090:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8007094:	e15b      	b.n	800734e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007096:	68bb      	ldr	r3, [r7, #8]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d005      	beq.n	80070a8 <HAL_SPI_TransmitReceive+0x82>
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d002      	beq.n	80070a8 <HAL_SPI_TransmitReceive+0x82>
 80070a2:	887b      	ldrh	r3, [r7, #2]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d103      	bne.n	80070b0 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80070a8:	2301      	movs	r3, #1
 80070aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80070ae:	e14e      	b.n	800734e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80070b6:	b2db      	uxtb	r3, r3
 80070b8:	2b04      	cmp	r3, #4
 80070ba:	d003      	beq.n	80070c4 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2205      	movs	r2, #5
 80070c0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	2200      	movs	r2, #0
 80070c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	687a      	ldr	r2, [r7, #4]
 80070ce:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 80070d0:	68fb      	ldr	r3, [r7, #12]
 80070d2:	887a      	ldrh	r2, [r7, #2]
 80070d4:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	887a      	ldrh	r2, [r7, #2]
 80070da:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	887a      	ldrh	r2, [r7, #2]
 80070e6:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	887a      	ldrh	r2, [r7, #2]
 80070ec:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	2200      	movs	r2, #0
 80070f2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80070fa:	68fb      	ldr	r3, [r7, #12]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007104:	2b40      	cmp	r3, #64	; 0x40
 8007106:	d007      	beq.n	8007118 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681a      	ldr	r2, [r3, #0]
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007116:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	68db      	ldr	r3, [r3, #12]
 800711c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007120:	d178      	bne.n	8007214 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d002      	beq.n	8007130 <HAL_SPI_TransmitReceive+0x10a>
 800712a:	8b7b      	ldrh	r3, [r7, #26]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d166      	bne.n	80071fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007134:	881a      	ldrh	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007140:	1c9a      	adds	r2, r3, #2
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800714a:	b29b      	uxth	r3, r3
 800714c:	3b01      	subs	r3, #1
 800714e:	b29a      	uxth	r2, r3
 8007150:	68fb      	ldr	r3, [r7, #12]
 8007152:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007154:	e053      	b.n	80071fe <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	689b      	ldr	r3, [r3, #8]
 800715c:	f003 0302 	and.w	r3, r3, #2
 8007160:	2b02      	cmp	r3, #2
 8007162:	d11b      	bne.n	800719c <HAL_SPI_TransmitReceive+0x176>
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007168:	b29b      	uxth	r3, r3
 800716a:	2b00      	cmp	r3, #0
 800716c:	d016      	beq.n	800719c <HAL_SPI_TransmitReceive+0x176>
 800716e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007170:	2b01      	cmp	r3, #1
 8007172:	d113      	bne.n	800719c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007178:	881a      	ldrh	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007184:	1c9a      	adds	r2, r3, #2
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800718e:	b29b      	uxth	r3, r3
 8007190:	3b01      	subs	r3, #1
 8007192:	b29a      	uxth	r2, r3
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007198:	2300      	movs	r3, #0
 800719a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689b      	ldr	r3, [r3, #8]
 80071a2:	f003 0301 	and.w	r3, r3, #1
 80071a6:	2b01      	cmp	r3, #1
 80071a8:	d119      	bne.n	80071de <HAL_SPI_TransmitReceive+0x1b8>
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071ae:	b29b      	uxth	r3, r3
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d014      	beq.n	80071de <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	68da      	ldr	r2, [r3, #12]
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071be:	b292      	uxth	r2, r2
 80071c0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c6:	1c9a      	adds	r2, r3, #2
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	b29a      	uxth	r2, r3
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80071da:	2301      	movs	r3, #1
 80071dc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80071de:	f7fa fe2f 	bl	8001e40 <HAL_GetTick>
 80071e2:	4602      	mov	r2, r0
 80071e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e6:	1ad3      	subs	r3, r2, r3
 80071e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d807      	bhi.n	80071fe <HAL_SPI_TransmitReceive+0x1d8>
 80071ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80071f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071f4:	d003      	beq.n	80071fe <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80071fc:	e0a7      	b.n	800734e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007202:	b29b      	uxth	r3, r3
 8007204:	2b00      	cmp	r3, #0
 8007206:	d1a6      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x130>
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800720c:	b29b      	uxth	r3, r3
 800720e:	2b00      	cmp	r3, #0
 8007210:	d1a1      	bne.n	8007156 <HAL_SPI_TransmitReceive+0x130>
 8007212:	e07c      	b.n	800730e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d002      	beq.n	8007222 <HAL_SPI_TransmitReceive+0x1fc>
 800721c:	8b7b      	ldrh	r3, [r7, #26]
 800721e:	2b01      	cmp	r3, #1
 8007220:	d16b      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	330c      	adds	r3, #12
 800722c:	7812      	ldrb	r2, [r2, #0]
 800722e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007234:	1c5a      	adds	r2, r3, #1
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800723e:	b29b      	uxth	r3, r3
 8007240:	3b01      	subs	r3, #1
 8007242:	b29a      	uxth	r2, r3
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007248:	e057      	b.n	80072fa <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	689b      	ldr	r3, [r3, #8]
 8007250:	f003 0302 	and.w	r3, r3, #2
 8007254:	2b02      	cmp	r3, #2
 8007256:	d11c      	bne.n	8007292 <HAL_SPI_TransmitReceive+0x26c>
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800725c:	b29b      	uxth	r3, r3
 800725e:	2b00      	cmp	r3, #0
 8007260:	d017      	beq.n	8007292 <HAL_SPI_TransmitReceive+0x26c>
 8007262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007264:	2b01      	cmp	r3, #1
 8007266:	d114      	bne.n	8007292 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	330c      	adds	r3, #12
 8007272:	7812      	ldrb	r2, [r2, #0]
 8007274:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800727a:	1c5a      	adds	r2, r3, #1
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007284:	b29b      	uxth	r3, r3
 8007286:	3b01      	subs	r3, #1
 8007288:	b29a      	uxth	r2, r3
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800728e:	2300      	movs	r3, #0
 8007290:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	689b      	ldr	r3, [r3, #8]
 8007298:	f003 0301 	and.w	r3, r3, #1
 800729c:	2b01      	cmp	r3, #1
 800729e:	d119      	bne.n	80072d4 <HAL_SPI_TransmitReceive+0x2ae>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a4:	b29b      	uxth	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d014      	beq.n	80072d4 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	68da      	ldr	r2, [r3, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072b4:	b2d2      	uxtb	r2, r2
 80072b6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072bc:	1c5a      	adds	r2, r3, #1
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072c6:	b29b      	uxth	r3, r3
 80072c8:	3b01      	subs	r3, #1
 80072ca:	b29a      	uxth	r2, r3
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80072d0:	2301      	movs	r3, #1
 80072d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80072d4:	f7fa fdb4 	bl	8001e40 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d803      	bhi.n	80072ec <HAL_SPI_TransmitReceive+0x2c6>
 80072e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072ea:	d102      	bne.n	80072f2 <HAL_SPI_TransmitReceive+0x2cc>
 80072ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d103      	bne.n	80072fa <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 80072f2:	2303      	movs	r3, #3
 80072f4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 80072f8:	e029      	b.n	800734e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80072fe:	b29b      	uxth	r3, r3
 8007300:	2b00      	cmp	r3, #0
 8007302:	d1a2      	bne.n	800724a <HAL_SPI_TransmitReceive+0x224>
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007308:	b29b      	uxth	r3, r3
 800730a:	2b00      	cmp	r3, #0
 800730c:	d19d      	bne.n	800724a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800730e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007310:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007312:	68f8      	ldr	r0, [r7, #12]
 8007314:	f000 fa18 	bl	8007748 <SPI_EndRxTxTransaction>
 8007318:	4603      	mov	r3, r0
 800731a:	2b00      	cmp	r3, #0
 800731c:	d006      	beq.n	800732c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	2220      	movs	r2, #32
 8007328:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800732a:	e010      	b.n	800734e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	689b      	ldr	r3, [r3, #8]
 8007330:	2b00      	cmp	r3, #0
 8007332:	d10b      	bne.n	800734c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007334:	2300      	movs	r3, #0
 8007336:	617b      	str	r3, [r7, #20]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	68db      	ldr	r3, [r3, #12]
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	689b      	ldr	r3, [r3, #8]
 8007346:	617b      	str	r3, [r7, #20]
 8007348:	697b      	ldr	r3, [r7, #20]
 800734a:	e000      	b.n	800734e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800734c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800734e:	68fb      	ldr	r3, [r7, #12]
 8007350:	2201      	movs	r2, #1
 8007352:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	2200      	movs	r2, #0
 800735a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800735e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8007362:	4618      	mov	r0, r3
 8007364:	3730      	adds	r7, #48	; 0x30
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}
	...

0800736c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b088      	sub	sp, #32
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	685b      	ldr	r3, [r3, #4]
 800737a:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	689b      	ldr	r3, [r3, #8]
 8007382:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007384:	69bb      	ldr	r3, [r7, #24]
 8007386:	099b      	lsrs	r3, r3, #6
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d10f      	bne.n	80073b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8007396:	2b00      	cmp	r3, #0
 8007398:	d00a      	beq.n	80073b0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800739a:	69fb      	ldr	r3, [r7, #28]
 800739c:	099b      	lsrs	r3, r3, #6
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d004      	beq.n	80073b0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	4798      	blx	r3
    return;
 80073ae:	e0d8      	b.n	8007562 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80073b0:	69bb      	ldr	r3, [r7, #24]
 80073b2:	085b      	lsrs	r3, r3, #1
 80073b4:	f003 0301 	and.w	r3, r3, #1
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d00a      	beq.n	80073d2 <HAL_SPI_IRQHandler+0x66>
 80073bc:	69fb      	ldr	r3, [r7, #28]
 80073be:	09db      	lsrs	r3, r3, #7
 80073c0:	f003 0301 	and.w	r3, r3, #1
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	d004      	beq.n	80073d2 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	4798      	blx	r3
    return;
 80073d0:	e0c7      	b.n	8007562 <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80073d2:	69bb      	ldr	r3, [r7, #24]
 80073d4:	095b      	lsrs	r3, r3, #5
 80073d6:	f003 0301 	and.w	r3, r3, #1
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d10c      	bne.n	80073f8 <HAL_SPI_IRQHandler+0x8c>
 80073de:	69bb      	ldr	r3, [r7, #24]
 80073e0:	099b      	lsrs	r3, r3, #6
 80073e2:	f003 0301 	and.w	r3, r3, #1
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80073ea:	69bb      	ldr	r3, [r7, #24]
 80073ec:	0a1b      	lsrs	r3, r3, #8
 80073ee:	f003 0301 	and.w	r3, r3, #1
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	f000 80b5 	beq.w	8007562 <HAL_SPI_IRQHandler+0x1f6>
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	095b      	lsrs	r3, r3, #5
 80073fc:	f003 0301 	and.w	r3, r3, #1
 8007400:	2b00      	cmp	r3, #0
 8007402:	f000 80ae 	beq.w	8007562 <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	099b      	lsrs	r3, r3, #6
 800740a:	f003 0301 	and.w	r3, r3, #1
 800740e:	2b00      	cmp	r3, #0
 8007410:	d023      	beq.n	800745a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007418:	b2db      	uxtb	r3, r3
 800741a:	2b03      	cmp	r3, #3
 800741c:	d011      	beq.n	8007442 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007422:	f043 0204 	orr.w	r2, r3, #4
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800742a:	2300      	movs	r3, #0
 800742c:	617b      	str	r3, [r7, #20]
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	68db      	ldr	r3, [r3, #12]
 8007434:	617b      	str	r3, [r7, #20]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	689b      	ldr	r3, [r3, #8]
 800743c:	617b      	str	r3, [r7, #20]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	e00b      	b.n	800745a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007442:	2300      	movs	r3, #0
 8007444:	613b      	str	r3, [r7, #16]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	68db      	ldr	r3, [r3, #12]
 800744c:	613b      	str	r3, [r7, #16]
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	613b      	str	r3, [r7, #16]
 8007456:	693b      	ldr	r3, [r7, #16]
        return;
 8007458:	e083      	b.n	8007562 <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800745a:	69bb      	ldr	r3, [r7, #24]
 800745c:	095b      	lsrs	r3, r3, #5
 800745e:	f003 0301 	and.w	r3, r3, #1
 8007462:	2b00      	cmp	r3, #0
 8007464:	d014      	beq.n	8007490 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800746a:	f043 0201 	orr.w	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8007472:	2300      	movs	r3, #0
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	60fb      	str	r3, [r7, #12]
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	681a      	ldr	r2, [r3, #0]
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800748c:	601a      	str	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8007490:	69bb      	ldr	r3, [r7, #24]
 8007492:	0a1b      	lsrs	r3, r3, #8
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00c      	beq.n	80074b6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074a0:	f043 0208 	orr.w	r2, r3, #8
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80074a8:	2300      	movs	r3, #0
 80074aa:	60bb      	str	r3, [r7, #8]
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	689b      	ldr	r3, [r3, #8]
 80074b2:	60bb      	str	r3, [r7, #8]
 80074b4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d050      	beq.n	8007560 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074cc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2201      	movs	r2, #1
 80074d2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80074d6:	69fb      	ldr	r3, [r7, #28]
 80074d8:	f003 0302 	and.w	r3, r3, #2
 80074dc:	2b00      	cmp	r3, #0
 80074de:	d104      	bne.n	80074ea <HAL_SPI_IRQHandler+0x17e>
 80074e0:	69fb      	ldr	r3, [r7, #28]
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d034      	beq.n	8007554 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	685a      	ldr	r2, [r3, #4]
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	f022 0203 	bic.w	r2, r2, #3
 80074f8:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007506:	4a18      	ldr	r2, [pc, #96]	; (8007568 <HAL_SPI_IRQHandler+0x1fc>)
 8007508:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800750e:	4618      	mov	r0, r3
 8007510:	f7fb f8e6 	bl	80026e0 <HAL_DMA_Abort_IT>
 8007514:	4603      	mov	r3, r0
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800751e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800752a:	2b00      	cmp	r3, #0
 800752c:	d016      	beq.n	800755c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007532:	4a0d      	ldr	r2, [pc, #52]	; (8007568 <HAL_SPI_IRQHandler+0x1fc>)
 8007534:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800753a:	4618      	mov	r0, r3
 800753c:	f7fb f8d0 	bl	80026e0 <HAL_DMA_Abort_IT>
 8007540:	4603      	mov	r3, r0
 8007542:	2b00      	cmp	r3, #0
 8007544:	d00a      	beq.n	800755c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800754a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8007552:	e003      	b.n	800755c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8007554:	6878      	ldr	r0, [r7, #4]
 8007556:	f000 f809 	bl	800756c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800755a:	e000      	b.n	800755e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800755c:	bf00      	nop
    return;
 800755e:	bf00      	nop
 8007560:	bf00      	nop
  }
}
 8007562:	3720      	adds	r7, #32
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}
 8007568:	08007581 	.word	0x08007581

0800756c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8007574:	bf00      	nop
 8007576:	370c      	adds	r7, #12
 8007578:	46bd      	mov	sp, r7
 800757a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757e:	4770      	bx	lr

08007580 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b084      	sub	sp, #16
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2200      	movs	r2, #0
 8007592:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	2200      	movs	r2, #0
 8007598:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800759a:	68f8      	ldr	r0, [r7, #12]
 800759c:	f7ff ffe6 	bl	800756c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80075a0:	bf00      	nop
 80075a2:	3710      	adds	r7, #16
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	603b      	str	r3, [r7, #0]
 80075b4:	4613      	mov	r3, r2
 80075b6:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075b8:	e04c      	b.n	8007654 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075c0:	d048      	beq.n	8007654 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80075c2:	f7fa fc3d 	bl	8001e40 <HAL_GetTick>
 80075c6:	4602      	mov	r2, r0
 80075c8:	69bb      	ldr	r3, [r7, #24]
 80075ca:	1ad3      	subs	r3, r2, r3
 80075cc:	683a      	ldr	r2, [r7, #0]
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d902      	bls.n	80075d8 <SPI_WaitFlagStateUntilTimeout+0x30>
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d13d      	bne.n	8007654 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	685a      	ldr	r2, [r3, #4]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075f0:	d111      	bne.n	8007616 <SPI_WaitFlagStateUntilTimeout+0x6e>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	689b      	ldr	r3, [r3, #8]
 80075f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075fa:	d004      	beq.n	8007606 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007604:	d107      	bne.n	8007616 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	681a      	ldr	r2, [r3, #0]
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007614:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800761a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800761e:	d10f      	bne.n	8007640 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800762e:	601a      	str	r2, [r3, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681a      	ldr	r2, [r3, #0]
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800763e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2201      	movs	r2, #1
 8007644:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8007650:	2303      	movs	r3, #3
 8007652:	e00f      	b.n	8007674 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	689a      	ldr	r2, [r3, #8]
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4013      	ands	r3, r2
 800765e:	68ba      	ldr	r2, [r7, #8]
 8007660:	429a      	cmp	r2, r3
 8007662:	bf0c      	ite	eq
 8007664:	2301      	moveq	r3, #1
 8007666:	2300      	movne	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	79fb      	ldrb	r3, [r7, #7]
 800766e:	429a      	cmp	r2, r3
 8007670:	d1a3      	bne.n	80075ba <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8007672:	2300      	movs	r3, #0
}
 8007674:	4618      	mov	r0, r3
 8007676:	3710      	adds	r7, #16
 8007678:	46bd      	mov	sp, r7
 800767a:	bd80      	pop	{r7, pc}

0800767c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007690:	d111      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d004      	beq.n	80076a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a4:	d107      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b4:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	685b      	ldr	r3, [r3, #4]
 80076ba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076be:	d12a      	bne.n	8007716 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076c8:	d012      	beq.n	80076f0 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	9300      	str	r3, [sp, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	2200      	movs	r2, #0
 80076d2:	2180      	movs	r1, #128	; 0x80
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f7ff ff67 	bl	80075a8 <SPI_WaitFlagStateUntilTimeout>
 80076da:	4603      	mov	r3, r0
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d02d      	beq.n	800773c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076e4:	f043 0220 	orr.w	r2, r3, #32
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80076ec:	2303      	movs	r3, #3
 80076ee:	e026      	b.n	800773e <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	9300      	str	r3, [sp, #0]
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	2200      	movs	r2, #0
 80076f8:	2101      	movs	r1, #1
 80076fa:	68f8      	ldr	r0, [r7, #12]
 80076fc:	f7ff ff54 	bl	80075a8 <SPI_WaitFlagStateUntilTimeout>
 8007700:	4603      	mov	r3, r0
 8007702:	2b00      	cmp	r3, #0
 8007704:	d01a      	beq.n	800773c <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800770a:	f043 0220 	orr.w	r2, r3, #32
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8007712:	2303      	movs	r3, #3
 8007714:	e013      	b.n	800773e <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	9300      	str	r3, [sp, #0]
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	2200      	movs	r2, #0
 800771e:	2101      	movs	r1, #1
 8007720:	68f8      	ldr	r0, [r7, #12]
 8007722:	f7ff ff41 	bl	80075a8 <SPI_WaitFlagStateUntilTimeout>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d007      	beq.n	800773c <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007730:	f043 0220 	orr.w	r2, r3, #32
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007738:	2303      	movs	r3, #3
 800773a:	e000      	b.n	800773e <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800773c:	2300      	movs	r3, #0
}
 800773e:	4618      	mov	r0, r3
 8007740:	3710      	adds	r7, #16
 8007742:	46bd      	mov	sp, r7
 8007744:	bd80      	pop	{r7, pc}
	...

08007748 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b088      	sub	sp, #32
 800774c:	af02      	add	r7, sp, #8
 800774e:	60f8      	str	r0, [r7, #12]
 8007750:	60b9      	str	r1, [r7, #8]
 8007752:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8007754:	4b1b      	ldr	r3, [pc, #108]	; (80077c4 <SPI_EndRxTxTransaction+0x7c>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4a1b      	ldr	r2, [pc, #108]	; (80077c8 <SPI_EndRxTxTransaction+0x80>)
 800775a:	fba2 2303 	umull	r2, r3, r2, r3
 800775e:	0d5b      	lsrs	r3, r3, #21
 8007760:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007764:	fb02 f303 	mul.w	r3, r2, r3
 8007768:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800776a:	68fb      	ldr	r3, [r7, #12]
 800776c:	685b      	ldr	r3, [r3, #4]
 800776e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007772:	d112      	bne.n	800779a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	9300      	str	r3, [sp, #0]
 8007778:	68bb      	ldr	r3, [r7, #8]
 800777a:	2200      	movs	r2, #0
 800777c:	2180      	movs	r1, #128	; 0x80
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f7ff ff12 	bl	80075a8 <SPI_WaitFlagStateUntilTimeout>
 8007784:	4603      	mov	r3, r0
 8007786:	2b00      	cmp	r3, #0
 8007788:	d016      	beq.n	80077b8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800778e:	f043 0220 	orr.w	r2, r3, #32
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8007796:	2303      	movs	r3, #3
 8007798:	e00f      	b.n	80077ba <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800779a:	697b      	ldr	r3, [r7, #20]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d00a      	beq.n	80077b6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80077a0:	697b      	ldr	r3, [r7, #20]
 80077a2:	3b01      	subs	r3, #1
 80077a4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077b0:	2b80      	cmp	r3, #128	; 0x80
 80077b2:	d0f2      	beq.n	800779a <SPI_EndRxTxTransaction+0x52>
 80077b4:	e000      	b.n	80077b8 <SPI_EndRxTxTransaction+0x70>
        break;
 80077b6:	bf00      	nop
  }

  return HAL_OK;
 80077b8:	2300      	movs	r3, #0
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000000 	.word	0x20000000
 80077c8:	165e9f81 	.word	0x165e9f81

080077cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077cc:	b580      	push	{r7, lr}
 80077ce:	b082      	sub	sp, #8
 80077d0:	af00      	add	r7, sp, #0
 80077d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d101      	bne.n	80077de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	e01d      	b.n	800781a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e4:	b2db      	uxtb	r3, r3
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d106      	bne.n	80077f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	2200      	movs	r2, #0
 80077ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f7f9 ff50 	bl	8001698 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2202      	movs	r2, #2
 80077fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	3304      	adds	r3, #4
 8007808:	4619      	mov	r1, r3
 800780a:	4610      	mov	r0, r2
 800780c:	f000 fc2e 	bl	800806c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	2201      	movs	r2, #1
 8007814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007818:	2300      	movs	r3, #0
}
 800781a:	4618      	mov	r0, r3
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007822:	b480      	push	{r7}
 8007824:	b085      	sub	sp, #20
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2202      	movs	r2, #2
 800782e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	689b      	ldr	r3, [r3, #8]
 8007838:	f003 0307 	and.w	r3, r3, #7
 800783c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	2b06      	cmp	r3, #6
 8007842:	d007      	beq.n	8007854 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f042 0201 	orr.w	r2, r2, #1
 8007852:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3714      	adds	r7, #20
 8007862:	46bd      	mov	sp, r7
 8007864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007868:	4770      	bx	lr

0800786a <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800786a:	b480      	push	{r7}
 800786c:	b085      	sub	sp, #20
 800786e:	af00      	add	r7, sp, #0
 8007870:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	68da      	ldr	r2, [r3, #12]
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	f042 0201 	orr.w	r2, r2, #1
 8007880:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f003 0307 	and.w	r3, r3, #7
 800788c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	2b06      	cmp	r3, #6
 8007892:	d007      	beq.n	80078a4 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0201 	orr.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr

080078b2 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80078b2:	b580      	push	{r7, lr}
 80078b4:	b082      	sub	sp, #8
 80078b6:	af00      	add	r7, sp, #0
 80078b8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d101      	bne.n	80078c4 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e01d      	b.n	8007900 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078ca:	b2db      	uxtb	r3, r3
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d106      	bne.n	80078de <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f815 	bl	8007908 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2202      	movs	r2, #2
 80078e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681a      	ldr	r2, [r3, #0]
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	3304      	adds	r3, #4
 80078ee:	4619      	mov	r1, r3
 80078f0:	4610      	mov	r0, r2
 80078f2:	f000 fbbb 	bl	800806c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2201      	movs	r2, #1
 80078fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80078fe:	2300      	movs	r3, #0
}
 8007900:	4618      	mov	r0, r3
 8007902:	3708      	adds	r7, #8
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8007910:	bf00      	nop
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e01d      	b.n	800796a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 f815 	bl	8007972 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2202      	movs	r2, #2
 800794c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681a      	ldr	r2, [r3, #0]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	3304      	adds	r3, #4
 8007958:	4619      	mov	r1, r3
 800795a:	4610      	mov	r0, r2
 800795c:	f000 fb86 	bl	800806c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2201      	movs	r2, #1
 8007964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007968:	2300      	movs	r3, #0
}
 800796a:	4618      	mov	r0, r3
 800796c:	3708      	adds	r7, #8
 800796e:	46bd      	mov	sp, r7
 8007970:	bd80      	pop	{r7, pc}

08007972 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007972:	b480      	push	{r7}
 8007974:	b083      	sub	sp, #12
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800797a:	bf00      	nop
 800797c:	370c      	adds	r7, #12
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr

08007986 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007986:	b580      	push	{r7, lr}
 8007988:	b082      	sub	sp, #8
 800798a:	af00      	add	r7, sp, #0
 800798c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d101      	bne.n	8007998 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007994:	2301      	movs	r3, #1
 8007996:	e01d      	b.n	80079d4 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d106      	bne.n	80079b2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80079ac:	6878      	ldr	r0, [r7, #4]
 80079ae:	f000 f815 	bl	80079dc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2202      	movs	r2, #2
 80079b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	681a      	ldr	r2, [r3, #0]
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	3304      	adds	r3, #4
 80079c2:	4619      	mov	r1, r3
 80079c4:	4610      	mov	r0, r2
 80079c6:	f000 fb51 	bl	800806c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	2201      	movs	r2, #1
 80079ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079d2:	2300      	movs	r3, #0
}
 80079d4:	4618      	mov	r0, r3
 80079d6:	3708      	adds	r7, #8
 80079d8:	46bd      	mov	sp, r7
 80079da:	bd80      	pop	{r7, pc}

080079dc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80079dc:	b480      	push	{r7}
 80079de:	b083      	sub	sp, #12
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80079e4:	bf00      	nop
 80079e6:	370c      	adds	r7, #12
 80079e8:	46bd      	mov	sp, r7
 80079ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ee:	4770      	bx	lr

080079f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	691b      	ldr	r3, [r3, #16]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b02      	cmp	r3, #2
 8007a04:	d122      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f003 0302 	and.w	r3, r3, #2
 8007a10:	2b02      	cmp	r3, #2
 8007a12:	d11b      	bne.n	8007a4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f06f 0202 	mvn.w	r2, #2
 8007a1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	2201      	movs	r2, #1
 8007a22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	699b      	ldr	r3, [r3, #24]
 8007a2a:	f003 0303 	and.w	r3, r3, #3
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d003      	beq.n	8007a3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fafc 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007a38:	e005      	b.n	8007a46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f000 faee 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f000 faff 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	2200      	movs	r2, #0
 8007a4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	f003 0304 	and.w	r3, r3, #4
 8007a56:	2b04      	cmp	r3, #4
 8007a58:	d122      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	68db      	ldr	r3, [r3, #12]
 8007a60:	f003 0304 	and.w	r3, r3, #4
 8007a64:	2b04      	cmp	r3, #4
 8007a66:	d11b      	bne.n	8007aa0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f06f 0204 	mvn.w	r2, #4
 8007a70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	699b      	ldr	r3, [r3, #24]
 8007a7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d003      	beq.n	8007a8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007a86:	6878      	ldr	r0, [r7, #4]
 8007a88:	f000 fad2 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007a8c:	e005      	b.n	8007a9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007a8e:	6878      	ldr	r0, [r7, #4]
 8007a90:	f000 fac4 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007a94:	6878      	ldr	r0, [r7, #4]
 8007a96:	f000 fad5 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	691b      	ldr	r3, [r3, #16]
 8007aa6:	f003 0308 	and.w	r3, r3, #8
 8007aaa:	2b08      	cmp	r3, #8
 8007aac:	d122      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	f003 0308 	and.w	r3, r3, #8
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d11b      	bne.n	8007af4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f06f 0208 	mvn.w	r2, #8
 8007ac4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2204      	movs	r2, #4
 8007aca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	69db      	ldr	r3, [r3, #28]
 8007ad2:	f003 0303 	and.w	r3, r3, #3
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d003      	beq.n	8007ae2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007ada:	6878      	ldr	r0, [r7, #4]
 8007adc:	f000 faa8 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007ae0:	e005      	b.n	8007aee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007ae2:	6878      	ldr	r0, [r7, #4]
 8007ae4:	f000 fa9a 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ae8:	6878      	ldr	r0, [r7, #4]
 8007aea:	f000 faab 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	f003 0310 	and.w	r3, r3, #16
 8007afe:	2b10      	cmp	r3, #16
 8007b00:	d122      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	68db      	ldr	r3, [r3, #12]
 8007b08:	f003 0310 	and.w	r3, r3, #16
 8007b0c:	2b10      	cmp	r3, #16
 8007b0e:	d11b      	bne.n	8007b48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	f06f 0210 	mvn.w	r2, #16
 8007b18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2208      	movs	r2, #8
 8007b1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	69db      	ldr	r3, [r3, #28]
 8007b26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d003      	beq.n	8007b36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007b2e:	6878      	ldr	r0, [r7, #4]
 8007b30:	f000 fa7e 	bl	8008030 <HAL_TIM_IC_CaptureCallback>
 8007b34:	e005      	b.n	8007b42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b36:	6878      	ldr	r0, [r7, #4]
 8007b38:	f000 fa70 	bl	800801c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b3c:	6878      	ldr	r0, [r7, #4]
 8007b3e:	f000 fa81 	bl	8008044 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	2200      	movs	r2, #0
 8007b46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b01      	cmp	r3, #1
 8007b54:	d10e      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	68db      	ldr	r3, [r3, #12]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d107      	bne.n	8007b74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f06f 0201 	mvn.w	r2, #1
 8007b6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007b6e:	6878      	ldr	r0, [r7, #4]
 8007b70:	f000 fa4a 	bl	8008008 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	691b      	ldr	r3, [r3, #16]
 8007b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b7e:	2b80      	cmp	r3, #128	; 0x80
 8007b80:	d10e      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	68db      	ldr	r3, [r3, #12]
 8007b88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b8c:	2b80      	cmp	r3, #128	; 0x80
 8007b8e:	d107      	bne.n	8007ba0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007b98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 ffbe 	bl	8008b1c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	691b      	ldr	r3, [r3, #16]
 8007ba6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007baa:	2b40      	cmp	r3, #64	; 0x40
 8007bac:	d10e      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bb8:	2b40      	cmp	r3, #64	; 0x40
 8007bba:	d107      	bne.n	8007bcc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007bc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa46 	bl	8008058 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	f003 0320 	and.w	r3, r3, #32
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d10e      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	68db      	ldr	r3, [r3, #12]
 8007be0:	f003 0320 	and.w	r3, r3, #32
 8007be4:	2b20      	cmp	r3, #32
 8007be6:	d107      	bne.n	8007bf8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	f06f 0220 	mvn.w	r2, #32
 8007bf0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007bf2:	6878      	ldr	r0, [r7, #4]
 8007bf4:	f000 ff88 	bl	8008b08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007bf8:	bf00      	nop
 8007bfa:	3708      	adds	r7, #8
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_TIM_OC_ConfigChannel+0x1a>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e04e      	b.n	8007cb8 <HAL_TIM_OC_ConfigChannel+0xb8>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	2202      	movs	r2, #2
 8007c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2b0c      	cmp	r3, #12
 8007c2e:	d839      	bhi.n	8007ca4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8007c30:	a201      	add	r2, pc, #4	; (adr r2, 8007c38 <HAL_TIM_OC_ConfigChannel+0x38>)
 8007c32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c36:	bf00      	nop
 8007c38:	08007c6d 	.word	0x08007c6d
 8007c3c:	08007ca5 	.word	0x08007ca5
 8007c40:	08007ca5 	.word	0x08007ca5
 8007c44:	08007ca5 	.word	0x08007ca5
 8007c48:	08007c7b 	.word	0x08007c7b
 8007c4c:	08007ca5 	.word	0x08007ca5
 8007c50:	08007ca5 	.word	0x08007ca5
 8007c54:	08007ca5 	.word	0x08007ca5
 8007c58:	08007c89 	.word	0x08007c89
 8007c5c:	08007ca5 	.word	0x08007ca5
 8007c60:	08007ca5 	.word	0x08007ca5
 8007c64:	08007ca5 	.word	0x08007ca5
 8007c68:	08007c97 	.word	0x08007c97
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	68b9      	ldr	r1, [r7, #8]
 8007c72:	4618      	mov	r0, r3
 8007c74:	f000 fa9a 	bl	80081ac <TIM_OC1_SetConfig>
      break;
 8007c78:	e015      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	68b9      	ldr	r1, [r7, #8]
 8007c80:	4618      	mov	r0, r3
 8007c82:	f000 fb03 	bl	800828c <TIM_OC2_SetConfig>
      break;
 8007c86:	e00e      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	68b9      	ldr	r1, [r7, #8]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 fb72 	bl	8008378 <TIM_OC3_SetConfig>
      break;
 8007c94:	e007      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	68b9      	ldr	r1, [r7, #8]
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	f000 fbdf 	bl	8008460 <TIM_OC4_SetConfig>
      break;
 8007ca2:	e000      	b.n	8007ca6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007ca4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007ca6:	68fb      	ldr	r3, [r7, #12]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007cb6:	2300      	movs	r3, #0
}
 8007cb8:	4618      	mov	r0, r3
 8007cba:	3710      	adds	r7, #16
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	bd80      	pop	{r7, pc}

08007cc0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	60f8      	str	r0, [r7, #12]
 8007cc8:	60b9      	str	r1, [r7, #8]
 8007cca:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d101      	bne.n	8007cda <HAL_TIM_IC_ConfigChannel+0x1a>
 8007cd6:	2302      	movs	r3, #2
 8007cd8:	e08a      	b.n	8007df0 <HAL_TIM_IC_ConfigChannel+0x130>
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	2201      	movs	r2, #1
 8007cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	2202      	movs	r2, #2
 8007ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d11b      	bne.n	8007d28 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	6818      	ldr	r0, [r3, #0]
 8007cf4:	68bb      	ldr	r3, [r7, #8]
 8007cf6:	6819      	ldr	r1, [r3, #0]
 8007cf8:	68bb      	ldr	r3, [r7, #8]
 8007cfa:	685a      	ldr	r2, [r3, #4]
 8007cfc:	68bb      	ldr	r3, [r7, #8]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f000 fc8a 	bl	8008618 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699a      	ldr	r2, [r3, #24]
 8007d0a:	68fb      	ldr	r3, [r7, #12]
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	f022 020c 	bic.w	r2, r2, #12
 8007d12:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	6999      	ldr	r1, [r3, #24]
 8007d1a:	68bb      	ldr	r3, [r7, #8]
 8007d1c:	689a      	ldr	r2, [r3, #8]
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	430a      	orrs	r2, r1
 8007d24:	619a      	str	r2, [r3, #24]
 8007d26:	e05a      	b.n	8007dde <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	2b04      	cmp	r3, #4
 8007d2c:	d11c      	bne.n	8007d68 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6818      	ldr	r0, [r3, #0]
 8007d32:	68bb      	ldr	r3, [r7, #8]
 8007d34:	6819      	ldr	r1, [r3, #0]
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	685a      	ldr	r2, [r3, #4]
 8007d3a:	68bb      	ldr	r3, [r7, #8]
 8007d3c:	68db      	ldr	r3, [r3, #12]
 8007d3e:	f000 fd0e 	bl	800875e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	699a      	ldr	r2, [r3, #24]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007d50:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007d52:	68fb      	ldr	r3, [r7, #12]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	6999      	ldr	r1, [r3, #24]
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	689b      	ldr	r3, [r3, #8]
 8007d5c:	021a      	lsls	r2, r3, #8
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	430a      	orrs	r2, r1
 8007d64:	619a      	str	r2, [r3, #24]
 8007d66:	e03a      	b.n	8007dde <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2b08      	cmp	r3, #8
 8007d6c:	d11b      	bne.n	8007da6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	6818      	ldr	r0, [r3, #0]
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	6819      	ldr	r1, [r3, #0]
 8007d76:	68bb      	ldr	r3, [r7, #8]
 8007d78:	685a      	ldr	r2, [r3, #4]
 8007d7a:	68bb      	ldr	r3, [r7, #8]
 8007d7c:	68db      	ldr	r3, [r3, #12]
 8007d7e:	f000 fd5b 	bl	8008838 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007d82:	68fb      	ldr	r3, [r7, #12]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	69da      	ldr	r2, [r3, #28]
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f022 020c 	bic.w	r2, r2, #12
 8007d90:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	69d9      	ldr	r1, [r3, #28]
 8007d98:	68bb      	ldr	r3, [r7, #8]
 8007d9a:	689a      	ldr	r2, [r3, #8]
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	430a      	orrs	r2, r1
 8007da2:	61da      	str	r2, [r3, #28]
 8007da4:	e01b      	b.n	8007dde <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	6818      	ldr	r0, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	6819      	ldr	r1, [r3, #0]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	685a      	ldr	r2, [r3, #4]
 8007db2:	68bb      	ldr	r3, [r7, #8]
 8007db4:	68db      	ldr	r3, [r3, #12]
 8007db6:	f000 fd7b 	bl	80088b0 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	69da      	ldr	r2, [r3, #28]
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dc8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69d9      	ldr	r1, [r3, #28]
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	689b      	ldr	r3, [r3, #8]
 8007dd4:	021a      	lsls	r2, r3, #8
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	2201      	movs	r2, #1
 8007de2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2200      	movs	r2, #0
 8007dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007dee:	2300      	movs	r3, #0
}
 8007df0:	4618      	mov	r0, r3
 8007df2:	3710      	adds	r7, #16
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b084      	sub	sp, #16
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0a:	2b01      	cmp	r3, #1
 8007e0c:	d101      	bne.n	8007e12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007e0e:	2302      	movs	r3, #2
 8007e10:	e0b4      	b.n	8007f7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	2201      	movs	r2, #1
 8007e16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2202      	movs	r2, #2
 8007e1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b0c      	cmp	r3, #12
 8007e26:	f200 809f 	bhi.w	8007f68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8007e2a:	a201      	add	r2, pc, #4	; (adr r2, 8007e30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007e2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e30:	08007e65 	.word	0x08007e65
 8007e34:	08007f69 	.word	0x08007f69
 8007e38:	08007f69 	.word	0x08007f69
 8007e3c:	08007f69 	.word	0x08007f69
 8007e40:	08007ea5 	.word	0x08007ea5
 8007e44:	08007f69 	.word	0x08007f69
 8007e48:	08007f69 	.word	0x08007f69
 8007e4c:	08007f69 	.word	0x08007f69
 8007e50:	08007ee7 	.word	0x08007ee7
 8007e54:	08007f69 	.word	0x08007f69
 8007e58:	08007f69 	.word	0x08007f69
 8007e5c:	08007f69 	.word	0x08007f69
 8007e60:	08007f27 	.word	0x08007f27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68b9      	ldr	r1, [r7, #8]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f99e 	bl	80081ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	699a      	ldr	r2, [r3, #24]
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	f042 0208 	orr.w	r2, r2, #8
 8007e7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	699a      	ldr	r2, [r3, #24]
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f022 0204 	bic.w	r2, r2, #4
 8007e8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	6999      	ldr	r1, [r3, #24]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	691a      	ldr	r2, [r3, #16]
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	430a      	orrs	r2, r1
 8007ea0:	619a      	str	r2, [r3, #24]
      break;
 8007ea2:	e062      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68b9      	ldr	r1, [r7, #8]
 8007eaa:	4618      	mov	r0, r3
 8007eac:	f000 f9ee 	bl	800828c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	699a      	ldr	r2, [r3, #24]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ebe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	681b      	ldr	r3, [r3, #0]
 8007ec4:	699a      	ldr	r2, [r3, #24]
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ece:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	6999      	ldr	r1, [r3, #24]
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	691b      	ldr	r3, [r3, #16]
 8007eda:	021a      	lsls	r2, r3, #8
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	430a      	orrs	r2, r1
 8007ee2:	619a      	str	r2, [r3, #24]
      break;
 8007ee4:	e041      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	68b9      	ldr	r1, [r7, #8]
 8007eec:	4618      	mov	r0, r3
 8007eee:	f000 fa43 	bl	8008378 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	69da      	ldr	r2, [r3, #28]
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f042 0208 	orr.w	r2, r2, #8
 8007f00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	69da      	ldr	r2, [r3, #28]
 8007f08:	68fb      	ldr	r3, [r7, #12]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f022 0204 	bic.w	r2, r2, #4
 8007f10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	69d9      	ldr	r1, [r3, #28]
 8007f18:	68bb      	ldr	r3, [r7, #8]
 8007f1a:	691a      	ldr	r2, [r3, #16]
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	430a      	orrs	r2, r1
 8007f22:	61da      	str	r2, [r3, #28]
      break;
 8007f24:	e021      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	68b9      	ldr	r1, [r7, #8]
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	f000 fa97 	bl	8008460 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f32:	68fb      	ldr	r3, [r7, #12]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	69da      	ldr	r2, [r3, #28]
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007f40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	69da      	ldr	r2, [r3, #28]
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007f50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f52:	68fb      	ldr	r3, [r7, #12]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	69d9      	ldr	r1, [r3, #28]
 8007f58:	68bb      	ldr	r3, [r7, #8]
 8007f5a:	691b      	ldr	r3, [r3, #16]
 8007f5c:	021a      	lsls	r2, r3, #8
 8007f5e:	68fb      	ldr	r3, [r7, #12]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	430a      	orrs	r2, r1
 8007f64:	61da      	str	r2, [r3, #28]
      break;
 8007f66:	e000      	b.n	8007f6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007f68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007f6a:	68fb      	ldr	r3, [r7, #12]
 8007f6c:	2201      	movs	r2, #1
 8007f6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	2200      	movs	r2, #0
 8007f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007f7a:	2300      	movs	r3, #0
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3710      	adds	r7, #16
 8007f80:	46bd      	mov	sp, r7
 8007f82:	bd80      	pop	{r7, pc}

08007f84 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b082      	sub	sp, #8
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f94:	2b01      	cmp	r3, #1
 8007f96:	d101      	bne.n	8007f9c <HAL_TIM_SlaveConfigSynchro+0x18>
 8007f98:	2302      	movs	r3, #2
 8007f9a:	e031      	b.n	8008000 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2201      	movs	r2, #1
 8007fa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007fac:	6839      	ldr	r1, [r7, #0]
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f000 faac 	bl	800850c <TIM_SlaveTimer_SetConfig>
 8007fb4:	4603      	mov	r3, r0
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d009      	beq.n	8007fce <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007fca:	2301      	movs	r3, #1
 8007fcc:	e018      	b.n	8008000 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	68da      	ldr	r2, [r3, #12]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007fdc:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fec:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ffe:	2300      	movs	r3, #0
}
 8008000:	4618      	mov	r0, r3
 8008002:	3708      	adds	r7, #8
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008008:	b480      	push	{r7}
 800800a:	b083      	sub	sp, #12
 800800c:	af00      	add	r7, sp, #0
 800800e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008010:	bf00      	nop
 8008012:	370c      	adds	r7, #12
 8008014:	46bd      	mov	sp, r7
 8008016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800801a:	4770      	bx	lr

0800801c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800801c:	b480      	push	{r7}
 800801e:	b083      	sub	sp, #12
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008024:	bf00      	nop
 8008026:	370c      	adds	r7, #12
 8008028:	46bd      	mov	sp, r7
 800802a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802e:	4770      	bx	lr

08008030 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008030:	b480      	push	{r7}
 8008032:	b083      	sub	sp, #12
 8008034:	af00      	add	r7, sp, #0
 8008036:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008038:	bf00      	nop
 800803a:	370c      	adds	r7, #12
 800803c:	46bd      	mov	sp, r7
 800803e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008042:	4770      	bx	lr

08008044 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008044:	b480      	push	{r7}
 8008046:	b083      	sub	sp, #12
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800804c:	bf00      	nop
 800804e:	370c      	adds	r7, #12
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008058:	b480      	push	{r7}
 800805a:	b083      	sub	sp, #12
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008060:	bf00      	nop
 8008062:	370c      	adds	r7, #12
 8008064:	46bd      	mov	sp, r7
 8008066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800806a:	4770      	bx	lr

0800806c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800806c:	b480      	push	{r7}
 800806e:	b085      	sub	sp, #20
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	4a40      	ldr	r2, [pc, #256]	; (8008180 <TIM_Base_SetConfig+0x114>)
 8008080:	4293      	cmp	r3, r2
 8008082:	d013      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800808a:	d00f      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	4a3d      	ldr	r2, [pc, #244]	; (8008184 <TIM_Base_SetConfig+0x118>)
 8008090:	4293      	cmp	r3, r2
 8008092:	d00b      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	4a3c      	ldr	r2, [pc, #240]	; (8008188 <TIM_Base_SetConfig+0x11c>)
 8008098:	4293      	cmp	r3, r2
 800809a:	d007      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	4a3b      	ldr	r2, [pc, #236]	; (800818c <TIM_Base_SetConfig+0x120>)
 80080a0:	4293      	cmp	r3, r2
 80080a2:	d003      	beq.n	80080ac <TIM_Base_SetConfig+0x40>
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	4a3a      	ldr	r2, [pc, #232]	; (8008190 <TIM_Base_SetConfig+0x124>)
 80080a8:	4293      	cmp	r3, r2
 80080aa:	d108      	bne.n	80080be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	685b      	ldr	r3, [r3, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	4313      	orrs	r3, r2
 80080bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a2f      	ldr	r2, [pc, #188]	; (8008180 <TIM_Base_SetConfig+0x114>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d02b      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080cc:	d027      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	4a2c      	ldr	r2, [pc, #176]	; (8008184 <TIM_Base_SetConfig+0x118>)
 80080d2:	4293      	cmp	r3, r2
 80080d4:	d023      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	4a2b      	ldr	r2, [pc, #172]	; (8008188 <TIM_Base_SetConfig+0x11c>)
 80080da:	4293      	cmp	r3, r2
 80080dc:	d01f      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a2a      	ldr	r2, [pc, #168]	; (800818c <TIM_Base_SetConfig+0x120>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d01b      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a29      	ldr	r2, [pc, #164]	; (8008190 <TIM_Base_SetConfig+0x124>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d017      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	4a28      	ldr	r2, [pc, #160]	; (8008194 <TIM_Base_SetConfig+0x128>)
 80080f2:	4293      	cmp	r3, r2
 80080f4:	d013      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	4a27      	ldr	r2, [pc, #156]	; (8008198 <TIM_Base_SetConfig+0x12c>)
 80080fa:	4293      	cmp	r3, r2
 80080fc:	d00f      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	4a26      	ldr	r2, [pc, #152]	; (800819c <TIM_Base_SetConfig+0x130>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d00b      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4a25      	ldr	r2, [pc, #148]	; (80081a0 <TIM_Base_SetConfig+0x134>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d007      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	4a24      	ldr	r2, [pc, #144]	; (80081a4 <TIM_Base_SetConfig+0x138>)
 8008112:	4293      	cmp	r3, r2
 8008114:	d003      	beq.n	800811e <TIM_Base_SetConfig+0xb2>
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	4a23      	ldr	r2, [pc, #140]	; (80081a8 <TIM_Base_SetConfig+0x13c>)
 800811a:	4293      	cmp	r3, r2
 800811c:	d108      	bne.n	8008130 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	68db      	ldr	r3, [r3, #12]
 800812a:	68fa      	ldr	r2, [r7, #12]
 800812c:	4313      	orrs	r3, r2
 800812e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	695b      	ldr	r3, [r3, #20]
 800813a:	4313      	orrs	r3, r2
 800813c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	68fa      	ldr	r2, [r7, #12]
 8008142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008144:	683b      	ldr	r3, [r7, #0]
 8008146:	689a      	ldr	r2, [r3, #8]
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800814c:	683b      	ldr	r3, [r7, #0]
 800814e:	681a      	ldr	r2, [r3, #0]
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	4a0a      	ldr	r2, [pc, #40]	; (8008180 <TIM_Base_SetConfig+0x114>)
 8008158:	4293      	cmp	r3, r2
 800815a:	d003      	beq.n	8008164 <TIM_Base_SetConfig+0xf8>
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	4a0c      	ldr	r2, [pc, #48]	; (8008190 <TIM_Base_SetConfig+0x124>)
 8008160:	4293      	cmp	r3, r2
 8008162:	d103      	bne.n	800816c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	691a      	ldr	r2, [r3, #16]
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2201      	movs	r2, #1
 8008170:	615a      	str	r2, [r3, #20]
}
 8008172:	bf00      	nop
 8008174:	3714      	adds	r7, #20
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40010000 	.word	0x40010000
 8008184:	40000400 	.word	0x40000400
 8008188:	40000800 	.word	0x40000800
 800818c:	40000c00 	.word	0x40000c00
 8008190:	40010400 	.word	0x40010400
 8008194:	40014000 	.word	0x40014000
 8008198:	40014400 	.word	0x40014400
 800819c:	40014800 	.word	0x40014800
 80081a0:	40001800 	.word	0x40001800
 80081a4:	40001c00 	.word	0x40001c00
 80081a8:	40002000 	.word	0x40002000

080081ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	6a1b      	ldr	r3, [r3, #32]
 80081ba:	f023 0201 	bic.w	r2, r3, #1
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	6a1b      	ldr	r3, [r3, #32]
 80081c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	699b      	ldr	r3, [r3, #24]
 80081d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80081da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 0303 	bic.w	r3, r3, #3
 80081e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	68fa      	ldr	r2, [r7, #12]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 0302 	bic.w	r3, r3, #2
 80081f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	689b      	ldr	r3, [r3, #8]
 80081fa:	697a      	ldr	r2, [r7, #20]
 80081fc:	4313      	orrs	r3, r2
 80081fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a20      	ldr	r2, [pc, #128]	; (8008284 <TIM_OC1_SetConfig+0xd8>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d003      	beq.n	8008210 <TIM_OC1_SetConfig+0x64>
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a1f      	ldr	r2, [pc, #124]	; (8008288 <TIM_OC1_SetConfig+0xdc>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d10c      	bne.n	800822a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008210:	697b      	ldr	r3, [r7, #20]
 8008212:	f023 0308 	bic.w	r3, r3, #8
 8008216:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	68db      	ldr	r3, [r3, #12]
 800821c:	697a      	ldr	r2, [r7, #20]
 800821e:	4313      	orrs	r3, r2
 8008220:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	f023 0304 	bic.w	r3, r3, #4
 8008228:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	4a15      	ldr	r2, [pc, #84]	; (8008284 <TIM_OC1_SetConfig+0xd8>)
 800822e:	4293      	cmp	r3, r2
 8008230:	d003      	beq.n	800823a <TIM_OC1_SetConfig+0x8e>
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	4a14      	ldr	r2, [pc, #80]	; (8008288 <TIM_OC1_SetConfig+0xdc>)
 8008236:	4293      	cmp	r3, r2
 8008238:	d111      	bne.n	800825e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008242:	693b      	ldr	r3, [r7, #16]
 8008244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800824a:	683b      	ldr	r3, [r7, #0]
 800824c:	695b      	ldr	r3, [r3, #20]
 800824e:	693a      	ldr	r2, [r7, #16]
 8008250:	4313      	orrs	r3, r2
 8008252:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	699b      	ldr	r3, [r3, #24]
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	693a      	ldr	r2, [r7, #16]
 8008262:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	68fa      	ldr	r2, [r7, #12]
 8008268:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800826a:	683b      	ldr	r3, [r7, #0]
 800826c:	685a      	ldr	r2, [r3, #4]
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	697a      	ldr	r2, [r7, #20]
 8008276:	621a      	str	r2, [r3, #32]
}
 8008278:	bf00      	nop
 800827a:	371c      	adds	r7, #28
 800827c:	46bd      	mov	sp, r7
 800827e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008282:	4770      	bx	lr
 8008284:	40010000 	.word	0x40010000
 8008288:	40010400 	.word	0x40010400

0800828c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800828c:	b480      	push	{r7}
 800828e:	b087      	sub	sp, #28
 8008290:	af00      	add	r7, sp, #0
 8008292:	6078      	str	r0, [r7, #4]
 8008294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6a1b      	ldr	r3, [r3, #32]
 800829a:	f023 0210 	bic.w	r2, r3, #16
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6a1b      	ldr	r3, [r3, #32]
 80082a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	685b      	ldr	r3, [r3, #4]
 80082ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	699b      	ldr	r3, [r3, #24]
 80082b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80082ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	021b      	lsls	r3, r3, #8
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80082d0:	697b      	ldr	r3, [r7, #20]
 80082d2:	f023 0320 	bic.w	r3, r3, #32
 80082d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80082d8:	683b      	ldr	r3, [r7, #0]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	011b      	lsls	r3, r3, #4
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a22      	ldr	r2, [pc, #136]	; (8008370 <TIM_OC2_SetConfig+0xe4>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_OC2_SetConfig+0x68>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a21      	ldr	r2, [pc, #132]	; (8008374 <TIM_OC2_SetConfig+0xe8>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d10d      	bne.n	8008310 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80082fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	011b      	lsls	r3, r3, #4
 8008302:	697a      	ldr	r2, [r7, #20]
 8008304:	4313      	orrs	r3, r2
 8008306:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008308:	697b      	ldr	r3, [r7, #20]
 800830a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800830e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	4a17      	ldr	r2, [pc, #92]	; (8008370 <TIM_OC2_SetConfig+0xe4>)
 8008314:	4293      	cmp	r3, r2
 8008316:	d003      	beq.n	8008320 <TIM_OC2_SetConfig+0x94>
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	4a16      	ldr	r2, [pc, #88]	; (8008374 <TIM_OC2_SetConfig+0xe8>)
 800831c:	4293      	cmp	r3, r2
 800831e:	d113      	bne.n	8008348 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008320:	693b      	ldr	r3, [r7, #16]
 8008322:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008326:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008328:	693b      	ldr	r3, [r7, #16]
 800832a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800832e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008330:	683b      	ldr	r3, [r7, #0]
 8008332:	695b      	ldr	r3, [r3, #20]
 8008334:	009b      	lsls	r3, r3, #2
 8008336:	693a      	ldr	r2, [r7, #16]
 8008338:	4313      	orrs	r3, r2
 800833a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800833c:	683b      	ldr	r3, [r7, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	693a      	ldr	r2, [r7, #16]
 8008344:	4313      	orrs	r3, r2
 8008346:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	68fa      	ldr	r2, [r7, #12]
 8008352:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008354:	683b      	ldr	r3, [r7, #0]
 8008356:	685a      	ldr	r2, [r3, #4]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	697a      	ldr	r2, [r7, #20]
 8008360:	621a      	str	r2, [r3, #32]
}
 8008362:	bf00      	nop
 8008364:	371c      	adds	r7, #28
 8008366:	46bd      	mov	sp, r7
 8008368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836c:	4770      	bx	lr
 800836e:	bf00      	nop
 8008370:	40010000 	.word	0x40010000
 8008374:	40010400 	.word	0x40010400

08008378 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	6a1b      	ldr	r3, [r3, #32]
 8008386:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6a1b      	ldr	r3, [r3, #32]
 8008392:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	685b      	ldr	r3, [r3, #4]
 8008398:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	69db      	ldr	r3, [r3, #28]
 800839e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80083a8:	68fb      	ldr	r3, [r7, #12]
 80083aa:	f023 0303 	bic.w	r3, r3, #3
 80083ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80083b0:	683b      	ldr	r3, [r7, #0]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	68fa      	ldr	r2, [r7, #12]
 80083b6:	4313      	orrs	r3, r2
 80083b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80083c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	4a21      	ldr	r2, [pc, #132]	; (8008458 <TIM_OC3_SetConfig+0xe0>)
 80083d2:	4293      	cmp	r3, r2
 80083d4:	d003      	beq.n	80083de <TIM_OC3_SetConfig+0x66>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	4a20      	ldr	r2, [pc, #128]	; (800845c <TIM_OC3_SetConfig+0xe4>)
 80083da:	4293      	cmp	r3, r2
 80083dc:	d10d      	bne.n	80083fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80083e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80083e6:	683b      	ldr	r3, [r7, #0]
 80083e8:	68db      	ldr	r3, [r3, #12]
 80083ea:	021b      	lsls	r3, r3, #8
 80083ec:	697a      	ldr	r2, [r7, #20]
 80083ee:	4313      	orrs	r3, r2
 80083f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80083f2:	697b      	ldr	r3, [r7, #20]
 80083f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80083f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a16      	ldr	r2, [pc, #88]	; (8008458 <TIM_OC3_SetConfig+0xe0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_OC3_SetConfig+0x92>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <TIM_OC3_SetConfig+0xe4>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d113      	bne.n	8008432 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800840a:	693b      	ldr	r3, [r7, #16]
 800840c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008410:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008418:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	695b      	ldr	r3, [r3, #20]
 800841e:	011b      	lsls	r3, r3, #4
 8008420:	693a      	ldr	r2, [r7, #16]
 8008422:	4313      	orrs	r3, r2
 8008424:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008426:	683b      	ldr	r3, [r7, #0]
 8008428:	699b      	ldr	r3, [r3, #24]
 800842a:	011b      	lsls	r3, r3, #4
 800842c:	693a      	ldr	r2, [r7, #16]
 800842e:	4313      	orrs	r3, r2
 8008430:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	693a      	ldr	r2, [r7, #16]
 8008436:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	68fa      	ldr	r2, [r7, #12]
 800843c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	685a      	ldr	r2, [r3, #4]
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	697a      	ldr	r2, [r7, #20]
 800844a:	621a      	str	r2, [r3, #32]
}
 800844c:	bf00      	nop
 800844e:	371c      	adds	r7, #28
 8008450:	46bd      	mov	sp, r7
 8008452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008456:	4770      	bx	lr
 8008458:	40010000 	.word	0x40010000
 800845c:	40010400 	.word	0x40010400

08008460 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008460:	b480      	push	{r7}
 8008462:	b087      	sub	sp, #28
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]
 8008468:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6a1b      	ldr	r3, [r3, #32]
 800846e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a1b      	ldr	r3, [r3, #32]
 800847a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	69db      	ldr	r3, [r3, #28]
 8008486:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800848e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008496:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008498:	683b      	ldr	r3, [r7, #0]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	021b      	lsls	r3, r3, #8
 800849e:	68fa      	ldr	r2, [r7, #12]
 80084a0:	4313      	orrs	r3, r2
 80084a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80084aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80084ac:	683b      	ldr	r3, [r7, #0]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	031b      	lsls	r3, r3, #12
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	4313      	orrs	r3, r2
 80084b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	4a12      	ldr	r2, [pc, #72]	; (8008504 <TIM_OC4_SetConfig+0xa4>)
 80084bc:	4293      	cmp	r3, r2
 80084be:	d003      	beq.n	80084c8 <TIM_OC4_SetConfig+0x68>
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	4a11      	ldr	r2, [pc, #68]	; (8008508 <TIM_OC4_SetConfig+0xa8>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d109      	bne.n	80084dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80084ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80084d0:	683b      	ldr	r3, [r7, #0]
 80084d2:	695b      	ldr	r3, [r3, #20]
 80084d4:	019b      	lsls	r3, r3, #6
 80084d6:	697a      	ldr	r2, [r7, #20]
 80084d8:	4313      	orrs	r3, r2
 80084da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	697a      	ldr	r2, [r7, #20]
 80084e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	68fa      	ldr	r2, [r7, #12]
 80084e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80084e8:	683b      	ldr	r3, [r7, #0]
 80084ea:	685a      	ldr	r2, [r3, #4]
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	693a      	ldr	r2, [r7, #16]
 80084f4:	621a      	str	r2, [r3, #32]
}
 80084f6:	bf00      	nop
 80084f8:	371c      	adds	r7, #28
 80084fa:	46bd      	mov	sp, r7
 80084fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008500:	4770      	bx	lr
 8008502:	bf00      	nop
 8008504:	40010000 	.word	0x40010000
 8008508:	40010400 	.word	0x40010400

0800850c <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
 8008514:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	689b      	ldr	r3, [r3, #8]
 800851c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800851e:	697b      	ldr	r3, [r7, #20]
 8008520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008524:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8008526:	683b      	ldr	r3, [r7, #0]
 8008528:	685b      	ldr	r3, [r3, #4]
 800852a:	697a      	ldr	r2, [r7, #20]
 800852c:	4313      	orrs	r3, r2
 800852e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	f023 0307 	bic.w	r3, r3, #7
 8008536:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	697a      	ldr	r2, [r7, #20]
 800853e:	4313      	orrs	r3, r2
 8008540:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	697a      	ldr	r2, [r7, #20]
 8008548:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800854a:	683b      	ldr	r3, [r7, #0]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2b30      	cmp	r3, #48	; 0x30
 8008550:	d05c      	beq.n	800860c <TIM_SlaveTimer_SetConfig+0x100>
 8008552:	2b30      	cmp	r3, #48	; 0x30
 8008554:	d806      	bhi.n	8008564 <TIM_SlaveTimer_SetConfig+0x58>
 8008556:	2b10      	cmp	r3, #16
 8008558:	d058      	beq.n	800860c <TIM_SlaveTimer_SetConfig+0x100>
 800855a:	2b20      	cmp	r3, #32
 800855c:	d056      	beq.n	800860c <TIM_SlaveTimer_SetConfig+0x100>
 800855e:	2b00      	cmp	r3, #0
 8008560:	d054      	beq.n	800860c <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008562:	e054      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008564:	2b50      	cmp	r3, #80	; 0x50
 8008566:	d03d      	beq.n	80085e4 <TIM_SlaveTimer_SetConfig+0xd8>
 8008568:	2b50      	cmp	r3, #80	; 0x50
 800856a:	d802      	bhi.n	8008572 <TIM_SlaveTimer_SetConfig+0x66>
 800856c:	2b40      	cmp	r3, #64	; 0x40
 800856e:	d010      	beq.n	8008592 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008570:	e04d      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008572:	2b60      	cmp	r3, #96	; 0x60
 8008574:	d040      	beq.n	80085f8 <TIM_SlaveTimer_SetConfig+0xec>
 8008576:	2b70      	cmp	r3, #112	; 0x70
 8008578:	d000      	beq.n	800857c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800857a:	e048      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6818      	ldr	r0, [r3, #0]
 8008580:	683b      	ldr	r3, [r7, #0]
 8008582:	68d9      	ldr	r1, [r3, #12]
 8008584:	683b      	ldr	r3, [r7, #0]
 8008586:	689a      	ldr	r2, [r3, #8]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	691b      	ldr	r3, [r3, #16]
 800858c:	f000 f9cd 	bl	800892a <TIM_ETR_SetConfig>
      break;
 8008590:	e03d      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	2b05      	cmp	r3, #5
 8008598:	d101      	bne.n	800859e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	e038      	b.n	8008610 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	6a1a      	ldr	r2, [r3, #32]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f022 0201 	bic.w	r2, r2, #1
 80085b4:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	699b      	ldr	r3, [r3, #24]
 80085bc:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085c4:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	691b      	ldr	r3, [r3, #16]
 80085ca:	011b      	lsls	r3, r3, #4
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4313      	orrs	r3, r2
 80085d0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	68fa      	ldr	r2, [r7, #12]
 80085d8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	693a      	ldr	r2, [r7, #16]
 80085e0:	621a      	str	r2, [r3, #32]
      break;
 80085e2:	e014      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	6818      	ldr	r0, [r3, #0]
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	6899      	ldr	r1, [r3, #8]
 80085ec:	683b      	ldr	r3, [r7, #0]
 80085ee:	691b      	ldr	r3, [r3, #16]
 80085f0:	461a      	mov	r2, r3
 80085f2:	f000 f885 	bl	8008700 <TIM_TI1_ConfigInputStage>
      break;
 80085f6:	e00a      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6818      	ldr	r0, [r3, #0]
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	6899      	ldr	r1, [r3, #8]
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	691b      	ldr	r3, [r3, #16]
 8008604:	461a      	mov	r2, r3
 8008606:	f000 f8e7 	bl	80087d8 <TIM_TI2_ConfigInputStage>
      break;
 800860a:	e000      	b.n	800860e <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800860c:	bf00      	nop
  }
  return HAL_OK;
 800860e:	2300      	movs	r3, #0
}
 8008610:	4618      	mov	r0, r3
 8008612:	3718      	adds	r7, #24
 8008614:	46bd      	mov	sp, r7
 8008616:	bd80      	pop	{r7, pc}

08008618 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008618:	b480      	push	{r7}
 800861a:	b087      	sub	sp, #28
 800861c:	af00      	add	r7, sp, #0
 800861e:	60f8      	str	r0, [r7, #12]
 8008620:	60b9      	str	r1, [r7, #8]
 8008622:	607a      	str	r2, [r7, #4]
 8008624:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	6a1b      	ldr	r3, [r3, #32]
 800862a:	f023 0201 	bic.w	r2, r3, #1
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	699b      	ldr	r3, [r3, #24]
 8008636:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	6a1b      	ldr	r3, [r3, #32]
 800863c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	4a28      	ldr	r2, [pc, #160]	; (80086e4 <TIM_TI1_SetConfig+0xcc>)
 8008642:	4293      	cmp	r3, r2
 8008644:	d01b      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800864c:	d017      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	4a25      	ldr	r2, [pc, #148]	; (80086e8 <TIM_TI1_SetConfig+0xd0>)
 8008652:	4293      	cmp	r3, r2
 8008654:	d013      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	4a24      	ldr	r2, [pc, #144]	; (80086ec <TIM_TI1_SetConfig+0xd4>)
 800865a:	4293      	cmp	r3, r2
 800865c:	d00f      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	4a23      	ldr	r2, [pc, #140]	; (80086f0 <TIM_TI1_SetConfig+0xd8>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d00b      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	4a22      	ldr	r2, [pc, #136]	; (80086f4 <TIM_TI1_SetConfig+0xdc>)
 800866a:	4293      	cmp	r3, r2
 800866c:	d007      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 800866e:	68fb      	ldr	r3, [r7, #12]
 8008670:	4a21      	ldr	r2, [pc, #132]	; (80086f8 <TIM_TI1_SetConfig+0xe0>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d003      	beq.n	800867e <TIM_TI1_SetConfig+0x66>
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	4a20      	ldr	r2, [pc, #128]	; (80086fc <TIM_TI1_SetConfig+0xe4>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d101      	bne.n	8008682 <TIM_TI1_SetConfig+0x6a>
 800867e:	2301      	movs	r3, #1
 8008680:	e000      	b.n	8008684 <TIM_TI1_SetConfig+0x6c>
 8008682:	2300      	movs	r3, #0
 8008684:	2b00      	cmp	r3, #0
 8008686:	d008      	beq.n	800869a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008688:	697b      	ldr	r3, [r7, #20]
 800868a:	f023 0303 	bic.w	r3, r3, #3
 800868e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	4313      	orrs	r3, r2
 8008696:	617b      	str	r3, [r7, #20]
 8008698:	e003      	b.n	80086a2 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800869a:	697b      	ldr	r3, [r7, #20]
 800869c:	f043 0301 	orr.w	r3, r3, #1
 80086a0:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80086a2:	697b      	ldr	r3, [r7, #20]
 80086a4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80086a8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80086aa:	683b      	ldr	r3, [r7, #0]
 80086ac:	011b      	lsls	r3, r3, #4
 80086ae:	b2db      	uxtb	r3, r3
 80086b0:	697a      	ldr	r2, [r7, #20]
 80086b2:	4313      	orrs	r3, r2
 80086b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80086b6:	693b      	ldr	r3, [r7, #16]
 80086b8:	f023 030a 	bic.w	r3, r3, #10
 80086bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	f003 030a 	and.w	r3, r3, #10
 80086c4:	693a      	ldr	r2, [r7, #16]
 80086c6:	4313      	orrs	r3, r2
 80086c8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	697a      	ldr	r2, [r7, #20]
 80086ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	693a      	ldr	r2, [r7, #16]
 80086d4:	621a      	str	r2, [r3, #32]
}
 80086d6:	bf00      	nop
 80086d8:	371c      	adds	r7, #28
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	40010000 	.word	0x40010000
 80086e8:	40000400 	.word	0x40000400
 80086ec:	40000800 	.word	0x40000800
 80086f0:	40000c00 	.word	0x40000c00
 80086f4:	40010400 	.word	0x40010400
 80086f8:	40014000 	.word	0x40014000
 80086fc:	40001800 	.word	0x40001800

08008700 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008700:	b480      	push	{r7}
 8008702:	b087      	sub	sp, #28
 8008704:	af00      	add	r7, sp, #0
 8008706:	60f8      	str	r0, [r7, #12]
 8008708:	60b9      	str	r1, [r7, #8]
 800870a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	6a1b      	ldr	r3, [r3, #32]
 8008716:	f023 0201 	bic.w	r2, r3, #1
 800871a:	68fb      	ldr	r3, [r7, #12]
 800871c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	699b      	ldr	r3, [r3, #24]
 8008722:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008724:	693b      	ldr	r3, [r7, #16]
 8008726:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800872a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	011b      	lsls	r3, r3, #4
 8008730:	693a      	ldr	r2, [r7, #16]
 8008732:	4313      	orrs	r3, r2
 8008734:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008736:	697b      	ldr	r3, [r7, #20]
 8008738:	f023 030a 	bic.w	r3, r3, #10
 800873c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800873e:	697a      	ldr	r2, [r7, #20]
 8008740:	68bb      	ldr	r3, [r7, #8]
 8008742:	4313      	orrs	r3, r2
 8008744:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008746:	68fb      	ldr	r3, [r7, #12]
 8008748:	693a      	ldr	r2, [r7, #16]
 800874a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	621a      	str	r2, [r3, #32]
}
 8008752:	bf00      	nop
 8008754:	371c      	adds	r7, #28
 8008756:	46bd      	mov	sp, r7
 8008758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875c:	4770      	bx	lr

0800875e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800875e:	b480      	push	{r7}
 8008760:	b087      	sub	sp, #28
 8008762:	af00      	add	r7, sp, #0
 8008764:	60f8      	str	r0, [r7, #12]
 8008766:	60b9      	str	r1, [r7, #8]
 8008768:	607a      	str	r2, [r7, #4]
 800876a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	6a1b      	ldr	r3, [r3, #32]
 8008770:	f023 0210 	bic.w	r2, r3, #16
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008778:	68fb      	ldr	r3, [r7, #12]
 800877a:	699b      	ldr	r3, [r3, #24]
 800877c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	6a1b      	ldr	r3, [r3, #32]
 8008782:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008784:	697b      	ldr	r3, [r7, #20]
 8008786:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800878a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	021b      	lsls	r3, r3, #8
 8008790:	697a      	ldr	r2, [r7, #20]
 8008792:	4313      	orrs	r3, r2
 8008794:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008796:	697b      	ldr	r3, [r7, #20]
 8008798:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800879c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	031b      	lsls	r3, r3, #12
 80087a2:	b29b      	uxth	r3, r3
 80087a4:	697a      	ldr	r2, [r7, #20]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80087aa:	693b      	ldr	r3, [r7, #16]
 80087ac:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80087b0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	011b      	lsls	r3, r3, #4
 80087b6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80087ba:	693a      	ldr	r2, [r7, #16]
 80087bc:	4313      	orrs	r3, r2
 80087be:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	693a      	ldr	r2, [r7, #16]
 80087ca:	621a      	str	r2, [r3, #32]
}
 80087cc:	bf00      	nop
 80087ce:	371c      	adds	r7, #28
 80087d0:	46bd      	mov	sp, r7
 80087d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d6:	4770      	bx	lr

080087d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80087d8:	b480      	push	{r7}
 80087da:	b087      	sub	sp, #28
 80087dc:	af00      	add	r7, sp, #0
 80087de:	60f8      	str	r0, [r7, #12]
 80087e0:	60b9      	str	r1, [r7, #8]
 80087e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80087e4:	68fb      	ldr	r3, [r7, #12]
 80087e6:	6a1b      	ldr	r3, [r3, #32]
 80087e8:	f023 0210 	bic.w	r2, r3, #16
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	6a1b      	ldr	r3, [r3, #32]
 80087fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80087fc:	697b      	ldr	r3, [r7, #20]
 80087fe:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008802:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	031b      	lsls	r3, r3, #12
 8008808:	697a      	ldr	r2, [r7, #20]
 800880a:	4313      	orrs	r3, r2
 800880c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008814:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008816:	68bb      	ldr	r3, [r7, #8]
 8008818:	011b      	lsls	r3, r3, #4
 800881a:	693a      	ldr	r2, [r7, #16]
 800881c:	4313      	orrs	r3, r2
 800881e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	697a      	ldr	r2, [r7, #20]
 8008824:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	693a      	ldr	r2, [r7, #16]
 800882a:	621a      	str	r2, [r3, #32]
}
 800882c:	bf00      	nop
 800882e:	371c      	adds	r7, #28
 8008830:	46bd      	mov	sp, r7
 8008832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008836:	4770      	bx	lr

08008838 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008838:	b480      	push	{r7}
 800883a:	b087      	sub	sp, #28
 800883c:	af00      	add	r7, sp, #0
 800883e:	60f8      	str	r0, [r7, #12]
 8008840:	60b9      	str	r1, [r7, #8]
 8008842:	607a      	str	r2, [r7, #4]
 8008844:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	6a1b      	ldr	r3, [r3, #32]
 800884a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008852:	68fb      	ldr	r3, [r7, #12]
 8008854:	69db      	ldr	r3, [r3, #28]
 8008856:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a1b      	ldr	r3, [r3, #32]
 800885c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800885e:	697b      	ldr	r3, [r7, #20]
 8008860:	f023 0303 	bic.w	r3, r3, #3
 8008864:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008866:	697a      	ldr	r2, [r7, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4313      	orrs	r3, r2
 800886c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800886e:	697b      	ldr	r3, [r7, #20]
 8008870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008874:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008876:	683b      	ldr	r3, [r7, #0]
 8008878:	011b      	lsls	r3, r3, #4
 800887a:	b2db      	uxtb	r3, r3
 800887c:	697a      	ldr	r2, [r7, #20]
 800887e:	4313      	orrs	r3, r2
 8008880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008888:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	021b      	lsls	r3, r3, #8
 800888e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008892:	693a      	ldr	r2, [r7, #16]
 8008894:	4313      	orrs	r3, r2
 8008896:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	697a      	ldr	r2, [r7, #20]
 800889c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	693a      	ldr	r2, [r7, #16]
 80088a2:	621a      	str	r2, [r3, #32]
}
 80088a4:	bf00      	nop
 80088a6:	371c      	adds	r7, #28
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b087      	sub	sp, #28
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	60f8      	str	r0, [r7, #12]
 80088b8:	60b9      	str	r1, [r7, #8]
 80088ba:	607a      	str	r2, [r7, #4]
 80088bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80088be:	68fb      	ldr	r3, [r7, #12]
 80088c0:	6a1b      	ldr	r3, [r3, #32]
 80088c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80088c6:	68fb      	ldr	r3, [r7, #12]
 80088c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	69db      	ldr	r3, [r3, #28]
 80088ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	6a1b      	ldr	r3, [r3, #32]
 80088d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80088d6:	697b      	ldr	r3, [r7, #20]
 80088d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	021b      	lsls	r3, r3, #8
 80088e2:	697a      	ldr	r2, [r7, #20]
 80088e4:	4313      	orrs	r3, r2
 80088e6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80088ee:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	031b      	lsls	r3, r3, #12
 80088f4:	b29b      	uxth	r3, r3
 80088f6:	697a      	ldr	r2, [r7, #20]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008902:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	031b      	lsls	r3, r3, #12
 8008908:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800890c:	693a      	ldr	r2, [r7, #16]
 800890e:	4313      	orrs	r3, r2
 8008910:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008912:	68fb      	ldr	r3, [r7, #12]
 8008914:	697a      	ldr	r2, [r7, #20]
 8008916:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	693a      	ldr	r2, [r7, #16]
 800891c:	621a      	str	r2, [r3, #32]
}
 800891e:	bf00      	nop
 8008920:	371c      	adds	r7, #28
 8008922:	46bd      	mov	sp, r7
 8008924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008928:	4770      	bx	lr

0800892a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800892a:	b480      	push	{r7}
 800892c:	b087      	sub	sp, #28
 800892e:	af00      	add	r7, sp, #0
 8008930:	60f8      	str	r0, [r7, #12]
 8008932:	60b9      	str	r1, [r7, #8]
 8008934:	607a      	str	r2, [r7, #4]
 8008936:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008938:	68fb      	ldr	r3, [r7, #12]
 800893a:	689b      	ldr	r3, [r3, #8]
 800893c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800893e:	697b      	ldr	r3, [r7, #20]
 8008940:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008944:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008946:	683b      	ldr	r3, [r7, #0]
 8008948:	021a      	lsls	r2, r3, #8
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	431a      	orrs	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	4313      	orrs	r3, r2
 8008952:	697a      	ldr	r2, [r7, #20]
 8008954:	4313      	orrs	r3, r2
 8008956:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	697a      	ldr	r2, [r7, #20]
 800895c:	609a      	str	r2, [r3, #8]
}
 800895e:	bf00      	nop
 8008960:	371c      	adds	r7, #28
 8008962:	46bd      	mov	sp, r7
 8008964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008968:	4770      	bx	lr
	...

0800896c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800896c:	b480      	push	{r7}
 800896e:	b085      	sub	sp, #20
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
 8008974:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800897c:	2b01      	cmp	r3, #1
 800897e:	d101      	bne.n	8008984 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008980:	2302      	movs	r3, #2
 8008982:	e05a      	b.n	8008a3a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	2201      	movs	r2, #1
 8008988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	685b      	ldr	r3, [r3, #4]
 800899a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80089aa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80089ac:	683b      	ldr	r3, [r7, #0]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68fa      	ldr	r2, [r7, #12]
 80089b2:	4313      	orrs	r3, r2
 80089b4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
 80089ba:	68fa      	ldr	r2, [r7, #12]
 80089bc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	681b      	ldr	r3, [r3, #0]
 80089c2:	4a21      	ldr	r2, [pc, #132]	; (8008a48 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80089c4:	4293      	cmp	r3, r2
 80089c6:	d022      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089d0:	d01d      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a1d      	ldr	r2, [pc, #116]	; (8008a4c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80089d8:	4293      	cmp	r3, r2
 80089da:	d018      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a1b      	ldr	r2, [pc, #108]	; (8008a50 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80089e2:	4293      	cmp	r3, r2
 80089e4:	d013      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a1a      	ldr	r2, [pc, #104]	; (8008a54 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80089ec:	4293      	cmp	r3, r2
 80089ee:	d00e      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4a18      	ldr	r2, [pc, #96]	; (8008a58 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80089f6:	4293      	cmp	r3, r2
 80089f8:	d009      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	4a17      	ldr	r2, [pc, #92]	; (8008a5c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008a00:	4293      	cmp	r3, r2
 8008a02:	d004      	beq.n	8008a0e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	4a15      	ldr	r2, [pc, #84]	; (8008a60 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008a0a:	4293      	cmp	r3, r2
 8008a0c:	d10c      	bne.n	8008a28 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008a14:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	68ba      	ldr	r2, [r7, #8]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2201      	movs	r2, #1
 8008a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	2200      	movs	r2, #0
 8008a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008a38:	2300      	movs	r3, #0
}
 8008a3a:	4618      	mov	r0, r3
 8008a3c:	3714      	adds	r7, #20
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	40010000 	.word	0x40010000
 8008a4c:	40000400 	.word	0x40000400
 8008a50:	40000800 	.word	0x40000800
 8008a54:	40000c00 	.word	0x40000c00
 8008a58:	40010400 	.word	0x40010400
 8008a5c:	40014000 	.word	0x40014000
 8008a60:	40001800 	.word	0x40001800

08008a64 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b085      	sub	sp, #20
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	6078      	str	r0, [r7, #4]
 8008a6c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	d101      	bne.n	8008a80 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008a7c:	2302      	movs	r3, #2
 8008a7e:	e03d      	b.n	8008afc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	2201      	movs	r2, #1
 8008a84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008a8e:	683b      	ldr	r3, [r7, #0]
 8008a90:	68db      	ldr	r3, [r3, #12]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	4313      	orrs	r3, r2
 8008aa2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8008aaa:	683b      	ldr	r3, [r7, #0]
 8008aac:	685b      	ldr	r3, [r3, #4]
 8008aae:	4313      	orrs	r3, r2
 8008ab0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8008ab8:	683b      	ldr	r3, [r7, #0]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	4313      	orrs	r3, r2
 8008abe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008ac6:	683b      	ldr	r3, [r7, #0]
 8008ac8:	691b      	ldr	r3, [r3, #16]
 8008aca:	4313      	orrs	r3, r2
 8008acc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008ad4:	683b      	ldr	r3, [r7, #0]
 8008ad6:	695b      	ldr	r3, [r3, #20]
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	69db      	ldr	r3, [r3, #28]
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	68fa      	ldr	r2, [r7, #12]
 8008af0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	2200      	movs	r2, #0
 8008af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008afa:	2300      	movs	r3, #0
}
 8008afc:	4618      	mov	r0, r3
 8008afe:	3714      	adds	r7, #20
 8008b00:	46bd      	mov	sp, r7
 8008b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b06:	4770      	bx	lr

08008b08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008b08:	b480      	push	{r7}
 8008b0a:	b083      	sub	sp, #12
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008b10:	bf00      	nop
 8008b12:	370c      	adds	r7, #12
 8008b14:	46bd      	mov	sp, r7
 8008b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b1a:	4770      	bx	lr

08008b1c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008b1c:	b480      	push	{r7}
 8008b1e:	b083      	sub	sp, #12
 8008b20:	af00      	add	r7, sp, #0
 8008b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008b24:	bf00      	nop
 8008b26:	370c      	adds	r7, #12
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2e:	4770      	bx	lr

08008b30 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008b30:	b580      	push	{r7, lr}
 8008b32:	b082      	sub	sp, #8
 8008b34:	af00      	add	r7, sp, #0
 8008b36:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d101      	bne.n	8008b42 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e03f      	b.n	8008bc2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d106      	bne.n	8008b5c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008b56:	6878      	ldr	r0, [r7, #4]
 8008b58:	f7f8 fec8 	bl	80018ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2224      	movs	r2, #36	; 0x24
 8008b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	68da      	ldr	r2, [r3, #12]
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008b72:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008b74:	6878      	ldr	r0, [r7, #4]
 8008b76:	f000 fb4b 	bl	8009210 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	691a      	ldr	r2, [r3, #16]
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008b88:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	695a      	ldr	r2, [r3, #20]
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	681b      	ldr	r3, [r3, #0]
 8008b94:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008b98:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	68da      	ldr	r2, [r3, #12]
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	681b      	ldr	r3, [r3, #0]
 8008ba4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008ba8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	2200      	movs	r2, #0
 8008bae:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2220      	movs	r2, #32
 8008bb4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2220      	movs	r2, #32
 8008bbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008bc0:	2300      	movs	r3, #0
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3708      	adds	r7, #8
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	bd80      	pop	{r7, pc}

08008bca <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008bca:	b580      	push	{r7, lr}
 8008bcc:	b088      	sub	sp, #32
 8008bce:	af02      	add	r7, sp, #8
 8008bd0:	60f8      	str	r0, [r7, #12]
 8008bd2:	60b9      	str	r1, [r7, #8]
 8008bd4:	603b      	str	r3, [r7, #0]
 8008bd6:	4613      	mov	r3, r2
 8008bd8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008be4:	b2db      	uxtb	r3, r3
 8008be6:	2b20      	cmp	r3, #32
 8008be8:	f040 8083 	bne.w	8008cf2 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8008bec:	68bb      	ldr	r3, [r7, #8]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <HAL_UART_Transmit+0x2e>
 8008bf2:	88fb      	ldrh	r3, [r7, #6]
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d101      	bne.n	8008bfc <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8008bf8:	2301      	movs	r3, #1
 8008bfa:	e07b      	b.n	8008cf4 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008bfc:	68fb      	ldr	r3, [r7, #12]
 8008bfe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008c02:	2b01      	cmp	r3, #1
 8008c04:	d101      	bne.n	8008c0a <HAL_UART_Transmit+0x40>
 8008c06:	2302      	movs	r3, #2
 8008c08:	e074      	b.n	8008cf4 <HAL_UART_Transmit+0x12a>
 8008c0a:	68fb      	ldr	r3, [r7, #12]
 8008c0c:	2201      	movs	r2, #1
 8008c0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	2200      	movs	r2, #0
 8008c16:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	2221      	movs	r2, #33	; 0x21
 8008c1c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8008c20:	f7f9 f90e 	bl	8001e40 <HAL_GetTick>
 8008c24:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	88fa      	ldrh	r2, [r7, #6]
 8008c2a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
 8008c2e:	88fa      	ldrh	r2, [r7, #6]
 8008c30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008c32:	68fb      	ldr	r3, [r7, #12]
 8008c34:	2200      	movs	r2, #0
 8008c36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8008c3a:	e042      	b.n	8008cc2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	3b01      	subs	r3, #1
 8008c44:	b29a      	uxth	r2, r3
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	689b      	ldr	r3, [r3, #8]
 8008c4e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c52:	d122      	bne.n	8008c9a <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	9300      	str	r3, [sp, #0]
 8008c58:	697b      	ldr	r3, [r7, #20]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	2180      	movs	r1, #128	; 0x80
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 f96a 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d001      	beq.n	8008c6e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e042      	b.n	8008cf4 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8008c6e:	68bb      	ldr	r3, [r7, #8]
 8008c70:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8008c72:	693b      	ldr	r3, [r7, #16]
 8008c74:	881b      	ldrh	r3, [r3, #0]
 8008c76:	461a      	mov	r2, r3
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c80:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	691b      	ldr	r3, [r3, #16]
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d103      	bne.n	8008c92 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8008c8a:	68bb      	ldr	r3, [r7, #8]
 8008c8c:	3302      	adds	r3, #2
 8008c8e:	60bb      	str	r3, [r7, #8]
 8008c90:	e017      	b.n	8008cc2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8008c92:	68bb      	ldr	r3, [r7, #8]
 8008c94:	3301      	adds	r3, #1
 8008c96:	60bb      	str	r3, [r7, #8]
 8008c98:	e013      	b.n	8008cc2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008c9a:	683b      	ldr	r3, [r7, #0]
 8008c9c:	9300      	str	r3, [sp, #0]
 8008c9e:	697b      	ldr	r3, [r7, #20]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2180      	movs	r1, #128	; 0x80
 8008ca4:	68f8      	ldr	r0, [r7, #12]
 8008ca6:	f000 f947 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d001      	beq.n	8008cb4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8008cb0:	2303      	movs	r3, #3
 8008cb2:	e01f      	b.n	8008cf4 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	1c5a      	adds	r2, r3, #1
 8008cb8:	60ba      	str	r2, [r7, #8]
 8008cba:	781a      	ldrb	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8008cc2:	68fb      	ldr	r3, [r7, #12]
 8008cc4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008cc6:	b29b      	uxth	r3, r3
 8008cc8:	2b00      	cmp	r3, #0
 8008cca:	d1b7      	bne.n	8008c3c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008ccc:	683b      	ldr	r3, [r7, #0]
 8008cce:	9300      	str	r3, [sp, #0]
 8008cd0:	697b      	ldr	r3, [r7, #20]
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	2140      	movs	r1, #64	; 0x40
 8008cd6:	68f8      	ldr	r0, [r7, #12]
 8008cd8:	f000 f92e 	bl	8008f38 <UART_WaitOnFlagUntilTimeout>
 8008cdc:	4603      	mov	r3, r0
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d001      	beq.n	8008ce6 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8008ce2:	2303      	movs	r3, #3
 8008ce4:	e006      	b.n	8008cf4 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	2220      	movs	r2, #32
 8008cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	e000      	b.n	8008cf4 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8008cf2:	2302      	movs	r3, #2
  }
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3718      	adds	r7, #24
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b088      	sub	sp, #32
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	695b      	ldr	r3, [r3, #20]
 8008d1a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008d20:	2300      	movs	r3, #0
 8008d22:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008d24:	69fb      	ldr	r3, [r7, #28]
 8008d26:	f003 030f 	and.w	r3, r3, #15
 8008d2a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10d      	bne.n	8008d4e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008d32:	69fb      	ldr	r3, [r7, #28]
 8008d34:	f003 0320 	and.w	r3, r3, #32
 8008d38:	2b00      	cmp	r3, #0
 8008d3a:	d008      	beq.n	8008d4e <HAL_UART_IRQHandler+0x52>
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	f003 0320 	and.w	r3, r3, #32
 8008d42:	2b00      	cmp	r3, #0
 8008d44:	d003      	beq.n	8008d4e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008d46:	6878      	ldr	r0, [r7, #4]
 8008d48:	f000 f9e0 	bl	800910c <UART_Receive_IT>
      return;
 8008d4c:	e0d1      	b.n	8008ef2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f000 80b0 	beq.w	8008eb6 <HAL_UART_IRQHandler+0x1ba>
 8008d56:	697b      	ldr	r3, [r7, #20]
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d105      	bne.n	8008d6c <HAL_UART_IRQHandler+0x70>
 8008d60:	69bb      	ldr	r3, [r7, #24]
 8008d62:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	f000 80a5 	beq.w	8008eb6 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008d6c:	69fb      	ldr	r3, [r7, #28]
 8008d6e:	f003 0301 	and.w	r3, r3, #1
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d00a      	beq.n	8008d8c <HAL_UART_IRQHandler+0x90>
 8008d76:	69bb      	ldr	r3, [r7, #24]
 8008d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d005      	beq.n	8008d8c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d84:	f043 0201 	orr.w	r2, r3, #1
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008d8c:	69fb      	ldr	r3, [r7, #28]
 8008d8e:	f003 0304 	and.w	r3, r3, #4
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d00a      	beq.n	8008dac <HAL_UART_IRQHandler+0xb0>
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	f003 0301 	and.w	r3, r3, #1
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d005      	beq.n	8008dac <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008da4:	f043 0202 	orr.w	r2, r3, #2
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008dac:	69fb      	ldr	r3, [r7, #28]
 8008dae:	f003 0302 	and.w	r3, r3, #2
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d00a      	beq.n	8008dcc <HAL_UART_IRQHandler+0xd0>
 8008db6:	697b      	ldr	r3, [r7, #20]
 8008db8:	f003 0301 	and.w	r3, r3, #1
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d005      	beq.n	8008dcc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dc4:	f043 0204 	orr.w	r2, r3, #4
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008dcc:	69fb      	ldr	r3, [r7, #28]
 8008dce:	f003 0308 	and.w	r3, r3, #8
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d00f      	beq.n	8008df6 <HAL_UART_IRQHandler+0xfa>
 8008dd6:	69bb      	ldr	r3, [r7, #24]
 8008dd8:	f003 0320 	and.w	r3, r3, #32
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d104      	bne.n	8008dea <HAL_UART_IRQHandler+0xee>
 8008de0:	697b      	ldr	r3, [r7, #20]
 8008de2:	f003 0301 	and.w	r3, r3, #1
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d005      	beq.n	8008df6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dee:	f043 0208 	orr.w	r2, r3, #8
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d078      	beq.n	8008ef0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	f003 0320 	and.w	r3, r3, #32
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d007      	beq.n	8008e18 <HAL_UART_IRQHandler+0x11c>
 8008e08:	69bb      	ldr	r3, [r7, #24]
 8008e0a:	f003 0320 	and.w	r3, r3, #32
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d002      	beq.n	8008e18 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 f97a 	bl	800910c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	695b      	ldr	r3, [r3, #20]
 8008e1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e22:	2b40      	cmp	r3, #64	; 0x40
 8008e24:	bf0c      	ite	eq
 8008e26:	2301      	moveq	r3, #1
 8008e28:	2300      	movne	r3, #0
 8008e2a:	b2db      	uxtb	r3, r3
 8008e2c:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e32:	f003 0308 	and.w	r3, r3, #8
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d102      	bne.n	8008e40 <HAL_UART_IRQHandler+0x144>
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d031      	beq.n	8008ea4 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008e40:	6878      	ldr	r0, [r7, #4]
 8008e42:	f000 f8c3 	bl	8008fcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e50:	2b40      	cmp	r3, #64	; 0x40
 8008e52:	d123      	bne.n	8008e9c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	695a      	ldr	r2, [r3, #20]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008e62:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d013      	beq.n	8008e94 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e70:	4a21      	ldr	r2, [pc, #132]	; (8008ef8 <HAL_UART_IRQHandler+0x1fc>)
 8008e72:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e78:	4618      	mov	r0, r3
 8008e7a:	f7f9 fc31 	bl	80026e0 <HAL_DMA_Abort_IT>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d016      	beq.n	8008eb2 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008e8e:	4610      	mov	r0, r2
 8008e90:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e92:	e00e      	b.n	8008eb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 f845 	bl	8008f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008e9a:	e00a      	b.n	8008eb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f841 	bl	8008f24 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ea2:	e006      	b.n	8008eb2 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008ea4:	6878      	ldr	r0, [r7, #4]
 8008ea6:	f000 f83d 	bl	8008f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	2200      	movs	r2, #0
 8008eae:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008eb0:	e01e      	b.n	8008ef0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008eb2:	bf00      	nop
    return;
 8008eb4:	e01c      	b.n	8008ef0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008eb6:	69fb      	ldr	r3, [r7, #28]
 8008eb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d008      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x1d6>
 8008ec0:	69bb      	ldr	r3, [r7, #24]
 8008ec2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d003      	beq.n	8008ed2 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008eca:	6878      	ldr	r0, [r7, #4]
 8008ecc:	f000 f8b0 	bl	8009030 <UART_Transmit_IT>
    return;
 8008ed0:	e00f      	b.n	8008ef2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008ed2:	69fb      	ldr	r3, [r7, #28]
 8008ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d00a      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x1f6>
 8008edc:	69bb      	ldr	r3, [r7, #24]
 8008ede:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d005      	beq.n	8008ef2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f000 f8f8 	bl	80090dc <UART_EndTransmit_IT>
    return;
 8008eec:	bf00      	nop
 8008eee:	e000      	b.n	8008ef2 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008ef0:	bf00      	nop
  }
}
 8008ef2:	3720      	adds	r7, #32
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	bd80      	pop	{r7, pc}
 8008ef8:	08009009 	.word	0x08009009

08008efc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b083      	sub	sp, #12
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008f18:	bf00      	nop
 8008f1a:	370c      	adds	r7, #12
 8008f1c:	46bd      	mov	sp, r7
 8008f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f22:	4770      	bx	lr

08008f24 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008f24:	b480      	push	{r7}
 8008f26:	b083      	sub	sp, #12
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008f2c:	bf00      	nop
 8008f2e:	370c      	adds	r7, #12
 8008f30:	46bd      	mov	sp, r7
 8008f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f36:	4770      	bx	lr

08008f38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8008f38:	b580      	push	{r7, lr}
 8008f3a:	b084      	sub	sp, #16
 8008f3c:	af00      	add	r7, sp, #0
 8008f3e:	60f8      	str	r0, [r7, #12]
 8008f40:	60b9      	str	r1, [r7, #8]
 8008f42:	603b      	str	r3, [r7, #0]
 8008f44:	4613      	mov	r3, r2
 8008f46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f48:	e02c      	b.n	8008fa4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008f4a:	69bb      	ldr	r3, [r7, #24]
 8008f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008f50:	d028      	beq.n	8008fa4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008f52:	69bb      	ldr	r3, [r7, #24]
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	d007      	beq.n	8008f68 <UART_WaitOnFlagUntilTimeout+0x30>
 8008f58:	f7f8 ff72 	bl	8001e40 <HAL_GetTick>
 8008f5c:	4602      	mov	r2, r0
 8008f5e:	683b      	ldr	r3, [r7, #0]
 8008f60:	1ad3      	subs	r3, r2, r3
 8008f62:	69ba      	ldr	r2, [r7, #24]
 8008f64:	429a      	cmp	r2, r3
 8008f66:	d21d      	bcs.n	8008fa4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	68da      	ldr	r2, [r3, #12]
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8008f76:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	695a      	ldr	r2, [r3, #20]
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0201 	bic.w	r2, r2, #1
 8008f86:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	2220      	movs	r2, #32
 8008f8c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8008f90:	68fb      	ldr	r3, [r7, #12]
 8008f92:	2220      	movs	r2, #32
 8008f94:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	2200      	movs	r2, #0
 8008f9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8008fa0:	2303      	movs	r3, #3
 8008fa2:	e00f      	b.n	8008fc4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	681a      	ldr	r2, [r3, #0]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	4013      	ands	r3, r2
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	bf0c      	ite	eq
 8008fb4:	2301      	moveq	r3, #1
 8008fb6:	2300      	movne	r3, #0
 8008fb8:	b2db      	uxtb	r3, r3
 8008fba:	461a      	mov	r2, r3
 8008fbc:	79fb      	ldrb	r3, [r7, #7]
 8008fbe:	429a      	cmp	r2, r3
 8008fc0:	d0c3      	beq.n	8008f4a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008fc2:	2300      	movs	r3, #0
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3710      	adds	r7, #16
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}

08008fcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b083      	sub	sp, #12
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	68da      	ldr	r2, [r3, #12]
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008fe2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	695a      	ldr	r2, [r3, #20]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	f022 0201 	bic.w	r2, r2, #1
 8008ff2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	2220      	movs	r2, #32
 8008ff8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008ffc:	bf00      	nop
 8008ffe:	370c      	adds	r7, #12
 8009000:	46bd      	mov	sp, r7
 8009002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009006:	4770      	bx	lr

08009008 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b084      	sub	sp, #16
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2200      	movs	r2, #0
 800901a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800901c:	68fb      	ldr	r3, [r7, #12]
 800901e:	2200      	movs	r2, #0
 8009020:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009022:	68f8      	ldr	r0, [r7, #12]
 8009024:	f7ff ff7e 	bl	8008f24 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009028:	bf00      	nop
 800902a:	3710      	adds	r7, #16
 800902c:	46bd      	mov	sp, r7
 800902e:	bd80      	pop	{r7, pc}

08009030 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009030:	b480      	push	{r7}
 8009032:	b085      	sub	sp, #20
 8009034:	af00      	add	r7, sp, #0
 8009036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800903e:	b2db      	uxtb	r3, r3
 8009040:	2b21      	cmp	r3, #33	; 0x21
 8009042:	d144      	bne.n	80090ce <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	689b      	ldr	r3, [r3, #8]
 8009048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800904c:	d11a      	bne.n	8009084 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a1b      	ldr	r3, [r3, #32]
 8009052:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	881b      	ldrh	r3, [r3, #0]
 8009058:	461a      	mov	r2, r3
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009062:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	691b      	ldr	r3, [r3, #16]
 8009068:	2b00      	cmp	r3, #0
 800906a:	d105      	bne.n	8009078 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6a1b      	ldr	r3, [r3, #32]
 8009070:	1c9a      	adds	r2, r3, #2
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	621a      	str	r2, [r3, #32]
 8009076:	e00e      	b.n	8009096 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	6a1b      	ldr	r3, [r3, #32]
 800907c:	1c5a      	adds	r2, r3, #1
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	621a      	str	r2, [r3, #32]
 8009082:	e008      	b.n	8009096 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	6a1b      	ldr	r3, [r3, #32]
 8009088:	1c59      	adds	r1, r3, #1
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6211      	str	r1, [r2, #32]
 800908e:	781a      	ldrb	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800909a:	b29b      	uxth	r3, r3
 800909c:	3b01      	subs	r3, #1
 800909e:	b29b      	uxth	r3, r3
 80090a0:	687a      	ldr	r2, [r7, #4]
 80090a2:	4619      	mov	r1, r3
 80090a4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d10f      	bne.n	80090ca <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	68da      	ldr	r2, [r3, #12]
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80090b8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	68da      	ldr	r2, [r3, #12]
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80090c8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80090ca:	2300      	movs	r3, #0
 80090cc:	e000      	b.n	80090d0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80090ce:	2302      	movs	r3, #2
  }
}
 80090d0:	4618      	mov	r0, r3
 80090d2:	3714      	adds	r7, #20
 80090d4:	46bd      	mov	sp, r7
 80090d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090da:	4770      	bx	lr

080090dc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b082      	sub	sp, #8
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	68da      	ldr	r2, [r3, #12]
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090f2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2220      	movs	r2, #32
 80090f8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f7ff fefd 	bl	8008efc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009102:	2300      	movs	r3, #0
}
 8009104:	4618      	mov	r0, r3
 8009106:	3708      	adds	r7, #8
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}

0800910c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800910c:	b580      	push	{r7, lr}
 800910e:	b084      	sub	sp, #16
 8009110:	af00      	add	r7, sp, #0
 8009112:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800911a:	b2db      	uxtb	r3, r3
 800911c:	2b22      	cmp	r3, #34	; 0x22
 800911e:	d171      	bne.n	8009204 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	689b      	ldr	r3, [r3, #8]
 8009124:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009128:	d123      	bne.n	8009172 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800912e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	691b      	ldr	r3, [r3, #16]
 8009134:	2b00      	cmp	r3, #0
 8009136:	d10e      	bne.n	8009156 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	685b      	ldr	r3, [r3, #4]
 800913e:	b29b      	uxth	r3, r3
 8009140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009144:	b29a      	uxth	r2, r3
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800914e:	1c9a      	adds	r2, r3, #2
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	629a      	str	r2, [r3, #40]	; 0x28
 8009154:	e029      	b.n	80091aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	685b      	ldr	r3, [r3, #4]
 800915c:	b29b      	uxth	r3, r3
 800915e:	b2db      	uxtb	r3, r3
 8009160:	b29a      	uxth	r2, r3
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800916a:	1c5a      	adds	r2, r3, #1
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	629a      	str	r2, [r3, #40]	; 0x28
 8009170:	e01b      	b.n	80091aa <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	691b      	ldr	r3, [r3, #16]
 8009176:	2b00      	cmp	r3, #0
 8009178:	d10a      	bne.n	8009190 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6858      	ldr	r0, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009184:	1c59      	adds	r1, r3, #1
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	6291      	str	r1, [r2, #40]	; 0x28
 800918a:	b2c2      	uxtb	r2, r0
 800918c:	701a      	strb	r2, [r3, #0]
 800918e:	e00c      	b.n	80091aa <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	685b      	ldr	r3, [r3, #4]
 8009196:	b2da      	uxtb	r2, r3
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800919c:	1c58      	adds	r0, r3, #1
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	6288      	str	r0, [r1, #40]	; 0x28
 80091a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80091a6:	b2d2      	uxtb	r2, r2
 80091a8:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80091ae:	b29b      	uxth	r3, r3
 80091b0:	3b01      	subs	r3, #1
 80091b2:	b29b      	uxth	r3, r3
 80091b4:	687a      	ldr	r2, [r7, #4]
 80091b6:	4619      	mov	r1, r3
 80091b8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d120      	bne.n	8009200 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68da      	ldr	r2, [r3, #12]
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	f022 0220 	bic.w	r2, r2, #32
 80091cc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	68da      	ldr	r2, [r3, #12]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80091dc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	695a      	ldr	r2, [r3, #20]
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f022 0201 	bic.w	r2, r2, #1
 80091ec:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2220      	movs	r2, #32
 80091f2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f7ff fe8a 	bl	8008f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80091fc:	2300      	movs	r3, #0
 80091fe:	e002      	b.n	8009206 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8009200:	2300      	movs	r3, #0
 8009202:	e000      	b.n	8009206 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8009204:	2302      	movs	r3, #2
  }
}
 8009206:	4618      	mov	r0, r3
 8009208:	3710      	adds	r7, #16
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
	...

08009210 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009214:	b085      	sub	sp, #20
 8009216:	af00      	add	r7, sp, #0
 8009218:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68da      	ldr	r2, [r3, #12]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	430a      	orrs	r2, r1
 800922e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	689a      	ldr	r2, [r3, #8]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	691b      	ldr	r3, [r3, #16]
 8009238:	431a      	orrs	r2, r3
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	695b      	ldr	r3, [r3, #20]
 800923e:	431a      	orrs	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	69db      	ldr	r3, [r3, #28]
 8009244:	4313      	orrs	r3, r2
 8009246:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8009252:	f023 030c 	bic.w	r3, r3, #12
 8009256:	687a      	ldr	r2, [r7, #4]
 8009258:	6812      	ldr	r2, [r2, #0]
 800925a:	68f9      	ldr	r1, [r7, #12]
 800925c:	430b      	orrs	r3, r1
 800925e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	695b      	ldr	r3, [r3, #20]
 8009266:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	699a      	ldr	r2, [r3, #24]
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	430a      	orrs	r2, r1
 8009274:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	69db      	ldr	r3, [r3, #28]
 800927a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800927e:	f040 818b 	bne.w	8009598 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	681b      	ldr	r3, [r3, #0]
 8009286:	4ac1      	ldr	r2, [pc, #772]	; (800958c <UART_SetConfig+0x37c>)
 8009288:	4293      	cmp	r3, r2
 800928a:	d005      	beq.n	8009298 <UART_SetConfig+0x88>
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	4abf      	ldr	r2, [pc, #764]	; (8009590 <UART_SetConfig+0x380>)
 8009292:	4293      	cmp	r3, r2
 8009294:	f040 80bd 	bne.w	8009412 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009298:	f7fc febc 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 800929c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800929e:	68bb      	ldr	r3, [r7, #8]
 80092a0:	461d      	mov	r5, r3
 80092a2:	f04f 0600 	mov.w	r6, #0
 80092a6:	46a8      	mov	r8, r5
 80092a8:	46b1      	mov	r9, r6
 80092aa:	eb18 0308 	adds.w	r3, r8, r8
 80092ae:	eb49 0409 	adc.w	r4, r9, r9
 80092b2:	4698      	mov	r8, r3
 80092b4:	46a1      	mov	r9, r4
 80092b6:	eb18 0805 	adds.w	r8, r8, r5
 80092ba:	eb49 0906 	adc.w	r9, r9, r6
 80092be:	f04f 0100 	mov.w	r1, #0
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092ca:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092ce:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092d2:	4688      	mov	r8, r1
 80092d4:	4691      	mov	r9, r2
 80092d6:	eb18 0005 	adds.w	r0, r8, r5
 80092da:	eb49 0106 	adc.w	r1, r9, r6
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	685b      	ldr	r3, [r3, #4]
 80092e2:	461d      	mov	r5, r3
 80092e4:	f04f 0600 	mov.w	r6, #0
 80092e8:	196b      	adds	r3, r5, r5
 80092ea:	eb46 0406 	adc.w	r4, r6, r6
 80092ee:	461a      	mov	r2, r3
 80092f0:	4623      	mov	r3, r4
 80092f2:	f7f6 ffc5 	bl	8000280 <__aeabi_uldivmod>
 80092f6:	4603      	mov	r3, r0
 80092f8:	460c      	mov	r4, r1
 80092fa:	461a      	mov	r2, r3
 80092fc:	4ba5      	ldr	r3, [pc, #660]	; (8009594 <UART_SetConfig+0x384>)
 80092fe:	fba3 2302 	umull	r2, r3, r3, r2
 8009302:	095b      	lsrs	r3, r3, #5
 8009304:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009308:	68bb      	ldr	r3, [r7, #8]
 800930a:	461d      	mov	r5, r3
 800930c:	f04f 0600 	mov.w	r6, #0
 8009310:	46a9      	mov	r9, r5
 8009312:	46b2      	mov	sl, r6
 8009314:	eb19 0309 	adds.w	r3, r9, r9
 8009318:	eb4a 040a 	adc.w	r4, sl, sl
 800931c:	4699      	mov	r9, r3
 800931e:	46a2      	mov	sl, r4
 8009320:	eb19 0905 	adds.w	r9, r9, r5
 8009324:	eb4a 0a06 	adc.w	sl, sl, r6
 8009328:	f04f 0100 	mov.w	r1, #0
 800932c:	f04f 0200 	mov.w	r2, #0
 8009330:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009334:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009338:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800933c:	4689      	mov	r9, r1
 800933e:	4692      	mov	sl, r2
 8009340:	eb19 0005 	adds.w	r0, r9, r5
 8009344:	eb4a 0106 	adc.w	r1, sl, r6
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	685b      	ldr	r3, [r3, #4]
 800934c:	461d      	mov	r5, r3
 800934e:	f04f 0600 	mov.w	r6, #0
 8009352:	196b      	adds	r3, r5, r5
 8009354:	eb46 0406 	adc.w	r4, r6, r6
 8009358:	461a      	mov	r2, r3
 800935a:	4623      	mov	r3, r4
 800935c:	f7f6 ff90 	bl	8000280 <__aeabi_uldivmod>
 8009360:	4603      	mov	r3, r0
 8009362:	460c      	mov	r4, r1
 8009364:	461a      	mov	r2, r3
 8009366:	4b8b      	ldr	r3, [pc, #556]	; (8009594 <UART_SetConfig+0x384>)
 8009368:	fba3 1302 	umull	r1, r3, r3, r2
 800936c:	095b      	lsrs	r3, r3, #5
 800936e:	2164      	movs	r1, #100	; 0x64
 8009370:	fb01 f303 	mul.w	r3, r1, r3
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	00db      	lsls	r3, r3, #3
 8009378:	3332      	adds	r3, #50	; 0x32
 800937a:	4a86      	ldr	r2, [pc, #536]	; (8009594 <UART_SetConfig+0x384>)
 800937c:	fba2 2303 	umull	r2, r3, r2, r3
 8009380:	095b      	lsrs	r3, r3, #5
 8009382:	005b      	lsls	r3, r3, #1
 8009384:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009388:	4498      	add	r8, r3
 800938a:	68bb      	ldr	r3, [r7, #8]
 800938c:	461d      	mov	r5, r3
 800938e:	f04f 0600 	mov.w	r6, #0
 8009392:	46a9      	mov	r9, r5
 8009394:	46b2      	mov	sl, r6
 8009396:	eb19 0309 	adds.w	r3, r9, r9
 800939a:	eb4a 040a 	adc.w	r4, sl, sl
 800939e:	4699      	mov	r9, r3
 80093a0:	46a2      	mov	sl, r4
 80093a2:	eb19 0905 	adds.w	r9, r9, r5
 80093a6:	eb4a 0a06 	adc.w	sl, sl, r6
 80093aa:	f04f 0100 	mov.w	r1, #0
 80093ae:	f04f 0200 	mov.w	r2, #0
 80093b2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093b6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093ba:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093be:	4689      	mov	r9, r1
 80093c0:	4692      	mov	sl, r2
 80093c2:	eb19 0005 	adds.w	r0, r9, r5
 80093c6:	eb4a 0106 	adc.w	r1, sl, r6
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	461d      	mov	r5, r3
 80093d0:	f04f 0600 	mov.w	r6, #0
 80093d4:	196b      	adds	r3, r5, r5
 80093d6:	eb46 0406 	adc.w	r4, r6, r6
 80093da:	461a      	mov	r2, r3
 80093dc:	4623      	mov	r3, r4
 80093de:	f7f6 ff4f 	bl	8000280 <__aeabi_uldivmod>
 80093e2:	4603      	mov	r3, r0
 80093e4:	460c      	mov	r4, r1
 80093e6:	461a      	mov	r2, r3
 80093e8:	4b6a      	ldr	r3, [pc, #424]	; (8009594 <UART_SetConfig+0x384>)
 80093ea:	fba3 1302 	umull	r1, r3, r3, r2
 80093ee:	095b      	lsrs	r3, r3, #5
 80093f0:	2164      	movs	r1, #100	; 0x64
 80093f2:	fb01 f303 	mul.w	r3, r1, r3
 80093f6:	1ad3      	subs	r3, r2, r3
 80093f8:	00db      	lsls	r3, r3, #3
 80093fa:	3332      	adds	r3, #50	; 0x32
 80093fc:	4a65      	ldr	r2, [pc, #404]	; (8009594 <UART_SetConfig+0x384>)
 80093fe:	fba2 2303 	umull	r2, r3, r2, r3
 8009402:	095b      	lsrs	r3, r3, #5
 8009404:	f003 0207 	and.w	r2, r3, #7
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	4442      	add	r2, r8
 800940e:	609a      	str	r2, [r3, #8]
 8009410:	e26f      	b.n	80098f2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009412:	f7fc fdeb 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 8009416:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009418:	68bb      	ldr	r3, [r7, #8]
 800941a:	461d      	mov	r5, r3
 800941c:	f04f 0600 	mov.w	r6, #0
 8009420:	46a8      	mov	r8, r5
 8009422:	46b1      	mov	r9, r6
 8009424:	eb18 0308 	adds.w	r3, r8, r8
 8009428:	eb49 0409 	adc.w	r4, r9, r9
 800942c:	4698      	mov	r8, r3
 800942e:	46a1      	mov	r9, r4
 8009430:	eb18 0805 	adds.w	r8, r8, r5
 8009434:	eb49 0906 	adc.w	r9, r9, r6
 8009438:	f04f 0100 	mov.w	r1, #0
 800943c:	f04f 0200 	mov.w	r2, #0
 8009440:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009444:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009448:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800944c:	4688      	mov	r8, r1
 800944e:	4691      	mov	r9, r2
 8009450:	eb18 0005 	adds.w	r0, r8, r5
 8009454:	eb49 0106 	adc.w	r1, r9, r6
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	685b      	ldr	r3, [r3, #4]
 800945c:	461d      	mov	r5, r3
 800945e:	f04f 0600 	mov.w	r6, #0
 8009462:	196b      	adds	r3, r5, r5
 8009464:	eb46 0406 	adc.w	r4, r6, r6
 8009468:	461a      	mov	r2, r3
 800946a:	4623      	mov	r3, r4
 800946c:	f7f6 ff08 	bl	8000280 <__aeabi_uldivmod>
 8009470:	4603      	mov	r3, r0
 8009472:	460c      	mov	r4, r1
 8009474:	461a      	mov	r2, r3
 8009476:	4b47      	ldr	r3, [pc, #284]	; (8009594 <UART_SetConfig+0x384>)
 8009478:	fba3 2302 	umull	r2, r3, r3, r2
 800947c:	095b      	lsrs	r3, r3, #5
 800947e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009482:	68bb      	ldr	r3, [r7, #8]
 8009484:	461d      	mov	r5, r3
 8009486:	f04f 0600 	mov.w	r6, #0
 800948a:	46a9      	mov	r9, r5
 800948c:	46b2      	mov	sl, r6
 800948e:	eb19 0309 	adds.w	r3, r9, r9
 8009492:	eb4a 040a 	adc.w	r4, sl, sl
 8009496:	4699      	mov	r9, r3
 8009498:	46a2      	mov	sl, r4
 800949a:	eb19 0905 	adds.w	r9, r9, r5
 800949e:	eb4a 0a06 	adc.w	sl, sl, r6
 80094a2:	f04f 0100 	mov.w	r1, #0
 80094a6:	f04f 0200 	mov.w	r2, #0
 80094aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094ae:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094b2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094b6:	4689      	mov	r9, r1
 80094b8:	4692      	mov	sl, r2
 80094ba:	eb19 0005 	adds.w	r0, r9, r5
 80094be:	eb4a 0106 	adc.w	r1, sl, r6
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	461d      	mov	r5, r3
 80094c8:	f04f 0600 	mov.w	r6, #0
 80094cc:	196b      	adds	r3, r5, r5
 80094ce:	eb46 0406 	adc.w	r4, r6, r6
 80094d2:	461a      	mov	r2, r3
 80094d4:	4623      	mov	r3, r4
 80094d6:	f7f6 fed3 	bl	8000280 <__aeabi_uldivmod>
 80094da:	4603      	mov	r3, r0
 80094dc:	460c      	mov	r4, r1
 80094de:	461a      	mov	r2, r3
 80094e0:	4b2c      	ldr	r3, [pc, #176]	; (8009594 <UART_SetConfig+0x384>)
 80094e2:	fba3 1302 	umull	r1, r3, r3, r2
 80094e6:	095b      	lsrs	r3, r3, #5
 80094e8:	2164      	movs	r1, #100	; 0x64
 80094ea:	fb01 f303 	mul.w	r3, r1, r3
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	00db      	lsls	r3, r3, #3
 80094f2:	3332      	adds	r3, #50	; 0x32
 80094f4:	4a27      	ldr	r2, [pc, #156]	; (8009594 <UART_SetConfig+0x384>)
 80094f6:	fba2 2303 	umull	r2, r3, r2, r3
 80094fa:	095b      	lsrs	r3, r3, #5
 80094fc:	005b      	lsls	r3, r3, #1
 80094fe:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009502:	4498      	add	r8, r3
 8009504:	68bb      	ldr	r3, [r7, #8]
 8009506:	461d      	mov	r5, r3
 8009508:	f04f 0600 	mov.w	r6, #0
 800950c:	46a9      	mov	r9, r5
 800950e:	46b2      	mov	sl, r6
 8009510:	eb19 0309 	adds.w	r3, r9, r9
 8009514:	eb4a 040a 	adc.w	r4, sl, sl
 8009518:	4699      	mov	r9, r3
 800951a:	46a2      	mov	sl, r4
 800951c:	eb19 0905 	adds.w	r9, r9, r5
 8009520:	eb4a 0a06 	adc.w	sl, sl, r6
 8009524:	f04f 0100 	mov.w	r1, #0
 8009528:	f04f 0200 	mov.w	r2, #0
 800952c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009530:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009534:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009538:	4689      	mov	r9, r1
 800953a:	4692      	mov	sl, r2
 800953c:	eb19 0005 	adds.w	r0, r9, r5
 8009540:	eb4a 0106 	adc.w	r1, sl, r6
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685b      	ldr	r3, [r3, #4]
 8009548:	461d      	mov	r5, r3
 800954a:	f04f 0600 	mov.w	r6, #0
 800954e:	196b      	adds	r3, r5, r5
 8009550:	eb46 0406 	adc.w	r4, r6, r6
 8009554:	461a      	mov	r2, r3
 8009556:	4623      	mov	r3, r4
 8009558:	f7f6 fe92 	bl	8000280 <__aeabi_uldivmod>
 800955c:	4603      	mov	r3, r0
 800955e:	460c      	mov	r4, r1
 8009560:	461a      	mov	r2, r3
 8009562:	4b0c      	ldr	r3, [pc, #48]	; (8009594 <UART_SetConfig+0x384>)
 8009564:	fba3 1302 	umull	r1, r3, r3, r2
 8009568:	095b      	lsrs	r3, r3, #5
 800956a:	2164      	movs	r1, #100	; 0x64
 800956c:	fb01 f303 	mul.w	r3, r1, r3
 8009570:	1ad3      	subs	r3, r2, r3
 8009572:	00db      	lsls	r3, r3, #3
 8009574:	3332      	adds	r3, #50	; 0x32
 8009576:	4a07      	ldr	r2, [pc, #28]	; (8009594 <UART_SetConfig+0x384>)
 8009578:	fba2 2303 	umull	r2, r3, r2, r3
 800957c:	095b      	lsrs	r3, r3, #5
 800957e:	f003 0207 	and.w	r2, r3, #7
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	4442      	add	r2, r8
 8009588:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800958a:	e1b2      	b.n	80098f2 <UART_SetConfig+0x6e2>
 800958c:	40011000 	.word	0x40011000
 8009590:	40011400 	.word	0x40011400
 8009594:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	4ad7      	ldr	r2, [pc, #860]	; (80098fc <UART_SetConfig+0x6ec>)
 800959e:	4293      	cmp	r3, r2
 80095a0:	d005      	beq.n	80095ae <UART_SetConfig+0x39e>
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	4ad6      	ldr	r2, [pc, #856]	; (8009900 <UART_SetConfig+0x6f0>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	f040 80d1 	bne.w	8009750 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80095ae:	f7fc fd31 	bl	8006014 <HAL_RCC_GetPCLK2Freq>
 80095b2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095b4:	68bb      	ldr	r3, [r7, #8]
 80095b6:	469a      	mov	sl, r3
 80095b8:	f04f 0b00 	mov.w	fp, #0
 80095bc:	46d0      	mov	r8, sl
 80095be:	46d9      	mov	r9, fp
 80095c0:	eb18 0308 	adds.w	r3, r8, r8
 80095c4:	eb49 0409 	adc.w	r4, r9, r9
 80095c8:	4698      	mov	r8, r3
 80095ca:	46a1      	mov	r9, r4
 80095cc:	eb18 080a 	adds.w	r8, r8, sl
 80095d0:	eb49 090b 	adc.w	r9, r9, fp
 80095d4:	f04f 0100 	mov.w	r1, #0
 80095d8:	f04f 0200 	mov.w	r2, #0
 80095dc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80095e0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80095e4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80095e8:	4688      	mov	r8, r1
 80095ea:	4691      	mov	r9, r2
 80095ec:	eb1a 0508 	adds.w	r5, sl, r8
 80095f0:	eb4b 0609 	adc.w	r6, fp, r9
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	685b      	ldr	r3, [r3, #4]
 80095f8:	4619      	mov	r1, r3
 80095fa:	f04f 0200 	mov.w	r2, #0
 80095fe:	f04f 0300 	mov.w	r3, #0
 8009602:	f04f 0400 	mov.w	r4, #0
 8009606:	0094      	lsls	r4, r2, #2
 8009608:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800960c:	008b      	lsls	r3, r1, #2
 800960e:	461a      	mov	r2, r3
 8009610:	4623      	mov	r3, r4
 8009612:	4628      	mov	r0, r5
 8009614:	4631      	mov	r1, r6
 8009616:	f7f6 fe33 	bl	8000280 <__aeabi_uldivmod>
 800961a:	4603      	mov	r3, r0
 800961c:	460c      	mov	r4, r1
 800961e:	461a      	mov	r2, r3
 8009620:	4bb8      	ldr	r3, [pc, #736]	; (8009904 <UART_SetConfig+0x6f4>)
 8009622:	fba3 2302 	umull	r2, r3, r3, r2
 8009626:	095b      	lsrs	r3, r3, #5
 8009628:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800962c:	68bb      	ldr	r3, [r7, #8]
 800962e:	469b      	mov	fp, r3
 8009630:	f04f 0c00 	mov.w	ip, #0
 8009634:	46d9      	mov	r9, fp
 8009636:	46e2      	mov	sl, ip
 8009638:	eb19 0309 	adds.w	r3, r9, r9
 800963c:	eb4a 040a 	adc.w	r4, sl, sl
 8009640:	4699      	mov	r9, r3
 8009642:	46a2      	mov	sl, r4
 8009644:	eb19 090b 	adds.w	r9, r9, fp
 8009648:	eb4a 0a0c 	adc.w	sl, sl, ip
 800964c:	f04f 0100 	mov.w	r1, #0
 8009650:	f04f 0200 	mov.w	r2, #0
 8009654:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009658:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800965c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009660:	4689      	mov	r9, r1
 8009662:	4692      	mov	sl, r2
 8009664:	eb1b 0509 	adds.w	r5, fp, r9
 8009668:	eb4c 060a 	adc.w	r6, ip, sl
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	685b      	ldr	r3, [r3, #4]
 8009670:	4619      	mov	r1, r3
 8009672:	f04f 0200 	mov.w	r2, #0
 8009676:	f04f 0300 	mov.w	r3, #0
 800967a:	f04f 0400 	mov.w	r4, #0
 800967e:	0094      	lsls	r4, r2, #2
 8009680:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009684:	008b      	lsls	r3, r1, #2
 8009686:	461a      	mov	r2, r3
 8009688:	4623      	mov	r3, r4
 800968a:	4628      	mov	r0, r5
 800968c:	4631      	mov	r1, r6
 800968e:	f7f6 fdf7 	bl	8000280 <__aeabi_uldivmod>
 8009692:	4603      	mov	r3, r0
 8009694:	460c      	mov	r4, r1
 8009696:	461a      	mov	r2, r3
 8009698:	4b9a      	ldr	r3, [pc, #616]	; (8009904 <UART_SetConfig+0x6f4>)
 800969a:	fba3 1302 	umull	r1, r3, r3, r2
 800969e:	095b      	lsrs	r3, r3, #5
 80096a0:	2164      	movs	r1, #100	; 0x64
 80096a2:	fb01 f303 	mul.w	r3, r1, r3
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	011b      	lsls	r3, r3, #4
 80096aa:	3332      	adds	r3, #50	; 0x32
 80096ac:	4a95      	ldr	r2, [pc, #596]	; (8009904 <UART_SetConfig+0x6f4>)
 80096ae:	fba2 2303 	umull	r2, r3, r2, r3
 80096b2:	095b      	lsrs	r3, r3, #5
 80096b4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096b8:	4498      	add	r8, r3
 80096ba:	68bb      	ldr	r3, [r7, #8]
 80096bc:	469b      	mov	fp, r3
 80096be:	f04f 0c00 	mov.w	ip, #0
 80096c2:	46d9      	mov	r9, fp
 80096c4:	46e2      	mov	sl, ip
 80096c6:	eb19 0309 	adds.w	r3, r9, r9
 80096ca:	eb4a 040a 	adc.w	r4, sl, sl
 80096ce:	4699      	mov	r9, r3
 80096d0:	46a2      	mov	sl, r4
 80096d2:	eb19 090b 	adds.w	r9, r9, fp
 80096d6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80096da:	f04f 0100 	mov.w	r1, #0
 80096de:	f04f 0200 	mov.w	r2, #0
 80096e2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80096e6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80096ea:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80096ee:	4689      	mov	r9, r1
 80096f0:	4692      	mov	sl, r2
 80096f2:	eb1b 0509 	adds.w	r5, fp, r9
 80096f6:	eb4c 060a 	adc.w	r6, ip, sl
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	685b      	ldr	r3, [r3, #4]
 80096fe:	4619      	mov	r1, r3
 8009700:	f04f 0200 	mov.w	r2, #0
 8009704:	f04f 0300 	mov.w	r3, #0
 8009708:	f04f 0400 	mov.w	r4, #0
 800970c:	0094      	lsls	r4, r2, #2
 800970e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009712:	008b      	lsls	r3, r1, #2
 8009714:	461a      	mov	r2, r3
 8009716:	4623      	mov	r3, r4
 8009718:	4628      	mov	r0, r5
 800971a:	4631      	mov	r1, r6
 800971c:	f7f6 fdb0 	bl	8000280 <__aeabi_uldivmod>
 8009720:	4603      	mov	r3, r0
 8009722:	460c      	mov	r4, r1
 8009724:	461a      	mov	r2, r3
 8009726:	4b77      	ldr	r3, [pc, #476]	; (8009904 <UART_SetConfig+0x6f4>)
 8009728:	fba3 1302 	umull	r1, r3, r3, r2
 800972c:	095b      	lsrs	r3, r3, #5
 800972e:	2164      	movs	r1, #100	; 0x64
 8009730:	fb01 f303 	mul.w	r3, r1, r3
 8009734:	1ad3      	subs	r3, r2, r3
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	3332      	adds	r3, #50	; 0x32
 800973a:	4a72      	ldr	r2, [pc, #456]	; (8009904 <UART_SetConfig+0x6f4>)
 800973c:	fba2 2303 	umull	r2, r3, r2, r3
 8009740:	095b      	lsrs	r3, r3, #5
 8009742:	f003 020f 	and.w	r2, r3, #15
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4442      	add	r2, r8
 800974c:	609a      	str	r2, [r3, #8]
 800974e:	e0d0      	b.n	80098f2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009750:	f7fc fc4c 	bl	8005fec <HAL_RCC_GetPCLK1Freq>
 8009754:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009756:	68bb      	ldr	r3, [r7, #8]
 8009758:	469a      	mov	sl, r3
 800975a:	f04f 0b00 	mov.w	fp, #0
 800975e:	46d0      	mov	r8, sl
 8009760:	46d9      	mov	r9, fp
 8009762:	eb18 0308 	adds.w	r3, r8, r8
 8009766:	eb49 0409 	adc.w	r4, r9, r9
 800976a:	4698      	mov	r8, r3
 800976c:	46a1      	mov	r9, r4
 800976e:	eb18 080a 	adds.w	r8, r8, sl
 8009772:	eb49 090b 	adc.w	r9, r9, fp
 8009776:	f04f 0100 	mov.w	r1, #0
 800977a:	f04f 0200 	mov.w	r2, #0
 800977e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009782:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009786:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800978a:	4688      	mov	r8, r1
 800978c:	4691      	mov	r9, r2
 800978e:	eb1a 0508 	adds.w	r5, sl, r8
 8009792:	eb4b 0609 	adc.w	r6, fp, r9
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	685b      	ldr	r3, [r3, #4]
 800979a:	4619      	mov	r1, r3
 800979c:	f04f 0200 	mov.w	r2, #0
 80097a0:	f04f 0300 	mov.w	r3, #0
 80097a4:	f04f 0400 	mov.w	r4, #0
 80097a8:	0094      	lsls	r4, r2, #2
 80097aa:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80097ae:	008b      	lsls	r3, r1, #2
 80097b0:	461a      	mov	r2, r3
 80097b2:	4623      	mov	r3, r4
 80097b4:	4628      	mov	r0, r5
 80097b6:	4631      	mov	r1, r6
 80097b8:	f7f6 fd62 	bl	8000280 <__aeabi_uldivmod>
 80097bc:	4603      	mov	r3, r0
 80097be:	460c      	mov	r4, r1
 80097c0:	461a      	mov	r2, r3
 80097c2:	4b50      	ldr	r3, [pc, #320]	; (8009904 <UART_SetConfig+0x6f4>)
 80097c4:	fba3 2302 	umull	r2, r3, r3, r2
 80097c8:	095b      	lsrs	r3, r3, #5
 80097ca:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80097ce:	68bb      	ldr	r3, [r7, #8]
 80097d0:	469b      	mov	fp, r3
 80097d2:	f04f 0c00 	mov.w	ip, #0
 80097d6:	46d9      	mov	r9, fp
 80097d8:	46e2      	mov	sl, ip
 80097da:	eb19 0309 	adds.w	r3, r9, r9
 80097de:	eb4a 040a 	adc.w	r4, sl, sl
 80097e2:	4699      	mov	r9, r3
 80097e4:	46a2      	mov	sl, r4
 80097e6:	eb19 090b 	adds.w	r9, r9, fp
 80097ea:	eb4a 0a0c 	adc.w	sl, sl, ip
 80097ee:	f04f 0100 	mov.w	r1, #0
 80097f2:	f04f 0200 	mov.w	r2, #0
 80097f6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80097fa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80097fe:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009802:	4689      	mov	r9, r1
 8009804:	4692      	mov	sl, r2
 8009806:	eb1b 0509 	adds.w	r5, fp, r9
 800980a:	eb4c 060a 	adc.w	r6, ip, sl
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	685b      	ldr	r3, [r3, #4]
 8009812:	4619      	mov	r1, r3
 8009814:	f04f 0200 	mov.w	r2, #0
 8009818:	f04f 0300 	mov.w	r3, #0
 800981c:	f04f 0400 	mov.w	r4, #0
 8009820:	0094      	lsls	r4, r2, #2
 8009822:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009826:	008b      	lsls	r3, r1, #2
 8009828:	461a      	mov	r2, r3
 800982a:	4623      	mov	r3, r4
 800982c:	4628      	mov	r0, r5
 800982e:	4631      	mov	r1, r6
 8009830:	f7f6 fd26 	bl	8000280 <__aeabi_uldivmod>
 8009834:	4603      	mov	r3, r0
 8009836:	460c      	mov	r4, r1
 8009838:	461a      	mov	r2, r3
 800983a:	4b32      	ldr	r3, [pc, #200]	; (8009904 <UART_SetConfig+0x6f4>)
 800983c:	fba3 1302 	umull	r1, r3, r3, r2
 8009840:	095b      	lsrs	r3, r3, #5
 8009842:	2164      	movs	r1, #100	; 0x64
 8009844:	fb01 f303 	mul.w	r3, r1, r3
 8009848:	1ad3      	subs	r3, r2, r3
 800984a:	011b      	lsls	r3, r3, #4
 800984c:	3332      	adds	r3, #50	; 0x32
 800984e:	4a2d      	ldr	r2, [pc, #180]	; (8009904 <UART_SetConfig+0x6f4>)
 8009850:	fba2 2303 	umull	r2, r3, r2, r3
 8009854:	095b      	lsrs	r3, r3, #5
 8009856:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800985a:	4498      	add	r8, r3
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	469b      	mov	fp, r3
 8009860:	f04f 0c00 	mov.w	ip, #0
 8009864:	46d9      	mov	r9, fp
 8009866:	46e2      	mov	sl, ip
 8009868:	eb19 0309 	adds.w	r3, r9, r9
 800986c:	eb4a 040a 	adc.w	r4, sl, sl
 8009870:	4699      	mov	r9, r3
 8009872:	46a2      	mov	sl, r4
 8009874:	eb19 090b 	adds.w	r9, r9, fp
 8009878:	eb4a 0a0c 	adc.w	sl, sl, ip
 800987c:	f04f 0100 	mov.w	r1, #0
 8009880:	f04f 0200 	mov.w	r2, #0
 8009884:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009888:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800988c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009890:	4689      	mov	r9, r1
 8009892:	4692      	mov	sl, r2
 8009894:	eb1b 0509 	adds.w	r5, fp, r9
 8009898:	eb4c 060a 	adc.w	r6, ip, sl
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	685b      	ldr	r3, [r3, #4]
 80098a0:	4619      	mov	r1, r3
 80098a2:	f04f 0200 	mov.w	r2, #0
 80098a6:	f04f 0300 	mov.w	r3, #0
 80098aa:	f04f 0400 	mov.w	r4, #0
 80098ae:	0094      	lsls	r4, r2, #2
 80098b0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80098b4:	008b      	lsls	r3, r1, #2
 80098b6:	461a      	mov	r2, r3
 80098b8:	4623      	mov	r3, r4
 80098ba:	4628      	mov	r0, r5
 80098bc:	4631      	mov	r1, r6
 80098be:	f7f6 fcdf 	bl	8000280 <__aeabi_uldivmod>
 80098c2:	4603      	mov	r3, r0
 80098c4:	460c      	mov	r4, r1
 80098c6:	461a      	mov	r2, r3
 80098c8:	4b0e      	ldr	r3, [pc, #56]	; (8009904 <UART_SetConfig+0x6f4>)
 80098ca:	fba3 1302 	umull	r1, r3, r3, r2
 80098ce:	095b      	lsrs	r3, r3, #5
 80098d0:	2164      	movs	r1, #100	; 0x64
 80098d2:	fb01 f303 	mul.w	r3, r1, r3
 80098d6:	1ad3      	subs	r3, r2, r3
 80098d8:	011b      	lsls	r3, r3, #4
 80098da:	3332      	adds	r3, #50	; 0x32
 80098dc:	4a09      	ldr	r2, [pc, #36]	; (8009904 <UART_SetConfig+0x6f4>)
 80098de:	fba2 2303 	umull	r2, r3, r2, r3
 80098e2:	095b      	lsrs	r3, r3, #5
 80098e4:	f003 020f 	and.w	r2, r3, #15
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4442      	add	r2, r8
 80098ee:	609a      	str	r2, [r3, #8]
}
 80098f0:	e7ff      	b.n	80098f2 <UART_SetConfig+0x6e2>
 80098f2:	bf00      	nop
 80098f4:	3714      	adds	r7, #20
 80098f6:	46bd      	mov	sp, r7
 80098f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098fc:	40011000 	.word	0x40011000
 8009900:	40011400 	.word	0x40011400
 8009904:	51eb851f 	.word	0x51eb851f

08009908 <Print_Debug_Info_UART>:




void Print_Debug_Info_UART(char print_data[])
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b082      	sub	sp, #8
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&huart2, (uint8_t *)print_data, strlen(print_data), 10);
 8009910:	6878      	ldr	r0, [r7, #4]
 8009912:	f7f6 fcad 	bl	8000270 <strlen>
 8009916:	4603      	mov	r3, r0
 8009918:	b29a      	uxth	r2, r3
 800991a:	230a      	movs	r3, #10
 800991c:	6879      	ldr	r1, [r7, #4]
 800991e:	4803      	ldr	r0, [pc, #12]	; (800992c <Print_Debug_Info_UART+0x24>)
 8009920:	f7ff f953 	bl	8008bca <HAL_UART_Transmit>



}
 8009924:	bf00      	nop
 8009926:	3708      	adds	r7, #8
 8009928:	46bd      	mov	sp, r7
 800992a:	bd80      	pop	{r7, pc}
 800992c:	200003f0 	.word	0x200003f0

08009930 <All_Devices_Initial_Configuration>:




void All_Devices_Initial_Configuration()
{
 8009930:	b580      	push	{r7, lr}
 8009932:	af00      	add	r7, sp, #0

//	Accelerometer_LIS3DSH_Init_Configuration();
	NRF24L01_Initial_Configuartion();
 8009934:	f001 fa26 	bl	800ad84 <NRF24L01_Initial_Configuartion>





}
 8009938:	bf00      	nop
 800993a:	bd80      	pop	{r7, pc}

0800993c <All_Device_Control_And_Schedule>:



void All_Device_Control_And_Schedule()
{
 800993c:	b580      	push	{r7, lr}
 800993e:	af00      	add	r7, sp, #0

//  Accelerometer_LIS3DSH_Control();

//

	if(gTimer_Radio_Schedule == 0)
 8009940:	4b08      	ldr	r3, [pc, #32]	; (8009964 <All_Device_Control_And_Schedule+0x28>)
 8009942:	881b      	ldrh	r3, [r3, #0]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d105      	bne.n	8009954 <All_Device_Control_And_Schedule+0x18>
	{
		gTimer_Radio_Schedule = 500;
 8009948:	4b06      	ldr	r3, [pc, #24]	; (8009964 <All_Device_Control_And_Schedule+0x28>)
 800994a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800994e:	801a      	strh	r2, [r3, #0]
		NRF24L01_Schedule_And_Event_Control();
 8009950:	f001 fa9e 	bl	800ae90 <NRF24L01_Schedule_And_Event_Control>
	}

  if(!gTxRxFlag)
 8009954:	4b04      	ldr	r3, [pc, #16]	; (8009968 <All_Device_Control_And_Schedule+0x2c>)
 8009956:	781b      	ldrb	r3, [r3, #0]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d101      	bne.n	8009960 <All_Device_Control_And_Schedule+0x24>
  	Radio_Receive_Data();
 800995c:	f001 fa64 	bl	800ae28 <Radio_Receive_Data>





}
 8009960:	bf00      	nop
 8009962:	bd80      	pop	{r7, pc}
 8009964:	200004fa 	.word	0x200004fa
 8009968:	2000057a 	.word	0x2000057a

0800996c <NRF24_DelayMicroSeconds>:
static UART_HandleTypeDef nrf24_huart;

//**** Functions prototypes ****//
//Microsecond delay function
void NRF24_DelayMicroSeconds(uint32_t uSec)
{
 800996c:	b480      	push	{r7}
 800996e:	b085      	sub	sp, #20
 8009970:	af00      	add	r7, sp, #0
 8009972:	6078      	str	r0, [r7, #4]
	uint32_t uSecVar = uSec;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	60fb      	str	r3, [r7, #12]
	uSecVar = uSecVar* ((SystemCoreClock/1000000)/3);
 8009978:	4b0a      	ldr	r3, [pc, #40]	; (80099a4 <NRF24_DelayMicroSeconds+0x38>)
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	4a0a      	ldr	r2, [pc, #40]	; (80099a8 <NRF24_DelayMicroSeconds+0x3c>)
 800997e:	fba2 2303 	umull	r2, r3, r2, r3
 8009982:	0c9a      	lsrs	r2, r3, #18
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	fb02 f303 	mul.w	r3, r2, r3
 800998a:	60fb      	str	r3, [r7, #12]
	while(uSecVar--);
 800998c:	bf00      	nop
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	1e5a      	subs	r2, r3, #1
 8009992:	60fa      	str	r2, [r7, #12]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d1fa      	bne.n	800998e <NRF24_DelayMicroSeconds+0x22>
}
 8009998:	bf00      	nop
 800999a:	3714      	adds	r7, #20
 800999c:	46bd      	mov	sp, r7
 800999e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a2:	4770      	bx	lr
 80099a4:	20000000 	.word	0x20000000
 80099a8:	165e9f81 	.word	0x165e9f81

080099ac <NRF24_csn>:

//1. Chip Select function
void NRF24_csn(int state)
{
 80099ac:	b580      	push	{r7, lr}
 80099ae:	b082      	sub	sp, #8
 80099b0:	af00      	add	r7, sp, #0
 80099b2:	6078      	str	r0, [r7, #4]
	if(state)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d006      	beq.n	80099c8 <NRF24_csn+0x1c>
		HAL_GPIO_WritePin(GPIOD, CSN_Pin, GPIO_PIN_SET);
 80099ba:	2201      	movs	r2, #1
 80099bc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099c0:	4806      	ldr	r0, [pc, #24]	; (80099dc <NRF24_csn+0x30>)
 80099c2:	f7f9 faa9 	bl	8002f18 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOD, CSN_Pin, GPIO_PIN_RESET);
}
 80099c6:	e005      	b.n	80099d4 <NRF24_csn+0x28>
		HAL_GPIO_WritePin(GPIOD, CSN_Pin, GPIO_PIN_RESET);
 80099c8:	2200      	movs	r2, #0
 80099ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80099ce:	4803      	ldr	r0, [pc, #12]	; (80099dc <NRF24_csn+0x30>)
 80099d0:	f7f9 faa2 	bl	8002f18 <HAL_GPIO_WritePin>
}
 80099d4:	bf00      	nop
 80099d6:	3708      	adds	r7, #8
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	40020c00 	.word	0x40020c00

080099e0 <NRF24_ce>:
//2. Chip Enable
void NRF24_ce(int state)
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b082      	sub	sp, #8
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
	if(state)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	d006      	beq.n	80099fc <NRF24_ce+0x1c>
		HAL_GPIO_WritePin(GPIOD, CE_Pin, GPIO_PIN_SET);
 80099ee:	2201      	movs	r2, #1
 80099f0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80099f4:	4806      	ldr	r0, [pc, #24]	; (8009a10 <NRF24_ce+0x30>)
 80099f6:	f7f9 fa8f 	bl	8002f18 <HAL_GPIO_WritePin>
	else
		HAL_GPIO_WritePin(GPIOD, CE_Pin, GPIO_PIN_RESET);
}
 80099fa:	e005      	b.n	8009a08 <NRF24_ce+0x28>
		HAL_GPIO_WritePin(GPIOD, CE_Pin, GPIO_PIN_RESET);
 80099fc:	2200      	movs	r2, #0
 80099fe:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8009a02:	4803      	ldr	r0, [pc, #12]	; (8009a10 <NRF24_ce+0x30>)
 8009a04:	f7f9 fa88 	bl	8002f18 <HAL_GPIO_WritePin>
}
 8009a08:	bf00      	nop
 8009a0a:	3708      	adds	r7, #8
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	bd80      	pop	{r7, pc}
 8009a10:	40020c00 	.word	0x40020c00

08009a14 <NRF24_read_register>:
//3. Read single byte from a register
uint8_t NRF24_read_register(uint8_t reg)
{
 8009a14:	b580      	push	{r7, lr}
 8009a16:	b084      	sub	sp, #16
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	4603      	mov	r3, r0
 8009a1c:	71fb      	strb	r3, [r7, #7]
	uint8_t spiBuf[3];
	uint8_t retData;
	uint8_t ret_val =0;
 8009a1e:	2300      	movs	r3, #0
 8009a20:	73fb      	strb	r3, [r7, #15]
	//Put CSN low
	NRF24_csn(0);
 8009a22:	2000      	movs	r0, #0
 8009a24:	f7ff ffc2 	bl	80099ac <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8009a28:	79fb      	ldrb	r3, [r7, #7]
 8009a2a:	f003 031f 	and.w	r3, r3, #31
 8009a2e:	b2db      	uxtb	r3, r3
 8009a30:	723b      	strb	r3, [r7, #8]
	ret_val = HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8009a32:	f107 0108 	add.w	r1, r7, #8
 8009a36:	2364      	movs	r3, #100	; 0x64
 8009a38:	2201      	movs	r2, #1
 8009a3a:	480c      	ldr	r0, [pc, #48]	; (8009a6c <NRF24_read_register+0x58>)
 8009a3c:	f7fd f8b6 	bl	8006bac <HAL_SPI_Transmit>
 8009a40:	4603      	mov	r3, r0
 8009a42:	73fb      	strb	r3, [r7, #15]
	//Receive data
	ret_val = HAL_SPI_Receive(&nrf24_hspi, &spiBuf[1], 1, 100);
 8009a44:	f107 0308 	add.w	r3, r7, #8
 8009a48:	1c59      	adds	r1, r3, #1
 8009a4a:	2364      	movs	r3, #100	; 0x64
 8009a4c:	2201      	movs	r2, #1
 8009a4e:	4807      	ldr	r0, [pc, #28]	; (8009a6c <NRF24_read_register+0x58>)
 8009a50:	f7fd f9e0 	bl	8006e14 <HAL_SPI_Receive>
 8009a54:	4603      	mov	r3, r0
 8009a56:	73fb      	strb	r3, [r7, #15]
	retData = spiBuf[1];
 8009a58:	7a7b      	ldrb	r3, [r7, #9]
 8009a5a:	73bb      	strb	r3, [r7, #14]
	//Bring CSN high
	NRF24_csn(1);
 8009a5c:	2001      	movs	r0, #1
 8009a5e:	f7ff ffa5 	bl	80099ac <NRF24_csn>
	return retData;
 8009a62:	7bbb      	ldrb	r3, [r7, #14]
}
 8009a64:	4618      	mov	r0, r3
 8009a66:	3710      	adds	r7, #16
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	bd80      	pop	{r7, pc}
 8009a6c:	20000518 	.word	0x20000518

08009a70 <NRF24_read_registerN>:
//4. Read multiple bytes register
void NRF24_read_registerN(uint8_t reg, uint8_t *buf, uint8_t len)
{
 8009a70:	b580      	push	{r7, lr}
 8009a72:	b084      	sub	sp, #16
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	4603      	mov	r3, r0
 8009a78:	6039      	str	r1, [r7, #0]
 8009a7a:	71fb      	strb	r3, [r7, #7]
 8009a7c:	4613      	mov	r3, r2
 8009a7e:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8009a80:	2000      	movs	r0, #0
 8009a82:	f7ff ff93 	bl	80099ac <NRF24_csn>
	//Transmit register address
	spiBuf[0] = reg&0x1F;
 8009a86:	79fb      	ldrb	r3, [r7, #7]
 8009a88:	f003 031f 	and.w	r3, r3, #31
 8009a8c:	b2db      	uxtb	r3, r3
 8009a8e:	733b      	strb	r3, [r7, #12]
	//spiStatus = NRF24_SPI_Write(spiBuf, 1);
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8009a90:	f107 010c 	add.w	r1, r7, #12
 8009a94:	2364      	movs	r3, #100	; 0x64
 8009a96:	2201      	movs	r2, #1
 8009a98:	4808      	ldr	r0, [pc, #32]	; (8009abc <NRF24_read_registerN+0x4c>)
 8009a9a:	f7fd f887 	bl	8006bac <HAL_SPI_Transmit>
	//Receive data
	HAL_SPI_Receive(&nrf24_hspi, buf, len, 100);
 8009a9e:	79bb      	ldrb	r3, [r7, #6]
 8009aa0:	b29a      	uxth	r2, r3
 8009aa2:	2364      	movs	r3, #100	; 0x64
 8009aa4:	6839      	ldr	r1, [r7, #0]
 8009aa6:	4805      	ldr	r0, [pc, #20]	; (8009abc <NRF24_read_registerN+0x4c>)
 8009aa8:	f7fd f9b4 	bl	8006e14 <HAL_SPI_Receive>
	//Bring CSN high
	NRF24_csn(1);
 8009aac:	2001      	movs	r0, #1
 8009aae:	f7ff ff7d 	bl	80099ac <NRF24_csn>
}
 8009ab2:	bf00      	nop
 8009ab4:	3710      	adds	r7, #16
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	20000518 	.word	0x20000518

08009ac0 <NRF24_write_register>:
//5. Write single byte register
void NRF24_write_register(uint8_t reg, uint8_t value)
{
 8009ac0:	b580      	push	{r7, lr}
 8009ac2:	b084      	sub	sp, #16
 8009ac4:	af00      	add	r7, sp, #0
 8009ac6:	4603      	mov	r3, r0
 8009ac8:	460a      	mov	r2, r1
 8009aca:	71fb      	strb	r3, [r7, #7]
 8009acc:	4613      	mov	r3, r2
 8009ace:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8009ad0:	2000      	movs	r0, #0
 8009ad2:	f7ff ff6b 	bl	80099ac <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8009ad6:	79fb      	ldrb	r3, [r7, #7]
 8009ad8:	f043 0320 	orr.w	r3, r3, #32
 8009adc:	b2db      	uxtb	r3, r3
 8009ade:	733b      	strb	r3, [r7, #12]
	spiBuf[1] = value;
 8009ae0:	79bb      	ldrb	r3, [r7, #6]
 8009ae2:	737b      	strb	r3, [r7, #13]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 2, 100);
 8009ae4:	f107 010c 	add.w	r1, r7, #12
 8009ae8:	2364      	movs	r3, #100	; 0x64
 8009aea:	2202      	movs	r2, #2
 8009aec:	4804      	ldr	r0, [pc, #16]	; (8009b00 <NRF24_write_register+0x40>)
 8009aee:	f7fd f85d 	bl	8006bac <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8009af2:	2001      	movs	r0, #1
 8009af4:	f7ff ff5a 	bl	80099ac <NRF24_csn>
}
 8009af8:	bf00      	nop
 8009afa:	3710      	adds	r7, #16
 8009afc:	46bd      	mov	sp, r7
 8009afe:	bd80      	pop	{r7, pc}
 8009b00:	20000518 	.word	0x20000518

08009b04 <NRF24_write_registerN>:
//6. Write multipl bytes register
void NRF24_write_registerN(uint8_t reg, const uint8_t* buf, uint8_t len)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	6039      	str	r1, [r7, #0]
 8009b0e:	71fb      	strb	r3, [r7, #7]
 8009b10:	4613      	mov	r3, r2
 8009b12:	71bb      	strb	r3, [r7, #6]
	uint8_t spiBuf[3];
	//Put CSN low
	NRF24_csn(0);
 8009b14:	2000      	movs	r0, #0
 8009b16:	f7ff ff49 	bl	80099ac <NRF24_csn>
	//Transmit register address and data
	spiBuf[0] = reg|0x20;
 8009b1a:	79fb      	ldrb	r3, [r7, #7]
 8009b1c:	f043 0320 	orr.w	r3, r3, #32
 8009b20:	b2db      	uxtb	r3, r3
 8009b22:	733b      	strb	r3, [r7, #12]
	HAL_SPI_Transmit(&nrf24_hspi, spiBuf, 1, 100);
 8009b24:	f107 010c 	add.w	r1, r7, #12
 8009b28:	2364      	movs	r3, #100	; 0x64
 8009b2a:	2201      	movs	r2, #1
 8009b2c:	4808      	ldr	r0, [pc, #32]	; (8009b50 <NRF24_write_registerN+0x4c>)
 8009b2e:	f7fd f83d 	bl	8006bac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t*)buf, len, 100);
 8009b32:	79bb      	ldrb	r3, [r7, #6]
 8009b34:	b29a      	uxth	r2, r3
 8009b36:	2364      	movs	r3, #100	; 0x64
 8009b38:	6839      	ldr	r1, [r7, #0]
 8009b3a:	4805      	ldr	r0, [pc, #20]	; (8009b50 <NRF24_write_registerN+0x4c>)
 8009b3c:	f7fd f836 	bl	8006bac <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8009b40:	2001      	movs	r0, #1
 8009b42:	f7ff ff33 	bl	80099ac <NRF24_csn>
}
 8009b46:	bf00      	nop
 8009b48:	3710      	adds	r7, #16
 8009b4a:	46bd      	mov	sp, r7
 8009b4c:	bd80      	pop	{r7, pc}
 8009b4e:	bf00      	nop
 8009b50:	20000518 	.word	0x20000518

08009b54 <NRF24_write_payload>:
//7. Write transmit payload
void NRF24_write_payload(const void* buf, uint8_t len)
{
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	70fb      	strb	r3, [r7, #3]
	uint8_t wrPayloadCmd;
	//Bring CSN low
	NRF24_csn(0);
 8009b60:	2000      	movs	r0, #0
 8009b62:	f7ff ff23 	bl	80099ac <NRF24_csn>
	//Send Write Tx payload command followed by pbuf data
	wrPayloadCmd = CMD_W_TX_PAYLOAD;
 8009b66:	23a0      	movs	r3, #160	; 0xa0
 8009b68:	73fb      	strb	r3, [r7, #15]
	HAL_SPI_Transmit(&nrf24_hspi, &wrPayloadCmd, 1, 100);
 8009b6a:	f107 010f 	add.w	r1, r7, #15
 8009b6e:	2364      	movs	r3, #100	; 0x64
 8009b70:	2201      	movs	r2, #1
 8009b72:	4808      	ldr	r0, [pc, #32]	; (8009b94 <NRF24_write_payload+0x40>)
 8009b74:	f7fd f81a 	bl	8006bac <HAL_SPI_Transmit>
	HAL_SPI_Transmit(&nrf24_hspi, (uint8_t *)buf, len, 100);
 8009b78:	78fb      	ldrb	r3, [r7, #3]
 8009b7a:	b29a      	uxth	r2, r3
 8009b7c:	2364      	movs	r3, #100	; 0x64
 8009b7e:	6879      	ldr	r1, [r7, #4]
 8009b80:	4804      	ldr	r0, [pc, #16]	; (8009b94 <NRF24_write_payload+0x40>)
 8009b82:	f7fd f813 	bl	8006bac <HAL_SPI_Transmit>
	//Bring CSN high
	NRF24_csn(1);
 8009b86:	2001      	movs	r0, #1
 8009b88:	f7ff ff10 	bl	80099ac <NRF24_csn>
}
 8009b8c:	bf00      	nop
 8009b8e:	3710      	adds	r7, #16
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}
 8009b94:	20000518 	.word	0x20000518

08009b98 <NRF24_read_payload>:
//8. Read receive payload
void NRF24_read_payload(void* buf, uint8_t len)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b084      	sub	sp, #16
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	460b      	mov	r3, r1
 8009ba2:	70fb      	strb	r3, [r7, #3]
	uint8_t cmdRxBuf;
	//Get data length using payload size
	uint8_t data_len = MIN(len, NRF24_getPayloadSize());
 8009ba4:	f000 faa0 	bl	800a0e8 <NRF24_getPayloadSize>
 8009ba8:	4603      	mov	r3, r0
 8009baa:	461a      	mov	r2, r3
 8009bac:	78fb      	ldrb	r3, [r7, #3]
 8009bae:	4293      	cmp	r3, r2
 8009bb0:	d303      	bcc.n	8009bba <NRF24_read_payload+0x22>
 8009bb2:	f000 fa99 	bl	800a0e8 <NRF24_getPayloadSize>
 8009bb6:	4603      	mov	r3, r0
 8009bb8:	e000      	b.n	8009bbc <NRF24_read_payload+0x24>
 8009bba:	78fb      	ldrb	r3, [r7, #3]
 8009bbc:	73fb      	strb	r3, [r7, #15]
	//Read data from Rx payload buffer
	NRF24_csn(0);
 8009bbe:	2000      	movs	r0, #0
 8009bc0:	f7ff fef4 	bl	80099ac <NRF24_csn>
	cmdRxBuf = CMD_R_RX_PAYLOAD;
 8009bc4:	2361      	movs	r3, #97	; 0x61
 8009bc6:	73bb      	strb	r3, [r7, #14]
	HAL_SPI_Transmit(&nrf24_hspi, &cmdRxBuf, 1, 100);
 8009bc8:	f107 010e 	add.w	r1, r7, #14
 8009bcc:	2364      	movs	r3, #100	; 0x64
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4808      	ldr	r0, [pc, #32]	; (8009bf4 <NRF24_read_payload+0x5c>)
 8009bd2:	f7fc ffeb 	bl	8006bac <HAL_SPI_Transmit>
	HAL_SPI_Receive(&nrf24_hspi, buf, data_len, 100);
 8009bd6:	7bfb      	ldrb	r3, [r7, #15]
 8009bd8:	b29a      	uxth	r2, r3
 8009bda:	2364      	movs	r3, #100	; 0x64
 8009bdc:	6879      	ldr	r1, [r7, #4]
 8009bde:	4805      	ldr	r0, [pc, #20]	; (8009bf4 <NRF24_read_payload+0x5c>)
 8009be0:	f7fd f918 	bl	8006e14 <HAL_SPI_Receive>
	NRF24_csn(1);
 8009be4:	2001      	movs	r0, #1
 8009be6:	f7ff fee1 	bl	80099ac <NRF24_csn>
}
 8009bea:	bf00      	nop
 8009bec:	3710      	adds	r7, #16
 8009bee:	46bd      	mov	sp, r7
 8009bf0:	bd80      	pop	{r7, pc}
 8009bf2:	bf00      	nop
 8009bf4:	20000518 	.word	0x20000518

08009bf8 <NRF24_flush_tx>:

//9. Flush Tx buffer
void NRF24_flush_tx(void)
{
 8009bf8:	b580      	push	{r7, lr}
 8009bfa:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_TX, 0xFF);
 8009bfc:	21ff      	movs	r1, #255	; 0xff
 8009bfe:	20e1      	movs	r0, #225	; 0xe1
 8009c00:	f7ff ff5e 	bl	8009ac0 <NRF24_write_register>
}
 8009c04:	bf00      	nop
 8009c06:	bd80      	pop	{r7, pc}

08009c08 <NRF24_flush_rx>:
//10. Flush Rx buffer
void NRF24_flush_rx(void)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	af00      	add	r7, sp, #0
	NRF24_write_register(CMD_FLUSH_RX, 0xFF);
 8009c0c:	21ff      	movs	r1, #255	; 0xff
 8009c0e:	20e2      	movs	r0, #226	; 0xe2
 8009c10:	f7ff ff56 	bl	8009ac0 <NRF24_write_register>
}
 8009c14:	bf00      	nop
 8009c16:	bd80      	pop	{r7, pc}

08009c18 <NRF24_get_status>:
//11. Get status register value
uint8_t NRF24_get_status(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b082      	sub	sp, #8
 8009c1c:	af00      	add	r7, sp, #0
	uint8_t statReg;
	statReg = NRF24_read_register(REG_STATUS);
 8009c1e:	2007      	movs	r0, #7
 8009c20:	f7ff fef8 	bl	8009a14 <NRF24_read_register>
 8009c24:	4603      	mov	r3, r0
 8009c26:	71fb      	strb	r3, [r7, #7]
	return statReg;
 8009c28:	79fb      	ldrb	r3, [r7, #7]
}
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3708      	adds	r7, #8
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <NRF24_begin_caller>:

//12. Begin function
void NRF24_begin_caller(void)
{
 8009c34:	b590      	push	{r4, r7, lr}
 8009c36:	b097      	sub	sp, #92	; 0x5c
 8009c38:	af16      	add	r7, sp, #88	; 0x58
  NRF24_begin(GPIOD, GPIO_PIN_10, GPIO_PIN_11, hspi1);
 8009c3a:	4c09      	ldr	r4, [pc, #36]	; (8009c60 <NRF24_begin_caller+0x2c>)
 8009c3c:	4668      	mov	r0, sp
 8009c3e:	1d23      	adds	r3, r4, #4
 8009c40:	2254      	movs	r2, #84	; 0x54
 8009c42:	4619      	mov	r1, r3
 8009c44:	f001 ff12 	bl	800ba6c <memcpy>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009c4e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009c52:	4804      	ldr	r0, [pc, #16]	; (8009c64 <NRF24_begin_caller+0x30>)
 8009c54:	f000 f808 	bl	8009c68 <NRF24_begin>
}
 8009c58:	bf00      	nop
 8009c5a:	3704      	adds	r7, #4
 8009c5c:	46bd      	mov	sp, r7
 8009c5e:	bd90      	pop	{r4, r7, pc}
 8009c60:	20000258 	.word	0x20000258
 8009c64:	40020c00 	.word	0x40020c00

08009c68 <NRF24_begin>:


void NRF24_begin(GPIO_TypeDef *nrf24PORT, uint16_t nrfCSN_Pin, uint16_t nrfCE_Pin, SPI_HandleTypeDef nrfSPI)
{
 8009c68:	b082      	sub	sp, #8
 8009c6a:	b580      	push	{r7, lr}
 8009c6c:	b084      	sub	sp, #16
 8009c6e:	af00      	add	r7, sp, #0
 8009c70:	6078      	str	r0, [r7, #4]
 8009c72:	61fb      	str	r3, [r7, #28]
 8009c74:	460b      	mov	r3, r1
 8009c76:	807b      	strh	r3, [r7, #2]
 8009c78:	4613      	mov	r3, r2
 8009c7a:	803b      	strh	r3, [r7, #0]
	//Copy SPI handle variable
	memcpy(&nrf24_hspi, &nrfSPI, sizeof(nrfSPI));
 8009c7c:	4b66      	ldr	r3, [pc, #408]	; (8009e18 <NRF24_begin+0x1b0>)
 8009c7e:	4618      	mov	r0, r3
 8009c80:	f107 031c 	add.w	r3, r7, #28
 8009c84:	2258      	movs	r2, #88	; 0x58
 8009c86:	4619      	mov	r1, r3
 8009c88:	f001 fef0 	bl	800ba6c <memcpy>
	//Copy Pins and Port variables
	nrf24_PORT = nrf24PORT;
 8009c8c:	4a63      	ldr	r2, [pc, #396]	; (8009e1c <NRF24_begin+0x1b4>)
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	6013      	str	r3, [r2, #0]
	nrf24_CSN_PIN = nrfCSN_Pin;
 8009c92:	4a63      	ldr	r2, [pc, #396]	; (8009e20 <NRF24_begin+0x1b8>)
 8009c94:	887b      	ldrh	r3, [r7, #2]
 8009c96:	8013      	strh	r3, [r2, #0]
	nrf24_CE_PIN = nrfCE_Pin;
 8009c98:	4a62      	ldr	r2, [pc, #392]	; (8009e24 <NRF24_begin+0x1bc>)
 8009c9a:	883b      	ldrh	r3, [r7, #0]
 8009c9c:	8013      	strh	r3, [r2, #0]
	
	//Put pins to idle state
	NRF24_csn(1);
 8009c9e:	2001      	movs	r0, #1
 8009ca0:	f7ff fe84 	bl	80099ac <NRF24_csn>
	NRF24_ce(0);
 8009ca4:	2000      	movs	r0, #0
 8009ca6:	f7ff fe9b 	bl	80099e0 <NRF24_ce>
	//5 ms initial delay
	HAL_Delay(5);
 8009caa:	2005      	movs	r0, #5
 8009cac:	f7f8 f8d4 	bl	8001e58 <HAL_Delay>
	
	//**** Soft Reset Registers default values ****//
	NRF24_write_register(0x00, 0x08);
 8009cb0:	2108      	movs	r1, #8
 8009cb2:	2000      	movs	r0, #0
 8009cb4:	f7ff ff04 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x01, 0x3f);
 8009cb8:	213f      	movs	r1, #63	; 0x3f
 8009cba:	2001      	movs	r0, #1
 8009cbc:	f7ff ff00 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x02, 0x03);
 8009cc0:	2103      	movs	r1, #3
 8009cc2:	2002      	movs	r0, #2
 8009cc4:	f7ff fefc 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x03, 0x03);
 8009cc8:	2103      	movs	r1, #3
 8009cca:	2003      	movs	r0, #3
 8009ccc:	f7ff fef8 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x04, 0x03);
 8009cd0:	2103      	movs	r1, #3
 8009cd2:	2004      	movs	r0, #4
 8009cd4:	f7ff fef4 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x05, 0x02);
 8009cd8:	2102      	movs	r1, #2
 8009cda:	2005      	movs	r0, #5
 8009cdc:	f7ff fef0 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x06, 0x0f);
 8009ce0:	210f      	movs	r1, #15
 8009ce2:	2006      	movs	r0, #6
 8009ce4:	f7ff feec 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x07, 0x0e);
 8009ce8:	210e      	movs	r1, #14
 8009cea:	2007      	movs	r0, #7
 8009cec:	f7ff fee8 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x08, 0x00);
 8009cf0:	2100      	movs	r1, #0
 8009cf2:	2008      	movs	r0, #8
 8009cf4:	f7ff fee4 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x09, 0x00);
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	2009      	movs	r0, #9
 8009cfc:	f7ff fee0 	bl	8009ac0 <NRF24_write_register>
	uint8_t pipeAddrVar[6];
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8009d00:	23e7      	movs	r3, #231	; 0xe7
 8009d02:	733b      	strb	r3, [r7, #12]
 8009d04:	23e7      	movs	r3, #231	; 0xe7
 8009d06:	72fb      	strb	r3, [r7, #11]
 8009d08:	23e7      	movs	r3, #231	; 0xe7
 8009d0a:	72bb      	strb	r3, [r7, #10]
 8009d0c:	23e7      	movs	r3, #231	; 0xe7
 8009d0e:	727b      	strb	r3, [r7, #9]
 8009d10:	23e7      	movs	r3, #231	; 0xe7
 8009d12:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0A, pipeAddrVar, 5);
 8009d14:	f107 0308 	add.w	r3, r7, #8
 8009d18:	2205      	movs	r2, #5
 8009d1a:	4619      	mov	r1, r3
 8009d1c:	200a      	movs	r0, #10
 8009d1e:	f7ff fef1 	bl	8009b04 <NRF24_write_registerN>
	pipeAddrVar[4]=0xC2; pipeAddrVar[3]=0xC2; pipeAddrVar[2]=0xC2; pipeAddrVar[1]=0xC2; pipeAddrVar[0]=0xC2; 
 8009d22:	23c2      	movs	r3, #194	; 0xc2
 8009d24:	733b      	strb	r3, [r7, #12]
 8009d26:	23c2      	movs	r3, #194	; 0xc2
 8009d28:	72fb      	strb	r3, [r7, #11]
 8009d2a:	23c2      	movs	r3, #194	; 0xc2
 8009d2c:	72bb      	strb	r3, [r7, #10]
 8009d2e:	23c2      	movs	r3, #194	; 0xc2
 8009d30:	727b      	strb	r3, [r7, #9]
 8009d32:	23c2      	movs	r3, #194	; 0xc2
 8009d34:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x0B, pipeAddrVar, 5);
 8009d36:	f107 0308 	add.w	r3, r7, #8
 8009d3a:	2205      	movs	r2, #5
 8009d3c:	4619      	mov	r1, r3
 8009d3e:	200b      	movs	r0, #11
 8009d40:	f7ff fee0 	bl	8009b04 <NRF24_write_registerN>
	NRF24_write_register(0x0C, 0xC3);
 8009d44:	21c3      	movs	r1, #195	; 0xc3
 8009d46:	200c      	movs	r0, #12
 8009d48:	f7ff feba 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x0D, 0xC4);
 8009d4c:	21c4      	movs	r1, #196	; 0xc4
 8009d4e:	200d      	movs	r0, #13
 8009d50:	f7ff feb6 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x0E, 0xC5);
 8009d54:	21c5      	movs	r1, #197	; 0xc5
 8009d56:	200e      	movs	r0, #14
 8009d58:	f7ff feb2 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x0F, 0xC6);
 8009d5c:	21c6      	movs	r1, #198	; 0xc6
 8009d5e:	200f      	movs	r0, #15
 8009d60:	f7ff feae 	bl	8009ac0 <NRF24_write_register>
	pipeAddrVar[4]=0xE7; pipeAddrVar[3]=0xE7; pipeAddrVar[2]=0xE7; pipeAddrVar[1]=0xE7; pipeAddrVar[0]=0xE7; 
 8009d64:	23e7      	movs	r3, #231	; 0xe7
 8009d66:	733b      	strb	r3, [r7, #12]
 8009d68:	23e7      	movs	r3, #231	; 0xe7
 8009d6a:	72fb      	strb	r3, [r7, #11]
 8009d6c:	23e7      	movs	r3, #231	; 0xe7
 8009d6e:	72bb      	strb	r3, [r7, #10]
 8009d70:	23e7      	movs	r3, #231	; 0xe7
 8009d72:	727b      	strb	r3, [r7, #9]
 8009d74:	23e7      	movs	r3, #231	; 0xe7
 8009d76:	723b      	strb	r3, [r7, #8]
	NRF24_write_registerN(0x10, pipeAddrVar, 5);		// Tx
 8009d78:	f107 0308 	add.w	r3, r7, #8
 8009d7c:	2205      	movs	r2, #5
 8009d7e:	4619      	mov	r1, r3
 8009d80:	2010      	movs	r0, #16
 8009d82:	f7ff febf 	bl	8009b04 <NRF24_write_registerN>
	NRF24_write_register(0x11, 0);
 8009d86:	2100      	movs	r1, #0
 8009d88:	2011      	movs	r0, #17
 8009d8a:	f7ff fe99 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x12, 0);
 8009d8e:	2100      	movs	r1, #0
 8009d90:	2012      	movs	r0, #18
 8009d92:	f7ff fe95 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x13, 0);
 8009d96:	2100      	movs	r1, #0
 8009d98:	2013      	movs	r0, #19
 8009d9a:	f7ff fe91 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x14, 0);
 8009d9e:	2100      	movs	r1, #0
 8009da0:	2014      	movs	r0, #20
 8009da2:	f7ff fe8d 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x15, 0);
 8009da6:	2100      	movs	r1, #0
 8009da8:	2015      	movs	r0, #21
 8009daa:	f7ff fe89 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x16, 0);
 8009dae:	2100      	movs	r1, #0
 8009db0:	2016      	movs	r0, #22
 8009db2:	f7ff fe85 	bl	8009ac0 <NRF24_write_register>
	
	NRF24_ACTIVATE_cmd();
 8009db6:	f000 fb37 	bl	800a428 <NRF24_ACTIVATE_cmd>
	NRF24_write_register(0x1c, 0);
 8009dba:	2100      	movs	r1, #0
 8009dbc:	201c      	movs	r0, #28
 8009dbe:	f7ff fe7f 	bl	8009ac0 <NRF24_write_register>
	NRF24_write_register(0x1d, 0);
 8009dc2:	2100      	movs	r1, #0
 8009dc4:	201d      	movs	r0, #29
 8009dc6:	f7ff fe7b 	bl	8009ac0 <NRF24_write_register>

	printRadioSettings();
 8009dca:	f000 fb47 	bl	800a45c <printRadioSettings>

	//Initialise retries 15 and delay 1250 usec
	NRF24_setRetries(15, 15);
 8009dce:	210f      	movs	r1, #15
 8009dd0:	200f      	movs	r0, #15
 8009dd2:	f000 f941 	bl	800a058 <NRF24_setRetries>
	//Initialise PA level to max (0dB)
	NRF24_setPALevel(RF24_PA_0dB);
 8009dd6:	2003      	movs	r0, #3
 8009dd8:	f000 f9c7 	bl	800a16a <NRF24_setPALevel>
	//Initialise data rate to 1Mbps
	NRF24_setDataRate(RF24_2MBPS);
 8009ddc:	2001      	movs	r0, #1
 8009dde:	f000 f9fd 	bl	800a1dc <NRF24_setDataRate>
	//Initalise CRC length to 16-bit (2 bytes)
	NRF24_setCRCLength(RF24_CRC_16);
 8009de2:	2002      	movs	r0, #2
 8009de4:	f000 fa40 	bl	800a268 <NRF24_setCRCLength>
	//Disable dynamic payload
	NRF24_disableDynamicPayloads();
 8009de8:	f000 f992 	bl	800a110 <NRF24_disableDynamicPayloads>
	//Set payload size
	NRF24_setPayloadSize(32);
 8009dec:	2020      	movs	r0, #32
 8009dee:	f000 f963 	bl	800a0b8 <NRF24_setPayloadSize>
	
	//Reset status register
	NRF24_resetStatus();
 8009df2:	f000 fb11 	bl	800a418 <NRF24_resetStatus>
	//Initialise channel to 76
	NRF24_setChannel(76);
 8009df6:	204c      	movs	r0, #76	; 0x4c
 8009df8:	f000 f949 	bl	800a08e <NRF24_setChannel>
	//Flush buffers
	NRF24_flush_tx();
 8009dfc:	f7ff fefc 	bl	8009bf8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8009e00:	f7ff ff02 	bl	8009c08 <NRF24_flush_rx>
	
	NRF24_powerDown();
 8009e04:	f000 fa67 	bl	800a2d6 <NRF24_powerDown>
	
}
 8009e08:	bf00      	nop
 8009e0a:	3710      	adds	r7, #16
 8009e0c:	46bd      	mov	sp, r7
 8009e0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009e12:	b002      	add	sp, #8
 8009e14:	4770      	bx	lr
 8009e16:	bf00      	nop
 8009e18:	20000518 	.word	0x20000518
 8009e1c:	20000510 	.word	0x20000510
 8009e20:	20000514 	.word	0x20000514
 8009e24:	20000516 	.word	0x20000516

08009e28 <NRF24_startListening>:
//13. Listen on open pipes for reading (Must call NRF24_openReadingPipe() first)
void NRF24_startListening(void)
{
 8009e28:	b598      	push	{r3, r4, r7, lr}
 8009e2a:	af00      	add	r7, sp, #0
	//Power up and set to RX mode
	NRF24_write_register(REG_CONFIG, NRF24_read_register(REG_CONFIG) | (1UL<<1) |(1UL <<0));
 8009e2c:	2000      	movs	r0, #0
 8009e2e:	f7ff fdf1 	bl	8009a14 <NRF24_read_register>
 8009e32:	4603      	mov	r3, r0
 8009e34:	f043 0303 	orr.w	r3, r3, #3
 8009e38:	b2db      	uxtb	r3, r3
 8009e3a:	4619      	mov	r1, r3
 8009e3c:	2000      	movs	r0, #0
 8009e3e:	f7ff fe3f 	bl	8009ac0 <NRF24_write_register>
	//Restore pipe 0 address if exists
	if(pipe0_reading_address)
 8009e42:	4b0b      	ldr	r3, [pc, #44]	; (8009e70 <NRF24_startListening+0x48>)
 8009e44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8009e48:	4323      	orrs	r3, r4
 8009e4a:	d004      	beq.n	8009e56 <NRF24_startListening+0x2e>
		NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&pipe0_reading_address), 5);
 8009e4c:	2205      	movs	r2, #5
 8009e4e:	4908      	ldr	r1, [pc, #32]	; (8009e70 <NRF24_startListening+0x48>)
 8009e50:	200a      	movs	r0, #10
 8009e52:	f7ff fe57 	bl	8009b04 <NRF24_write_registerN>
	
	//Flush buffers
	NRF24_flush_tx();
 8009e56:	f7ff fecf 	bl	8009bf8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8009e5a:	f7ff fed5 	bl	8009c08 <NRF24_flush_rx>
	//Set CE HIGH to start listenning
	NRF24_ce(1);
 8009e5e:	2001      	movs	r0, #1
 8009e60:	f7ff fdbe 	bl	80099e0 <NRF24_ce>
	//Wait for 130 uSec for the radio to come on
	NRF24_DelayMicroSeconds(150);
 8009e64:	2096      	movs	r0, #150	; 0x96
 8009e66:	f7ff fd81 	bl	800996c <NRF24_DelayMicroSeconds>
}
 8009e6a:	bf00      	nop
 8009e6c:	bd98      	pop	{r3, r4, r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	20000500 	.word	0x20000500

08009e74 <NRF24_stopListening>:
//14. Stop listening (essential before any write operation)
void NRF24_stopListening(void)
{
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
	NRF24_ce(0);
 8009e78:	2000      	movs	r0, #0
 8009e7a:	f7ff fdb1 	bl	80099e0 <NRF24_ce>
	NRF24_flush_tx();
 8009e7e:	f7ff febb 	bl	8009bf8 <NRF24_flush_tx>
	NRF24_flush_rx();
 8009e82:	f7ff fec1 	bl	8009c08 <NRF24_flush_rx>
}
 8009e86:	bf00      	nop
 8009e88:	bd80      	pop	{r7, pc}
	...

08009e8c <NRF24_write>:
//15. Write(Transmit data), returns true if successfully sent
bool NRF24_write( const void* buf, uint8_t len )
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b086      	sub	sp, #24
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	460b      	mov	r3, r1
 8009e96:	70fb      	strb	r3, [r7, #3]
	bool retStatus;
	//Start writing
	NRF24_resetStatus();
 8009e98:	f000 fabe 	bl	800a418 <NRF24_resetStatus>
	NRF24_startWrite(buf,len);
 8009e9c:	78fb      	ldrb	r3, [r7, #3]
 8009e9e:	4619      	mov	r1, r3
 8009ea0:	6878      	ldr	r0, [r7, #4]
 8009ea2:	f000 fa57 	bl	800a354 <NRF24_startWrite>
	//Data monitor
  uint8_t observe_tx;
  uint8_t status;
  uint32_t sent_at = HAL_GetTick();
 8009ea6:	f7f7 ffcb 	bl	8001e40 <HAL_GetTick>
 8009eaa:	6178      	str	r0, [r7, #20]
	const uint32_t timeout = 10; //ms to wait for timeout
 8009eac:	230a      	movs	r3, #10
 8009eae:	613b      	str	r3, [r7, #16]
	do
  {
    NRF24_read_registerN(REG_OBSERVE_TX,&observe_tx,1);
 8009eb0:	f107 030d 	add.w	r3, r7, #13
 8009eb4:	2201      	movs	r2, #1
 8009eb6:	4619      	mov	r1, r3
 8009eb8:	2008      	movs	r0, #8
 8009eba:	f7ff fdd9 	bl	8009a70 <NRF24_read_registerN>
		//Get status register
		status = NRF24_get_status();
 8009ebe:	f7ff feab 	bl	8009c18 <NRF24_get_status>
 8009ec2:	4603      	mov	r3, r0
 8009ec4:	73fb      	strb	r3, [r7, #15]
  }
  while( ! ( status & ( _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) ) ) && ( HAL_GetTick() - sent_at < timeout ) );
 8009ec6:	7bfb      	ldrb	r3, [r7, #15]
 8009ec8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d107      	bne.n	8009ee0 <NRF24_write+0x54>
 8009ed0:	f7f7 ffb6 	bl	8001e40 <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	693a      	ldr	r2, [r7, #16]
 8009edc:	429a      	cmp	r2, r3
 8009ede:	d8e7      	bhi.n	8009eb0 <NRF24_write+0x24>
	
//	printConfigReg();
//	printStatusReg();
	
	bool tx_ok, tx_fail;
  NRF24_whatHappened(&tx_ok,&tx_fail, &ack_payload_available);
 8009ee0:	f107 010b 	add.w	r1, r7, #11
 8009ee4:	f107 030c 	add.w	r3, r7, #12
 8009ee8:	4a0c      	ldr	r2, [pc, #48]	; (8009f1c <NRF24_write+0x90>)
 8009eea:	4618      	mov	r0, r3
 8009eec:	f000 fa61 	bl	800a3b2 <NRF24_whatHappened>
	retStatus = tx_ok;
 8009ef0:	7b3b      	ldrb	r3, [r7, #12]
 8009ef2:	73bb      	strb	r3, [r7, #14]
	if ( ack_payload_available )
 8009ef4:	4b09      	ldr	r3, [pc, #36]	; (8009f1c <NRF24_write+0x90>)
 8009ef6:	781b      	ldrb	r3, [r3, #0]
 8009ef8:	2b00      	cmp	r3, #0
 8009efa:	d005      	beq.n	8009f08 <NRF24_write+0x7c>
  {
    ack_payload_length = NRF24_getDynamicPayloadSize();
 8009efc:	f000 f900 	bl	800a100 <NRF24_getDynamicPayloadSize>
 8009f00:	4603      	mov	r3, r0
 8009f02:	461a      	mov	r2, r3
 8009f04:	4b06      	ldr	r3, [pc, #24]	; (8009f20 <NRF24_write+0x94>)
 8009f06:	701a      	strb	r2, [r3, #0]
	}
	
	//Power down
	NRF24_available();
 8009f08:	f000 f80c 	bl	8009f24 <NRF24_available>
	NRF24_flush_tx();
 8009f0c:	f7ff fe74 	bl	8009bf8 <NRF24_flush_tx>
	return retStatus;
 8009f10:	7bbb      	ldrb	r3, [r7, #14]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	3718      	adds	r7, #24
 8009f16:	46bd      	mov	sp, r7
 8009f18:	bd80      	pop	{r7, pc}
 8009f1a:	bf00      	nop
 8009f1c:	20000508 	.word	0x20000508
 8009f20:	20000509 	.word	0x20000509

08009f24 <NRF24_available>:
//16. Check for available data to read
bool NRF24_available(void)
{
 8009f24:	b580      	push	{r7, lr}
 8009f26:	af00      	add	r7, sp, #0
	return NRF24_availablePipe(NULL);
 8009f28:	2000      	movs	r0, #0
 8009f2a:	f000 f9e3 	bl	800a2f4 <NRF24_availablePipe>
 8009f2e:	4603      	mov	r3, r0
}
 8009f30:	4618      	mov	r0, r3
 8009f32:	bd80      	pop	{r7, pc}

08009f34 <NRF24_read>:
//17. Read received data
bool NRF24_read( void* buf, uint8_t len )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]
 8009f3c:	460b      	mov	r3, r1
 8009f3e:	70fb      	strb	r3, [r7, #3]
	NRF24_read_payload( buf, len );
 8009f40:	78fb      	ldrb	r3, [r7, #3]
 8009f42:	4619      	mov	r1, r3
 8009f44:	6878      	ldr	r0, [r7, #4]
 8009f46:	f7ff fe27 	bl	8009b98 <NRF24_read_payload>
	uint8_t rxStatus = NRF24_read_register(REG_FIFO_STATUS) & _BV(BIT_RX_EMPTY);
 8009f4a:	2017      	movs	r0, #23
 8009f4c:	f7ff fd62 	bl	8009a14 <NRF24_read_register>
 8009f50:	4603      	mov	r3, r0
 8009f52:	f003 0301 	and.w	r3, r3, #1
 8009f56:	73fb      	strb	r3, [r7, #15]
	NRF24_flush_rx();
 8009f58:	f7ff fe56 	bl	8009c08 <NRF24_flush_rx>
	NRF24_getDynamicPayloadSize();
 8009f5c:	f000 f8d0 	bl	800a100 <NRF24_getDynamicPayloadSize>
	return rxStatus;
 8009f60:	7bfb      	ldrb	r3, [r7, #15]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	bf14      	ite	ne
 8009f66:	2301      	movne	r3, #1
 8009f68:	2300      	moveq	r3, #0
 8009f6a:	b2db      	uxtb	r3, r3
}
 8009f6c:	4618      	mov	r0, r3
 8009f6e:	3710      	adds	r7, #16
 8009f70:	46bd      	mov	sp, r7
 8009f72:	bd80      	pop	{r7, pc}

08009f74 <NRF24_openWritingPipe>:
//18. Open Tx pipe for writing (Cannot perform this while Listenning, has to call NRF24_stopListening)
void NRF24_openWritingPipe(uint64_t address)
{
 8009f74:	b580      	push	{r7, lr}
 8009f76:	b084      	sub	sp, #16
 8009f78:	af00      	add	r7, sp, #0
 8009f7a:	e9c7 0100 	strd	r0, r1, [r7]
  NRF24_write_registerN(REG_RX_ADDR_P0, (uint8_t *)(&address), 5);
 8009f7e:	463b      	mov	r3, r7
 8009f80:	2205      	movs	r2, #5
 8009f82:	4619      	mov	r1, r3
 8009f84:	200a      	movs	r0, #10
 8009f86:	f7ff fdbd 	bl	8009b04 <NRF24_write_registerN>
  NRF24_write_registerN(REG_TX_ADDR, (uint8_t *)(&address), 5);
 8009f8a:	463b      	mov	r3, r7
 8009f8c:	2205      	movs	r2, #5
 8009f8e:	4619      	mov	r1, r3
 8009f90:	2010      	movs	r0, #16
 8009f92:	f7ff fdb7 	bl	8009b04 <NRF24_write_registerN>
	
  const uint8_t max_payload_size = 32;
 8009f96:	2320      	movs	r3, #32
 8009f98:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RX_PW_P0,MIN(payload_size,max_payload_size));
 8009f9a:	4b07      	ldr	r3, [pc, #28]	; (8009fb8 <NRF24_openWritingPipe+0x44>)
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	7bfa      	ldrb	r2, [r7, #15]
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	bf28      	it	cs
 8009fa4:	4613      	movcs	r3, r2
 8009fa6:	b2db      	uxtb	r3, r3
 8009fa8:	4619      	mov	r1, r3
 8009faa:	2011      	movs	r0, #17
 8009fac:	f7ff fd88 	bl	8009ac0 <NRF24_write_register>
}
 8009fb0:	bf00      	nop
 8009fb2:	3710      	adds	r7, #16
 8009fb4:	46bd      	mov	sp, r7
 8009fb6:	bd80      	pop	{r7, pc}
 8009fb8:	2000050a 	.word	0x2000050a

08009fbc <NRF24_openReadingPipe>:
//19. Open reading pipe
void NRF24_openReadingPipe(uint8_t number, uint64_t address)
{
 8009fbc:	b590      	push	{r4, r7, lr}
 8009fbe:	b085      	sub	sp, #20
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	4601      	mov	r1, r0
 8009fc4:	e9c7 2300 	strd	r2, r3, [r7]
 8009fc8:	460b      	mov	r3, r1
 8009fca:	73fb      	strb	r3, [r7, #15]
  if (number == 0)
 8009fcc:	7bfb      	ldrb	r3, [r7, #15]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d104      	bne.n	8009fdc <NRF24_openReadingPipe+0x20>
    pipe0_reading_address = address;
 8009fd2:	e9d7 3400 	ldrd	r3, r4, [r7]
 8009fd6:	4a1c      	ldr	r2, [pc, #112]	; (800a048 <NRF24_openReadingPipe+0x8c>)
 8009fd8:	e9c2 3400 	strd	r3, r4, [r2]
	
  if(number <= 6)
 8009fdc:	7bfb      	ldrb	r3, [r7, #15]
 8009fde:	2b06      	cmp	r3, #6
 8009fe0:	d82d      	bhi.n	800a03e <NRF24_openReadingPipe+0x82>
  {
	if(number < 2)
 8009fe2:	7bfb      	ldrb	r3, [r7, #15]
 8009fe4:	2b01      	cmp	r3, #1
 8009fe6:	d808      	bhi.n	8009ffa <NRF24_openReadingPipe+0x3e>
	{
		//Address width is 5 bytes
		NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 5);
 8009fe8:	7bfb      	ldrb	r3, [r7, #15]
 8009fea:	4a18      	ldr	r2, [pc, #96]	; (800a04c <NRF24_openReadingPipe+0x90>)
 8009fec:	5cd3      	ldrb	r3, [r2, r3]
 8009fee:	4639      	mov	r1, r7
 8009ff0:	2205      	movs	r2, #5
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f7ff fd86 	bl	8009b04 <NRF24_write_registerN>
 8009ff8:	e007      	b.n	800a00a <NRF24_openReadingPipe+0x4e>
	}
	else
	{
		NRF24_write_registerN(NRF24_ADDR_REGS[number], (uint8_t *)(&address), 1);
 8009ffa:	7bfb      	ldrb	r3, [r7, #15]
 8009ffc:	4a13      	ldr	r2, [pc, #76]	; (800a04c <NRF24_openReadingPipe+0x90>)
 8009ffe:	5cd3      	ldrb	r3, [r2, r3]
 800a000:	4639      	mov	r1, r7
 800a002:	2201      	movs	r2, #1
 800a004:	4618      	mov	r0, r3
 800a006:	f7ff fd7d 	bl	8009b04 <NRF24_write_registerN>
	}
	//Write payload size
	NRF24_write_register(RF24_RX_PW_PIPE[number],payload_size);
 800a00a:	7bfb      	ldrb	r3, [r7, #15]
 800a00c:	4a10      	ldr	r2, [pc, #64]	; (800a050 <NRF24_openReadingPipe+0x94>)
 800a00e:	5cd2      	ldrb	r2, [r2, r3]
 800a010:	4b10      	ldr	r3, [pc, #64]	; (800a054 <NRF24_openReadingPipe+0x98>)
 800a012:	781b      	ldrb	r3, [r3, #0]
 800a014:	4619      	mov	r1, r3
 800a016:	4610      	mov	r0, r2
 800a018:	f7ff fd52 	bl	8009ac0 <NRF24_write_register>
	//Enable pipe
	NRF24_write_register(REG_EN_RXADDR, NRF24_read_register(REG_EN_RXADDR) | _BV(number));
 800a01c:	2002      	movs	r0, #2
 800a01e:	f7ff fcf9 	bl	8009a14 <NRF24_read_register>
 800a022:	4603      	mov	r3, r0
 800a024:	b25a      	sxtb	r2, r3
 800a026:	7bfb      	ldrb	r3, [r7, #15]
 800a028:	2101      	movs	r1, #1
 800a02a:	fa01 f303 	lsl.w	r3, r1, r3
 800a02e:	b25b      	sxtb	r3, r3
 800a030:	4313      	orrs	r3, r2
 800a032:	b25b      	sxtb	r3, r3
 800a034:	b2db      	uxtb	r3, r3
 800a036:	4619      	mov	r1, r3
 800a038:	2002      	movs	r0, #2
 800a03a:	f7ff fd41 	bl	8009ac0 <NRF24_write_register>
  }
	
}
 800a03e:	bf00      	nop
 800a040:	3714      	adds	r7, #20
 800a042:	46bd      	mov	sp, r7
 800a044:	bd90      	pop	{r4, r7, pc}
 800a046:	bf00      	nop
 800a048:	20000500 	.word	0x20000500
 800a04c:	0800c9c4 	.word	0x0800c9c4
 800a050:	0800c9cc 	.word	0x0800c9cc
 800a054:	2000050a 	.word	0x2000050a

0800a058 <NRF24_setRetries>:
//20 set transmit retries (rf24_Retries_e) and delay
void NRF24_setRetries(uint8_t delay, uint8_t count)
{
 800a058:	b580      	push	{r7, lr}
 800a05a:	b082      	sub	sp, #8
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	4603      	mov	r3, r0
 800a060:	460a      	mov	r2, r1
 800a062:	71fb      	strb	r3, [r7, #7]
 800a064:	4613      	mov	r3, r2
 800a066:	71bb      	strb	r3, [r7, #6]
  NRF24_write_register(REG_SETUP_RETR,(delay&0xf)<<BIT_ARD | (count&0xf)<<BIT_ARC);
 800a068:	79fb      	ldrb	r3, [r7, #7]
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	b25a      	sxtb	r2, r3
 800a06e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800a072:	f003 030f 	and.w	r3, r3, #15
 800a076:	b25b      	sxtb	r3, r3
 800a078:	4313      	orrs	r3, r2
 800a07a:	b25b      	sxtb	r3, r3
 800a07c:	b2db      	uxtb	r3, r3
 800a07e:	4619      	mov	r1, r3
 800a080:	2004      	movs	r0, #4
 800a082:	f7ff fd1d 	bl	8009ac0 <NRF24_write_register>
}
 800a086:	bf00      	nop
 800a088:	3708      	adds	r7, #8
 800a08a:	46bd      	mov	sp, r7
 800a08c:	bd80      	pop	{r7, pc}

0800a08e <NRF24_setChannel>:

//21. Set RF channel frequency
void NRF24_setChannel(uint8_t channel)
{
 800a08e:	b580      	push	{r7, lr}
 800a090:	b084      	sub	sp, #16
 800a092:	af00      	add	r7, sp, #0
 800a094:	4603      	mov	r3, r0
 800a096:	71fb      	strb	r3, [r7, #7]
  const uint8_t max_channel = 127;
 800a098:	237f      	movs	r3, #127	; 0x7f
 800a09a:	73fb      	strb	r3, [r7, #15]
  NRF24_write_register(REG_RF_CH,MIN(channel,max_channel));
 800a09c:	7bfa      	ldrb	r2, [r7, #15]
 800a09e:	79fb      	ldrb	r3, [r7, #7]
 800a0a0:	4293      	cmp	r3, r2
 800a0a2:	bf28      	it	cs
 800a0a4:	4613      	movcs	r3, r2
 800a0a6:	b2db      	uxtb	r3, r3
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	2005      	movs	r0, #5
 800a0ac:	f7ff fd08 	bl	8009ac0 <NRF24_write_register>
}
 800a0b0:	bf00      	nop
 800a0b2:	3710      	adds	r7, #16
 800a0b4:	46bd      	mov	sp, r7
 800a0b6:	bd80      	pop	{r7, pc}

0800a0b8 <NRF24_setPayloadSize>:
//22. Set payload size
void NRF24_setPayloadSize(uint8_t size)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b085      	sub	sp, #20
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	4603      	mov	r3, r0
 800a0c0:	71fb      	strb	r3, [r7, #7]
  const uint8_t max_payload_size = 32;
 800a0c2:	2320      	movs	r3, #32
 800a0c4:	73fb      	strb	r3, [r7, #15]
  payload_size = MIN(size,max_payload_size);
 800a0c6:	7bfa      	ldrb	r2, [r7, #15]
 800a0c8:	79fb      	ldrb	r3, [r7, #7]
 800a0ca:	4293      	cmp	r3, r2
 800a0cc:	bf28      	it	cs
 800a0ce:	4613      	movcs	r3, r2
 800a0d0:	b2da      	uxtb	r2, r3
 800a0d2:	4b04      	ldr	r3, [pc, #16]	; (800a0e4 <NRF24_setPayloadSize+0x2c>)
 800a0d4:	701a      	strb	r2, [r3, #0]
}
 800a0d6:	bf00      	nop
 800a0d8:	3714      	adds	r7, #20
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0e0:	4770      	bx	lr
 800a0e2:	bf00      	nop
 800a0e4:	2000050a 	.word	0x2000050a

0800a0e8 <NRF24_getPayloadSize>:
//23. Get payload size
uint8_t NRF24_getPayloadSize(void)
{
 800a0e8:	b480      	push	{r7}
 800a0ea:	af00      	add	r7, sp, #0
  return payload_size;
 800a0ec:	4b03      	ldr	r3, [pc, #12]	; (800a0fc <NRF24_getPayloadSize+0x14>)
 800a0ee:	781b      	ldrb	r3, [r3, #0]
}
 800a0f0:	4618      	mov	r0, r3
 800a0f2:	46bd      	mov	sp, r7
 800a0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f8:	4770      	bx	lr
 800a0fa:	bf00      	nop
 800a0fc:	2000050a 	.word	0x2000050a

0800a100 <NRF24_getDynamicPayloadSize>:
//24. Get dynamic payload size, of latest packet received
uint8_t NRF24_getDynamicPayloadSize(void)
{
 800a100:	b580      	push	{r7, lr}
 800a102:	af00      	add	r7, sp, #0
  return NRF24_read_register(CMD_R_RX_PL_WID);
 800a104:	2060      	movs	r0, #96	; 0x60
 800a106:	f7ff fc85 	bl	8009a14 <NRF24_read_register>
 800a10a:	4603      	mov	r3, r0
}
 800a10c:	4618      	mov	r0, r3
 800a10e:	bd80      	pop	{r7, pc}

0800a110 <NRF24_disableDynamicPayloads>:
	NRF24_write_register(REG_DYNPD,NRF24_read_register(REG_DYNPD) | _BV(BIT_DPL_P5) | _BV(BIT_DPL_P4) | _BV(BIT_DPL_P3) | _BV(BIT_DPL_P2) | _BV(BIT_DPL_P1) | _BV(BIT_DPL_P0));
  dynamic_payloads_enabled = true;
	
}
void NRF24_disableDynamicPayloads(void)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_FEATURE,NRF24_read_register(REG_FEATURE) &  ~(_BV(BIT_EN_DPL)) );
 800a114:	201d      	movs	r0, #29
 800a116:	f7ff fc7d 	bl	8009a14 <NRF24_read_register>
 800a11a:	4603      	mov	r3, r0
 800a11c:	f023 0304 	bic.w	r3, r3, #4
 800a120:	b2db      	uxtb	r3, r3
 800a122:	4619      	mov	r1, r3
 800a124:	201d      	movs	r0, #29
 800a126:	f7ff fccb 	bl	8009ac0 <NRF24_write_register>
	//Disable for all pipes 
	NRF24_write_register(REG_DYNPD,0);
 800a12a:	2100      	movs	r1, #0
 800a12c:	201c      	movs	r0, #28
 800a12e:	f7ff fcc7 	bl	8009ac0 <NRF24_write_register>
	dynamic_payloads_enabled = false;
 800a132:	4b02      	ldr	r3, [pc, #8]	; (800a13c <NRF24_disableDynamicPayloads+0x2c>)
 800a134:	2200      	movs	r2, #0
 800a136:	701a      	strb	r2, [r3, #0]
}
 800a138:	bf00      	nop
 800a13a:	bd80      	pop	{r7, pc}
 800a13c:	2000050b 	.word	0x2000050b

0800a140 <NRF24_setAutoAck>:
{
	return p_variant;
}
//28. Set Auto Ack for all
void NRF24_setAutoAck(bool enable)
{
 800a140:	b580      	push	{r7, lr}
 800a142:	b082      	sub	sp, #8
 800a144:	af00      	add	r7, sp, #0
 800a146:	4603      	mov	r3, r0
 800a148:	71fb      	strb	r3, [r7, #7]
  if ( enable )
 800a14a:	79fb      	ldrb	r3, [r7, #7]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d004      	beq.n	800a15a <NRF24_setAutoAck+0x1a>
    NRF24_write_register(REG_EN_AA, 0x3F);
 800a150:	213f      	movs	r1, #63	; 0x3f
 800a152:	2001      	movs	r0, #1
 800a154:	f7ff fcb4 	bl	8009ac0 <NRF24_write_register>
  else
    NRF24_write_register(REG_EN_AA, 0x00);
}
 800a158:	e003      	b.n	800a162 <NRF24_setAutoAck+0x22>
    NRF24_write_register(REG_EN_AA, 0x00);
 800a15a:	2100      	movs	r1, #0
 800a15c:	2001      	movs	r0, #1
 800a15e:	f7ff fcaf 	bl	8009ac0 <NRF24_write_register>
}
 800a162:	bf00      	nop
 800a164:	3708      	adds	r7, #8
 800a166:	46bd      	mov	sp, r7
 800a168:	bd80      	pop	{r7, pc}

0800a16a <NRF24_setPALevel>:
    NRF24_write_register( REG_EN_AA, en_aa ) ;
  }
}
//30. Set transmit power level
void NRF24_setPALevel( rf24_pa_dbm_e level )
{
 800a16a:	b580      	push	{r7, lr}
 800a16c:	b084      	sub	sp, #16
 800a16e:	af00      	add	r7, sp, #0
 800a170:	4603      	mov	r3, r0
 800a172:	71fb      	strb	r3, [r7, #7]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800a174:	2006      	movs	r0, #6
 800a176:	f7ff fc4d 	bl	8009a14 <NRF24_read_register>
 800a17a:	4603      	mov	r3, r0
 800a17c:	73fb      	strb	r3, [r7, #15]
  setup &= ~(_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800a17e:	7bfb      	ldrb	r3, [r7, #15]
 800a180:	f023 0306 	bic.w	r3, r3, #6
 800a184:	73fb      	strb	r3, [r7, #15]

  // switch uses RAM (evil!)
  if ( level == RF24_PA_0dB)
 800a186:	79fb      	ldrb	r3, [r7, #7]
 800a188:	2b03      	cmp	r3, #3
 800a18a:	d104      	bne.n	800a196 <NRF24_setPALevel+0x2c>
  {
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800a18c:	7bfb      	ldrb	r3, [r7, #15]
 800a18e:	f043 0306 	orr.w	r3, r3, #6
 800a192:	73fb      	strb	r3, [r7, #15]
 800a194:	e019      	b.n	800a1ca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m6dB )
 800a196:	79fb      	ldrb	r3, [r7, #7]
 800a198:	2b02      	cmp	r3, #2
 800a19a:	d104      	bne.n	800a1a6 <NRF24_setPALevel+0x3c>
  {
    setup |= _BV(RF_PWR_HIGH) ;
 800a19c:	7bfb      	ldrb	r3, [r7, #15]
 800a19e:	f043 0304 	orr.w	r3, r3, #4
 800a1a2:	73fb      	strb	r3, [r7, #15]
 800a1a4:	e011      	b.n	800a1ca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m12dB )
 800a1a6:	79fb      	ldrb	r3, [r7, #7]
 800a1a8:	2b01      	cmp	r3, #1
 800a1aa:	d104      	bne.n	800a1b6 <NRF24_setPALevel+0x4c>
  {
    setup |= _BV(RF_PWR_LOW);
 800a1ac:	7bfb      	ldrb	r3, [r7, #15]
 800a1ae:	f043 0302 	orr.w	r3, r3, #2
 800a1b2:	73fb      	strb	r3, [r7, #15]
 800a1b4:	e009      	b.n	800a1ca <NRF24_setPALevel+0x60>
  }
  else if ( level == RF24_PA_m18dB )
 800a1b6:	79fb      	ldrb	r3, [r7, #7]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d006      	beq.n	800a1ca <NRF24_setPALevel+0x60>
  {
    // nothing
  }
  else if ( level == RF24_PA_ERROR )
 800a1bc:	79fb      	ldrb	r3, [r7, #7]
 800a1be:	2b04      	cmp	r3, #4
 800a1c0:	d103      	bne.n	800a1ca <NRF24_setPALevel+0x60>
  {
    // On error, go to maximum PA
    setup |= (_BV(RF_PWR_LOW) | _BV(RF_PWR_HIGH)) ;
 800a1c2:	7bfb      	ldrb	r3, [r7, #15]
 800a1c4:	f043 0306 	orr.w	r3, r3, #6
 800a1c8:	73fb      	strb	r3, [r7, #15]
  }

  NRF24_write_register( REG_RF_SETUP, setup ) ;
 800a1ca:	7bfb      	ldrb	r3, [r7, #15]
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	2006      	movs	r0, #6
 800a1d0:	f7ff fc76 	bl	8009ac0 <NRF24_write_register>
}
 800a1d4:	bf00      	nop
 800a1d6:	3710      	adds	r7, #16
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <NRF24_setDataRate>:

  return result ;
}
//32. Set data rate (250 Kbps, 1Mbps, 2Mbps)
bool NRF24_setDataRate(rf24_datarate_e speed)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	4603      	mov	r3, r0
 800a1e4:	71fb      	strb	r3, [r7, #7]
  bool result = false;
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	73fb      	strb	r3, [r7, #15]
  uint8_t setup = NRF24_read_register(REG_RF_SETUP) ;
 800a1ea:	2006      	movs	r0, #6
 800a1ec:	f7ff fc12 	bl	8009a14 <NRF24_read_register>
 800a1f0:	4603      	mov	r3, r0
 800a1f2:	73bb      	strb	r3, [r7, #14]

  // HIGH and LOW '00' is 1Mbs - our default
  wide_band = false ;
 800a1f4:	4b1b      	ldr	r3, [pc, #108]	; (800a264 <NRF24_setDataRate+0x88>)
 800a1f6:	2200      	movs	r2, #0
 800a1f8:	701a      	strb	r2, [r3, #0]
  setup &= ~(_BV(RF_DR_LOW) | _BV(RF_DR_HIGH)) ;
 800a1fa:	7bbb      	ldrb	r3, [r7, #14]
 800a1fc:	f023 0328 	bic.w	r3, r3, #40	; 0x28
 800a200:	73bb      	strb	r3, [r7, #14]
  if( speed == RF24_250KBPS )
 800a202:	79fb      	ldrb	r3, [r7, #7]
 800a204:	2b02      	cmp	r3, #2
 800a206:	d107      	bne.n	800a218 <NRF24_setDataRate+0x3c>
  {
    // Must set the RF_DR_LOW to 1; RF_DR_HIGH (used to be RF_DR) is already 0
    // Making it '10'.
    wide_band = false ;
 800a208:	4b16      	ldr	r3, [pc, #88]	; (800a264 <NRF24_setDataRate+0x88>)
 800a20a:	2200      	movs	r2, #0
 800a20c:	701a      	strb	r2, [r3, #0]
    setup |= _BV( RF_DR_LOW ) ;
 800a20e:	7bbb      	ldrb	r3, [r7, #14]
 800a210:	f043 0320 	orr.w	r3, r3, #32
 800a214:	73bb      	strb	r3, [r7, #14]
 800a216:	e00d      	b.n	800a234 <NRF24_setDataRate+0x58>
  }
  else
  {
    // Set 2Mbs, RF_DR (RF_DR_HIGH) is set 1
    // Making it '01'
    if ( speed == RF24_2MBPS )
 800a218:	79fb      	ldrb	r3, [r7, #7]
 800a21a:	2b01      	cmp	r3, #1
 800a21c:	d107      	bne.n	800a22e <NRF24_setDataRate+0x52>
    {
      wide_band = true ;
 800a21e:	4b11      	ldr	r3, [pc, #68]	; (800a264 <NRF24_setDataRate+0x88>)
 800a220:	2201      	movs	r2, #1
 800a222:	701a      	strb	r2, [r3, #0]
      setup |= _BV(RF_DR_HIGH);
 800a224:	7bbb      	ldrb	r3, [r7, #14]
 800a226:	f043 0308 	orr.w	r3, r3, #8
 800a22a:	73bb      	strb	r3, [r7, #14]
 800a22c:	e002      	b.n	800a234 <NRF24_setDataRate+0x58>
    }
    else
    {
      // 1Mbs
      wide_band = false ;
 800a22e:	4b0d      	ldr	r3, [pc, #52]	; (800a264 <NRF24_setDataRate+0x88>)
 800a230:	2200      	movs	r2, #0
 800a232:	701a      	strb	r2, [r3, #0]
    }
  }
  NRF24_write_register(REG_RF_SETUP,setup);
 800a234:	7bbb      	ldrb	r3, [r7, #14]
 800a236:	4619      	mov	r1, r3
 800a238:	2006      	movs	r0, #6
 800a23a:	f7ff fc41 	bl	8009ac0 <NRF24_write_register>

  // Verify our result
  if ( NRF24_read_register(REG_RF_SETUP) == setup )
 800a23e:	2006      	movs	r0, #6
 800a240:	f7ff fbe8 	bl	8009a14 <NRF24_read_register>
 800a244:	4603      	mov	r3, r0
 800a246:	461a      	mov	r2, r3
 800a248:	7bbb      	ldrb	r3, [r7, #14]
 800a24a:	4293      	cmp	r3, r2
 800a24c:	d102      	bne.n	800a254 <NRF24_setDataRate+0x78>
  {
    result = true;
 800a24e:	2301      	movs	r3, #1
 800a250:	73fb      	strb	r3, [r7, #15]
 800a252:	e002      	b.n	800a25a <NRF24_setDataRate+0x7e>
  }
  else
  {
    wide_band = false;
 800a254:	4b03      	ldr	r3, [pc, #12]	; (800a264 <NRF24_setDataRate+0x88>)
 800a256:	2200      	movs	r2, #0
 800a258:	701a      	strb	r2, [r3, #0]
  }

  return result;
 800a25a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3710      	adds	r7, #16
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}
 800a264:	2000050c 	.word	0x2000050c

0800a268 <NRF24_setCRCLength>:
  }
  return result ;
}
//34. Set crc length (disable, 8-bits or 16-bits)
void NRF24_setCRCLength(rf24_crclength_e length)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b084      	sub	sp, #16
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	4603      	mov	r3, r0
 800a270:	71fb      	strb	r3, [r7, #7]
	uint8_t config = NRF24_read_register(REG_CONFIG) & ~( _BV(BIT_CRCO) | _BV(BIT_EN_CRC)) ;
 800a272:	2000      	movs	r0, #0
 800a274:	f7ff fbce 	bl	8009a14 <NRF24_read_register>
 800a278:	4603      	mov	r3, r0
 800a27a:	f023 030c 	bic.w	r3, r3, #12
 800a27e:	73fb      	strb	r3, [r7, #15]
  
  // switch uses RAM
  if ( length == RF24_CRC_DISABLED )
 800a280:	79fb      	ldrb	r3, [r7, #7]
 800a282:	2b00      	cmp	r3, #0
 800a284:	d00f      	beq.n	800a2a6 <NRF24_setCRCLength+0x3e>
  {
    // Do nothing, we turned it off above. 
  }
  else if ( length == RF24_CRC_8 )
 800a286:	79fb      	ldrb	r3, [r7, #7]
 800a288:	2b01      	cmp	r3, #1
 800a28a:	d104      	bne.n	800a296 <NRF24_setCRCLength+0x2e>
  {
    config |= _BV(BIT_EN_CRC);
 800a28c:	7bfb      	ldrb	r3, [r7, #15]
 800a28e:	f043 0308 	orr.w	r3, r3, #8
 800a292:	73fb      	strb	r3, [r7, #15]
 800a294:	e007      	b.n	800a2a6 <NRF24_setCRCLength+0x3e>
  }
  else
  {
    config |= _BV(BIT_EN_CRC);
 800a296:	7bfb      	ldrb	r3, [r7, #15]
 800a298:	f043 0308 	orr.w	r3, r3, #8
 800a29c:	73fb      	strb	r3, [r7, #15]
    config |= _BV( BIT_CRCO );
 800a29e:	7bfb      	ldrb	r3, [r7, #15]
 800a2a0:	f043 0304 	orr.w	r3, r3, #4
 800a2a4:	73fb      	strb	r3, [r7, #15]
  }
  NRF24_write_register( REG_CONFIG, config );
 800a2a6:	7bfb      	ldrb	r3, [r7, #15]
 800a2a8:	4619      	mov	r1, r3
 800a2aa:	2000      	movs	r0, #0
 800a2ac:	f7ff fc08 	bl	8009ac0 <NRF24_write_register>
}
 800a2b0:	bf00      	nop
 800a2b2:	3710      	adds	r7, #16
 800a2b4:	46bd      	mov	sp, r7
 800a2b6:	bd80      	pop	{r7, pc}

0800a2b8 <NRF24_powerUp>:
	uint8_t disable = NRF24_read_register(REG_CONFIG) & ~_BV(BIT_EN_CRC) ;
  NRF24_write_register( REG_CONFIG, disable ) ;
}
//37. power up
void NRF24_powerUp(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP));
 800a2bc:	2000      	movs	r0, #0
 800a2be:	f7ff fba9 	bl	8009a14 <NRF24_read_register>
 800a2c2:	4603      	mov	r3, r0
 800a2c4:	f043 0302 	orr.w	r3, r3, #2
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	4619      	mov	r1, r3
 800a2cc:	2000      	movs	r0, #0
 800a2ce:	f7ff fbf7 	bl	8009ac0 <NRF24_write_register>
}
 800a2d2:	bf00      	nop
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <NRF24_powerDown>:
//38. power down
void NRF24_powerDown(void)
{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_CONFIG,NRF24_read_register(REG_CONFIG) & ~_BV(BIT_PWR_UP));
 800a2da:	2000      	movs	r0, #0
 800a2dc:	f7ff fb9a 	bl	8009a14 <NRF24_read_register>
 800a2e0:	4603      	mov	r3, r0
 800a2e2:	f023 0302 	bic.w	r3, r3, #2
 800a2e6:	b2db      	uxtb	r3, r3
 800a2e8:	4619      	mov	r1, r3
 800a2ea:	2000      	movs	r0, #0
 800a2ec:	f7ff fbe8 	bl	8009ac0 <NRF24_write_register>
}
 800a2f0:	bf00      	nop
 800a2f2:	bd80      	pop	{r7, pc}

0800a2f4 <NRF24_availablePipe>:
//39. Check if data are available and on which pipe (Use this for multiple rx pipes)
bool NRF24_availablePipe(uint8_t* pipe_num)
{
 800a2f4:	b580      	push	{r7, lr}
 800a2f6:	b084      	sub	sp, #16
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
	uint8_t status = NRF24_get_status();
 800a2fc:	f7ff fc8c 	bl	8009c18 <NRF24_get_status>
 800a300:	4603      	mov	r3, r0
 800a302:	73fb      	strb	r3, [r7, #15]

  bool result = ( status & _BV(BIT_RX_DR) );
 800a304:	7bfb      	ldrb	r3, [r7, #15]
 800a306:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	bf14      	ite	ne
 800a30e:	2301      	movne	r3, #1
 800a310:	2300      	moveq	r3, #0
 800a312:	73bb      	strb	r3, [r7, #14]

  if (result)
 800a314:	7bbb      	ldrb	r3, [r7, #14]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d017      	beq.n	800a34a <NRF24_availablePipe+0x56>
  {
    // If the caller wants the pipe number, include that
    if ( pipe_num )
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d007      	beq.n	800a330 <NRF24_availablePipe+0x3c>
      *pipe_num = ( status >> BIT_RX_P_NO ) & 0x7;
 800a320:	7bfb      	ldrb	r3, [r7, #15]
 800a322:	085b      	lsrs	r3, r3, #1
 800a324:	b2db      	uxtb	r3, r3
 800a326:	f003 0307 	and.w	r3, r3, #7
 800a32a:	b2da      	uxtb	r2, r3
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	701a      	strb	r2, [r3, #0]

    // Clear the status bit
    NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) );
 800a330:	2140      	movs	r1, #64	; 0x40
 800a332:	2007      	movs	r0, #7
 800a334:	f7ff fbc4 	bl	8009ac0 <NRF24_write_register>

    // Handle ack payload receipt
    if ( status & _BV(BIT_TX_DS) )
 800a338:	7bfb      	ldrb	r3, [r7, #15]
 800a33a:	f003 0320 	and.w	r3, r3, #32
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d003      	beq.n	800a34a <NRF24_availablePipe+0x56>
    {
      NRF24_write_register(REG_STATUS,_BV(BIT_TX_DS));
 800a342:	2120      	movs	r1, #32
 800a344:	2007      	movs	r0, #7
 800a346:	f7ff fbbb 	bl	8009ac0 <NRF24_write_register>
    }
  }
  return result;
 800a34a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a34c:	4618      	mov	r0, r3
 800a34e:	3710      	adds	r7, #16
 800a350:	46bd      	mov	sp, r7
 800a352:	bd80      	pop	{r7, pc}

0800a354 <NRF24_startWrite>:
//40. Start write (for IRQ mode)
void NRF24_startWrite( const void* buf, uint8_t len )
{
 800a354:	b580      	push	{r7, lr}
 800a356:	b082      	sub	sp, #8
 800a358:	af00      	add	r7, sp, #0
 800a35a:	6078      	str	r0, [r7, #4]
 800a35c:	460b      	mov	r3, r1
 800a35e:	70fb      	strb	r3, [r7, #3]
  // Transmitter power-up
  NRF24_ce(0);
 800a360:	2000      	movs	r0, #0
 800a362:	f7ff fb3d 	bl	80099e0 <NRF24_ce>
  NRF24_write_register(REG_CONFIG, ( NRF24_read_register(REG_CONFIG) | _BV(BIT_PWR_UP) ) & ~_BV(BIT_PRIM_RX) );
 800a366:	2000      	movs	r0, #0
 800a368:	f7ff fb54 	bl	8009a14 <NRF24_read_register>
 800a36c:	4603      	mov	r3, r0
 800a36e:	f043 0302 	orr.w	r3, r3, #2
 800a372:	b2db      	uxtb	r3, r3
 800a374:	f023 0301 	bic.w	r3, r3, #1
 800a378:	b2db      	uxtb	r3, r3
 800a37a:	4619      	mov	r1, r3
 800a37c:	2000      	movs	r0, #0
 800a37e:	f7ff fb9f 	bl	8009ac0 <NRF24_write_register>
  NRF24_ce(1);
 800a382:	2001      	movs	r0, #1
 800a384:	f7ff fb2c 	bl	80099e0 <NRF24_ce>
  NRF24_DelayMicroSeconds(150);
 800a388:	2096      	movs	r0, #150	; 0x96
 800a38a:	f7ff faef 	bl	800996c <NRF24_DelayMicroSeconds>

  // Send the payload
  NRF24_write_payload( buf, len );
 800a38e:	78fb      	ldrb	r3, [r7, #3]
 800a390:	4619      	mov	r1, r3
 800a392:	6878      	ldr	r0, [r7, #4]
 800a394:	f7ff fbde 	bl	8009b54 <NRF24_write_payload>

  // Enable Tx for 15usec
  NRF24_ce(1);
 800a398:	2001      	movs	r0, #1
 800a39a:	f7ff fb21 	bl	80099e0 <NRF24_ce>
  NRF24_DelayMicroSeconds(15);
 800a39e:	200f      	movs	r0, #15
 800a3a0:	f7ff fae4 	bl	800996c <NRF24_DelayMicroSeconds>
  NRF24_ce(0);
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	f7ff fb1b 	bl	80099e0 <NRF24_ce>
}
 800a3aa:	bf00      	nop
 800a3ac:	3708      	adds	r7, #8
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}

0800a3b2 <NRF24_whatHappened>:
  ack_payload_available = false;
  return result;
}
//43. Check interrupt flags
void NRF24_whatHappened(bool *tx_ok,bool *tx_fail,bool *rx_ready)
{
 800a3b2:	b580      	push	{r7, lr}
 800a3b4:	b086      	sub	sp, #24
 800a3b6:	af00      	add	r7, sp, #0
 800a3b8:	60f8      	str	r0, [r7, #12]
 800a3ba:	60b9      	str	r1, [r7, #8]
 800a3bc:	607a      	str	r2, [r7, #4]
	uint8_t status = NRF24_get_status();
 800a3be:	f7ff fc2b 	bl	8009c18 <NRF24_get_status>
 800a3c2:	4603      	mov	r3, r0
 800a3c4:	75fb      	strb	r3, [r7, #23]
	*tx_ok = 0;
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	2200      	movs	r2, #0
 800a3ca:	701a      	strb	r2, [r3, #0]
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800a3cc:	2170      	movs	r1, #112	; 0x70
 800a3ce:	2007      	movs	r0, #7
 800a3d0:	f7ff fb76 	bl	8009ac0 <NRF24_write_register>
  // Report to the user what happened
  *tx_ok = status & _BV(BIT_TX_DS);
 800a3d4:	7dfb      	ldrb	r3, [r7, #23]
 800a3d6:	f003 0320 	and.w	r3, r3, #32
 800a3da:	2b00      	cmp	r3, #0
 800a3dc:	bf14      	ite	ne
 800a3de:	2301      	movne	r3, #1
 800a3e0:	2300      	moveq	r3, #0
 800a3e2:	b2da      	uxtb	r2, r3
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	701a      	strb	r2, [r3, #0]
  *tx_fail = status & _BV(BIT_MAX_RT);
 800a3e8:	7dfb      	ldrb	r3, [r7, #23]
 800a3ea:	f003 0310 	and.w	r3, r3, #16
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	bf14      	ite	ne
 800a3f2:	2301      	movne	r3, #1
 800a3f4:	2300      	moveq	r3, #0
 800a3f6:	b2da      	uxtb	r2, r3
 800a3f8:	68bb      	ldr	r3, [r7, #8]
 800a3fa:	701a      	strb	r2, [r3, #0]
  *rx_ready = status & _BV(BIT_RX_DR);
 800a3fc:	7dfb      	ldrb	r3, [r7, #23]
 800a3fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a402:	2b00      	cmp	r3, #0
 800a404:	bf14      	ite	ne
 800a406:	2301      	movne	r3, #1
 800a408:	2300      	moveq	r3, #0
 800a40a:	b2da      	uxtb	r2, r3
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	701a      	strb	r2, [r3, #0]
}
 800a410:	bf00      	nop
 800a412:	3718      	adds	r7, #24
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <NRF24_resetStatus>:
	return NRF24_read_register(REG_RPD) & 1;
}

//46. Reset Status
void NRF24_resetStatus(void)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	af00      	add	r7, sp, #0
	NRF24_write_register(REG_STATUS,_BV(BIT_RX_DR) | _BV(BIT_TX_DS) | _BV(BIT_MAX_RT) );
 800a41c:	2170      	movs	r1, #112	; 0x70
 800a41e:	2007      	movs	r0, #7
 800a420:	f7ff fb4e 	bl	8009ac0 <NRF24_write_register>
}
 800a424:	bf00      	nop
 800a426:	bd80      	pop	{r7, pc}

0800a428 <NRF24_ACTIVATE_cmd>:

//47. ACTIVATE cmd
void NRF24_ACTIVATE_cmd(void)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b082      	sub	sp, #8
 800a42c:	af00      	add	r7, sp, #0
	uint8_t cmdRxBuf[2];
	//Read data from Rx payload buffer
	NRF24_csn(0);
 800a42e:	2000      	movs	r0, #0
 800a430:	f7ff fabc 	bl	80099ac <NRF24_csn>
	cmdRxBuf[0] = CMD_ACTIVATE;
 800a434:	2350      	movs	r3, #80	; 0x50
 800a436:	713b      	strb	r3, [r7, #4]
	cmdRxBuf[1] = 0x73;
 800a438:	2373      	movs	r3, #115	; 0x73
 800a43a:	717b      	strb	r3, [r7, #5]
	HAL_SPI_Transmit(&nrf24_hspi, cmdRxBuf, 2, 100);
 800a43c:	1d39      	adds	r1, r7, #4
 800a43e:	2364      	movs	r3, #100	; 0x64
 800a440:	2202      	movs	r2, #2
 800a442:	4805      	ldr	r0, [pc, #20]	; (800a458 <NRF24_ACTIVATE_cmd+0x30>)
 800a444:	f7fc fbb2 	bl	8006bac <HAL_SPI_Transmit>
	NRF24_csn(1);
 800a448:	2001      	movs	r0, #1
 800a44a:	f7ff faaf 	bl	80099ac <NRF24_csn>
}
 800a44e:	bf00      	nop
 800a450:	3708      	adds	r7, #8
 800a452:	46bd      	mov	sp, r7
 800a454:	bd80      	pop	{r7, pc}
 800a456:	bf00      	nop
 800a458:	20000518 	.word	0x20000518

0800a45c <printRadioSettings>:
{
	return ack_payload_length;
}

void printRadioSettings(void)
{
 800a45c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a45e:	b0a1      	sub	sp, #132	; 0x84
 800a460:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800a462:	f107 0308 	add.w	r3, r7, #8
 800a466:	4abb      	ldr	r2, [pc, #748]	; (800a754 <printRadioSettings+0x2f8>)
 800a468:	461c      	mov	r4, r3
 800a46a:	4615      	mov	r5, r2
 800a46c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a46e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a470:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a472:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a478:	682b      	ldr	r3, [r5, #0]
 800a47a:	461a      	mov	r2, r3
 800a47c:	8022      	strh	r2, [r4, #0]
 800a47e:	3402      	adds	r4, #2
 800a480:	0c1b      	lsrs	r3, r3, #16
 800a482:	7023      	strb	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800a484:	f107 0308 	add.w	r3, r7, #8
 800a488:	4618      	mov	r0, r3
 800a48a:	f7ff fa3d 	bl	8009908 <Print_Debug_Info_UART>
	//a) Get CRC settings - Config Register
	reg8Val = NRF24_read_register(0x00);
 800a48e:	2000      	movs	r0, #0
 800a490:	f7ff fac0 	bl	8009a14 <NRF24_read_register>
 800a494:	4603      	mov	r3, r0
 800a496:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800a49a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a49e:	f003 0308 	and.w	r3, r3, #8
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d020      	beq.n	800a4e8 <printRadioSettings+0x8c>
	{
		if(reg8Val & (1 << 2)) sprintf(uartTxBuf, "CRC:\r\n		Enabled, 2 Bytes \r\n");
 800a4a6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a4aa:	f003 0304 	and.w	r3, r3, #4
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d00b      	beq.n	800a4ca <printRadioSettings+0x6e>
 800a4b2:	f107 0308 	add.w	r3, r7, #8
 800a4b6:	4aa8      	ldr	r2, [pc, #672]	; (800a758 <printRadioSettings+0x2fc>)
 800a4b8:	461c      	mov	r4, r3
 800a4ba:	4615      	mov	r5, r2
 800a4bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4c0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4c4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800a4c8:	e017      	b.n	800a4fa <printRadioSettings+0x9e>
		else sprintf(uartTxBuf, "CRC:\r\n		Enabled, 1 Byte \r\n");	
 800a4ca:	f107 0308 	add.w	r3, r7, #8
 800a4ce:	4aa3      	ldr	r2, [pc, #652]	; (800a75c <printRadioSettings+0x300>)
 800a4d0:	461c      	mov	r4, r3
 800a4d2:	4615      	mov	r5, r2
 800a4d4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4d6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4d8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4dc:	c403      	stmia	r4!, {r0, r1}
 800a4de:	8022      	strh	r2, [r4, #0]
 800a4e0:	3402      	adds	r4, #2
 800a4e2:	0c13      	lsrs	r3, r2, #16
 800a4e4:	7023      	strb	r3, [r4, #0]
 800a4e6:	e008      	b.n	800a4fa <printRadioSettings+0x9e>
	}
	else
	{
		sprintf(uartTxBuf, "CRC:\r\n		Disabled \r\n");
 800a4e8:	f107 0308 	add.w	r3, r7, #8
 800a4ec:	4a9c      	ldr	r2, [pc, #624]	; (800a760 <printRadioSettings+0x304>)
 800a4ee:	461c      	mov	r4, r3
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4f6:	682b      	ldr	r3, [r5, #0]
 800a4f8:	6023      	str	r3, [r4, #0]
	}
	Print_Debug_Info_UART(uartTxBuf);
 800a4fa:	f107 0308 	add.w	r3, r7, #8
 800a4fe:	4618      	mov	r0, r3
 800a500:	f7ff fa02 	bl	8009908 <Print_Debug_Info_UART>
	//b) AutoAck on pipes
	reg8Val = NRF24_read_register(0x01);
 800a504:	2001      	movs	r0, #1
 800a506:	f7ff fa85 	bl	8009a14 <NRF24_read_register>
 800a50a:	4603      	mov	r3, r0
 800a50c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a510:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a514:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a518:	2b00      	cmp	r3, #0
 800a51a:	bfcc      	ite	gt
 800a51c:	2301      	movgt	r3, #1
 800a51e:	2300      	movle	r3, #0
 800a520:	b2db      	uxtb	r3, r3
 800a522:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a524:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a528:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a52c:	2b00      	cmp	r3, #0
 800a52e:	bfcc      	ite	gt
 800a530:	2301      	movgt	r3, #1
 800a532:	2300      	movle	r3, #0
 800a534:	b2db      	uxtb	r3, r3
 800a536:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a538:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a53c:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a540:	2b00      	cmp	r3, #0
 800a542:	bfcc      	ite	gt
 800a544:	2301      	movgt	r3, #1
 800a546:	2300      	movle	r3, #0
 800a548:	b2db      	uxtb	r3, r3
 800a54a:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a54c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a550:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a554:	2b00      	cmp	r3, #0
 800a556:	bfcc      	ite	gt
 800a558:	2301      	movgt	r3, #1
 800a55a:	2300      	movle	r3, #0
 800a55c:	b2db      	uxtb	r3, r3
 800a55e:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a560:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a564:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a568:	2b00      	cmp	r3, #0
 800a56a:	bfcc      	ite	gt
 800a56c:	2301      	movgt	r3, #1
 800a56e:	2300      	movle	r3, #0
 800a570:	b2db      	uxtb	r3, r3
 800a572:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a574:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a578:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "ENAA:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	bfcc      	ite	gt
 800a580:	2301      	movgt	r3, #1
 800a582:	2300      	movle	r3, #0
 800a584:	b2db      	uxtb	r3, r3
 800a586:	f107 0008 	add.w	r0, r7, #8
 800a58a:	9303      	str	r3, [sp, #12]
 800a58c:	9402      	str	r4, [sp, #8]
 800a58e:	9101      	str	r1, [sp, #4]
 800a590:	9200      	str	r2, [sp, #0]
 800a592:	4633      	mov	r3, r6
 800a594:	462a      	mov	r2, r5
 800a596:	4973      	ldr	r1, [pc, #460]	; (800a764 <printRadioSettings+0x308>)
 800a598:	f001 fb90 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a59c:	f107 0308 	add.w	r3, r7, #8
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f7ff f9b1 	bl	8009908 <Print_Debug_Info_UART>
	//c) Enabled Rx addresses
	reg8Val = NRF24_read_register(0x02);
 800a5a6:	2002      	movs	r0, #2
 800a5a8:	f7ff fa34 	bl	8009a14 <NRF24_read_register>
 800a5ac:	4603      	mov	r3, r0
 800a5ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a5b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5b6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	bfcc      	ite	gt
 800a5be:	2301      	movgt	r3, #1
 800a5c0:	2300      	movle	r3, #0
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a5c6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5ca:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	bfcc      	ite	gt
 800a5d2:	2301      	movgt	r3, #1
 800a5d4:	2300      	movle	r3, #0
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a5da:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5de:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	bfcc      	ite	gt
 800a5e6:	2301      	movgt	r3, #1
 800a5e8:	2300      	movle	r3, #0
 800a5ea:	b2db      	uxtb	r3, r3
 800a5ec:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a5ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a5f2:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	bfcc      	ite	gt
 800a5fa:	2301      	movgt	r3, #1
 800a5fc:	2300      	movle	r3, #0
 800a5fe:	b2db      	uxtb	r3, r3
 800a600:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a602:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a606:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	bfcc      	ite	gt
 800a60e:	2301      	movgt	r3, #1
 800a610:	2300      	movle	r3, #0
 800a612:	b2db      	uxtb	r3, r3
 800a614:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800a616:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a61a:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "EN_RXADDR:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800a61e:	2b00      	cmp	r3, #0
 800a620:	bfcc      	ite	gt
 800a622:	2301      	movgt	r3, #1
 800a624:	2300      	movle	r3, #0
 800a626:	b2db      	uxtb	r3, r3
 800a628:	f107 0008 	add.w	r0, r7, #8
 800a62c:	9303      	str	r3, [sp, #12]
 800a62e:	9402      	str	r4, [sp, #8]
 800a630:	9101      	str	r1, [sp, #4]
 800a632:	9200      	str	r2, [sp, #0]
 800a634:	4633      	mov	r3, r6
 800a636:	462a      	mov	r2, r5
 800a638:	494b      	ldr	r1, [pc, #300]	; (800a768 <printRadioSettings+0x30c>)
 800a63a:	f001 fb3f 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a63e:	f107 0308 	add.w	r3, r7, #8
 800a642:	4618      	mov	r0, r3
 800a644:	f7ff f960 	bl	8009908 <Print_Debug_Info_UART>
	//d) Address width
	reg8Val = NRF24_read_register(0x03)&0x03;
 800a648:	2003      	movs	r0, #3
 800a64a:	f7ff f9e3 	bl	8009a14 <NRF24_read_register>
 800a64e:	4603      	mov	r3, r0
 800a650:	f003 0303 	and.w	r3, r3, #3
 800a654:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val +=2;
 800a658:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a65c:	3302      	adds	r3, #2
 800a65e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "SETUP_AW:\r\n		%d bytes \r\n", reg8Val);
 800a662:	f897 206f 	ldrb.w	r2, [r7, #111]	; 0x6f
 800a666:	f107 0308 	add.w	r3, r7, #8
 800a66a:	4940      	ldr	r1, [pc, #256]	; (800a76c <printRadioSettings+0x310>)
 800a66c:	4618      	mov	r0, r3
 800a66e:	f001 fb25 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a672:	f107 0308 	add.w	r3, r7, #8
 800a676:	4618      	mov	r0, r3
 800a678:	f7ff f946 	bl	8009908 <Print_Debug_Info_UART>
	//e) RF channel
	reg8Val = NRF24_read_register(0x05);
 800a67c:	2005      	movs	r0, #5
 800a67e:	f7ff f9c9 	bl	8009a14 <NRF24_read_register>
 800a682:	4603      	mov	r3, r0
 800a684:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RF_CH:\r\n		%d CH \r\n", reg8Val&0x7F);
 800a688:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a68c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a690:	f107 0308 	add.w	r3, r7, #8
 800a694:	4936      	ldr	r1, [pc, #216]	; (800a770 <printRadioSettings+0x314>)
 800a696:	4618      	mov	r0, r3
 800a698:	f001 fb10 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a69c:	f107 0308 	add.w	r3, r7, #8
 800a6a0:	4618      	mov	r0, r3
 800a6a2:	f7ff f931 	bl	8009908 <Print_Debug_Info_UART>
	//f) Data rate & RF_PWR
	reg8Val = NRF24_read_register(0x06);
 800a6a6:	2006      	movs	r0, #6
 800a6a8:	f7ff f9b4 	bl	8009a14 <NRF24_read_register>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val & (1 << 3))
 800a6b2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a6b6:	f003 0308 	and.w	r3, r3, #8
 800a6ba:	2b00      	cmp	r3, #0
 800a6bc:	d00f      	beq.n	800a6de <printRadioSettings+0x282>
		sprintf(uartTxBuf, "Data Rate:\r\n		2Mbps \r\n");
 800a6be:	f107 0308 	add.w	r3, r7, #8
 800a6c2:	4a2c      	ldr	r2, [pc, #176]	; (800a774 <printRadioSettings+0x318>)
 800a6c4:	461c      	mov	r4, r3
 800a6c6:	4615      	mov	r5, r2
 800a6c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6cc:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a6d0:	6020      	str	r0, [r4, #0]
 800a6d2:	3404      	adds	r4, #4
 800a6d4:	8021      	strh	r1, [r4, #0]
 800a6d6:	3402      	adds	r4, #2
 800a6d8:	0c0b      	lsrs	r3, r1, #16
 800a6da:	7023      	strb	r3, [r4, #0]
 800a6dc:	e00e      	b.n	800a6fc <printRadioSettings+0x2a0>
	else
		sprintf(uartTxBuf, "Data Rate:\r\n		1Mbps \r\n");
 800a6de:	f107 0308 	add.w	r3, r7, #8
 800a6e2:	4a25      	ldr	r2, [pc, #148]	; (800a778 <printRadioSettings+0x31c>)
 800a6e4:	461c      	mov	r4, r3
 800a6e6:	4615      	mov	r5, r2
 800a6e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a6ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a6ec:	e895 0003 	ldmia.w	r5, {r0, r1}
 800a6f0:	6020      	str	r0, [r4, #0]
 800a6f2:	3404      	adds	r4, #4
 800a6f4:	8021      	strh	r1, [r4, #0]
 800a6f6:	3402      	adds	r4, #2
 800a6f8:	0c0b      	lsrs	r3, r1, #16
 800a6fa:	7023      	strb	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800a6fc:	f107 0308 	add.w	r3, r7, #8
 800a700:	4618      	mov	r0, r3
 800a702:	f7ff f901 	bl	8009908 <Print_Debug_Info_UART>
	reg8Val &= (3 << 1);
 800a706:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a70a:	f003 0306 	and.w	r3, r3, #6
 800a70e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	reg8Val = (reg8Val>>1);
 800a712:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a716:	085b      	lsrs	r3, r3, #1
 800a718:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val == 0) sprintf(uartTxBuf, "RF_PWR:\r\n		-18dB \r\n");
 800a71c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a720:	2b00      	cmp	r3, #0
 800a722:	d109      	bne.n	800a738 <printRadioSettings+0x2dc>
 800a724:	f107 0308 	add.w	r3, r7, #8
 800a728:	4a14      	ldr	r2, [pc, #80]	; (800a77c <printRadioSettings+0x320>)
 800a72a:	461c      	mov	r4, r3
 800a72c:	4615      	mov	r5, r2
 800a72e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a730:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a732:	682b      	ldr	r3, [r5, #0]
 800a734:	6023      	str	r3, [r4, #0]
 800a736:	e046      	b.n	800a7c6 <printRadioSettings+0x36a>
	else if(reg8Val == 1) sprintf(uartTxBuf, "RF_PWR:\r\n		-12dB \r\n");
 800a738:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a73c:	2b01      	cmp	r3, #1
 800a73e:	d121      	bne.n	800a784 <printRadioSettings+0x328>
 800a740:	f107 0308 	add.w	r3, r7, #8
 800a744:	4a0e      	ldr	r2, [pc, #56]	; (800a780 <printRadioSettings+0x324>)
 800a746:	461c      	mov	r4, r3
 800a748:	4615      	mov	r5, r2
 800a74a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a74c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	6023      	str	r3, [r4, #0]
 800a752:	e038      	b.n	800a7c6 <printRadioSettings+0x36a>
 800a754:	0800c38c 	.word	0x0800c38c
 800a758:	0800c3c0 	.word	0x0800c3c0
 800a75c:	0800c3dc 	.word	0x0800c3dc
 800a760:	0800c3f8 	.word	0x0800c3f8
 800a764:	0800c40c 	.word	0x0800c40c
 800a768:	0800c450 	.word	0x0800c450
 800a76c:	0800c49c 	.word	0x0800c49c
 800a770:	0800c4b8 	.word	0x0800c4b8
 800a774:	0800c4cc 	.word	0x0800c4cc
 800a778:	0800c4e4 	.word	0x0800c4e4
 800a77c:	0800c4fc 	.word	0x0800c4fc
 800a780:	0800c510 	.word	0x0800c510
	else if(reg8Val == 2) sprintf(uartTxBuf, "RF_PWR:\r\n		-6dB \r\n");
 800a784:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a788:	2b02      	cmp	r3, #2
 800a78a:	d10f      	bne.n	800a7ac <printRadioSettings+0x350>
 800a78c:	f107 0308 	add.w	r3, r7, #8
 800a790:	4a05      	ldr	r2, [pc, #20]	; (800a7a8 <printRadioSettings+0x34c>)
 800a792:	461c      	mov	r4, r3
 800a794:	4615      	mov	r5, r2
 800a796:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a798:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a79a:	682b      	ldr	r3, [r5, #0]
 800a79c:	461a      	mov	r2, r3
 800a79e:	8022      	strh	r2, [r4, #0]
 800a7a0:	3402      	adds	r4, #2
 800a7a2:	0c1b      	lsrs	r3, r3, #16
 800a7a4:	7023      	strb	r3, [r4, #0]
 800a7a6:	e00e      	b.n	800a7c6 <printRadioSettings+0x36a>
 800a7a8:	0800c524 	.word	0x0800c524
	else if(reg8Val == 3) sprintf(uartTxBuf, "RF_PWR:\r\n		0dB \r\n");
 800a7ac:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d108      	bne.n	800a7c6 <printRadioSettings+0x36a>
 800a7b4:	f107 0308 	add.w	r3, r7, #8
 800a7b8:	4ac9      	ldr	r2, [pc, #804]	; (800aae0 <printRadioSettings+0x684>)
 800a7ba:	461c      	mov	r4, r3
 800a7bc:	4615      	mov	r5, r2
 800a7be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a7c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a7c2:	682b      	ldr	r3, [r5, #0]
 800a7c4:	8023      	strh	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800a7c6:	f107 0308 	add.w	r3, r7, #8
 800a7ca:	4618      	mov	r0, r3
 800a7cc:	f7ff f89c 	bl	8009908 <Print_Debug_Info_UART>
	//g) RX pipes addresses
	uint8_t pipeAddrs[6];
	NRF24_read_registerN(0x0A, pipeAddrs, 5);
 800a7d0:	463b      	mov	r3, r7
 800a7d2:	2205      	movs	r2, #5
 800a7d4:	4619      	mov	r1, r3
 800a7d6:	200a      	movs	r0, #10
 800a7d8:	f7ff f94a 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe0 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800a7dc:	793b      	ldrb	r3, [r7, #4]
 800a7de:	461c      	mov	r4, r3
 800a7e0:	78fb      	ldrb	r3, [r7, #3]
 800a7e2:	461d      	mov	r5, r3
 800a7e4:	78bb      	ldrb	r3, [r7, #2]
 800a7e6:	787a      	ldrb	r2, [r7, #1]
 800a7e8:	7839      	ldrb	r1, [r7, #0]
 800a7ea:	f107 0008 	add.w	r0, r7, #8
 800a7ee:	9102      	str	r1, [sp, #8]
 800a7f0:	9201      	str	r2, [sp, #4]
 800a7f2:	9300      	str	r3, [sp, #0]
 800a7f4:	462b      	mov	r3, r5
 800a7f6:	4622      	mov	r2, r4
 800a7f8:	49ba      	ldr	r1, [pc, #744]	; (800aae4 <printRadioSettings+0x688>)
 800a7fa:	f001 fa5f 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a7fe:	f107 0308 	add.w	r3, r7, #8
 800a802:	4618      	mov	r0, r3
 800a804:	f7ff f880 	bl	8009908 <Print_Debug_Info_UART>
	
	NRF24_read_registerN(0x0A+1, pipeAddrs, 5);
 800a808:	463b      	mov	r3, r7
 800a80a:	2205      	movs	r2, #5
 800a80c:	4619      	mov	r1, r3
 800a80e:	200b      	movs	r0, #11
 800a810:	f7ff f92e 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe1 Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800a814:	793b      	ldrb	r3, [r7, #4]
 800a816:	461c      	mov	r4, r3
 800a818:	78fb      	ldrb	r3, [r7, #3]
 800a81a:	461d      	mov	r5, r3
 800a81c:	78bb      	ldrb	r3, [r7, #2]
 800a81e:	787a      	ldrb	r2, [r7, #1]
 800a820:	7839      	ldrb	r1, [r7, #0]
 800a822:	f107 0008 	add.w	r0, r7, #8
 800a826:	9102      	str	r1, [sp, #8]
 800a828:	9201      	str	r2, [sp, #4]
 800a82a:	9300      	str	r3, [sp, #0]
 800a82c:	462b      	mov	r3, r5
 800a82e:	4622      	mov	r2, r4
 800a830:	49ad      	ldr	r1, [pc, #692]	; (800aae8 <printRadioSettings+0x68c>)
 800a832:	f001 fa43 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a836:	f107 0308 	add.w	r3, r7, #8
 800a83a:	4618      	mov	r0, r3
 800a83c:	f7ff f864 	bl	8009908 <Print_Debug_Info_UART>
	
	NRF24_read_registerN(0x0A+2, pipeAddrs, 1);
 800a840:	463b      	mov	r3, r7
 800a842:	2201      	movs	r2, #1
 800a844:	4619      	mov	r1, r3
 800a846:	200c      	movs	r0, #12
 800a848:	f7ff f912 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe2 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a84c:	783b      	ldrb	r3, [r7, #0]
 800a84e:	461a      	mov	r2, r3
 800a850:	f107 0308 	add.w	r3, r7, #8
 800a854:	49a5      	ldr	r1, [pc, #660]	; (800aaec <printRadioSettings+0x690>)
 800a856:	4618      	mov	r0, r3
 800a858:	f001 fa30 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a85c:	f107 0308 	add.w	r3, r7, #8
 800a860:	4618      	mov	r0, r3
 800a862:	f7ff f851 	bl	8009908 <Print_Debug_Info_UART>
	
	NRF24_read_registerN(0x0A+3, pipeAddrs, 1);
 800a866:	463b      	mov	r3, r7
 800a868:	2201      	movs	r2, #1
 800a86a:	4619      	mov	r1, r3
 800a86c:	200d      	movs	r0, #13
 800a86e:	f7ff f8ff 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe3 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a872:	783b      	ldrb	r3, [r7, #0]
 800a874:	461a      	mov	r2, r3
 800a876:	f107 0308 	add.w	r3, r7, #8
 800a87a:	499d      	ldr	r1, [pc, #628]	; (800aaf0 <printRadioSettings+0x694>)
 800a87c:	4618      	mov	r0, r3
 800a87e:	f001 fa1d 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a882:	f107 0308 	add.w	r3, r7, #8
 800a886:	4618      	mov	r0, r3
 800a888:	f7ff f83e 	bl	8009908 <Print_Debug_Info_UART>
	
	NRF24_read_registerN(0x0A+4, pipeAddrs, 1);
 800a88c:	463b      	mov	r3, r7
 800a88e:	2201      	movs	r2, #1
 800a890:	4619      	mov	r1, r3
 800a892:	200e      	movs	r0, #14
 800a894:	f7ff f8ec 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe4 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a898:	783b      	ldrb	r3, [r7, #0]
 800a89a:	461a      	mov	r2, r3
 800a89c:	f107 0308 	add.w	r3, r7, #8
 800a8a0:	4994      	ldr	r1, [pc, #592]	; (800aaf4 <printRadioSettings+0x698>)
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f001 fa0a 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a8a8:	f107 0308 	add.w	r3, r7, #8
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f7ff f82b 	bl	8009908 <Print_Debug_Info_UART>
	
	NRF24_read_registerN(0x0A+5, pipeAddrs, 1);
 800a8b2:	463b      	mov	r3, r7
 800a8b4:	2201      	movs	r2, #1
 800a8b6:	4619      	mov	r1, r3
 800a8b8:	200f      	movs	r0, #15
 800a8ba:	f7ff f8d9 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "RX_Pipe5 Addrs:\r\n		xx,xx,xx,xx,%02X  \r\n", pipeAddrs[0]);
 800a8be:	783b      	ldrb	r3, [r7, #0]
 800a8c0:	461a      	mov	r2, r3
 800a8c2:	f107 0308 	add.w	r3, r7, #8
 800a8c6:	498c      	ldr	r1, [pc, #560]	; (800aaf8 <printRadioSettings+0x69c>)
 800a8c8:	4618      	mov	r0, r3
 800a8ca:	f001 f9f7 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a8ce:	f107 0308 	add.w	r3, r7, #8
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	f7ff f818 	bl	8009908 <Print_Debug_Info_UART>
	
	NRF24_read_registerN(0x0A+6, pipeAddrs, 5);
 800a8d8:	463b      	mov	r3, r7
 800a8da:	2205      	movs	r2, #5
 800a8dc:	4619      	mov	r1, r3
 800a8de:	2010      	movs	r0, #16
 800a8e0:	f7ff f8c6 	bl	8009a70 <NRF24_read_registerN>
	sprintf(uartTxBuf, "TX Addrs:\r\n		%02X,%02X,%02X,%02X,%02X  \r\n", pipeAddrs[4], pipeAddrs[3], pipeAddrs[2],pipeAddrs[1],pipeAddrs[0]);
 800a8e4:	793b      	ldrb	r3, [r7, #4]
 800a8e6:	461c      	mov	r4, r3
 800a8e8:	78fb      	ldrb	r3, [r7, #3]
 800a8ea:	461d      	mov	r5, r3
 800a8ec:	78bb      	ldrb	r3, [r7, #2]
 800a8ee:	787a      	ldrb	r2, [r7, #1]
 800a8f0:	7839      	ldrb	r1, [r7, #0]
 800a8f2:	f107 0008 	add.w	r0, r7, #8
 800a8f6:	9102      	str	r1, [sp, #8]
 800a8f8:	9201      	str	r2, [sp, #4]
 800a8fa:	9300      	str	r3, [sp, #0]
 800a8fc:	462b      	mov	r3, r5
 800a8fe:	4622      	mov	r2, r4
 800a900:	497e      	ldr	r1, [pc, #504]	; (800aafc <printRadioSettings+0x6a0>)
 800a902:	f001 f9db 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a906:	f107 0308 	add.w	r3, r7, #8
 800a90a:	4618      	mov	r0, r3
 800a90c:	f7fe fffc 	bl	8009908 <Print_Debug_Info_UART>
	
	//h) RX PW (Payload Width 0 - 32)
	reg8Val = NRF24_read_register(0x11);
 800a910:	2011      	movs	r0, #17
 800a912:	f7ff f87f 	bl	8009a14 <NRF24_read_register>
 800a916:	4603      	mov	r3, r0
 800a918:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P0:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a91c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a920:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a924:	f107 0308 	add.w	r3, r7, #8
 800a928:	4975      	ldr	r1, [pc, #468]	; (800ab00 <printRadioSettings+0x6a4>)
 800a92a:	4618      	mov	r0, r3
 800a92c:	f001 f9c6 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a930:	f107 0308 	add.w	r3, r7, #8
 800a934:	4618      	mov	r0, r3
 800a936:	f7fe ffe7 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x11+1);
 800a93a:	2012      	movs	r0, #18
 800a93c:	f7ff f86a 	bl	8009a14 <NRF24_read_register>
 800a940:	4603      	mov	r3, r0
 800a942:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P1:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a946:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a94a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a94e:	f107 0308 	add.w	r3, r7, #8
 800a952:	496c      	ldr	r1, [pc, #432]	; (800ab04 <printRadioSettings+0x6a8>)
 800a954:	4618      	mov	r0, r3
 800a956:	f001 f9b1 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a95a:	f107 0308 	add.w	r3, r7, #8
 800a95e:	4618      	mov	r0, r3
 800a960:	f7fe ffd2 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x11+2);
 800a964:	2013      	movs	r0, #19
 800a966:	f7ff f855 	bl	8009a14 <NRF24_read_register>
 800a96a:	4603      	mov	r3, r0
 800a96c:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P2:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a970:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a974:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a978:	f107 0308 	add.w	r3, r7, #8
 800a97c:	4962      	ldr	r1, [pc, #392]	; (800ab08 <printRadioSettings+0x6ac>)
 800a97e:	4618      	mov	r0, r3
 800a980:	f001 f99c 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a984:	f107 0308 	add.w	r3, r7, #8
 800a988:	4618      	mov	r0, r3
 800a98a:	f7fe ffbd 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x11+3);
 800a98e:	2014      	movs	r0, #20
 800a990:	f7ff f840 	bl	8009a14 <NRF24_read_register>
 800a994:	4603      	mov	r3, r0
 800a996:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P3:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a99a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a99e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9a2:	f107 0308 	add.w	r3, r7, #8
 800a9a6:	4959      	ldr	r1, [pc, #356]	; (800ab0c <printRadioSettings+0x6b0>)
 800a9a8:	4618      	mov	r0, r3
 800a9aa:	f001 f987 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a9ae:	f107 0308 	add.w	r3, r7, #8
 800a9b2:	4618      	mov	r0, r3
 800a9b4:	f7fe ffa8 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x11+4);
 800a9b8:	2015      	movs	r0, #21
 800a9ba:	f7ff f82b 	bl	8009a14 <NRF24_read_register>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P4:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a9c4:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a9c8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9cc:	f107 0308 	add.w	r3, r7, #8
 800a9d0:	494f      	ldr	r1, [pc, #316]	; (800ab10 <printRadioSettings+0x6b4>)
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	f001 f972 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800a9d8:	f107 0308 	add.w	r3, r7, #8
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7fe ff93 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x11+5);
 800a9e2:	2016      	movs	r0, #22
 800a9e4:	f7ff f816 	bl	8009a14 <NRF24_read_register>
 800a9e8:	4603      	mov	r3, r0
 800a9ea:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "RX_PW_P5:\r\n		%d bytes \r\n", reg8Val&0x3F);
 800a9ee:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800a9f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a9f6:	f107 0308 	add.w	r3, r7, #8
 800a9fa:	4946      	ldr	r1, [pc, #280]	; (800ab14 <printRadioSettings+0x6b8>)
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	f001 f95d 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800aa02:	f107 0308 	add.w	r3, r7, #8
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe ff7e 	bl	8009908 <Print_Debug_Info_UART>
	
	//i) Dynamic payload enable for each pipe
	reg8Val = NRF24_read_register(0x1c);
 800aa0c:	201c      	movs	r0, #28
 800aa0e:	f7ff f801 	bl	8009a14 <NRF24_read_register>
 800aa12:	4603      	mov	r3, r0
 800aa14:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800aa18:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa1c:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	bfcc      	ite	gt
 800aa24:	2301      	movgt	r3, #1
 800aa26:	2300      	movle	r3, #0
 800aa28:	b2db      	uxtb	r3, r3
 800aa2a:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800aa2c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa30:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	bfcc      	ite	gt
 800aa38:	2301      	movgt	r3, #1
 800aa3a:	2300      	movle	r3, #0
 800aa3c:	b2db      	uxtb	r3, r3
 800aa3e:	461e      	mov	r6, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800aa40:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa44:	f003 0304 	and.w	r3, r3, #4
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800aa48:	2b00      	cmp	r3, #0
 800aa4a:	bfcc      	ite	gt
 800aa4c:	2301      	movgt	r3, #1
 800aa4e:	2300      	movle	r3, #0
 800aa50:	b2db      	uxtb	r3, r3
 800aa52:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800aa54:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa58:	f003 0308 	and.w	r3, r3, #8
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	bfcc      	ite	gt
 800aa60:	2301      	movgt	r3, #1
 800aa62:	2300      	movle	r3, #0
 800aa64:	b2db      	uxtb	r3, r3
 800aa66:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800aa68:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa6c:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	bfcc      	ite	gt
 800aa74:	2301      	movgt	r3, #1
 800aa76:	2300      	movle	r3, #0
 800aa78:	b2db      	uxtb	r3, r3
 800aa7a:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<0)), _BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<2)), _BOOL(reg8Val&(1<<3)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(1<<5)));
 800aa7c:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aa80:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "DYNPD_pipe:\r\n		P0:	%d\r\n		P1:	%d\r\n		P2:	%d\r\n		P3:	%d\r\n		P4:	%d\r\n		P5:	%d\r\n",
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	bfcc      	ite	gt
 800aa88:	2301      	movgt	r3, #1
 800aa8a:	2300      	movle	r3, #0
 800aa8c:	b2db      	uxtb	r3, r3
 800aa8e:	f107 0008 	add.w	r0, r7, #8
 800aa92:	9303      	str	r3, [sp, #12]
 800aa94:	9402      	str	r4, [sp, #8]
 800aa96:	9101      	str	r1, [sp, #4]
 800aa98:	9200      	str	r2, [sp, #0]
 800aa9a:	4633      	mov	r3, r6
 800aa9c:	462a      	mov	r2, r5
 800aa9e:	491e      	ldr	r1, [pc, #120]	; (800ab18 <printRadioSettings+0x6bc>)
 800aaa0:	f001 f90c 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800aaa4:	f107 0308 	add.w	r3, r7, #8
 800aaa8:	4618      	mov	r0, r3
 800aaaa:	f7fe ff2d 	bl	8009908 <Print_Debug_Info_UART>
	
	//j) EN_DPL (is Dynamic payload feature enabled ?)
	reg8Val = NRF24_read_register(0x1d);
 800aaae:	201d      	movs	r0, #29
 800aab0:	f7fe ffb0 	bl	8009a14 <NRF24_read_register>
 800aab4:	4603      	mov	r3, r0
 800aab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
	if(reg8Val&(1<<2)) sprintf(uartTxBuf, "EN_DPL:\r\n		Enabled \r\n");
 800aaba:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800aabe:	f003 0304 	and.w	r3, r3, #4
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d02c      	beq.n	800ab20 <printRadioSettings+0x6c4>
 800aac6:	f107 0308 	add.w	r3, r7, #8
 800aaca:	4a14      	ldr	r2, [pc, #80]	; (800ab1c <printRadioSettings+0x6c0>)
 800aacc:	461c      	mov	r4, r3
 800aace:	4615      	mov	r5, r2
 800aad0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aad2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aad4:	e895 0003 	ldmia.w	r5, {r0, r1}
 800aad8:	6020      	str	r0, [r4, #0]
 800aada:	3404      	adds	r4, #4
 800aadc:	8021      	strh	r1, [r4, #0]
 800aade:	e02e      	b.n	800ab3e <printRadioSettings+0x6e2>
 800aae0:	0800c538 	.word	0x0800c538
 800aae4:	0800c54c 	.word	0x0800c54c
 800aae8:	0800c57c 	.word	0x0800c57c
 800aaec:	0800c5ac 	.word	0x0800c5ac
 800aaf0:	0800c5d4 	.word	0x0800c5d4
 800aaf4:	0800c5fc 	.word	0x0800c5fc
 800aaf8:	0800c624 	.word	0x0800c624
 800aafc:	0800c64c 	.word	0x0800c64c
 800ab00:	0800c678 	.word	0x0800c678
 800ab04:	0800c694 	.word	0x0800c694
 800ab08:	0800c6b0 	.word	0x0800c6b0
 800ab0c:	0800c6cc 	.word	0x0800c6cc
 800ab10:	0800c6e8 	.word	0x0800c6e8
 800ab14:	0800c704 	.word	0x0800c704
 800ab18:	0800c720 	.word	0x0800c720
 800ab1c:	0800c76c 	.word	0x0800c76c
	else sprintf(uartTxBuf, "EN_DPL:\r\n		Disabled \r\n");
 800ab20:	f107 0308 	add.w	r3, r7, #8
 800ab24:	4a28      	ldr	r2, [pc, #160]	; (800abc8 <printRadioSettings+0x76c>)
 800ab26:	461c      	mov	r4, r3
 800ab28:	4615      	mov	r5, r2
 800ab2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab2e:	e895 0003 	ldmia.w	r5, {r0, r1}
 800ab32:	6020      	str	r0, [r4, #0]
 800ab34:	3404      	adds	r4, #4
 800ab36:	8021      	strh	r1, [r4, #0]
 800ab38:	3402      	adds	r4, #2
 800ab3a:	0c0b      	lsrs	r3, r1, #16
 800ab3c:	7023      	strb	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800ab3e:	f107 0308 	add.w	r3, r7, #8
 800ab42:	4618      	mov	r0, r3
 800ab44:	f7fe fee0 	bl	8009908 <Print_Debug_Info_UART>
	
	//k) EN_ACK_PAY
	if(reg8Val&(1<<1))
 800ab48:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 800ab4c:	f003 0302 	and.w	r3, r3, #2
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	d00b      	beq.n	800ab6c <printRadioSettings+0x710>
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Enabled \r\n");
 800ab54:	f107 0308 	add.w	r3, r7, #8
 800ab58:	4a1c      	ldr	r2, [pc, #112]	; (800abcc <printRadioSettings+0x770>)
 800ab5a:	461c      	mov	r4, r3
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab66:	c403      	stmia	r4!, {r0, r1}
 800ab68:	8022      	strh	r2, [r4, #0]
 800ab6a:	e00d      	b.n	800ab88 <printRadioSettings+0x72c>
	else
		sprintf(uartTxBuf, "EN_ACK_PAY:\r\n		Disabled \r\n");
 800ab6c:	f107 0308 	add.w	r3, r7, #8
 800ab70:	4a17      	ldr	r2, [pc, #92]	; (800abd0 <printRadioSettings+0x774>)
 800ab72:	461c      	mov	r4, r3
 800ab74:	4615      	mov	r5, r2
 800ab76:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab78:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ab7a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800ab7e:	c403      	stmia	r4!, {r0, r1}
 800ab80:	8022      	strh	r2, [r4, #0]
 800ab82:	3402      	adds	r4, #2
 800ab84:	0c13      	lsrs	r3, r2, #16
 800ab86:	7023      	strb	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800ab88:	f107 0308 	add.w	r3, r7, #8
 800ab8c:	4618      	mov	r0, r3
 800ab8e:	f7fe febb 	bl	8009908 <Print_Debug_Info_UART>
	
	
	sprintf(uartTxBuf, "\r\n**********************************************\r\n");
 800ab92:	f107 0308 	add.w	r3, r7, #8
 800ab96:	4a0f      	ldr	r2, [pc, #60]	; (800abd4 <printRadioSettings+0x778>)
 800ab98:	461c      	mov	r4, r3
 800ab9a:	4615      	mov	r5, r2
 800ab9c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ab9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aba0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aba2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aba4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800aba6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800aba8:	682b      	ldr	r3, [r5, #0]
 800abaa:	461a      	mov	r2, r3
 800abac:	8022      	strh	r2, [r4, #0]
 800abae:	3402      	adds	r4, #2
 800abb0:	0c1b      	lsrs	r3, r3, #16
 800abb2:	7023      	strb	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800abb4:	f107 0308 	add.w	r3, r7, #8
 800abb8:	4618      	mov	r0, r3
 800abba:	f7fe fea5 	bl	8009908 <Print_Debug_Info_UART>
}
 800abbe:	bf00      	nop
 800abc0:	3774      	adds	r7, #116	; 0x74
 800abc2:	46bd      	mov	sp, r7
 800abc4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abc6:	bf00      	nop
 800abc8:	0800c784 	.word	0x0800c784
 800abcc:	0800c79c 	.word	0x0800c79c
 800abd0:	0800c7b8 	.word	0x0800c7b8
 800abd4:	0800c38c 	.word	0x0800c38c

0800abd8 <printStatusReg>:

//2. Print Status 
void printStatusReg(void)
{
 800abd8:	b5b0      	push	{r4, r5, r7, lr}
 800abda:	b09e      	sub	sp, #120	; 0x78
 800abdc:	af04      	add	r7, sp, #16
	uint8_t reg8Val;
	char uartTxBuf[100];
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800abde:	463b      	mov	r3, r7
 800abe0:	4a31      	ldr	r2, [pc, #196]	; (800aca8 <printStatusReg+0xd0>)
 800abe2:	461c      	mov	r4, r3
 800abe4:	4615      	mov	r5, r2
 800abe6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800abe8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800abea:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800abee:	c407      	stmia	r4!, {r0, r1, r2}
 800abf0:	8023      	strh	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800abf2:	463b      	mov	r3, r7
 800abf4:	4618      	mov	r0, r3
 800abf6:	f7fe fe87 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x07);
 800abfa:	2007      	movs	r0, #7
 800abfc:	f7fe ff0a 	bl	8009a14 <NRF24_read_register>
 800ac00:	4603      	mov	r3, r0
 800ac02:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800ac06:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac0a:	f003 0340 	and.w	r3, r3, #64	; 0x40
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	bfcc      	ite	gt
 800ac12:	2301      	movgt	r3, #1
 800ac14:	2300      	movle	r3, #0
 800ac16:	b2db      	uxtb	r3, r3
 800ac18:	461c      	mov	r4, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800ac1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac1e:	f003 0320 	and.w	r3, r3, #32
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	bfcc      	ite	gt
 800ac26:	2301      	movgt	r3, #1
 800ac28:	2300      	movle	r3, #0
 800ac2a:	b2db      	uxtb	r3, r3
 800ac2c:	461d      	mov	r5, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800ac2e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac32:	f003 0310 	and.w	r3, r3, #16
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	bfcc      	ite	gt
 800ac3a:	2301      	movgt	r3, #1
 800ac3c:	2300      	movle	r3, #0
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800ac42:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac46:	f003 0306 	and.w	r3, r3, #6
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	bfcc      	ite	gt
 800ac4e:	2301      	movgt	r3, #1
 800ac50:	2300      	movle	r3, #0
 800ac52:	b2db      	uxtb	r3, r3
 800ac54:	4619      	mov	r1, r3
	_BOOL(reg8Val&(1<<6)), _BOOL(reg8Val&(1<<5)), _BOOL(reg8Val&(1<<4)), _BOOL(reg8Val&(3<<1)), _BOOL(reg8Val&(1<<0)));
 800ac56:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ac5a:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "STATUS reg:\r\n		RX_DR:		%d\r\n		TX_DS:		%d\r\n		MAX_RT:		%d\r\n		RX_P_NO:	%d\r\n		TX_FULL:	%d\r\n",
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	bfcc      	ite	gt
 800ac62:	2301      	movgt	r3, #1
 800ac64:	2300      	movle	r3, #0
 800ac66:	b2db      	uxtb	r3, r3
 800ac68:	4638      	mov	r0, r7
 800ac6a:	9302      	str	r3, [sp, #8]
 800ac6c:	9101      	str	r1, [sp, #4]
 800ac6e:	9200      	str	r2, [sp, #0]
 800ac70:	462b      	mov	r3, r5
 800ac72:	4622      	mov	r2, r4
 800ac74:	490d      	ldr	r1, [pc, #52]	; (800acac <printStatusReg+0xd4>)
 800ac76:	f001 f821 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800ac7a:	463b      	mov	r3, r7
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	f7fe fe43 	bl	8009908 <Print_Debug_Info_UART>
	
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800ac82:	463b      	mov	r3, r7
 800ac84:	4a08      	ldr	r2, [pc, #32]	; (800aca8 <printStatusReg+0xd0>)
 800ac86:	461c      	mov	r4, r3
 800ac88:	4615      	mov	r5, r2
 800ac8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ac8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ac8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ac92:	c407      	stmia	r4!, {r0, r1, r2}
 800ac94:	8023      	strh	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800ac96:	463b      	mov	r3, r7
 800ac98:	4618      	mov	r0, r3
 800ac9a:	f7fe fe35 	bl	8009908 <Print_Debug_Info_UART>
}
 800ac9e:	bf00      	nop
 800aca0:	3768      	adds	r7, #104	; 0x68
 800aca2:	46bd      	mov	sp, r7
 800aca4:	bdb0      	pop	{r4, r5, r7, pc}
 800aca6:	bf00      	nop
 800aca8:	0800c7d4 	.word	0x0800c7d4
 800acac:	0800c7f4 	.word	0x0800c7f4

0800acb0 <printConfigReg>:
//3. Print Config 
void printConfigReg(void)
{
 800acb0:	b5b0      	push	{r4, r5, r7, lr}
 800acb2:	b09a      	sub	sp, #104	; 0x68
 800acb4:	af00      	add	r7, sp, #0
	uint8_t reg8Val;
	char uartTxBuf[100];
	
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800acb6:	463b      	mov	r3, r7
 800acb8:	4a1f      	ldr	r2, [pc, #124]	; (800ad38 <printConfigReg+0x88>)
 800acba:	461c      	mov	r4, r3
 800acbc:	4615      	mov	r5, r2
 800acbe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800acc0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800acc2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800acc6:	c407      	stmia	r4!, {r0, r1, r2}
 800acc8:	8023      	strh	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800acca:	463b      	mov	r3, r7
 800accc:	4618      	mov	r0, r3
 800acce:	f7fe fe1b 	bl	8009908 <Print_Debug_Info_UART>
	
	reg8Val = NRF24_read_register(0x00);
 800acd2:	2000      	movs	r0, #0
 800acd4:	f7fe fe9e 	bl	8009a14 <NRF24_read_register>
 800acd8:	4603      	mov	r3, r0
 800acda:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
	_BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<0)));
 800acde:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800ace2:	f003 0302 	and.w	r3, r3, #2
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	bfcc      	ite	gt
 800acea:	2301      	movgt	r3, #1
 800acec:	2300      	movle	r3, #0
 800acee:	b2db      	uxtb	r3, r3
 800acf0:	461a      	mov	r2, r3
	_BOOL(reg8Val&(1<<1)), _BOOL(reg8Val&(1<<0)));
 800acf2:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 800acf6:	f003 0301 	and.w	r3, r3, #1
	sprintf(uartTxBuf, "CONFIG reg:\r\n		PWR_UP:		%d\r\n		PRIM_RX:	%d\r\n",
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	bfcc      	ite	gt
 800acfe:	2301      	movgt	r3, #1
 800ad00:	2300      	movle	r3, #0
 800ad02:	b2db      	uxtb	r3, r3
 800ad04:	4638      	mov	r0, r7
 800ad06:	490d      	ldr	r1, [pc, #52]	; (800ad3c <printConfigReg+0x8c>)
 800ad08:	f000 ffd8 	bl	800bcbc <siprintf>
	Print_Debug_Info_UART(uartTxBuf);
 800ad0c:	463b      	mov	r3, r7
 800ad0e:	4618      	mov	r0, r3
 800ad10:	f7fe fdfa 	bl	8009908 <Print_Debug_Info_UART>
	
	sprintf(uartTxBuf, "\r\n-------------------------\r\n");
 800ad14:	463b      	mov	r3, r7
 800ad16:	4a08      	ldr	r2, [pc, #32]	; (800ad38 <printConfigReg+0x88>)
 800ad18:	461c      	mov	r4, r3
 800ad1a:	4615      	mov	r5, r2
 800ad1c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ad1e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ad20:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800ad24:	c407      	stmia	r4!, {r0, r1, r2}
 800ad26:	8023      	strh	r3, [r4, #0]
	Print_Debug_Info_UART(uartTxBuf);
 800ad28:	463b      	mov	r3, r7
 800ad2a:	4618      	mov	r0, r3
 800ad2c:	f7fe fdec 	bl	8009908 <Print_Debug_Info_UART>
}
 800ad30:	bf00      	nop
 800ad32:	3768      	adds	r7, #104	; 0x68
 800ad34:	46bd      	mov	sp, r7
 800ad36:	bdb0      	pop	{r4, r5, r7, pc}
 800ad38:	0800c7d4 	.word	0x0800c7d4
 800ad3c:	0800c84c 	.word	0x0800c84c

0800ad40 <Read_User_Pin>:



// For Debugging purpose
void Read_User_Pin()
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	af00      	add	r7, sp, #0

	if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
 800ad44:	2101      	movs	r1, #1
 800ad46:	480d      	ldr	r0, [pc, #52]	; (800ad7c <Read_User_Pin+0x3c>)
 800ad48:	f7f8 f8ce 	bl	8002ee8 <HAL_GPIO_ReadPin>
 800ad4c:	4603      	mov	r3, r0
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d011      	beq.n	800ad76 <Read_User_Pin+0x36>
	{
		gTxRxFlag = !gTxRxFlag;
 800ad52:	4b0b      	ldr	r3, [pc, #44]	; (800ad80 <Read_User_Pin+0x40>)
 800ad54:	781b      	ldrb	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	bf0c      	ite	eq
 800ad5a:	2301      	moveq	r3, #1
 800ad5c:	2300      	movne	r3, #0
 800ad5e:	b2db      	uxtb	r3, r3
 800ad60:	461a      	mov	r2, r3
 800ad62:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <Read_User_Pin+0x40>)
 800ad64:	701a      	strb	r2, [r3, #0]

		printConfigReg();
 800ad66:	f7ff ffa3 	bl	800acb0 <printConfigReg>
		printStatusReg();
 800ad6a:	f7ff ff35 	bl	800abd8 <printStatusReg>
	  NRF24_powerUp();
 800ad6e:	f7ff faa3 	bl	800a2b8 <NRF24_powerUp>
	  printRadioSettings();
 800ad72:	f7ff fb73 	bl	800a45c <printRadioSettings>
	}

}
 800ad76:	bf00      	nop
 800ad78:	bd80      	pop	{r7, pc}
 800ad7a:	bf00      	nop
 800ad7c:	40020000 	.word	0x40020000
 800ad80:	2000057a 	.word	0x2000057a

0800ad84 <NRF24L01_Initial_Configuartion>:




void NRF24L01_Initial_Configuartion()
{
 800ad84:	b598      	push	{r3, r4, r7, lr}
 800ad86:	af00      	add	r7, sp, #0

  NRF24_begin_caller();
 800ad88:	f7fe ff54 	bl	8009c34 <NRF24_begin_caller>

	printConfigReg();
 800ad8c:	f7ff ff90 	bl	800acb0 <printConfigReg>
	printStatusReg();
 800ad90:	f7ff ff22 	bl	800abd8 <printStatusReg>

 // nrf24_DebugUART_Init_caller();
//  NRF24_powerUp();

	printConfigReg();
 800ad94:	f7ff ff8c 	bl	800acb0 <printConfigReg>
	printStatusReg();
 800ad98:	f7ff ff1e 	bl	800abd8 <printStatusReg>

	NRF24_setAutoAck(false);
 800ad9c:	2000      	movs	r0, #0
 800ad9e:	f7ff f9cf 	bl	800a140 <NRF24_setAutoAck>
	NRF24_setChannel(56);
 800ada2:	2038      	movs	r0, #56	; 0x38
 800ada4:	f7ff f973 	bl	800a08e <NRF24_setChannel>
	NRF24_setPayloadSize(32);
 800ada8:	2020      	movs	r0, #32
 800adaa:	f7ff f985 	bl	800a0b8 <NRF24_setPayloadSize>


	//  NRF24_enableDynamicPayloads();
	//  NRF24_enableAckPayload();

  NRF24_openWritingPipe(TxpipeAddrs);
 800adae:	4b09      	ldr	r3, [pc, #36]	; (800add4 <NRF24L01_Initial_Configuartion+0x50>)
 800adb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adb4:	4618      	mov	r0, r3
 800adb6:	4621      	mov	r1, r4
 800adb8:	f7ff f8dc 	bl	8009f74 <NRF24_openWritingPipe>
	NRF24_openReadingPipe(1, RxpipeAddrs);
 800adbc:	4b06      	ldr	r3, [pc, #24]	; (800add8 <NRF24L01_Initial_Configuartion+0x54>)
 800adbe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800adc2:	461a      	mov	r2, r3
 800adc4:	4623      	mov	r3, r4
 800adc6:	2001      	movs	r0, #1
 800adc8:	f7ff f8f8 	bl	8009fbc <NRF24_openReadingPipe>
  printRadioSettings();
 800adcc:	f7ff fb46 	bl	800a45c <printRadioSettings>

}
 800add0:	bf00      	nop
 800add2:	bd98      	pop	{r3, r4, r7, pc}
 800add4:	20000010 	.word	0x20000010
 800add8:	20000038 	.word	0x20000038

0800addc <Radio_Transmit_Data>:

uint8_t Radio_Transmit_Data()
{
 800addc:	b580      	push	{r7, lr}
 800adde:	b082      	sub	sp, #8
 800ade0:	af00      	add	r7, sp, #0
	uint8_t ret_val;

	NRF24_stopListening();
 800ade2:	f7ff f847 	bl	8009e74 <NRF24_stopListening>

	if(ret_val = NRF24_write(myTxData, 32))
 800ade6:	2120      	movs	r1, #32
 800ade8:	480c      	ldr	r0, [pc, #48]	; (800ae1c <Radio_Transmit_Data+0x40>)
 800adea:	f7ff f84f 	bl	8009e8c <NRF24_write>
 800adee:	4603      	mov	r3, r0
 800adf0:	71fb      	strb	r3, [r7, #7]
 800adf2:	79fb      	ldrb	r3, [r7, #7]
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d006      	beq.n	800ae06 <Radio_Transmit_Data+0x2a>
	{
//		NRF24_read(AckPayload, 32);
		gTx_Count++;
 800adf8:	4b09      	ldr	r3, [pc, #36]	; (800ae20 <Radio_Transmit_Data+0x44>)
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	3301      	adds	r3, #1
 800adfe:	b29a      	uxth	r2, r3
 800ae00:	4b07      	ldr	r3, [pc, #28]	; (800ae20 <Radio_Transmit_Data+0x44>)
 800ae02:	801a      	strh	r2, [r3, #0]
 800ae04:	e005      	b.n	800ae12 <Radio_Transmit_Data+0x36>
//	Print_Debug_Info_UART(gSerial_Console_Print_Buff);

	}
	else
	{
		gTx_Fail++;
 800ae06:	4b07      	ldr	r3, [pc, #28]	; (800ae24 <Radio_Transmit_Data+0x48>)
 800ae08:	881b      	ldrh	r3, [r3, #0]
 800ae0a:	3301      	adds	r3, #1
 800ae0c:	b29a      	uxth	r2, r3
 800ae0e:	4b05      	ldr	r3, [pc, #20]	; (800ae24 <Radio_Transmit_Data+0x48>)
 800ae10:	801a      	strh	r2, [r3, #0]

	}

	return ret_val;
 800ae12:	79fb      	ldrb	r3, [r7, #7]
}
 800ae14:	4618      	mov	r0, r3
 800ae16:	3708      	adds	r7, #8
 800ae18:	46bd      	mov	sp, r7
 800ae1a:	bd80      	pop	{r7, pc}
 800ae1c:	20000018 	.word	0x20000018
 800ae20:	20000570 	.word	0x20000570
 800ae24:	20000572 	.word	0x20000572

0800ae28 <Radio_Receive_Data>:


uint8_t Radio_Receive_Data()
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
	uint8_t ret_val;

	NRF24_startListening();
 800ae2e:	f7fe fffb 	bl	8009e28 <NRF24_startListening>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);	// Green LED
 800ae32:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800ae36:	4811      	ldr	r0, [pc, #68]	; (800ae7c <Radio_Receive_Data+0x54>)
 800ae38:	f7f8 f887 	bl	8002f4a <HAL_GPIO_TogglePin>

	ret_val = NRF24_available();
 800ae3c:	f7ff f872 	bl	8009f24 <NRF24_available>
 800ae40:	4603      	mov	r3, r0
 800ae42:	71fb      	strb	r3, [r7, #7]
	if(ret_val)
 800ae44:	79fb      	ldrb	r3, [r7, #7]
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d013      	beq.n	800ae72 <Radio_Receive_Data+0x4a>
	{
		NRF24_read(myRxData, 32);
 800ae4a:	2120      	movs	r1, #32
 800ae4c:	480c      	ldr	r0, [pc, #48]	; (800ae80 <Radio_Receive_Data+0x58>)
 800ae4e:	f7ff f871 	bl	8009f34 <NRF24_read>
//    NRF24_writeAckPayload(1, myAckPayload, 32);
		gRx_Count++;
 800ae52:	4b0c      	ldr	r3, [pc, #48]	; (800ae84 <Radio_Receive_Data+0x5c>)
 800ae54:	881b      	ldrh	r3, [r3, #0]
 800ae56:	3301      	adds	r3, #1
 800ae58:	b29a      	uxth	r2, r3
 800ae5a:	4b0a      	ldr	r3, [pc, #40]	; (800ae84 <Radio_Receive_Data+0x5c>)
 800ae5c:	801a      	strh	r2, [r3, #0]

//	sprintf(gSerial_Console_Print_Buff, "myAckPayload:  %s \r\n", myAckPayload);
//	Print_Debug_Info_UART(gSerial_Console_Print_Buff);

		sprintf(gSerial_Console_Print_Buff, "Received Data:{  %s  } - Rx Count %d \r\n", myRxData, gRx_Count);
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <Radio_Receive_Data+0x5c>)
 800ae60:	881b      	ldrh	r3, [r3, #0]
 800ae62:	4a07      	ldr	r2, [pc, #28]	; (800ae80 <Radio_Receive_Data+0x58>)
 800ae64:	4908      	ldr	r1, [pc, #32]	; (800ae88 <Radio_Receive_Data+0x60>)
 800ae66:	4809      	ldr	r0, [pc, #36]	; (800ae8c <Radio_Receive_Data+0x64>)
 800ae68:	f000 ff28 	bl	800bcbc <siprintf>
		Print_Debug_Info_UART(gSerial_Console_Print_Buff);
 800ae6c:	4807      	ldr	r0, [pc, #28]	; (800ae8c <Radio_Receive_Data+0x64>)
 800ae6e:	f7fe fd4b 	bl	8009908 <Print_Debug_Info_UART>

	}

	return ret_val;
 800ae72:	79fb      	ldrb	r3, [r7, #7]
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	3708      	adds	r7, #8
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	bd80      	pop	{r7, pc}
 800ae7c:	40020c00 	.word	0x40020c00
 800ae80:	20002620 	.word	0x20002620
 800ae84:	20000574 	.word	0x20000574
 800ae88:	0800c8d0 	.word	0x0800c8d0
 800ae8c:	2000259c 	.word	0x2000259c

0800ae90 <NRF24L01_Schedule_And_Event_Control>:


void NRF24L01_Schedule_And_Event_Control()
{
 800ae90:	b580      	push	{r7, lr}
 800ae92:	b082      	sub	sp, #8
 800ae94:	af02      	add	r7, sp, #8

	gPrint_Counter++;
 800ae96:	4b20      	ldr	r3, [pc, #128]	; (800af18 <NRF24L01_Schedule_And_Event_Control+0x88>)
 800ae98:	781b      	ldrb	r3, [r3, #0]
 800ae9a:	3301      	adds	r3, #1
 800ae9c:	b2da      	uxtb	r2, r3
 800ae9e:	4b1e      	ldr	r3, [pc, #120]	; (800af18 <NRF24L01_Schedule_And_Event_Control+0x88>)
 800aea0:	701a      	strb	r2, [r3, #0]

	Read_User_Pin();
 800aea2:	f7ff ff4d 	bl	800ad40 <Read_User_Pin>

  if(gTxRxFlag)
 800aea6:	4b1d      	ldr	r3, [pc, #116]	; (800af1c <NRF24L01_Schedule_And_Event_Control+0x8c>)
 800aea8:	781b      	ldrb	r3, [r3, #0]
 800aeaa:	2b00      	cmp	r3, #0
 800aeac:	d020      	beq.n	800aef0 <NRF24L01_Schedule_And_Event_Control+0x60>
  {
//  	Print_Debug_Info_UART("----------  Configured as Transmitter  ------------ \r\n");
		sprintf(myTxData,"Tx Count= %d, Tx Failed= %d ", gTx_Count, gTx_Fail);
 800aeae:	4b1c      	ldr	r3, [pc, #112]	; (800af20 <NRF24L01_Schedule_And_Event_Control+0x90>)
 800aeb0:	881b      	ldrh	r3, [r3, #0]
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	4b1b      	ldr	r3, [pc, #108]	; (800af24 <NRF24L01_Schedule_And_Event_Control+0x94>)
 800aeb6:	881b      	ldrh	r3, [r3, #0]
 800aeb8:	491b      	ldr	r1, [pc, #108]	; (800af28 <NRF24L01_Schedule_And_Event_Control+0x98>)
 800aeba:	481c      	ldr	r0, [pc, #112]	; (800af2c <NRF24L01_Schedule_And_Event_Control+0x9c>)
 800aebc:	f000 fefe 	bl	800bcbc <siprintf>
		sprintf(gSerial_Console_Print_Buff, "Tx Count= %d, Tx Failed= %d, Rx Count= %d, Rx Failed= %d  \r\n",gTx_Count , gTx_Fail, gRx_Count, gRx_Fail);
 800aec0:	4b17      	ldr	r3, [pc, #92]	; (800af20 <NRF24L01_Schedule_And_Event_Control+0x90>)
 800aec2:	881b      	ldrh	r3, [r3, #0]
 800aec4:	4619      	mov	r1, r3
 800aec6:	4b17      	ldr	r3, [pc, #92]	; (800af24 <NRF24L01_Schedule_And_Event_Control+0x94>)
 800aec8:	881b      	ldrh	r3, [r3, #0]
 800aeca:	4618      	mov	r0, r3
 800aecc:	4b18      	ldr	r3, [pc, #96]	; (800af30 <NRF24L01_Schedule_And_Event_Control+0xa0>)
 800aece:	881b      	ldrh	r3, [r3, #0]
 800aed0:	461a      	mov	r2, r3
 800aed2:	4b18      	ldr	r3, [pc, #96]	; (800af34 <NRF24L01_Schedule_And_Event_Control+0xa4>)
 800aed4:	881b      	ldrh	r3, [r3, #0]
 800aed6:	9301      	str	r3, [sp, #4]
 800aed8:	9200      	str	r2, [sp, #0]
 800aeda:	4603      	mov	r3, r0
 800aedc:	460a      	mov	r2, r1
 800aede:	4916      	ldr	r1, [pc, #88]	; (800af38 <NRF24L01_Schedule_And_Event_Control+0xa8>)
 800aee0:	4816      	ldr	r0, [pc, #88]	; (800af3c <NRF24L01_Schedule_And_Event_Control+0xac>)
 800aee2:	f000 feeb 	bl	800bcbc <siprintf>

		Radio_Transmit_Data();
 800aee6:	f7ff ff79 	bl	800addc <Radio_Transmit_Data>
		Print_Debug_Info_UART(gSerial_Console_Print_Buff);
 800aeea:	4814      	ldr	r0, [pc, #80]	; (800af3c <NRF24L01_Schedule_And_Event_Control+0xac>)
 800aeec:	f7fe fd0c 	bl	8009908 <Print_Debug_Info_UART>
//	  }


//  }

  if(gPrint_Counter % 5 == 0)
 800aef0:	4b09      	ldr	r3, [pc, #36]	; (800af18 <NRF24L01_Schedule_And_Event_Control+0x88>)
 800aef2:	781a      	ldrb	r2, [r3, #0]
 800aef4:	4b12      	ldr	r3, [pc, #72]	; (800af40 <NRF24L01_Schedule_And_Event_Control+0xb0>)
 800aef6:	fba3 1302 	umull	r1, r3, r3, r2
 800aefa:	0899      	lsrs	r1, r3, #2
 800aefc:	460b      	mov	r3, r1
 800aefe:	009b      	lsls	r3, r3, #2
 800af00:	440b      	add	r3, r1
 800af02:	1ad3      	subs	r3, r2, r3
 800af04:	b2db      	uxtb	r3, r3
 800af06:	2b00      	cmp	r3, #0
 800af08:	d103      	bne.n	800af12 <NRF24L01_Schedule_And_Event_Control+0x82>
  {
		printConfigReg();
 800af0a:	f7ff fed1 	bl	800acb0 <printConfigReg>
		printStatusReg();
 800af0e:	f7ff fe63 	bl	800abd8 <printStatusReg>

  }
}
 800af12:	bf00      	nop
 800af14:	46bd      	mov	sp, r7
 800af16:	bd80      	pop	{r7, pc}
 800af18:	2000057b 	.word	0x2000057b
 800af1c:	2000057a 	.word	0x2000057a
 800af20:	20000570 	.word	0x20000570
 800af24:	20000572 	.word	0x20000572
 800af28:	0800c8f8 	.word	0x0800c8f8
 800af2c:	20000018 	.word	0x20000018
 800af30:	20000574 	.word	0x20000574
 800af34:	20000576 	.word	0x20000576
 800af38:	0800c918 	.word	0x0800c918
 800af3c:	2000259c 	.word	0x2000259c
 800af40:	cccccccd 	.word	0xcccccccd

0800af44 <_Z26OLED_Initial_Configuartionv>:




void OLED_Initial_Configuartion()
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b09a      	sub	sp, #104	; 0x68
 800af48:	af04      	add	r7, sp, #16

  Obj_OLED_01.init(&hi2c1);
 800af4a:	4946      	ldr	r1, [pc, #280]	; (800b064 <_Z26OLED_Initial_Configuartionv+0x120>)
 800af4c:	4846      	ldr	r0, [pc, #280]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800af4e:	f000 f9c2 	bl	800b2d6 <_ZN4OLED4initEP19__I2C_HandleTypeDef>

  Obj_OLED_01.fill(0);
 800af52:	2100      	movs	r1, #0
 800af54:	4844      	ldr	r0, [pc, #272]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800af56:	f000 fafe 	bl	800b556 <_ZN4OLED4fillEb>
  Obj_OLED_01.drawFullscreen();
 800af5a:	4843      	ldr	r0, [pc, #268]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800af5c:	f000 fa72 	bl	800b444 <_ZN4OLED14drawFullscreenEv>

  Obj_OLED_01.text(2, 2, "WELCOME to",  1, 1, 2  );
 800af60:	f107 031c 	add.w	r3, r7, #28
 800af64:	4618      	mov	r0, r3
 800af66:	f000 fca3 	bl	800b8b0 <_ZNSaIcEC1Ev>
 800af6a:	f107 021c 	add.w	r2, r7, #28
 800af6e:	1d3b      	adds	r3, r7, #4
 800af70:	493e      	ldr	r1, [pc, #248]	; (800b06c <_Z26OLED_Initial_Configuartionv+0x128>)
 800af72:	4618      	mov	r0, r3
 800af74:	f000 fd02 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800af78:	1d3a      	adds	r2, r7, #4
 800af7a:	2302      	movs	r3, #2
 800af7c:	9302      	str	r3, [sp, #8]
 800af7e:	2301      	movs	r3, #1
 800af80:	9301      	str	r3, [sp, #4]
 800af82:	2301      	movs	r3, #1
 800af84:	9300      	str	r3, [sp, #0]
 800af86:	4613      	mov	r3, r2
 800af88:	2202      	movs	r2, #2
 800af8a:	2102      	movs	r1, #2
 800af8c:	4836      	ldr	r0, [pc, #216]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800af8e:	f000 fc4d 	bl	800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800af92:	1d3b      	adds	r3, r7, #4
 800af94:	4618      	mov	r0, r3
 800af96:	f000 fcc1 	bl	800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800af9a:	f107 031c 	add.w	r3, r7, #28
 800af9e:	4618      	mov	r0, r3
 800afa0:	f000 fc87 	bl	800b8b2 <_ZNSaIcED1Ev>
  Obj_OLED_01.text(0, 22, "  Project ",  1, 0, 2  );
 800afa4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800afa8:	4618      	mov	r0, r3
 800afaa:	f000 fc81 	bl	800b8b0 <_ZNSaIcEC1Ev>
 800afae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800afb2:	f107 0320 	add.w	r3, r7, #32
 800afb6:	492e      	ldr	r1, [pc, #184]	; (800b070 <_Z26OLED_Initial_Configuartionv+0x12c>)
 800afb8:	4618      	mov	r0, r3
 800afba:	f000 fcdf 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800afbe:	f107 0220 	add.w	r2, r7, #32
 800afc2:	2302      	movs	r3, #2
 800afc4:	9302      	str	r3, [sp, #8]
 800afc6:	2300      	movs	r3, #0
 800afc8:	9301      	str	r3, [sp, #4]
 800afca:	2301      	movs	r3, #1
 800afcc:	9300      	str	r3, [sp, #0]
 800afce:	4613      	mov	r3, r2
 800afd0:	2216      	movs	r2, #22
 800afd2:	2100      	movs	r1, #0
 800afd4:	4824      	ldr	r0, [pc, #144]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800afd6:	f000 fc29 	bl	800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800afda:	f107 0320 	add.w	r3, r7, #32
 800afde:	4618      	mov	r0, r3
 800afe0:	f000 fc9c 	bl	800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800afe4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800afe8:	4618      	mov	r0, r3
 800afea:	f000 fc62 	bl	800b8b2 <_ZNSaIcED1Ev>
  Obj_OLED_01.text(2, 49, "- GALWAN -",  1, 0, 2  );
 800afee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800aff2:	4618      	mov	r0, r3
 800aff4:	f000 fc5c 	bl	800b8b0 <_ZNSaIcEC1Ev>
 800aff8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800affc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b000:	491c      	ldr	r1, [pc, #112]	; (800b074 <_Z26OLED_Initial_Configuartionv+0x130>)
 800b002:	4618      	mov	r0, r3
 800b004:	f000 fcba 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b008:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b00c:	2302      	movs	r3, #2
 800b00e:	9302      	str	r3, [sp, #8]
 800b010:	2300      	movs	r3, #0
 800b012:	9301      	str	r3, [sp, #4]
 800b014:	2301      	movs	r3, #1
 800b016:	9300      	str	r3, [sp, #0]
 800b018:	4613      	mov	r3, r2
 800b01a:	2231      	movs	r2, #49	; 0x31
 800b01c:	2102      	movs	r1, #2
 800b01e:	4812      	ldr	r0, [pc, #72]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800b020:	f000 fc04 	bl	800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800b024:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b028:	4618      	mov	r0, r3
 800b02a:	f000 fc77 	bl	800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b02e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b032:	4618      	mov	r0, r3
 800b034:	f000 fc3d 	bl	800b8b2 <_ZNSaIcED1Ev>
  Obj_OLED_01.drawFullscreen();
 800b038:	480b      	ldr	r0, [pc, #44]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800b03a:	f000 fa03 	bl	800b444 <_ZN4OLED14drawFullscreenEv>
  HAL_Delay(1000);
 800b03e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b042:	f7f6 ff09 	bl	8001e58 <HAL_Delay>

  Obj_OLED_01.invert();
 800b046:	4808      	ldr	r0, [pc, #32]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800b048:	f000 fad3 	bl	800b5f2 <_ZN4OLED6invertEv>
  Obj_OLED_01.drawFullscreen();
 800b04c:	4806      	ldr	r0, [pc, #24]	; (800b068 <_Z26OLED_Initial_Configuartionv+0x124>)
 800b04e:	f000 f9f9 	bl	800b444 <_ZN4OLED14drawFullscreenEv>
  HAL_Delay(1000);
 800b052:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800b056:	f7f6 feff 	bl	8001e58 <HAL_Delay>

}
 800b05a:	bf00      	nop
 800b05c:	3758      	adds	r7, #88	; 0x58
 800b05e:	46bd      	mov	sp, r7
 800b060:	bd80      	pop	{r7, pc}
 800b062:	bf00      	nop
 800b064:	2000019c 	.word	0x2000019c
 800b068:	20000580 	.word	0x20000580
 800b06c:	0800c958 	.word	0x0800c958
 800b070:	0800c964 	.word	0x0800c964
 800b074:	0800c970 	.word	0x0800c970

0800b078 <_Z15Display_RF_Infov>:




void Display_RF_Info()
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b09a      	sub	sp, #104	; 0x68
 800b07c:	af04      	add	r7, sp, #16

  Obj_OLED_01.fill(0);
 800b07e:	2100      	movs	r1, #0
 800b080:	4848      	ldr	r0, [pc, #288]	; (800b1a4 <_Z15Display_RF_Infov+0x12c>)
 800b082:	f000 fa68 	bl	800b556 <_ZN4OLED4fillEb>
//  Obj_OLED_01.drawFullscreen();

  sprintf( s, "Tx %d  %d ", gTx_Count, gTx_Fail );
 800b086:	4b48      	ldr	r3, [pc, #288]	; (800b1a8 <_Z15Display_RF_Infov+0x130>)
 800b088:	881b      	ldrh	r3, [r3, #0]
 800b08a:	461a      	mov	r2, r3
 800b08c:	4b47      	ldr	r3, [pc, #284]	; (800b1ac <_Z15Display_RF_Infov+0x134>)
 800b08e:	881b      	ldrh	r3, [r3, #0]
 800b090:	4947      	ldr	r1, [pc, #284]	; (800b1b0 <_Z15Display_RF_Infov+0x138>)
 800b092:	4848      	ldr	r0, [pc, #288]	; (800b1b4 <_Z15Display_RF_Infov+0x13c>)
 800b094:	f000 fe12 	bl	800bcbc <siprintf>
  Obj_OLED_01.text(0, 0, s,  1, 0, 2  );
 800b098:	f107 031c 	add.w	r3, r7, #28
 800b09c:	4618      	mov	r0, r3
 800b09e:	f000 fc07 	bl	800b8b0 <_ZNSaIcEC1Ev>
 800b0a2:	f107 021c 	add.w	r2, r7, #28
 800b0a6:	1d3b      	adds	r3, r7, #4
 800b0a8:	4942      	ldr	r1, [pc, #264]	; (800b1b4 <_Z15Display_RF_Infov+0x13c>)
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f000 fc66 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b0b0:	1d3a      	adds	r2, r7, #4
 800b0b2:	2302      	movs	r3, #2
 800b0b4:	9302      	str	r3, [sp, #8]
 800b0b6:	2300      	movs	r3, #0
 800b0b8:	9301      	str	r3, [sp, #4]
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	9300      	str	r3, [sp, #0]
 800b0be:	4613      	mov	r3, r2
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	2100      	movs	r1, #0
 800b0c4:	4837      	ldr	r0, [pc, #220]	; (800b1a4 <_Z15Display_RF_Infov+0x12c>)
 800b0c6:	f000 fbb1 	bl	800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800b0ca:	1d3b      	adds	r3, r7, #4
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f000 fc25 	bl	800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b0d2:	f107 031c 	add.w	r3, r7, #28
 800b0d6:	4618      	mov	r0, r3
 800b0d8:	f000 fbeb 	bl	800b8b2 <_ZNSaIcED1Ev>

  sprintf( s, "Rx %d  %d ", gRx_Count , gRx_Fail );
 800b0dc:	4b36      	ldr	r3, [pc, #216]	; (800b1b8 <_Z15Display_RF_Infov+0x140>)
 800b0de:	881b      	ldrh	r3, [r3, #0]
 800b0e0:	461a      	mov	r2, r3
 800b0e2:	4b36      	ldr	r3, [pc, #216]	; (800b1bc <_Z15Display_RF_Infov+0x144>)
 800b0e4:	881b      	ldrh	r3, [r3, #0]
 800b0e6:	4936      	ldr	r1, [pc, #216]	; (800b1c0 <_Z15Display_RF_Infov+0x148>)
 800b0e8:	4832      	ldr	r0, [pc, #200]	; (800b1b4 <_Z15Display_RF_Infov+0x13c>)
 800b0ea:	f000 fde7 	bl	800bcbc <siprintf>
  Obj_OLED_01.text(0, 24, s,  1, 0, 2  );
 800b0ee:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b0f2:	4618      	mov	r0, r3
 800b0f4:	f000 fbdc 	bl	800b8b0 <_ZNSaIcEC1Ev>
 800b0f8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800b0fc:	f107 0320 	add.w	r3, r7, #32
 800b100:	492c      	ldr	r1, [pc, #176]	; (800b1b4 <_Z15Display_RF_Infov+0x13c>)
 800b102:	4618      	mov	r0, r3
 800b104:	f000 fc3a 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b108:	f107 0220 	add.w	r2, r7, #32
 800b10c:	2302      	movs	r3, #2
 800b10e:	9302      	str	r3, [sp, #8]
 800b110:	2300      	movs	r3, #0
 800b112:	9301      	str	r3, [sp, #4]
 800b114:	2301      	movs	r3, #1
 800b116:	9300      	str	r3, [sp, #0]
 800b118:	4613      	mov	r3, r2
 800b11a:	2218      	movs	r2, #24
 800b11c:	2100      	movs	r1, #0
 800b11e:	4821      	ldr	r0, [pc, #132]	; (800b1a4 <_Z15Display_RF_Infov+0x12c>)
 800b120:	f000 fb84 	bl	800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800b124:	f107 0320 	add.w	r3, r7, #32
 800b128:	4618      	mov	r0, r3
 800b12a:	f000 fbf7 	bl	800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b12e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800b132:	4618      	mov	r0, r3
 800b134:	f000 fbbd 	bl	800b8b2 <_ZNSaIcED1Ev>

  sprintf( s, "RSSI %d dB %d", gRSSI, gdB );
 800b138:	4b22      	ldr	r3, [pc, #136]	; (800b1c4 <_Z15Display_RF_Infov+0x14c>)
 800b13a:	781b      	ldrb	r3, [r3, #0]
 800b13c:	461a      	mov	r2, r3
 800b13e:	4b22      	ldr	r3, [pc, #136]	; (800b1c8 <_Z15Display_RF_Infov+0x150>)
 800b140:	781b      	ldrb	r3, [r3, #0]
 800b142:	4922      	ldr	r1, [pc, #136]	; (800b1cc <_Z15Display_RF_Infov+0x154>)
 800b144:	481b      	ldr	r0, [pc, #108]	; (800b1b4 <_Z15Display_RF_Infov+0x13c>)
 800b146:	f000 fdb9 	bl	800bcbc <siprintf>
  Obj_OLED_01.text(0, 49, s,  1, 0, 2  );
 800b14a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b14e:	4618      	mov	r0, r3
 800b150:	f000 fbae 	bl	800b8b0 <_ZNSaIcEC1Ev>
 800b154:	f107 0254 	add.w	r2, r7, #84	; 0x54
 800b158:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b15c:	4915      	ldr	r1, [pc, #84]	; (800b1b4 <_Z15Display_RF_Infov+0x13c>)
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 fc0c 	bl	800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 800b164:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800b168:	2302      	movs	r3, #2
 800b16a:	9302      	str	r3, [sp, #8]
 800b16c:	2300      	movs	r3, #0
 800b16e:	9301      	str	r3, [sp, #4]
 800b170:	2301      	movs	r3, #1
 800b172:	9300      	str	r3, [sp, #0]
 800b174:	4613      	mov	r3, r2
 800b176:	2231      	movs	r2, #49	; 0x31
 800b178:	2100      	movs	r1, #0
 800b17a:	480a      	ldr	r0, [pc, #40]	; (800b1a4 <_Z15Display_RF_Infov+0x12c>)
 800b17c:	f000 fb56 	bl	800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 800b180:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800b184:	4618      	mov	r0, r3
 800b186:	f000 fbc9 	bl	800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800b18a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800b18e:	4618      	mov	r0, r3
 800b190:	f000 fb8f 	bl	800b8b2 <_ZNSaIcED1Ev>


  Obj_OLED_01.drawFullscreen();
 800b194:	4803      	ldr	r0, [pc, #12]	; (800b1a4 <_Z15Display_RF_Infov+0x12c>)
 800b196:	f000 f955 	bl	800b444 <_ZN4OLED14drawFullscreenEv>
}
 800b19a:	bf00      	nop
 800b19c:	3758      	adds	r7, #88	; 0x58
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000580 	.word	0x20000580
 800b1a8:	20000570 	.word	0x20000570
 800b1ac:	20000572 	.word	0x20000572
 800b1b0:	0800c97c 	.word	0x0800c97c
 800b1b4:	20000040 	.word	0x20000040
 800b1b8:	20000574 	.word	0x20000574
 800b1bc:	20000576 	.word	0x20000576
 800b1c0:	0800c988 	.word	0x0800c988
 800b1c4:	20000578 	.word	0x20000578
 800b1c8:	20000579 	.word	0x20000579
 800b1cc:	0800c994 	.word	0x0800c994

0800b1d0 <_Z31OLED_Schedule_And_Event_Controlv>:




void OLED_Schedule_And_Event_Control()
{
 800b1d0:	b580      	push	{r7, lr}
 800b1d2:	af00      	add	r7, sp, #0

//  Obj_OLED_01.fill(0);
//  Obj_OLED_01.drawFullscreen();


	if(gTimer_Display_RF_Info == 0)
 800b1d4:	4b07      	ldr	r3, [pc, #28]	; (800b1f4 <_Z31OLED_Schedule_And_Event_Controlv+0x24>)
 800b1d6:	881b      	ldrh	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d104      	bne.n	800b1e6 <_Z31OLED_Schedule_And_Event_Controlv+0x16>
	{
		gTimer_Display_RF_Info = 200;
 800b1dc:	4b05      	ldr	r3, [pc, #20]	; (800b1f4 <_Z31OLED_Schedule_And_Event_Controlv+0x24>)
 800b1de:	22c8      	movs	r2, #200	; 0xc8
 800b1e0:	801a      	strh	r2, [r3, #0]
		Display_RF_Info();
 800b1e2:	f7ff ff49 	bl	800b078 <_Z15Display_RF_Infov>
 */

//  Obj_OLED_01.character(0, 20,  c, colour, bg, size);
//  x++; y++;
//  Obj_OLED_01.drawFullscreen();
  gCounter++;
 800b1e6:	4b04      	ldr	r3, [pc, #16]	; (800b1f8 <_Z31OLED_Schedule_And_Event_Controlv+0x28>)
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	3301      	adds	r3, #1
 800b1ec:	4a02      	ldr	r2, [pc, #8]	; (800b1f8 <_Z31OLED_Schedule_And_Event_Controlv+0x28>)
 800b1ee:	6013      	str	r3, [r2, #0]





}
 800b1f0:	bf00      	nop
 800b1f2:	bd80      	pop	{r7, pc}
 800b1f4:	200004f8 	.word	0x200004f8
 800b1f8:	2000057c 	.word	0x2000057c

0800b1fc <_Z41__static_initialization_and_destruction_0ii>:
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b082      	sub	sp, #8
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]
 800b204:	6039      	str	r1, [r7, #0]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	2b01      	cmp	r3, #1
 800b20a:	d107      	bne.n	800b21c <_Z41__static_initialization_and_destruction_0ii+0x20>
 800b20c:	683b      	ldr	r3, [r7, #0]
 800b20e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b212:	4293      	cmp	r3, r2
 800b214:	d102      	bne.n	800b21c <_Z41__static_initialization_and_destruction_0ii+0x20>
	OLED Obj_OLED_01;
 800b216:	4809      	ldr	r0, [pc, #36]	; (800b23c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b218:	f000 f822 	bl	800b260 <_ZN4OLEDC1Ev>
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	d107      	bne.n	800b232 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b222:	683b      	ldr	r3, [r7, #0]
 800b224:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b228:	4293      	cmp	r3, r2
 800b22a:	d102      	bne.n	800b232 <_Z41__static_initialization_and_destruction_0ii+0x36>
 800b22c:	4803      	ldr	r0, [pc, #12]	; (800b23c <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800b22e:	f000 f831 	bl	800b294 <_ZN4OLEDD1Ev>
}
 800b232:	bf00      	nop
 800b234:	3708      	adds	r7, #8
 800b236:	46bd      	mov	sp, r7
 800b238:	bd80      	pop	{r7, pc}
 800b23a:	bf00      	nop
 800b23c:	20000580 	.word	0x20000580

0800b240 <_GLOBAL__sub_I_x>:
 800b240:	b580      	push	{r7, lr}
 800b242:	af00      	add	r7, sp, #0
 800b244:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b248:	2001      	movs	r0, #1
 800b24a:	f7ff ffd7 	bl	800b1fc <_Z41__static_initialization_and_destruction_0ii>
 800b24e:	bd80      	pop	{r7, pc}

0800b250 <_GLOBAL__sub_D_x>:
 800b250:	b580      	push	{r7, lr}
 800b252:	af00      	add	r7, sp, #0
 800b254:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800b258:	2000      	movs	r0, #0
 800b25a:	f7ff ffcf 	bl	800b1fc <_Z41__static_initialization_and_destruction_0ii>
 800b25e:	bd80      	pop	{r7, pc}

0800b260 <_ZN4OLEDC1Ev>:
#include "RJA_SSD1306_Inc.h"


constexpr unsigned char OLED::font1[];

OLED::OLED()
 800b260:	b480      	push	{r7}
 800b262:	b083      	sub	sp, #12
 800b264:	af00      	add	r7, sp, #0
 800b266:	6078      	str	r0, [r7, #4]
 800b268:	4a09      	ldr	r2, [pc, #36]	; (800b290 <_ZN4OLEDC1Ev+0x30>)
 800b26a:	687b      	ldr	r3, [r7, #4]
 800b26c:	601a      	str	r2, [r3, #0]
 800b26e:	687b      	ldr	r3, [r7, #4]
 800b270:	2278      	movs	r2, #120	; 0x78
 800b272:	711a      	strb	r2, [r3, #4]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	227a      	movs	r2, #122	; 0x7a
 800b278:	715a      	strb	r2, [r3, #5]
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	2200      	movs	r2, #0
 800b27e:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4618      	mov	r0, r3
 800b284:	370c      	adds	r7, #12
 800b286:	46bd      	mov	sp, r7
 800b288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b28c:	4770      	bx	lr
 800b28e:	bf00      	nop
 800b290:	0800cedc 	.word	0x0800cedc

0800b294 <_ZN4OLEDD1Ev>:

OLED::~OLED()
 800b294:	b480      	push	{r7}
 800b296:	b083      	sub	sp, #12
 800b298:	af00      	add	r7, sp, #0
 800b29a:	6078      	str	r0, [r7, #4]
 800b29c:	4a04      	ldr	r2, [pc, #16]	; (800b2b0 <_ZN4OLEDD1Ev+0x1c>)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	4618      	mov	r0, r3
 800b2a6:	370c      	adds	r7, #12
 800b2a8:	46bd      	mov	sp, r7
 800b2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2ae:	4770      	bx	lr
 800b2b0:	0800cedc 	.word	0x0800cedc

0800b2b4 <_ZN4OLEDD0Ev>:
OLED::~OLED()
 800b2b4:	b580      	push	{r7, lr}
 800b2b6:	b082      	sub	sp, #8
 800b2b8:	af00      	add	r7, sp, #0
 800b2ba:	6078      	str	r0, [r7, #4]
}
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f7ff ffe9 	bl	800b294 <_ZN4OLEDD1Ev>
 800b2c2:	f242 010c 	movw	r1, #8204	; 0x200c
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f000 faee 	bl	800b8a8 <_ZdlPvj>
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	3708      	adds	r7, #8
 800b2d2:	46bd      	mov	sp, r7
 800b2d4:	bd80      	pop	{r7, pc}

0800b2d6 <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 800b2d6:	b580      	push	{r7, lr}
 800b2d8:	b088      	sub	sp, #32
 800b2da:	af02      	add	r7, sp, #8
 800b2dc:	6078      	str	r0, [r7, #4]
 800b2de:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	683a      	ldr	r2, [r7, #0]
 800b2e4:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 800b2ea:	23ae      	movs	r3, #174	; 0xae
 800b2ec:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	6898      	ldr	r0, [r3, #8]
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	791b      	ldrb	r3, [r3, #4]
 800b2f6:	b299      	uxth	r1, r3
 800b2f8:	f107 020c 	add.w	r2, r7, #12
 800b2fc:	230a      	movs	r3, #10
 800b2fe:	9300      	str	r3, [sp, #0]
 800b300:	2302      	movs	r3, #2
 800b302:	f7f7 ff8d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b306:	2300      	movs	r3, #0
 800b308:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 800b30a:	2320      	movs	r3, #32
 800b30c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6898      	ldr	r0, [r3, #8]
 800b312:	687b      	ldr	r3, [r7, #4]
 800b314:	791b      	ldrb	r3, [r3, #4]
 800b316:	b299      	uxth	r1, r3
 800b318:	f107 020c 	add.w	r2, r7, #12
 800b31c:	230a      	movs	r3, #10
 800b31e:	9300      	str	r3, [sp, #0]
 800b320:	2302      	movs	r3, #2
 800b322:	f7f7 ff7d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b326:	2300      	movs	r3, #0
 800b328:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 800b32a:	2300      	movs	r3, #0
 800b32c:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	6898      	ldr	r0, [r3, #8]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	791b      	ldrb	r3, [r3, #4]
 800b336:	b299      	uxth	r1, r3
 800b338:	f107 020c 	add.w	r2, r7, #12
 800b33c:	230a      	movs	r3, #10
 800b33e:	9300      	str	r3, [sp, #0]
 800b340:	2302      	movs	r3, #2
 800b342:	f7f7 ff6d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b346:	2300      	movs	r3, #0
 800b348:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 800b34a:	2340      	movs	r3, #64	; 0x40
 800b34c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	6898      	ldr	r0, [r3, #8]
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	791b      	ldrb	r3, [r3, #4]
 800b356:	b299      	uxth	r1, r3
 800b358:	f107 020c 	add.w	r2, r7, #12
 800b35c:	230a      	movs	r3, #10
 800b35e:	9300      	str	r3, [sp, #0]
 800b360:	2302      	movs	r3, #2
 800b362:	f7f7 ff5d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b366:	2300      	movs	r3, #0
 800b368:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 800b36a:	2300      	movs	r3, #0
 800b36c:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6898      	ldr	r0, [r3, #8]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	791b      	ldrb	r3, [r3, #4]
 800b376:	b299      	uxth	r1, r3
 800b378:	f107 020c 	add.w	r2, r7, #12
 800b37c:	230a      	movs	r3, #10
 800b37e:	9300      	str	r3, [sp, #0]
 800b380:	2302      	movs	r3, #2
 800b382:	f7f7 ff4d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b386:	2300      	movs	r3, #0
 800b388:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 800b38a:	238d      	movs	r3, #141	; 0x8d
 800b38c:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6898      	ldr	r0, [r3, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	791b      	ldrb	r3, [r3, #4]
 800b396:	b299      	uxth	r1, r3
 800b398:	f107 020c 	add.w	r2, r7, #12
 800b39c:	230a      	movs	r3, #10
 800b39e:	9300      	str	r3, [sp, #0]
 800b3a0:	2302      	movs	r3, #2
 800b3a2:	f7f7 ff3d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b3a6:	2300      	movs	r3, #0
 800b3a8:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 800b3aa:	2314      	movs	r3, #20
 800b3ac:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	6898      	ldr	r0, [r3, #8]
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	791b      	ldrb	r3, [r3, #4]
 800b3b6:	b299      	uxth	r1, r3
 800b3b8:	f107 020c 	add.w	r2, r7, #12
 800b3bc:	230a      	movs	r3, #10
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2302      	movs	r3, #2
 800b3c2:	f7f7 ff2d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b3c6:	2300      	movs	r3, #0
 800b3c8:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 800b3ca:	23a4      	movs	r3, #164	; 0xa4
 800b3cc:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6898      	ldr	r0, [r3, #8]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	791b      	ldrb	r3, [r3, #4]
 800b3d6:	b299      	uxth	r1, r3
 800b3d8:	f107 020c 	add.w	r2, r7, #12
 800b3dc:	230a      	movs	r3, #10
 800b3de:	9300      	str	r3, [sp, #0]
 800b3e0:	2302      	movs	r3, #2
 800b3e2:	f7f7 ff1d 	bl	8003220 <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 800b3ea:	23af      	movs	r3, #175	; 0xaf
 800b3ec:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	6898      	ldr	r0, [r3, #8]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	791b      	ldrb	r3, [r3, #4]
 800b3f6:	b299      	uxth	r1, r3
 800b3f8:	f107 020c 	add.w	r2, r7, #12
 800b3fc:	230a      	movs	r3, #10
 800b3fe:	9300      	str	r3, [sp, #0]
 800b400:	2302      	movs	r3, #2
 800b402:	f7f7 ff0d 	bl	8003220 <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 800b406:	2300      	movs	r3, #0
 800b408:	617b      	str	r3, [r7, #20]
 800b40a:	697b      	ldr	r3, [r7, #20]
 800b40c:	2b3f      	cmp	r3, #63	; 0x3f
 800b40e:	dc15      	bgt.n	800b43c <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 800b410:	2300      	movs	r3, #0
 800b412:	613b      	str	r3, [r7, #16]
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	2b7f      	cmp	r3, #127	; 0x7f
 800b418:	dc0c      	bgt.n	800b434 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 800b41a:	687a      	ldr	r2, [r7, #4]
 800b41c:	693b      	ldr	r3, [r7, #16]
 800b41e:	019b      	lsls	r3, r3, #6
 800b420:	441a      	add	r2, r3
 800b422:	697b      	ldr	r3, [r7, #20]
 800b424:	4413      	add	r3, r2
 800b426:	330c      	adds	r3, #12
 800b428:	2200      	movs	r2, #0
 800b42a:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 800b42c:	693b      	ldr	r3, [r7, #16]
 800b42e:	3301      	adds	r3, #1
 800b430:	613b      	str	r3, [r7, #16]
 800b432:	e7ef      	b.n	800b414 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 800b434:	697b      	ldr	r3, [r7, #20]
 800b436:	3301      	adds	r3, #1
 800b438:	617b      	str	r3, [r7, #20]
 800b43a:	e7e6      	b.n	800b40a <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 800b43c:	bf00      	nop
 800b43e:	3718      	adds	r7, #24
 800b440:	46bd      	mov	sp, r7
 800b442:	bd80      	pop	{r7, pc}

0800b444 <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 800b444:	b580      	push	{r7, lr}
 800b446:	b08c      	sub	sp, #48	; 0x30
 800b448:	af02      	add	r7, sp, #8
 800b44a:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 800b44c:	2300      	movs	r3, #0
 800b44e:	627b      	str	r3, [r7, #36]	; 0x24
 800b450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b452:	2b07      	cmp	r3, #7
 800b454:	dc40      	bgt.n	800b4d8 <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 800b456:	2300      	movs	r3, #0
 800b458:	623b      	str	r3, [r7, #32]
 800b45a:	6a3b      	ldr	r3, [r7, #32]
 800b45c:	2b7f      	cmp	r3, #127	; 0x7f
 800b45e:	dc37      	bgt.n	800b4d0 <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 800b460:	2300      	movs	r3, #0
 800b462:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 800b464:	2300      	movs	r3, #0
 800b466:	61fb      	str	r3, [r7, #28]
 800b468:	69fb      	ldr	r3, [r7, #28]
 800b46a:	2b07      	cmp	r3, #7
 800b46c:	dc1c      	bgt.n	800b4a8 <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 800b46e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b470:	00db      	lsls	r3, r3, #3
 800b472:	69fa      	ldr	r2, [r7, #28]
 800b474:	4413      	add	r3, r2
 800b476:	617b      	str	r3, [r7, #20]
				col = c;
 800b478:	6a3b      	ldr	r3, [r7, #32]
 800b47a:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 800b47c:	687a      	ldr	r2, [r7, #4]
 800b47e:	693b      	ldr	r3, [r7, #16]
 800b480:	019b      	lsls	r3, r3, #6
 800b482:	441a      	add	r2, r3
 800b484:	697b      	ldr	r3, [r7, #20]
 800b486:	4413      	add	r3, r2
 800b488:	330c      	adds	r3, #12
 800b48a:	781b      	ldrb	r3, [r3, #0]
 800b48c:	461a      	mov	r2, r3
 800b48e:	69fb      	ldr	r3, [r7, #28]
 800b490:	fa02 f303 	lsl.w	r3, r2, r3
 800b494:	b25a      	sxtb	r2, r3
 800b496:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800b49a:	4313      	orrs	r3, r2
 800b49c:	b25b      	sxtb	r3, r3
 800b49e:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 800b4a0:	69fb      	ldr	r3, [r7, #28]
 800b4a2:	3301      	adds	r3, #1
 800b4a4:	61fb      	str	r3, [r7, #28]
 800b4a6:	e7df      	b.n	800b468 <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 800b4a8:	2340      	movs	r3, #64	; 0x40
 800b4aa:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 800b4ac:	7efb      	ldrb	r3, [r7, #27]
 800b4ae:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 800b4b0:	687b      	ldr	r3, [r7, #4]
 800b4b2:	6898      	ldr	r0, [r3, #8]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	791b      	ldrb	r3, [r3, #4]
 800b4b8:	b299      	uxth	r1, r3
 800b4ba:	f107 020c 	add.w	r2, r7, #12
 800b4be:	2305      	movs	r3, #5
 800b4c0:	9300      	str	r3, [sp, #0]
 800b4c2:	2302      	movs	r3, #2
 800b4c4:	f7f7 feac 	bl	8003220 <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 800b4c8:	6a3b      	ldr	r3, [r7, #32]
 800b4ca:	3301      	adds	r3, #1
 800b4cc:	623b      	str	r3, [r7, #32]
 800b4ce:	e7c4      	b.n	800b45a <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 800b4d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4d2:	3301      	adds	r3, #1
 800b4d4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4d6:	e7bb      	b.n	800b450 <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 800b4d8:	bf00      	nop
 800b4da:	3728      	adds	r7, #40	; 0x28
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	bd80      	pop	{r7, pc}

0800b4e0 <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 800b4e0:	b480      	push	{r7}
 800b4e2:	b085      	sub	sp, #20
 800b4e4:	af00      	add	r7, sp, #0
 800b4e6:	60f8      	str	r0, [r7, #12]
 800b4e8:	60b9      	str	r1, [r7, #8]
 800b4ea:	607a      	str	r2, [r7, #4]
 800b4ec:	70fb      	strb	r3, [r7, #3]
	if(locked)
 800b4ee:	7e3b      	ldrb	r3, [r7, #24]
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d00b      	beq.n	800b50c <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 800b4f4:	68bb      	ldr	r3, [r7, #8]
 800b4f6:	2b00      	cmp	r3, #0
 800b4f8:	db12      	blt.n	800b520 <_ZN4OLED5pixelEiibb+0x40>
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	db0f      	blt.n	800b520 <_ZN4OLED5pixelEiibb+0x40>
 800b500:	68bb      	ldr	r3, [r7, #8]
 800b502:	2b7f      	cmp	r3, #127	; 0x7f
 800b504:	dc0c      	bgt.n	800b520 <_ZN4OLED5pixelEiibb+0x40>
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	2b3f      	cmp	r3, #63	; 0x3f
 800b50a:	dc09      	bgt.n	800b520 <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 800b50c:	68fa      	ldr	r2, [r7, #12]
 800b50e:	68bb      	ldr	r3, [r7, #8]
 800b510:	019b      	lsls	r3, r3, #6
 800b512:	441a      	add	r2, r3
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	4413      	add	r3, r2
 800b518:	330c      	adds	r3, #12
 800b51a:	78fa      	ldrb	r2, [r7, #3]
 800b51c:	701a      	strb	r2, [r3, #0]
 800b51e:	e000      	b.n	800b522 <_ZN4OLED5pixelEiibb+0x42>
			return;
 800b520:	bf00      	nop
}
 800b522:	3714      	adds	r7, #20
 800b524:	46bd      	mov	sp, r7
 800b526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b52a:	4770      	bx	lr

0800b52c <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af02      	add	r7, sp, #8
 800b532:	60f8      	str	r0, [r7, #12]
 800b534:	60b9      	str	r1, [r7, #8]
 800b536:	607a      	str	r2, [r7, #4]
 800b538:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 800b53a:	7f3b      	ldrb	r3, [r7, #28]
 800b53c:	9301      	str	r3, [sp, #4]
 800b53e:	69bb      	ldr	r3, [r7, #24]
 800b540:	9300      	str	r3, [sp, #0]
 800b542:	683b      	ldr	r3, [r7, #0]
 800b544:	687a      	ldr	r2, [r7, #4]
 800b546:	68b9      	ldr	r1, [r7, #8]
 800b548:	68f8      	ldr	r0, [r7, #12]
 800b54a:	f000 f829 	bl	800b5a0 <_ZN4OLED4fillEiiiib>
}
 800b54e:	bf00      	nop
 800b550:	3710      	adds	r7, #16
 800b552:	46bd      	mov	sp, r7
 800b554:	bd80      	pop	{r7, pc}

0800b556 <_ZN4OLED4fillEb>:
	connectPoints(X, Y, pointsNum, colour, lineWidth);
	line(X[pointsNum - 1], Y[pointsNum - 1], X[0], Y[0], colour, lineWidth);
}

void OLED::fill(bool colour)
{
 800b556:	b580      	push	{r7, lr}
 800b558:	b086      	sub	sp, #24
 800b55a:	af02      	add	r7, sp, #8
 800b55c:	6078      	str	r0, [r7, #4]
 800b55e:	460b      	mov	r3, r1
 800b560:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r < 64; r++)
 800b562:	2300      	movs	r3, #0
 800b564:	60fb      	str	r3, [r7, #12]
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	2b3f      	cmp	r3, #63	; 0x3f
 800b56a:	dc15      	bgt.n	800b598 <_ZN4OLED4fillEb+0x42>
	{
		for(int c = 0; c < 128; c++)
 800b56c:	2300      	movs	r3, #0
 800b56e:	60bb      	str	r3, [r7, #8]
 800b570:	68bb      	ldr	r3, [r7, #8]
 800b572:	2b7f      	cmp	r3, #127	; 0x7f
 800b574:	dc0c      	bgt.n	800b590 <_ZN4OLED4fillEb+0x3a>
		{
			pixel(c,r,colour);	//frame[c][r] = colour;
 800b576:	78fa      	ldrb	r2, [r7, #3]
 800b578:	2300      	movs	r3, #0
 800b57a:	9300      	str	r3, [sp, #0]
 800b57c:	4613      	mov	r3, r2
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	68b9      	ldr	r1, [r7, #8]
 800b582:	6878      	ldr	r0, [r7, #4]
 800b584:	f7ff ffac 	bl	800b4e0 <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 800b588:	68bb      	ldr	r3, [r7, #8]
 800b58a:	3301      	adds	r3, #1
 800b58c:	60bb      	str	r3, [r7, #8]
 800b58e:	e7ef      	b.n	800b570 <_ZN4OLED4fillEb+0x1a>
	for(int r = 0; r < 64; r++)
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	3301      	adds	r3, #1
 800b594:	60fb      	str	r3, [r7, #12]
 800b596:	e7e6      	b.n	800b566 <_ZN4OLED4fillEb+0x10>
		}
	}
}
 800b598:	bf00      	nop
 800b59a:	3710      	adds	r7, #16
 800b59c:	46bd      	mov	sp, r7
 800b59e:	bd80      	pop	{r7, pc}

0800b5a0 <_ZN4OLED4fillEiiiib>:
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b088      	sub	sp, #32
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	60b9      	str	r1, [r7, #8]
 800b5aa:	607a      	str	r2, [r7, #4]
 800b5ac:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	617b      	str	r3, [r7, #20]
 800b5b2:	697a      	ldr	r2, [r7, #20]
 800b5b4:	6a3b      	ldr	r3, [r7, #32]
 800b5b6:	429a      	cmp	r2, r3
 800b5b8:	dc17      	bgt.n	800b5ea <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 800b5ba:	68bb      	ldr	r3, [r7, #8]
 800b5bc:	613b      	str	r3, [r7, #16]
 800b5be:	693a      	ldr	r2, [r7, #16]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	429a      	cmp	r2, r3
 800b5c4:	dc0d      	bgt.n	800b5e2 <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 800b5c6:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800b5ca:	2301      	movs	r3, #1
 800b5cc:	9300      	str	r3, [sp, #0]
 800b5ce:	4613      	mov	r3, r2
 800b5d0:	697a      	ldr	r2, [r7, #20]
 800b5d2:	6939      	ldr	r1, [r7, #16]
 800b5d4:	68f8      	ldr	r0, [r7, #12]
 800b5d6:	f7ff ff83 	bl	800b4e0 <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	3301      	adds	r3, #1
 800b5de:	613b      	str	r3, [r7, #16]
 800b5e0:	e7ed      	b.n	800b5be <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 800b5e2:	697b      	ldr	r3, [r7, #20]
 800b5e4:	3301      	adds	r3, #1
 800b5e6:	617b      	str	r3, [r7, #20]
 800b5e8:	e7e3      	b.n	800b5b2 <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 800b5ea:	bf00      	nop
 800b5ec:	3718      	adds	r7, #24
 800b5ee:	46bd      	mov	sp, r7
 800b5f0:	bd80      	pop	{r7, pc}

0800b5f2 <_ZN4OLED6invertEv>:

void OLED::invert()
{
 800b5f2:	b580      	push	{r7, lr}
 800b5f4:	b086      	sub	sp, #24
 800b5f6:	af02      	add	r7, sp, #8
 800b5f8:	6078      	str	r0, [r7, #4]
	for(int r = 0; r < 64; r++)
 800b5fa:	2300      	movs	r3, #0
 800b5fc:	60fb      	str	r3, [r7, #12]
 800b5fe:	68fb      	ldr	r3, [r7, #12]
 800b600:	2b3f      	cmp	r3, #63	; 0x3f
 800b602:	dc1f      	bgt.n	800b644 <_ZN4OLED6invertEv+0x52>
	{
		for(int c = 0; c < 128; c++)
 800b604:	2300      	movs	r3, #0
 800b606:	60bb      	str	r3, [r7, #8]
 800b608:	68bb      	ldr	r3, [r7, #8]
 800b60a:	2b7f      	cmp	r3, #127	; 0x7f
 800b60c:	dc16      	bgt.n	800b63c <_ZN4OLED6invertEv+0x4a>
		{
			pixel(c,r,!frame[c][r]);	//frame[c][r] = !frame[c][r];	//just used pixel() here for good measure
 800b60e:	687a      	ldr	r2, [r7, #4]
 800b610:	68bb      	ldr	r3, [r7, #8]
 800b612:	019b      	lsls	r3, r3, #6
 800b614:	441a      	add	r2, r3
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	4413      	add	r3, r2
 800b61a:	330c      	adds	r3, #12
 800b61c:	781b      	ldrb	r3, [r3, #0]
 800b61e:	f083 0301 	eor.w	r3, r3, #1
 800b622:	b2da      	uxtb	r2, r3
 800b624:	2300      	movs	r3, #0
 800b626:	9300      	str	r3, [sp, #0]
 800b628:	4613      	mov	r3, r2
 800b62a:	68fa      	ldr	r2, [r7, #12]
 800b62c:	68b9      	ldr	r1, [r7, #8]
 800b62e:	6878      	ldr	r0, [r7, #4]
 800b630:	f7ff ff56 	bl	800b4e0 <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 800b634:	68bb      	ldr	r3, [r7, #8]
 800b636:	3301      	adds	r3, #1
 800b638:	60bb      	str	r3, [r7, #8]
 800b63a:	e7e5      	b.n	800b608 <_ZN4OLED6invertEv+0x16>
	for(int r = 0; r < 64; r++)
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	3301      	adds	r3, #1
 800b640:	60fb      	str	r3, [r7, #12]
 800b642:	e7dc      	b.n	800b5fe <_ZN4OLED6invertEv+0xc>
		}
	}
}
 800b644:	bf00      	nop
 800b646:	3710      	adds	r7, #16
 800b648:	46bd      	mov	sp, r7
 800b64a:	bd80      	pop	{r7, pc}

0800b64c <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 800b64c:	b5b0      	push	{r4, r5, r7, lr}
 800b64e:	b088      	sub	sp, #32
 800b650:	af02      	add	r7, sp, #8
 800b652:	60f8      	str	r0, [r7, #12]
 800b654:	60b9      	str	r1, [r7, #8]
 800b656:	607a      	str	r2, [r7, #4]
 800b658:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 800b65a:	68bb      	ldr	r3, [r7, #8]
 800b65c:	2b7f      	cmp	r3, #127	; 0x7f
 800b65e:	f300 80df 	bgt.w	800b820 <_ZN4OLED9characterEiihbbi+0x1d4>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	2b3f      	cmp	r3, #63	; 0x3f
 800b666:	f300 80db 	bgt.w	800b820 <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 800b66a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b66c:	4613      	mov	r3, r2
 800b66e:	005b      	lsls	r3, r3, #1
 800b670:	4413      	add	r3, r2
 800b672:	005b      	lsls	r3, r3, #1
 800b674:	461a      	mov	r2, r3
 800b676:	68bb      	ldr	r3, [r7, #8]
 800b678:	4413      	add	r3, r2
 800b67a:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	f2c0 80cf 	blt.w	800b820 <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 800b682:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b684:	00da      	lsls	r2, r3, #3
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	4413      	add	r3, r2
 800b68a:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	f2c0 80c7 	blt.w	800b820 <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	799b      	ldrb	r3, [r3, #6]
 800b696:	f083 0301 	eor.w	r3, r3, #1
 800b69a:	b2db      	uxtb	r3, r3
 800b69c:	2b00      	cmp	r3, #0
 800b69e:	d005      	beq.n	800b6ac <_ZN4OLED9characterEiihbbi+0x60>
 800b6a0:	78fb      	ldrb	r3, [r7, #3]
 800b6a2:	2baf      	cmp	r3, #175	; 0xaf
 800b6a4:	d902      	bls.n	800b6ac <_ZN4OLED9characterEiihbbi+0x60>
 800b6a6:	78fb      	ldrb	r3, [r7, #3]
 800b6a8:	3301      	adds	r3, #1
 800b6aa:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 800b6ac:	2300      	movs	r3, #0
 800b6ae:	75fb      	strb	r3, [r7, #23]
 800b6b0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6b4:	2b05      	cmp	r3, #5
 800b6b6:	f300 80b4 	bgt.w	800b822 <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 800b6ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6be:	2b05      	cmp	r3, #5
 800b6c0:	d102      	bne.n	800b6c8 <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 800b6c2:	2300      	movs	r3, #0
 800b6c4:	75bb      	strb	r3, [r7, #22]
 800b6c6:	e009      	b.n	800b6dc <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 800b6c8:	78fa      	ldrb	r2, [r7, #3]
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	009b      	lsls	r3, r3, #2
 800b6ce:	441a      	add	r2, r3
 800b6d0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	4a54      	ldr	r2, [pc, #336]	; (800b828 <_ZN4OLED9characterEiihbbi+0x1dc>)
 800b6d8:	5cd3      	ldrb	r3, [r2, r3]
 800b6da:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 800b6dc:	2300      	movs	r3, #0
 800b6de:	757b      	strb	r3, [r7, #21]
 800b6e0:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b6e4:	2b07      	cmp	r3, #7
 800b6e6:	f300 8094 	bgt.w	800b812 <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 800b6ea:	7dbb      	ldrb	r3, [r7, #22]
 800b6ec:	f003 0301 	and.w	r3, r3, #1
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d03f      	beq.n	800b774 <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 800b6f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b6f6:	2b01      	cmp	r3, #1
 800b6f8:	d110      	bne.n	800b71c <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 800b6fa:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b6fe:	68bb      	ldr	r3, [r7, #8]
 800b700:	18d1      	adds	r1, r2, r3
 800b702:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	441a      	add	r2, r3
 800b70a:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800b70e:	2301      	movs	r3, #1
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4603      	mov	r3, r0
 800b714:	68f8      	ldr	r0, [r7, #12]
 800b716:	f7ff fee3 	bl	800b4e0 <_ZN4OLED5pixelEiibb>
 800b71a:	e070      	b.n	800b7fe <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 800b71c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b722:	fb02 f203 	mul.w	r2, r2, r3
 800b726:	68bb      	ldr	r3, [r7, #8]
 800b728:	18d0      	adds	r0, r2, r3
 800b72a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b72e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b730:	fb02 f203 	mul.w	r2, r2, r3
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	18d4      	adds	r4, r2, r3
 800b738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	441a      	add	r2, r3
 800b73e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b742:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b744:	fb01 f303 	mul.w	r3, r1, r3
 800b748:	18d5      	adds	r5, r2, r3
 800b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b74c:	1c5a      	adds	r2, r3, #1
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	441a      	add	r2, r3
 800b752:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b756:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b758:	fb01 f303 	mul.w	r3, r1, r3
 800b75c:	4413      	add	r3, r2
 800b75e:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800b762:	9201      	str	r2, [sp, #4]
 800b764:	9300      	str	r3, [sp, #0]
 800b766:	462b      	mov	r3, r5
 800b768:	4622      	mov	r2, r4
 800b76a:	4601      	mov	r1, r0
 800b76c:	68f8      	ldr	r0, [r7, #12]
 800b76e:	f7ff fedd 	bl	800b52c <_ZN4OLED8fillRectEiiiib>
 800b772:	e044      	b.n	800b7fe <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 800b774:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b778:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b77c:	429a      	cmp	r2, r3
 800b77e:	d03e      	beq.n	800b7fe <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 800b780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b782:	2b01      	cmp	r3, #1
 800b784:	d110      	bne.n	800b7a8 <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 800b786:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800b78a:	68bb      	ldr	r3, [r7, #8]
 800b78c:	18d1      	adds	r1, r2, r3
 800b78e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	441a      	add	r2, r3
 800b796:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800b79a:	2301      	movs	r3, #1
 800b79c:	9300      	str	r3, [sp, #0]
 800b79e:	4603      	mov	r3, r0
 800b7a0:	68f8      	ldr	r0, [r7, #12]
 800b7a2:	f7ff fe9d 	bl	800b4e0 <_ZN4OLED5pixelEiibb>
 800b7a6:	e02a      	b.n	800b7fe <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 800b7a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ae:	fb02 f203 	mul.w	r2, r2, r3
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	18d0      	adds	r0, r2, r3
 800b7b6:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b7ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7bc:	fb02 f203 	mul.w	r2, r2, r3
 800b7c0:	687b      	ldr	r3, [r7, #4]
 800b7c2:	18d4      	adds	r4, r2, r3
 800b7c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7c6:	68bb      	ldr	r3, [r7, #8]
 800b7c8:	441a      	add	r2, r3
 800b7ca:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b7ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7d0:	fb01 f303 	mul.w	r3, r1, r3
 800b7d4:	18d5      	adds	r5, r2, r3
 800b7d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b7d8:	1c5a      	adds	r2, r3, #1
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	441a      	add	r2, r3
 800b7de:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b7e2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b7e4:	fb01 f303 	mul.w	r3, r1, r3
 800b7e8:	4413      	add	r3, r2
 800b7ea:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 800b7ee:	9201      	str	r2, [sp, #4]
 800b7f0:	9300      	str	r3, [sp, #0]
 800b7f2:	462b      	mov	r3, r5
 800b7f4:	4622      	mov	r2, r4
 800b7f6:	4601      	mov	r1, r0
 800b7f8:	68f8      	ldr	r0, [r7, #12]
 800b7fa:	f7ff fe97 	bl	800b52c <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 800b7fe:	7dbb      	ldrb	r3, [r7, #22]
 800b800:	105b      	asrs	r3, r3, #1
 800b802:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 800b804:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800b808:	b2db      	uxtb	r3, r3
 800b80a:	3301      	adds	r3, #1
 800b80c:	b2db      	uxtb	r3, r3
 800b80e:	757b      	strb	r3, [r7, #21]
 800b810:	e766      	b.n	800b6e0 <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 800b812:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800b816:	b2db      	uxtb	r3, r3
 800b818:	3301      	adds	r3, #1
 800b81a:	b2db      	uxtb	r3, r3
 800b81c:	75fb      	strb	r3, [r7, #23]
 800b81e:	e747      	b.n	800b6b0 <_ZN4OLED9characterEiihbbi+0x64>
	return;
 800b820:	bf00      	nop
		}
	}
}
 800b822:	3718      	adds	r7, #24
 800b824:	46bd      	mov	sp, r7
 800b826:	bdb0      	pop	{r4, r5, r7, pc}
 800b828:	0800c9d4 	.word	0x0800c9d4

0800b82c <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 800b82c:	b590      	push	{r4, r7, lr}
 800b82e:	b08b      	sub	sp, #44	; 0x2c
 800b830:	af04      	add	r7, sp, #16
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 800b83a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b83c:	4613      	mov	r3, r2
 800b83e:	005b      	lsls	r3, r3, #1
 800b840:	4413      	add	r3, r2
 800b842:	005b      	lsls	r3, r3, #1
 800b844:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 800b846:	2300      	movs	r3, #0
 800b848:	617b      	str	r3, [r7, #20]
 800b84a:	6838      	ldr	r0, [r7, #0]
 800b84c:	f000 f86c 	bl	800b928 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 800b850:	4602      	mov	r2, r0
 800b852:	697b      	ldr	r3, [r7, #20]
 800b854:	4293      	cmp	r3, r2
 800b856:	bf34      	ite	cc
 800b858:	2301      	movcc	r3, #1
 800b85a:	2300      	movcs	r3, #0
 800b85c:	b2db      	uxtb	r3, r3
 800b85e:	2b00      	cmp	r3, #0
 800b860:	d01e      	beq.n	800b8a0 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 800b862:	693b      	ldr	r3, [r7, #16]
 800b864:	697a      	ldr	r2, [r7, #20]
 800b866:	fb02 f203 	mul.w	r2, r2, r3
 800b86a:	68bb      	ldr	r3, [r7, #8]
 800b86c:	4413      	add	r3, r2
 800b86e:	461c      	mov	r4, r3
 800b870:	6979      	ldr	r1, [r7, #20]
 800b872:	6838      	ldr	r0, [r7, #0]
 800b874:	f000 f85a 	bl	800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800b878:	4603      	mov	r3, r0
 800b87a:	781a      	ldrb	r2, [r3, #0]
 800b87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b87e:	9302      	str	r3, [sp, #8]
 800b880:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800b884:	9301      	str	r3, [sp, #4]
 800b886:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800b88a:	9300      	str	r3, [sp, #0]
 800b88c:	4613      	mov	r3, r2
 800b88e:	687a      	ldr	r2, [r7, #4]
 800b890:	4621      	mov	r1, r4
 800b892:	68f8      	ldr	r0, [r7, #12]
 800b894:	f7ff feda 	bl	800b64c <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 800b898:	697b      	ldr	r3, [r7, #20]
 800b89a:	3301      	adds	r3, #1
 800b89c:	617b      	str	r3, [r7, #20]
 800b89e:	e7d4      	b.n	800b84a <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 800b8a0:	bf00      	nop
 800b8a2:	371c      	adds	r7, #28
 800b8a4:	46bd      	mov	sp, r7
 800b8a6:	bd90      	pop	{r4, r7, pc}

0800b8a8 <_ZdlPvj>:
 800b8a8:	f000 b800 	b.w	800b8ac <_ZdlPv>

0800b8ac <_ZdlPv>:
 800b8ac:	f000 b8d6 	b.w	800ba5c <free>

0800b8b0 <_ZNSaIcEC1Ev>:
 800b8b0:	4770      	bx	lr

0800b8b2 <_ZNSaIcED1Ev>:
 800b8b2:	4770      	bx	lr

0800b8b4 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 800b8b4:	b10a      	cbz	r2, 800b8ba <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 800b8b6:	f000 b8d9 	b.w	800ba6c <memcpy>
 800b8ba:	4770      	bx	lr

0800b8bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800b8bc:	b508      	push	{r3, lr}
 800b8be:	680b      	ldr	r3, [r1, #0]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	da02      	bge.n	800b8ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 800b8c4:	4809      	ldr	r0, [pc, #36]	; (800b8ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 800b8c6:	f000 f88c 	bl	800b9e2 <_ZSt20__throw_length_errorPKc>
 800b8ca:	4293      	cmp	r3, r2
 800b8cc:	d908      	bls.n	800b8e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800b8ce:	0052      	lsls	r2, r2, #1
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d205      	bcs.n	800b8e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800b8d4:	2a00      	cmp	r2, #0
 800b8d6:	bfb6      	itet	lt
 800b8d8:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800b8dc:	600a      	strge	r2, [r1, #0]
 800b8de:	600b      	strlt	r3, [r1, #0]
 800b8e0:	6808      	ldr	r0, [r1, #0]
 800b8e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800b8e6:	3001      	adds	r0, #1
 800b8e8:	f000 b85e 	b.w	800b9a8 <_Znwj>
 800b8ec:	0800cf0e 	.word	0x0800cf0e

0800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800b8f0:	4603      	mov	r3, r0
 800b8f2:	f853 0b08 	ldr.w	r0, [r3], #8
 800b8f6:	4298      	cmp	r0, r3
 800b8f8:	d001      	beq.n	800b8fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800b8fa:	f7ff bfd7 	b.w	800b8ac <_ZdlPv>
 800b8fe:	4770      	bx	lr

0800b900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800b900:	2a01      	cmp	r2, #1
 800b902:	b510      	push	{r4, lr}
 800b904:	d102      	bne.n	800b90c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 800b906:	780a      	ldrb	r2, [r1, #0]
 800b908:	7002      	strb	r2, [r0, #0]
 800b90a:	bd10      	pop	{r4, pc}
 800b90c:	f7ff ffd2 	bl	800b8b4 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 800b910:	e7fb      	b.n	800b90a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

0800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800b912:	b508      	push	{r3, lr}
 800b914:	1a52      	subs	r2, r2, r1
 800b916:	f7ff fff3 	bl	800b900 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800b91a:	bd08      	pop	{r3, pc}

0800b91c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800b91c:	b510      	push	{r4, lr}
 800b91e:	4604      	mov	r4, r0
 800b920:	f7ff ffe6 	bl	800b8f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800b924:	4620      	mov	r0, r4
 800b926:	bd10      	pop	{r4, pc}

0800b928 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800b928:	6840      	ldr	r0, [r0, #4]
 800b92a:	4770      	bx	lr

0800b92c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800b92c:	6800      	ldr	r0, [r0, #0]
 800b92e:	4408      	add	r0, r1
 800b930:	4770      	bx	lr
	...

0800b934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 800b934:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b936:	4604      	mov	r4, r0
 800b938:	4616      	mov	r6, r2
 800b93a:	460d      	mov	r5, r1
 800b93c:	b919      	cbnz	r1, 800b946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b93e:	b112      	cbz	r2, 800b946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 800b940:	480d      	ldr	r0, [pc, #52]	; (800b978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 800b942:	f000 f84b 	bl	800b9dc <_ZSt19__throw_logic_errorPKc>
 800b946:	1b73      	subs	r3, r6, r5
 800b948:	2b0f      	cmp	r3, #15
 800b94a:	9301      	str	r3, [sp, #4]
 800b94c:	d907      	bls.n	800b95e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 800b94e:	2200      	movs	r2, #0
 800b950:	a901      	add	r1, sp, #4
 800b952:	4620      	mov	r0, r4
 800b954:	f7ff ffb2 	bl	800b8bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800b958:	9b01      	ldr	r3, [sp, #4]
 800b95a:	6020      	str	r0, [r4, #0]
 800b95c:	60a3      	str	r3, [r4, #8]
 800b95e:	4632      	mov	r2, r6
 800b960:	4629      	mov	r1, r5
 800b962:	6820      	ldr	r0, [r4, #0]
 800b964:	f7ff ffd5 	bl	800b912 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 800b968:	9b01      	ldr	r3, [sp, #4]
 800b96a:	6822      	ldr	r2, [r4, #0]
 800b96c:	6063      	str	r3, [r4, #4]
 800b96e:	2100      	movs	r1, #0
 800b970:	54d1      	strb	r1, [r2, r3]
 800b972:	b002      	add	sp, #8
 800b974:	bd70      	pop	{r4, r5, r6, pc}
 800b976:	bf00      	nop
 800b978:	0800cee4 	.word	0x0800cee4

0800b97c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800b97c:	b538      	push	{r3, r4, r5, lr}
 800b97e:	f100 0308 	add.w	r3, r0, #8
 800b982:	4604      	mov	r4, r0
 800b984:	6003      	str	r3, [r0, #0]
 800b986:	460d      	mov	r5, r1
 800b988:	b159      	cbz	r1, 800b9a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800b98a:	4608      	mov	r0, r1
 800b98c:	f7f4 fc70 	bl	8000270 <strlen>
 800b990:	182a      	adds	r2, r5, r0
 800b992:	4620      	mov	r0, r4
 800b994:	f04f 0300 	mov.w	r3, #0
 800b998:	4629      	mov	r1, r5
 800b99a:	f7ff ffcb 	bl	800b934 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800b99e:	4620      	mov	r0, r4
 800b9a0:	bd38      	pop	{r3, r4, r5, pc}
 800b9a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b9a6:	e7f4      	b.n	800b992 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0800b9a8 <_Znwj>:
 800b9a8:	b510      	push	{r4, lr}
 800b9aa:	2800      	cmp	r0, #0
 800b9ac:	bf14      	ite	ne
 800b9ae:	4604      	movne	r4, r0
 800b9b0:	2401      	moveq	r4, #1
 800b9b2:	4620      	mov	r0, r4
 800b9b4:	f000 f84a 	bl	800ba4c <malloc>
 800b9b8:	b930      	cbnz	r0, 800b9c8 <_Znwj+0x20>
 800b9ba:	f000 f807 	bl	800b9cc <_ZSt15get_new_handlerv>
 800b9be:	b908      	cbnz	r0, 800b9c4 <_Znwj+0x1c>
 800b9c0:	f000 f812 	bl	800b9e8 <abort>
 800b9c4:	4780      	blx	r0
 800b9c6:	e7f4      	b.n	800b9b2 <_Znwj+0xa>
 800b9c8:	bd10      	pop	{r4, pc}
	...

0800b9cc <_ZSt15get_new_handlerv>:
 800b9cc:	4b02      	ldr	r3, [pc, #8]	; (800b9d8 <_ZSt15get_new_handlerv+0xc>)
 800b9ce:	6818      	ldr	r0, [r3, #0]
 800b9d0:	f3bf 8f5b 	dmb	ish
 800b9d4:	4770      	bx	lr
 800b9d6:	bf00      	nop
 800b9d8:	2000258c 	.word	0x2000258c

0800b9dc <_ZSt19__throw_logic_errorPKc>:
 800b9dc:	b508      	push	{r3, lr}
 800b9de:	f000 f803 	bl	800b9e8 <abort>

0800b9e2 <_ZSt20__throw_length_errorPKc>:
 800b9e2:	b508      	push	{r3, lr}
 800b9e4:	f000 f800 	bl	800b9e8 <abort>

0800b9e8 <abort>:
 800b9e8:	b508      	push	{r3, lr}
 800b9ea:	2006      	movs	r0, #6
 800b9ec:	f000 f94a 	bl	800bc84 <raise>
 800b9f0:	2001      	movs	r0, #1
 800b9f2:	f7f6 f949 	bl	8001c88 <_exit>
	...

0800b9f8 <__errno>:
 800b9f8:	4b01      	ldr	r3, [pc, #4]	; (800ba00 <__errno+0x8>)
 800b9fa:	6818      	ldr	r0, [r3, #0]
 800b9fc:	4770      	bx	lr
 800b9fe:	bf00      	nop
 800ba00:	20000074 	.word	0x20000074

0800ba04 <__libc_init_array>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4e0d      	ldr	r6, [pc, #52]	; (800ba3c <__libc_init_array+0x38>)
 800ba08:	4c0d      	ldr	r4, [pc, #52]	; (800ba40 <__libc_init_array+0x3c>)
 800ba0a:	1ba4      	subs	r4, r4, r6
 800ba0c:	10a4      	asrs	r4, r4, #2
 800ba0e:	2500      	movs	r5, #0
 800ba10:	42a5      	cmp	r5, r4
 800ba12:	d109      	bne.n	800ba28 <__libc_init_array+0x24>
 800ba14:	4e0b      	ldr	r6, [pc, #44]	; (800ba44 <__libc_init_array+0x40>)
 800ba16:	4c0c      	ldr	r4, [pc, #48]	; (800ba48 <__libc_init_array+0x44>)
 800ba18:	f000 fc7a 	bl	800c310 <_init>
 800ba1c:	1ba4      	subs	r4, r4, r6
 800ba1e:	10a4      	asrs	r4, r4, #2
 800ba20:	2500      	movs	r5, #0
 800ba22:	42a5      	cmp	r5, r4
 800ba24:	d105      	bne.n	800ba32 <__libc_init_array+0x2e>
 800ba26:	bd70      	pop	{r4, r5, r6, pc}
 800ba28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba2c:	4798      	blx	r3
 800ba2e:	3501      	adds	r5, #1
 800ba30:	e7ee      	b.n	800ba10 <__libc_init_array+0xc>
 800ba32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ba36:	4798      	blx	r3
 800ba38:	3501      	adds	r5, #1
 800ba3a:	e7f2      	b.n	800ba22 <__libc_init_array+0x1e>
 800ba3c:	0800cf64 	.word	0x0800cf64
 800ba40:	0800cf64 	.word	0x0800cf64
 800ba44:	0800cf64 	.word	0x0800cf64
 800ba48:	0800cf6c 	.word	0x0800cf6c

0800ba4c <malloc>:
 800ba4c:	4b02      	ldr	r3, [pc, #8]	; (800ba58 <malloc+0xc>)
 800ba4e:	4601      	mov	r1, r0
 800ba50:	6818      	ldr	r0, [r3, #0]
 800ba52:	f000 b885 	b.w	800bb60 <_malloc_r>
 800ba56:	bf00      	nop
 800ba58:	20000074 	.word	0x20000074

0800ba5c <free>:
 800ba5c:	4b02      	ldr	r3, [pc, #8]	; (800ba68 <free+0xc>)
 800ba5e:	4601      	mov	r1, r0
 800ba60:	6818      	ldr	r0, [r3, #0]
 800ba62:	f000 b82f 	b.w	800bac4 <_free_r>
 800ba66:	bf00      	nop
 800ba68:	20000074 	.word	0x20000074

0800ba6c <memcpy>:
 800ba6c:	b510      	push	{r4, lr}
 800ba6e:	1e43      	subs	r3, r0, #1
 800ba70:	440a      	add	r2, r1
 800ba72:	4291      	cmp	r1, r2
 800ba74:	d100      	bne.n	800ba78 <memcpy+0xc>
 800ba76:	bd10      	pop	{r4, pc}
 800ba78:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba7c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ba80:	e7f7      	b.n	800ba72 <memcpy+0x6>

0800ba82 <memmove>:
 800ba82:	4288      	cmp	r0, r1
 800ba84:	b510      	push	{r4, lr}
 800ba86:	eb01 0302 	add.w	r3, r1, r2
 800ba8a:	d807      	bhi.n	800ba9c <memmove+0x1a>
 800ba8c:	1e42      	subs	r2, r0, #1
 800ba8e:	4299      	cmp	r1, r3
 800ba90:	d00a      	beq.n	800baa8 <memmove+0x26>
 800ba92:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ba96:	f802 4f01 	strb.w	r4, [r2, #1]!
 800ba9a:	e7f8      	b.n	800ba8e <memmove+0xc>
 800ba9c:	4283      	cmp	r3, r0
 800ba9e:	d9f5      	bls.n	800ba8c <memmove+0xa>
 800baa0:	1881      	adds	r1, r0, r2
 800baa2:	1ad2      	subs	r2, r2, r3
 800baa4:	42d3      	cmn	r3, r2
 800baa6:	d100      	bne.n	800baaa <memmove+0x28>
 800baa8:	bd10      	pop	{r4, pc}
 800baaa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800baae:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800bab2:	e7f7      	b.n	800baa4 <memmove+0x22>

0800bab4 <memset>:
 800bab4:	4402      	add	r2, r0
 800bab6:	4603      	mov	r3, r0
 800bab8:	4293      	cmp	r3, r2
 800baba:	d100      	bne.n	800babe <memset+0xa>
 800babc:	4770      	bx	lr
 800babe:	f803 1b01 	strb.w	r1, [r3], #1
 800bac2:	e7f9      	b.n	800bab8 <memset+0x4>

0800bac4 <_free_r>:
 800bac4:	b538      	push	{r3, r4, r5, lr}
 800bac6:	4605      	mov	r5, r0
 800bac8:	2900      	cmp	r1, #0
 800baca:	d045      	beq.n	800bb58 <_free_r+0x94>
 800bacc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bad0:	1f0c      	subs	r4, r1, #4
 800bad2:	2b00      	cmp	r3, #0
 800bad4:	bfb8      	it	lt
 800bad6:	18e4      	addlt	r4, r4, r3
 800bad8:	f000 f910 	bl	800bcfc <__malloc_lock>
 800badc:	4a1f      	ldr	r2, [pc, #124]	; (800bb5c <_free_r+0x98>)
 800bade:	6813      	ldr	r3, [r2, #0]
 800bae0:	4610      	mov	r0, r2
 800bae2:	b933      	cbnz	r3, 800baf2 <_free_r+0x2e>
 800bae4:	6063      	str	r3, [r4, #4]
 800bae6:	6014      	str	r4, [r2, #0]
 800bae8:	4628      	mov	r0, r5
 800baea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800baee:	f000 b906 	b.w	800bcfe <__malloc_unlock>
 800baf2:	42a3      	cmp	r3, r4
 800baf4:	d90c      	bls.n	800bb10 <_free_r+0x4c>
 800baf6:	6821      	ldr	r1, [r4, #0]
 800baf8:	1862      	adds	r2, r4, r1
 800bafa:	4293      	cmp	r3, r2
 800bafc:	bf04      	itt	eq
 800bafe:	681a      	ldreq	r2, [r3, #0]
 800bb00:	685b      	ldreq	r3, [r3, #4]
 800bb02:	6063      	str	r3, [r4, #4]
 800bb04:	bf04      	itt	eq
 800bb06:	1852      	addeq	r2, r2, r1
 800bb08:	6022      	streq	r2, [r4, #0]
 800bb0a:	6004      	str	r4, [r0, #0]
 800bb0c:	e7ec      	b.n	800bae8 <_free_r+0x24>
 800bb0e:	4613      	mov	r3, r2
 800bb10:	685a      	ldr	r2, [r3, #4]
 800bb12:	b10a      	cbz	r2, 800bb18 <_free_r+0x54>
 800bb14:	42a2      	cmp	r2, r4
 800bb16:	d9fa      	bls.n	800bb0e <_free_r+0x4a>
 800bb18:	6819      	ldr	r1, [r3, #0]
 800bb1a:	1858      	adds	r0, r3, r1
 800bb1c:	42a0      	cmp	r0, r4
 800bb1e:	d10b      	bne.n	800bb38 <_free_r+0x74>
 800bb20:	6820      	ldr	r0, [r4, #0]
 800bb22:	4401      	add	r1, r0
 800bb24:	1858      	adds	r0, r3, r1
 800bb26:	4282      	cmp	r2, r0
 800bb28:	6019      	str	r1, [r3, #0]
 800bb2a:	d1dd      	bne.n	800bae8 <_free_r+0x24>
 800bb2c:	6810      	ldr	r0, [r2, #0]
 800bb2e:	6852      	ldr	r2, [r2, #4]
 800bb30:	605a      	str	r2, [r3, #4]
 800bb32:	4401      	add	r1, r0
 800bb34:	6019      	str	r1, [r3, #0]
 800bb36:	e7d7      	b.n	800bae8 <_free_r+0x24>
 800bb38:	d902      	bls.n	800bb40 <_free_r+0x7c>
 800bb3a:	230c      	movs	r3, #12
 800bb3c:	602b      	str	r3, [r5, #0]
 800bb3e:	e7d3      	b.n	800bae8 <_free_r+0x24>
 800bb40:	6820      	ldr	r0, [r4, #0]
 800bb42:	1821      	adds	r1, r4, r0
 800bb44:	428a      	cmp	r2, r1
 800bb46:	bf04      	itt	eq
 800bb48:	6811      	ldreq	r1, [r2, #0]
 800bb4a:	6852      	ldreq	r2, [r2, #4]
 800bb4c:	6062      	str	r2, [r4, #4]
 800bb4e:	bf04      	itt	eq
 800bb50:	1809      	addeq	r1, r1, r0
 800bb52:	6021      	streq	r1, [r4, #0]
 800bb54:	605c      	str	r4, [r3, #4]
 800bb56:	e7c7      	b.n	800bae8 <_free_r+0x24>
 800bb58:	bd38      	pop	{r3, r4, r5, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20002590 	.word	0x20002590

0800bb60 <_malloc_r>:
 800bb60:	b570      	push	{r4, r5, r6, lr}
 800bb62:	1ccd      	adds	r5, r1, #3
 800bb64:	f025 0503 	bic.w	r5, r5, #3
 800bb68:	3508      	adds	r5, #8
 800bb6a:	2d0c      	cmp	r5, #12
 800bb6c:	bf38      	it	cc
 800bb6e:	250c      	movcc	r5, #12
 800bb70:	2d00      	cmp	r5, #0
 800bb72:	4606      	mov	r6, r0
 800bb74:	db01      	blt.n	800bb7a <_malloc_r+0x1a>
 800bb76:	42a9      	cmp	r1, r5
 800bb78:	d903      	bls.n	800bb82 <_malloc_r+0x22>
 800bb7a:	230c      	movs	r3, #12
 800bb7c:	6033      	str	r3, [r6, #0]
 800bb7e:	2000      	movs	r0, #0
 800bb80:	bd70      	pop	{r4, r5, r6, pc}
 800bb82:	f000 f8bb 	bl	800bcfc <__malloc_lock>
 800bb86:	4a21      	ldr	r2, [pc, #132]	; (800bc0c <_malloc_r+0xac>)
 800bb88:	6814      	ldr	r4, [r2, #0]
 800bb8a:	4621      	mov	r1, r4
 800bb8c:	b991      	cbnz	r1, 800bbb4 <_malloc_r+0x54>
 800bb8e:	4c20      	ldr	r4, [pc, #128]	; (800bc10 <_malloc_r+0xb0>)
 800bb90:	6823      	ldr	r3, [r4, #0]
 800bb92:	b91b      	cbnz	r3, 800bb9c <_malloc_r+0x3c>
 800bb94:	4630      	mov	r0, r6
 800bb96:	f000 f83d 	bl	800bc14 <_sbrk_r>
 800bb9a:	6020      	str	r0, [r4, #0]
 800bb9c:	4629      	mov	r1, r5
 800bb9e:	4630      	mov	r0, r6
 800bba0:	f000 f838 	bl	800bc14 <_sbrk_r>
 800bba4:	1c43      	adds	r3, r0, #1
 800bba6:	d124      	bne.n	800bbf2 <_malloc_r+0x92>
 800bba8:	230c      	movs	r3, #12
 800bbaa:	6033      	str	r3, [r6, #0]
 800bbac:	4630      	mov	r0, r6
 800bbae:	f000 f8a6 	bl	800bcfe <__malloc_unlock>
 800bbb2:	e7e4      	b.n	800bb7e <_malloc_r+0x1e>
 800bbb4:	680b      	ldr	r3, [r1, #0]
 800bbb6:	1b5b      	subs	r3, r3, r5
 800bbb8:	d418      	bmi.n	800bbec <_malloc_r+0x8c>
 800bbba:	2b0b      	cmp	r3, #11
 800bbbc:	d90f      	bls.n	800bbde <_malloc_r+0x7e>
 800bbbe:	600b      	str	r3, [r1, #0]
 800bbc0:	50cd      	str	r5, [r1, r3]
 800bbc2:	18cc      	adds	r4, r1, r3
 800bbc4:	4630      	mov	r0, r6
 800bbc6:	f000 f89a 	bl	800bcfe <__malloc_unlock>
 800bbca:	f104 000b 	add.w	r0, r4, #11
 800bbce:	1d23      	adds	r3, r4, #4
 800bbd0:	f020 0007 	bic.w	r0, r0, #7
 800bbd4:	1ac3      	subs	r3, r0, r3
 800bbd6:	d0d3      	beq.n	800bb80 <_malloc_r+0x20>
 800bbd8:	425a      	negs	r2, r3
 800bbda:	50e2      	str	r2, [r4, r3]
 800bbdc:	e7d0      	b.n	800bb80 <_malloc_r+0x20>
 800bbde:	428c      	cmp	r4, r1
 800bbe0:	684b      	ldr	r3, [r1, #4]
 800bbe2:	bf16      	itet	ne
 800bbe4:	6063      	strne	r3, [r4, #4]
 800bbe6:	6013      	streq	r3, [r2, #0]
 800bbe8:	460c      	movne	r4, r1
 800bbea:	e7eb      	b.n	800bbc4 <_malloc_r+0x64>
 800bbec:	460c      	mov	r4, r1
 800bbee:	6849      	ldr	r1, [r1, #4]
 800bbf0:	e7cc      	b.n	800bb8c <_malloc_r+0x2c>
 800bbf2:	1cc4      	adds	r4, r0, #3
 800bbf4:	f024 0403 	bic.w	r4, r4, #3
 800bbf8:	42a0      	cmp	r0, r4
 800bbfa:	d005      	beq.n	800bc08 <_malloc_r+0xa8>
 800bbfc:	1a21      	subs	r1, r4, r0
 800bbfe:	4630      	mov	r0, r6
 800bc00:	f000 f808 	bl	800bc14 <_sbrk_r>
 800bc04:	3001      	adds	r0, #1
 800bc06:	d0cf      	beq.n	800bba8 <_malloc_r+0x48>
 800bc08:	6025      	str	r5, [r4, #0]
 800bc0a:	e7db      	b.n	800bbc4 <_malloc_r+0x64>
 800bc0c:	20002590 	.word	0x20002590
 800bc10:	20002594 	.word	0x20002594

0800bc14 <_sbrk_r>:
 800bc14:	b538      	push	{r3, r4, r5, lr}
 800bc16:	4c06      	ldr	r4, [pc, #24]	; (800bc30 <_sbrk_r+0x1c>)
 800bc18:	2300      	movs	r3, #0
 800bc1a:	4605      	mov	r5, r0
 800bc1c:	4608      	mov	r0, r1
 800bc1e:	6023      	str	r3, [r4, #0]
 800bc20:	f7f6 f83c 	bl	8001c9c <_sbrk>
 800bc24:	1c43      	adds	r3, r0, #1
 800bc26:	d102      	bne.n	800bc2e <_sbrk_r+0x1a>
 800bc28:	6823      	ldr	r3, [r4, #0]
 800bc2a:	b103      	cbz	r3, 800bc2e <_sbrk_r+0x1a>
 800bc2c:	602b      	str	r3, [r5, #0]
 800bc2e:	bd38      	pop	{r3, r4, r5, pc}
 800bc30:	20002654 	.word	0x20002654

0800bc34 <_raise_r>:
 800bc34:	291f      	cmp	r1, #31
 800bc36:	b538      	push	{r3, r4, r5, lr}
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	d904      	bls.n	800bc48 <_raise_r+0x14>
 800bc3e:	2316      	movs	r3, #22
 800bc40:	6003      	str	r3, [r0, #0]
 800bc42:	f04f 30ff 	mov.w	r0, #4294967295
 800bc46:	bd38      	pop	{r3, r4, r5, pc}
 800bc48:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bc4a:	b112      	cbz	r2, 800bc52 <_raise_r+0x1e>
 800bc4c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bc50:	b94b      	cbnz	r3, 800bc66 <_raise_r+0x32>
 800bc52:	4620      	mov	r0, r4
 800bc54:	f000 f830 	bl	800bcb8 <_getpid_r>
 800bc58:	462a      	mov	r2, r5
 800bc5a:	4601      	mov	r1, r0
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bc62:	f000 b817 	b.w	800bc94 <_kill_r>
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d00a      	beq.n	800bc80 <_raise_r+0x4c>
 800bc6a:	1c59      	adds	r1, r3, #1
 800bc6c:	d103      	bne.n	800bc76 <_raise_r+0x42>
 800bc6e:	2316      	movs	r3, #22
 800bc70:	6003      	str	r3, [r0, #0]
 800bc72:	2001      	movs	r0, #1
 800bc74:	e7e7      	b.n	800bc46 <_raise_r+0x12>
 800bc76:	2400      	movs	r4, #0
 800bc78:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bc7c:	4628      	mov	r0, r5
 800bc7e:	4798      	blx	r3
 800bc80:	2000      	movs	r0, #0
 800bc82:	e7e0      	b.n	800bc46 <_raise_r+0x12>

0800bc84 <raise>:
 800bc84:	4b02      	ldr	r3, [pc, #8]	; (800bc90 <raise+0xc>)
 800bc86:	4601      	mov	r1, r0
 800bc88:	6818      	ldr	r0, [r3, #0]
 800bc8a:	f7ff bfd3 	b.w	800bc34 <_raise_r>
 800bc8e:	bf00      	nop
 800bc90:	20000074 	.word	0x20000074

0800bc94 <_kill_r>:
 800bc94:	b538      	push	{r3, r4, r5, lr}
 800bc96:	4c07      	ldr	r4, [pc, #28]	; (800bcb4 <_kill_r+0x20>)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	4605      	mov	r5, r0
 800bc9c:	4608      	mov	r0, r1
 800bc9e:	4611      	mov	r1, r2
 800bca0:	6023      	str	r3, [r4, #0]
 800bca2:	f7f5 ffe1 	bl	8001c68 <_kill>
 800bca6:	1c43      	adds	r3, r0, #1
 800bca8:	d102      	bne.n	800bcb0 <_kill_r+0x1c>
 800bcaa:	6823      	ldr	r3, [r4, #0]
 800bcac:	b103      	cbz	r3, 800bcb0 <_kill_r+0x1c>
 800bcae:	602b      	str	r3, [r5, #0]
 800bcb0:	bd38      	pop	{r3, r4, r5, pc}
 800bcb2:	bf00      	nop
 800bcb4:	20002654 	.word	0x20002654

0800bcb8 <_getpid_r>:
 800bcb8:	f7f5 bfce 	b.w	8001c58 <_getpid>

0800bcbc <siprintf>:
 800bcbc:	b40e      	push	{r1, r2, r3}
 800bcbe:	b500      	push	{lr}
 800bcc0:	b09c      	sub	sp, #112	; 0x70
 800bcc2:	ab1d      	add	r3, sp, #116	; 0x74
 800bcc4:	9002      	str	r0, [sp, #8]
 800bcc6:	9006      	str	r0, [sp, #24]
 800bcc8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800bccc:	4809      	ldr	r0, [pc, #36]	; (800bcf4 <siprintf+0x38>)
 800bcce:	9107      	str	r1, [sp, #28]
 800bcd0:	9104      	str	r1, [sp, #16]
 800bcd2:	4909      	ldr	r1, [pc, #36]	; (800bcf8 <siprintf+0x3c>)
 800bcd4:	f853 2b04 	ldr.w	r2, [r3], #4
 800bcd8:	9105      	str	r1, [sp, #20]
 800bcda:	6800      	ldr	r0, [r0, #0]
 800bcdc:	9301      	str	r3, [sp, #4]
 800bcde:	a902      	add	r1, sp, #8
 800bce0:	f000 f868 	bl	800bdb4 <_svfiprintf_r>
 800bce4:	9b02      	ldr	r3, [sp, #8]
 800bce6:	2200      	movs	r2, #0
 800bce8:	701a      	strb	r2, [r3, #0]
 800bcea:	b01c      	add	sp, #112	; 0x70
 800bcec:	f85d eb04 	ldr.w	lr, [sp], #4
 800bcf0:	b003      	add	sp, #12
 800bcf2:	4770      	bx	lr
 800bcf4:	20000074 	.word	0x20000074
 800bcf8:	ffff0208 	.word	0xffff0208

0800bcfc <__malloc_lock>:
 800bcfc:	4770      	bx	lr

0800bcfe <__malloc_unlock>:
 800bcfe:	4770      	bx	lr

0800bd00 <__ssputs_r>:
 800bd00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bd04:	688e      	ldr	r6, [r1, #8]
 800bd06:	429e      	cmp	r6, r3
 800bd08:	4682      	mov	sl, r0
 800bd0a:	460c      	mov	r4, r1
 800bd0c:	4690      	mov	r8, r2
 800bd0e:	4699      	mov	r9, r3
 800bd10:	d837      	bhi.n	800bd82 <__ssputs_r+0x82>
 800bd12:	898a      	ldrh	r2, [r1, #12]
 800bd14:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bd18:	d031      	beq.n	800bd7e <__ssputs_r+0x7e>
 800bd1a:	6825      	ldr	r5, [r4, #0]
 800bd1c:	6909      	ldr	r1, [r1, #16]
 800bd1e:	1a6f      	subs	r7, r5, r1
 800bd20:	6965      	ldr	r5, [r4, #20]
 800bd22:	2302      	movs	r3, #2
 800bd24:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bd28:	fb95 f5f3 	sdiv	r5, r5, r3
 800bd2c:	f109 0301 	add.w	r3, r9, #1
 800bd30:	443b      	add	r3, r7
 800bd32:	429d      	cmp	r5, r3
 800bd34:	bf38      	it	cc
 800bd36:	461d      	movcc	r5, r3
 800bd38:	0553      	lsls	r3, r2, #21
 800bd3a:	d530      	bpl.n	800bd9e <__ssputs_r+0x9e>
 800bd3c:	4629      	mov	r1, r5
 800bd3e:	f7ff ff0f 	bl	800bb60 <_malloc_r>
 800bd42:	4606      	mov	r6, r0
 800bd44:	b950      	cbnz	r0, 800bd5c <__ssputs_r+0x5c>
 800bd46:	230c      	movs	r3, #12
 800bd48:	f8ca 3000 	str.w	r3, [sl]
 800bd4c:	89a3      	ldrh	r3, [r4, #12]
 800bd4e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd52:	81a3      	strh	r3, [r4, #12]
 800bd54:	f04f 30ff 	mov.w	r0, #4294967295
 800bd58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bd5c:	463a      	mov	r2, r7
 800bd5e:	6921      	ldr	r1, [r4, #16]
 800bd60:	f7ff fe84 	bl	800ba6c <memcpy>
 800bd64:	89a3      	ldrh	r3, [r4, #12]
 800bd66:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bd6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd6e:	81a3      	strh	r3, [r4, #12]
 800bd70:	6126      	str	r6, [r4, #16]
 800bd72:	6165      	str	r5, [r4, #20]
 800bd74:	443e      	add	r6, r7
 800bd76:	1bed      	subs	r5, r5, r7
 800bd78:	6026      	str	r6, [r4, #0]
 800bd7a:	60a5      	str	r5, [r4, #8]
 800bd7c:	464e      	mov	r6, r9
 800bd7e:	454e      	cmp	r6, r9
 800bd80:	d900      	bls.n	800bd84 <__ssputs_r+0x84>
 800bd82:	464e      	mov	r6, r9
 800bd84:	4632      	mov	r2, r6
 800bd86:	4641      	mov	r1, r8
 800bd88:	6820      	ldr	r0, [r4, #0]
 800bd8a:	f7ff fe7a 	bl	800ba82 <memmove>
 800bd8e:	68a3      	ldr	r3, [r4, #8]
 800bd90:	1b9b      	subs	r3, r3, r6
 800bd92:	60a3      	str	r3, [r4, #8]
 800bd94:	6823      	ldr	r3, [r4, #0]
 800bd96:	441e      	add	r6, r3
 800bd98:	6026      	str	r6, [r4, #0]
 800bd9a:	2000      	movs	r0, #0
 800bd9c:	e7dc      	b.n	800bd58 <__ssputs_r+0x58>
 800bd9e:	462a      	mov	r2, r5
 800bda0:	f000 fa88 	bl	800c2b4 <_realloc_r>
 800bda4:	4606      	mov	r6, r0
 800bda6:	2800      	cmp	r0, #0
 800bda8:	d1e2      	bne.n	800bd70 <__ssputs_r+0x70>
 800bdaa:	6921      	ldr	r1, [r4, #16]
 800bdac:	4650      	mov	r0, sl
 800bdae:	f7ff fe89 	bl	800bac4 <_free_r>
 800bdb2:	e7c8      	b.n	800bd46 <__ssputs_r+0x46>

0800bdb4 <_svfiprintf_r>:
 800bdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdb8:	461d      	mov	r5, r3
 800bdba:	898b      	ldrh	r3, [r1, #12]
 800bdbc:	061f      	lsls	r7, r3, #24
 800bdbe:	b09d      	sub	sp, #116	; 0x74
 800bdc0:	4680      	mov	r8, r0
 800bdc2:	460c      	mov	r4, r1
 800bdc4:	4616      	mov	r6, r2
 800bdc6:	d50f      	bpl.n	800bde8 <_svfiprintf_r+0x34>
 800bdc8:	690b      	ldr	r3, [r1, #16]
 800bdca:	b96b      	cbnz	r3, 800bde8 <_svfiprintf_r+0x34>
 800bdcc:	2140      	movs	r1, #64	; 0x40
 800bdce:	f7ff fec7 	bl	800bb60 <_malloc_r>
 800bdd2:	6020      	str	r0, [r4, #0]
 800bdd4:	6120      	str	r0, [r4, #16]
 800bdd6:	b928      	cbnz	r0, 800bde4 <_svfiprintf_r+0x30>
 800bdd8:	230c      	movs	r3, #12
 800bdda:	f8c8 3000 	str.w	r3, [r8]
 800bdde:	f04f 30ff 	mov.w	r0, #4294967295
 800bde2:	e0c8      	b.n	800bf76 <_svfiprintf_r+0x1c2>
 800bde4:	2340      	movs	r3, #64	; 0x40
 800bde6:	6163      	str	r3, [r4, #20]
 800bde8:	2300      	movs	r3, #0
 800bdea:	9309      	str	r3, [sp, #36]	; 0x24
 800bdec:	2320      	movs	r3, #32
 800bdee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdf2:	2330      	movs	r3, #48	; 0x30
 800bdf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdf8:	9503      	str	r5, [sp, #12]
 800bdfa:	f04f 0b01 	mov.w	fp, #1
 800bdfe:	4637      	mov	r7, r6
 800be00:	463d      	mov	r5, r7
 800be02:	f815 3b01 	ldrb.w	r3, [r5], #1
 800be06:	b10b      	cbz	r3, 800be0c <_svfiprintf_r+0x58>
 800be08:	2b25      	cmp	r3, #37	; 0x25
 800be0a:	d13e      	bne.n	800be8a <_svfiprintf_r+0xd6>
 800be0c:	ebb7 0a06 	subs.w	sl, r7, r6
 800be10:	d00b      	beq.n	800be2a <_svfiprintf_r+0x76>
 800be12:	4653      	mov	r3, sl
 800be14:	4632      	mov	r2, r6
 800be16:	4621      	mov	r1, r4
 800be18:	4640      	mov	r0, r8
 800be1a:	f7ff ff71 	bl	800bd00 <__ssputs_r>
 800be1e:	3001      	adds	r0, #1
 800be20:	f000 80a4 	beq.w	800bf6c <_svfiprintf_r+0x1b8>
 800be24:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be26:	4453      	add	r3, sl
 800be28:	9309      	str	r3, [sp, #36]	; 0x24
 800be2a:	783b      	ldrb	r3, [r7, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	f000 809d 	beq.w	800bf6c <_svfiprintf_r+0x1b8>
 800be32:	2300      	movs	r3, #0
 800be34:	f04f 32ff 	mov.w	r2, #4294967295
 800be38:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be3c:	9304      	str	r3, [sp, #16]
 800be3e:	9307      	str	r3, [sp, #28]
 800be40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be44:	931a      	str	r3, [sp, #104]	; 0x68
 800be46:	462f      	mov	r7, r5
 800be48:	2205      	movs	r2, #5
 800be4a:	f817 1b01 	ldrb.w	r1, [r7], #1
 800be4e:	4850      	ldr	r0, [pc, #320]	; (800bf90 <_svfiprintf_r+0x1dc>)
 800be50:	f7f4 f9be 	bl	80001d0 <memchr>
 800be54:	9b04      	ldr	r3, [sp, #16]
 800be56:	b9d0      	cbnz	r0, 800be8e <_svfiprintf_r+0xda>
 800be58:	06d9      	lsls	r1, r3, #27
 800be5a:	bf44      	itt	mi
 800be5c:	2220      	movmi	r2, #32
 800be5e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be62:	071a      	lsls	r2, r3, #28
 800be64:	bf44      	itt	mi
 800be66:	222b      	movmi	r2, #43	; 0x2b
 800be68:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800be6c:	782a      	ldrb	r2, [r5, #0]
 800be6e:	2a2a      	cmp	r2, #42	; 0x2a
 800be70:	d015      	beq.n	800be9e <_svfiprintf_r+0xea>
 800be72:	9a07      	ldr	r2, [sp, #28]
 800be74:	462f      	mov	r7, r5
 800be76:	2000      	movs	r0, #0
 800be78:	250a      	movs	r5, #10
 800be7a:	4639      	mov	r1, r7
 800be7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be80:	3b30      	subs	r3, #48	; 0x30
 800be82:	2b09      	cmp	r3, #9
 800be84:	d94d      	bls.n	800bf22 <_svfiprintf_r+0x16e>
 800be86:	b1b8      	cbz	r0, 800beb8 <_svfiprintf_r+0x104>
 800be88:	e00f      	b.n	800beaa <_svfiprintf_r+0xf6>
 800be8a:	462f      	mov	r7, r5
 800be8c:	e7b8      	b.n	800be00 <_svfiprintf_r+0x4c>
 800be8e:	4a40      	ldr	r2, [pc, #256]	; (800bf90 <_svfiprintf_r+0x1dc>)
 800be90:	1a80      	subs	r0, r0, r2
 800be92:	fa0b f000 	lsl.w	r0, fp, r0
 800be96:	4318      	orrs	r0, r3
 800be98:	9004      	str	r0, [sp, #16]
 800be9a:	463d      	mov	r5, r7
 800be9c:	e7d3      	b.n	800be46 <_svfiprintf_r+0x92>
 800be9e:	9a03      	ldr	r2, [sp, #12]
 800bea0:	1d11      	adds	r1, r2, #4
 800bea2:	6812      	ldr	r2, [r2, #0]
 800bea4:	9103      	str	r1, [sp, #12]
 800bea6:	2a00      	cmp	r2, #0
 800bea8:	db01      	blt.n	800beae <_svfiprintf_r+0xfa>
 800beaa:	9207      	str	r2, [sp, #28]
 800beac:	e004      	b.n	800beb8 <_svfiprintf_r+0x104>
 800beae:	4252      	negs	r2, r2
 800beb0:	f043 0302 	orr.w	r3, r3, #2
 800beb4:	9207      	str	r2, [sp, #28]
 800beb6:	9304      	str	r3, [sp, #16]
 800beb8:	783b      	ldrb	r3, [r7, #0]
 800beba:	2b2e      	cmp	r3, #46	; 0x2e
 800bebc:	d10c      	bne.n	800bed8 <_svfiprintf_r+0x124>
 800bebe:	787b      	ldrb	r3, [r7, #1]
 800bec0:	2b2a      	cmp	r3, #42	; 0x2a
 800bec2:	d133      	bne.n	800bf2c <_svfiprintf_r+0x178>
 800bec4:	9b03      	ldr	r3, [sp, #12]
 800bec6:	1d1a      	adds	r2, r3, #4
 800bec8:	681b      	ldr	r3, [r3, #0]
 800beca:	9203      	str	r2, [sp, #12]
 800becc:	2b00      	cmp	r3, #0
 800bece:	bfb8      	it	lt
 800bed0:	f04f 33ff 	movlt.w	r3, #4294967295
 800bed4:	3702      	adds	r7, #2
 800bed6:	9305      	str	r3, [sp, #20]
 800bed8:	4d2e      	ldr	r5, [pc, #184]	; (800bf94 <_svfiprintf_r+0x1e0>)
 800beda:	7839      	ldrb	r1, [r7, #0]
 800bedc:	2203      	movs	r2, #3
 800bede:	4628      	mov	r0, r5
 800bee0:	f7f4 f976 	bl	80001d0 <memchr>
 800bee4:	b138      	cbz	r0, 800bef6 <_svfiprintf_r+0x142>
 800bee6:	2340      	movs	r3, #64	; 0x40
 800bee8:	1b40      	subs	r0, r0, r5
 800beea:	fa03 f000 	lsl.w	r0, r3, r0
 800beee:	9b04      	ldr	r3, [sp, #16]
 800bef0:	4303      	orrs	r3, r0
 800bef2:	3701      	adds	r7, #1
 800bef4:	9304      	str	r3, [sp, #16]
 800bef6:	7839      	ldrb	r1, [r7, #0]
 800bef8:	4827      	ldr	r0, [pc, #156]	; (800bf98 <_svfiprintf_r+0x1e4>)
 800befa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800befe:	2206      	movs	r2, #6
 800bf00:	1c7e      	adds	r6, r7, #1
 800bf02:	f7f4 f965 	bl	80001d0 <memchr>
 800bf06:	2800      	cmp	r0, #0
 800bf08:	d038      	beq.n	800bf7c <_svfiprintf_r+0x1c8>
 800bf0a:	4b24      	ldr	r3, [pc, #144]	; (800bf9c <_svfiprintf_r+0x1e8>)
 800bf0c:	bb13      	cbnz	r3, 800bf54 <_svfiprintf_r+0x1a0>
 800bf0e:	9b03      	ldr	r3, [sp, #12]
 800bf10:	3307      	adds	r3, #7
 800bf12:	f023 0307 	bic.w	r3, r3, #7
 800bf16:	3308      	adds	r3, #8
 800bf18:	9303      	str	r3, [sp, #12]
 800bf1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf1c:	444b      	add	r3, r9
 800bf1e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf20:	e76d      	b.n	800bdfe <_svfiprintf_r+0x4a>
 800bf22:	fb05 3202 	mla	r2, r5, r2, r3
 800bf26:	2001      	movs	r0, #1
 800bf28:	460f      	mov	r7, r1
 800bf2a:	e7a6      	b.n	800be7a <_svfiprintf_r+0xc6>
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	3701      	adds	r7, #1
 800bf30:	9305      	str	r3, [sp, #20]
 800bf32:	4619      	mov	r1, r3
 800bf34:	250a      	movs	r5, #10
 800bf36:	4638      	mov	r0, r7
 800bf38:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf3c:	3a30      	subs	r2, #48	; 0x30
 800bf3e:	2a09      	cmp	r2, #9
 800bf40:	d903      	bls.n	800bf4a <_svfiprintf_r+0x196>
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d0c8      	beq.n	800bed8 <_svfiprintf_r+0x124>
 800bf46:	9105      	str	r1, [sp, #20]
 800bf48:	e7c6      	b.n	800bed8 <_svfiprintf_r+0x124>
 800bf4a:	fb05 2101 	mla	r1, r5, r1, r2
 800bf4e:	2301      	movs	r3, #1
 800bf50:	4607      	mov	r7, r0
 800bf52:	e7f0      	b.n	800bf36 <_svfiprintf_r+0x182>
 800bf54:	ab03      	add	r3, sp, #12
 800bf56:	9300      	str	r3, [sp, #0]
 800bf58:	4622      	mov	r2, r4
 800bf5a:	4b11      	ldr	r3, [pc, #68]	; (800bfa0 <_svfiprintf_r+0x1ec>)
 800bf5c:	a904      	add	r1, sp, #16
 800bf5e:	4640      	mov	r0, r8
 800bf60:	f3af 8000 	nop.w
 800bf64:	f1b0 3fff 	cmp.w	r0, #4294967295
 800bf68:	4681      	mov	r9, r0
 800bf6a:	d1d6      	bne.n	800bf1a <_svfiprintf_r+0x166>
 800bf6c:	89a3      	ldrh	r3, [r4, #12]
 800bf6e:	065b      	lsls	r3, r3, #25
 800bf70:	f53f af35 	bmi.w	800bdde <_svfiprintf_r+0x2a>
 800bf74:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf76:	b01d      	add	sp, #116	; 0x74
 800bf78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bf7c:	ab03      	add	r3, sp, #12
 800bf7e:	9300      	str	r3, [sp, #0]
 800bf80:	4622      	mov	r2, r4
 800bf82:	4b07      	ldr	r3, [pc, #28]	; (800bfa0 <_svfiprintf_r+0x1ec>)
 800bf84:	a904      	add	r1, sp, #16
 800bf86:	4640      	mov	r0, r8
 800bf88:	f000 f882 	bl	800c090 <_printf_i>
 800bf8c:	e7ea      	b.n	800bf64 <_svfiprintf_r+0x1b0>
 800bf8e:	bf00      	nop
 800bf90:	0800cf26 	.word	0x0800cf26
 800bf94:	0800cf2c 	.word	0x0800cf2c
 800bf98:	0800cf30 	.word	0x0800cf30
 800bf9c:	00000000 	.word	0x00000000
 800bfa0:	0800bd01 	.word	0x0800bd01

0800bfa4 <_printf_common>:
 800bfa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bfa8:	4691      	mov	r9, r2
 800bfaa:	461f      	mov	r7, r3
 800bfac:	688a      	ldr	r2, [r1, #8]
 800bfae:	690b      	ldr	r3, [r1, #16]
 800bfb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800bfb4:	4293      	cmp	r3, r2
 800bfb6:	bfb8      	it	lt
 800bfb8:	4613      	movlt	r3, r2
 800bfba:	f8c9 3000 	str.w	r3, [r9]
 800bfbe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	460c      	mov	r4, r1
 800bfc6:	b112      	cbz	r2, 800bfce <_printf_common+0x2a>
 800bfc8:	3301      	adds	r3, #1
 800bfca:	f8c9 3000 	str.w	r3, [r9]
 800bfce:	6823      	ldr	r3, [r4, #0]
 800bfd0:	0699      	lsls	r1, r3, #26
 800bfd2:	bf42      	ittt	mi
 800bfd4:	f8d9 3000 	ldrmi.w	r3, [r9]
 800bfd8:	3302      	addmi	r3, #2
 800bfda:	f8c9 3000 	strmi.w	r3, [r9]
 800bfde:	6825      	ldr	r5, [r4, #0]
 800bfe0:	f015 0506 	ands.w	r5, r5, #6
 800bfe4:	d107      	bne.n	800bff6 <_printf_common+0x52>
 800bfe6:	f104 0a19 	add.w	sl, r4, #25
 800bfea:	68e3      	ldr	r3, [r4, #12]
 800bfec:	f8d9 2000 	ldr.w	r2, [r9]
 800bff0:	1a9b      	subs	r3, r3, r2
 800bff2:	42ab      	cmp	r3, r5
 800bff4:	dc28      	bgt.n	800c048 <_printf_common+0xa4>
 800bff6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800bffa:	6822      	ldr	r2, [r4, #0]
 800bffc:	3300      	adds	r3, #0
 800bffe:	bf18      	it	ne
 800c000:	2301      	movne	r3, #1
 800c002:	0692      	lsls	r2, r2, #26
 800c004:	d42d      	bmi.n	800c062 <_printf_common+0xbe>
 800c006:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c00a:	4639      	mov	r1, r7
 800c00c:	4630      	mov	r0, r6
 800c00e:	47c0      	blx	r8
 800c010:	3001      	adds	r0, #1
 800c012:	d020      	beq.n	800c056 <_printf_common+0xb2>
 800c014:	6823      	ldr	r3, [r4, #0]
 800c016:	68e5      	ldr	r5, [r4, #12]
 800c018:	f8d9 2000 	ldr.w	r2, [r9]
 800c01c:	f003 0306 	and.w	r3, r3, #6
 800c020:	2b04      	cmp	r3, #4
 800c022:	bf08      	it	eq
 800c024:	1aad      	subeq	r5, r5, r2
 800c026:	68a3      	ldr	r3, [r4, #8]
 800c028:	6922      	ldr	r2, [r4, #16]
 800c02a:	bf0c      	ite	eq
 800c02c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c030:	2500      	movne	r5, #0
 800c032:	4293      	cmp	r3, r2
 800c034:	bfc4      	itt	gt
 800c036:	1a9b      	subgt	r3, r3, r2
 800c038:	18ed      	addgt	r5, r5, r3
 800c03a:	f04f 0900 	mov.w	r9, #0
 800c03e:	341a      	adds	r4, #26
 800c040:	454d      	cmp	r5, r9
 800c042:	d11a      	bne.n	800c07a <_printf_common+0xd6>
 800c044:	2000      	movs	r0, #0
 800c046:	e008      	b.n	800c05a <_printf_common+0xb6>
 800c048:	2301      	movs	r3, #1
 800c04a:	4652      	mov	r2, sl
 800c04c:	4639      	mov	r1, r7
 800c04e:	4630      	mov	r0, r6
 800c050:	47c0      	blx	r8
 800c052:	3001      	adds	r0, #1
 800c054:	d103      	bne.n	800c05e <_printf_common+0xba>
 800c056:	f04f 30ff 	mov.w	r0, #4294967295
 800c05a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c05e:	3501      	adds	r5, #1
 800c060:	e7c3      	b.n	800bfea <_printf_common+0x46>
 800c062:	18e1      	adds	r1, r4, r3
 800c064:	1c5a      	adds	r2, r3, #1
 800c066:	2030      	movs	r0, #48	; 0x30
 800c068:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c06c:	4422      	add	r2, r4
 800c06e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c072:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c076:	3302      	adds	r3, #2
 800c078:	e7c5      	b.n	800c006 <_printf_common+0x62>
 800c07a:	2301      	movs	r3, #1
 800c07c:	4622      	mov	r2, r4
 800c07e:	4639      	mov	r1, r7
 800c080:	4630      	mov	r0, r6
 800c082:	47c0      	blx	r8
 800c084:	3001      	adds	r0, #1
 800c086:	d0e6      	beq.n	800c056 <_printf_common+0xb2>
 800c088:	f109 0901 	add.w	r9, r9, #1
 800c08c:	e7d8      	b.n	800c040 <_printf_common+0x9c>
	...

0800c090 <_printf_i>:
 800c090:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c094:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800c098:	460c      	mov	r4, r1
 800c09a:	7e09      	ldrb	r1, [r1, #24]
 800c09c:	b085      	sub	sp, #20
 800c09e:	296e      	cmp	r1, #110	; 0x6e
 800c0a0:	4617      	mov	r7, r2
 800c0a2:	4606      	mov	r6, r0
 800c0a4:	4698      	mov	r8, r3
 800c0a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c0a8:	f000 80b3 	beq.w	800c212 <_printf_i+0x182>
 800c0ac:	d822      	bhi.n	800c0f4 <_printf_i+0x64>
 800c0ae:	2963      	cmp	r1, #99	; 0x63
 800c0b0:	d036      	beq.n	800c120 <_printf_i+0x90>
 800c0b2:	d80a      	bhi.n	800c0ca <_printf_i+0x3a>
 800c0b4:	2900      	cmp	r1, #0
 800c0b6:	f000 80b9 	beq.w	800c22c <_printf_i+0x19c>
 800c0ba:	2958      	cmp	r1, #88	; 0x58
 800c0bc:	f000 8083 	beq.w	800c1c6 <_printf_i+0x136>
 800c0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c0c4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800c0c8:	e032      	b.n	800c130 <_printf_i+0xa0>
 800c0ca:	2964      	cmp	r1, #100	; 0x64
 800c0cc:	d001      	beq.n	800c0d2 <_printf_i+0x42>
 800c0ce:	2969      	cmp	r1, #105	; 0x69
 800c0d0:	d1f6      	bne.n	800c0c0 <_printf_i+0x30>
 800c0d2:	6820      	ldr	r0, [r4, #0]
 800c0d4:	6813      	ldr	r3, [r2, #0]
 800c0d6:	0605      	lsls	r5, r0, #24
 800c0d8:	f103 0104 	add.w	r1, r3, #4
 800c0dc:	d52a      	bpl.n	800c134 <_printf_i+0xa4>
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	6011      	str	r1, [r2, #0]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	da03      	bge.n	800c0ee <_printf_i+0x5e>
 800c0e6:	222d      	movs	r2, #45	; 0x2d
 800c0e8:	425b      	negs	r3, r3
 800c0ea:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800c0ee:	486f      	ldr	r0, [pc, #444]	; (800c2ac <_printf_i+0x21c>)
 800c0f0:	220a      	movs	r2, #10
 800c0f2:	e039      	b.n	800c168 <_printf_i+0xd8>
 800c0f4:	2973      	cmp	r1, #115	; 0x73
 800c0f6:	f000 809d 	beq.w	800c234 <_printf_i+0x1a4>
 800c0fa:	d808      	bhi.n	800c10e <_printf_i+0x7e>
 800c0fc:	296f      	cmp	r1, #111	; 0x6f
 800c0fe:	d020      	beq.n	800c142 <_printf_i+0xb2>
 800c100:	2970      	cmp	r1, #112	; 0x70
 800c102:	d1dd      	bne.n	800c0c0 <_printf_i+0x30>
 800c104:	6823      	ldr	r3, [r4, #0]
 800c106:	f043 0320 	orr.w	r3, r3, #32
 800c10a:	6023      	str	r3, [r4, #0]
 800c10c:	e003      	b.n	800c116 <_printf_i+0x86>
 800c10e:	2975      	cmp	r1, #117	; 0x75
 800c110:	d017      	beq.n	800c142 <_printf_i+0xb2>
 800c112:	2978      	cmp	r1, #120	; 0x78
 800c114:	d1d4      	bne.n	800c0c0 <_printf_i+0x30>
 800c116:	2378      	movs	r3, #120	; 0x78
 800c118:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c11c:	4864      	ldr	r0, [pc, #400]	; (800c2b0 <_printf_i+0x220>)
 800c11e:	e055      	b.n	800c1cc <_printf_i+0x13c>
 800c120:	6813      	ldr	r3, [r2, #0]
 800c122:	1d19      	adds	r1, r3, #4
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	6011      	str	r1, [r2, #0]
 800c128:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c12c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c130:	2301      	movs	r3, #1
 800c132:	e08c      	b.n	800c24e <_printf_i+0x1be>
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	6011      	str	r1, [r2, #0]
 800c138:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c13c:	bf18      	it	ne
 800c13e:	b21b      	sxthne	r3, r3
 800c140:	e7cf      	b.n	800c0e2 <_printf_i+0x52>
 800c142:	6813      	ldr	r3, [r2, #0]
 800c144:	6825      	ldr	r5, [r4, #0]
 800c146:	1d18      	adds	r0, r3, #4
 800c148:	6010      	str	r0, [r2, #0]
 800c14a:	0628      	lsls	r0, r5, #24
 800c14c:	d501      	bpl.n	800c152 <_printf_i+0xc2>
 800c14e:	681b      	ldr	r3, [r3, #0]
 800c150:	e002      	b.n	800c158 <_printf_i+0xc8>
 800c152:	0668      	lsls	r0, r5, #25
 800c154:	d5fb      	bpl.n	800c14e <_printf_i+0xbe>
 800c156:	881b      	ldrh	r3, [r3, #0]
 800c158:	4854      	ldr	r0, [pc, #336]	; (800c2ac <_printf_i+0x21c>)
 800c15a:	296f      	cmp	r1, #111	; 0x6f
 800c15c:	bf14      	ite	ne
 800c15e:	220a      	movne	r2, #10
 800c160:	2208      	moveq	r2, #8
 800c162:	2100      	movs	r1, #0
 800c164:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c168:	6865      	ldr	r5, [r4, #4]
 800c16a:	60a5      	str	r5, [r4, #8]
 800c16c:	2d00      	cmp	r5, #0
 800c16e:	f2c0 8095 	blt.w	800c29c <_printf_i+0x20c>
 800c172:	6821      	ldr	r1, [r4, #0]
 800c174:	f021 0104 	bic.w	r1, r1, #4
 800c178:	6021      	str	r1, [r4, #0]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d13d      	bne.n	800c1fa <_printf_i+0x16a>
 800c17e:	2d00      	cmp	r5, #0
 800c180:	f040 808e 	bne.w	800c2a0 <_printf_i+0x210>
 800c184:	4665      	mov	r5, ip
 800c186:	2a08      	cmp	r2, #8
 800c188:	d10b      	bne.n	800c1a2 <_printf_i+0x112>
 800c18a:	6823      	ldr	r3, [r4, #0]
 800c18c:	07db      	lsls	r3, r3, #31
 800c18e:	d508      	bpl.n	800c1a2 <_printf_i+0x112>
 800c190:	6923      	ldr	r3, [r4, #16]
 800c192:	6862      	ldr	r2, [r4, #4]
 800c194:	429a      	cmp	r2, r3
 800c196:	bfde      	ittt	le
 800c198:	2330      	movle	r3, #48	; 0x30
 800c19a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c19e:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c1a2:	ebac 0305 	sub.w	r3, ip, r5
 800c1a6:	6123      	str	r3, [r4, #16]
 800c1a8:	f8cd 8000 	str.w	r8, [sp]
 800c1ac:	463b      	mov	r3, r7
 800c1ae:	aa03      	add	r2, sp, #12
 800c1b0:	4621      	mov	r1, r4
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7ff fef6 	bl	800bfa4 <_printf_common>
 800c1b8:	3001      	adds	r0, #1
 800c1ba:	d14d      	bne.n	800c258 <_printf_i+0x1c8>
 800c1bc:	f04f 30ff 	mov.w	r0, #4294967295
 800c1c0:	b005      	add	sp, #20
 800c1c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c1c6:	4839      	ldr	r0, [pc, #228]	; (800c2ac <_printf_i+0x21c>)
 800c1c8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800c1cc:	6813      	ldr	r3, [r2, #0]
 800c1ce:	6821      	ldr	r1, [r4, #0]
 800c1d0:	1d1d      	adds	r5, r3, #4
 800c1d2:	681b      	ldr	r3, [r3, #0]
 800c1d4:	6015      	str	r5, [r2, #0]
 800c1d6:	060a      	lsls	r2, r1, #24
 800c1d8:	d50b      	bpl.n	800c1f2 <_printf_i+0x162>
 800c1da:	07ca      	lsls	r2, r1, #31
 800c1dc:	bf44      	itt	mi
 800c1de:	f041 0120 	orrmi.w	r1, r1, #32
 800c1e2:	6021      	strmi	r1, [r4, #0]
 800c1e4:	b91b      	cbnz	r3, 800c1ee <_printf_i+0x15e>
 800c1e6:	6822      	ldr	r2, [r4, #0]
 800c1e8:	f022 0220 	bic.w	r2, r2, #32
 800c1ec:	6022      	str	r2, [r4, #0]
 800c1ee:	2210      	movs	r2, #16
 800c1f0:	e7b7      	b.n	800c162 <_printf_i+0xd2>
 800c1f2:	064d      	lsls	r5, r1, #25
 800c1f4:	bf48      	it	mi
 800c1f6:	b29b      	uxthmi	r3, r3
 800c1f8:	e7ef      	b.n	800c1da <_printf_i+0x14a>
 800c1fa:	4665      	mov	r5, ip
 800c1fc:	fbb3 f1f2 	udiv	r1, r3, r2
 800c200:	fb02 3311 	mls	r3, r2, r1, r3
 800c204:	5cc3      	ldrb	r3, [r0, r3]
 800c206:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800c20a:	460b      	mov	r3, r1
 800c20c:	2900      	cmp	r1, #0
 800c20e:	d1f5      	bne.n	800c1fc <_printf_i+0x16c>
 800c210:	e7b9      	b.n	800c186 <_printf_i+0xf6>
 800c212:	6813      	ldr	r3, [r2, #0]
 800c214:	6825      	ldr	r5, [r4, #0]
 800c216:	6961      	ldr	r1, [r4, #20]
 800c218:	1d18      	adds	r0, r3, #4
 800c21a:	6010      	str	r0, [r2, #0]
 800c21c:	0628      	lsls	r0, r5, #24
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	d501      	bpl.n	800c226 <_printf_i+0x196>
 800c222:	6019      	str	r1, [r3, #0]
 800c224:	e002      	b.n	800c22c <_printf_i+0x19c>
 800c226:	066a      	lsls	r2, r5, #25
 800c228:	d5fb      	bpl.n	800c222 <_printf_i+0x192>
 800c22a:	8019      	strh	r1, [r3, #0]
 800c22c:	2300      	movs	r3, #0
 800c22e:	6123      	str	r3, [r4, #16]
 800c230:	4665      	mov	r5, ip
 800c232:	e7b9      	b.n	800c1a8 <_printf_i+0x118>
 800c234:	6813      	ldr	r3, [r2, #0]
 800c236:	1d19      	adds	r1, r3, #4
 800c238:	6011      	str	r1, [r2, #0]
 800c23a:	681d      	ldr	r5, [r3, #0]
 800c23c:	6862      	ldr	r2, [r4, #4]
 800c23e:	2100      	movs	r1, #0
 800c240:	4628      	mov	r0, r5
 800c242:	f7f3 ffc5 	bl	80001d0 <memchr>
 800c246:	b108      	cbz	r0, 800c24c <_printf_i+0x1bc>
 800c248:	1b40      	subs	r0, r0, r5
 800c24a:	6060      	str	r0, [r4, #4]
 800c24c:	6863      	ldr	r3, [r4, #4]
 800c24e:	6123      	str	r3, [r4, #16]
 800c250:	2300      	movs	r3, #0
 800c252:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c256:	e7a7      	b.n	800c1a8 <_printf_i+0x118>
 800c258:	6923      	ldr	r3, [r4, #16]
 800c25a:	462a      	mov	r2, r5
 800c25c:	4639      	mov	r1, r7
 800c25e:	4630      	mov	r0, r6
 800c260:	47c0      	blx	r8
 800c262:	3001      	adds	r0, #1
 800c264:	d0aa      	beq.n	800c1bc <_printf_i+0x12c>
 800c266:	6823      	ldr	r3, [r4, #0]
 800c268:	079b      	lsls	r3, r3, #30
 800c26a:	d413      	bmi.n	800c294 <_printf_i+0x204>
 800c26c:	68e0      	ldr	r0, [r4, #12]
 800c26e:	9b03      	ldr	r3, [sp, #12]
 800c270:	4298      	cmp	r0, r3
 800c272:	bfb8      	it	lt
 800c274:	4618      	movlt	r0, r3
 800c276:	e7a3      	b.n	800c1c0 <_printf_i+0x130>
 800c278:	2301      	movs	r3, #1
 800c27a:	464a      	mov	r2, r9
 800c27c:	4639      	mov	r1, r7
 800c27e:	4630      	mov	r0, r6
 800c280:	47c0      	blx	r8
 800c282:	3001      	adds	r0, #1
 800c284:	d09a      	beq.n	800c1bc <_printf_i+0x12c>
 800c286:	3501      	adds	r5, #1
 800c288:	68e3      	ldr	r3, [r4, #12]
 800c28a:	9a03      	ldr	r2, [sp, #12]
 800c28c:	1a9b      	subs	r3, r3, r2
 800c28e:	42ab      	cmp	r3, r5
 800c290:	dcf2      	bgt.n	800c278 <_printf_i+0x1e8>
 800c292:	e7eb      	b.n	800c26c <_printf_i+0x1dc>
 800c294:	2500      	movs	r5, #0
 800c296:	f104 0919 	add.w	r9, r4, #25
 800c29a:	e7f5      	b.n	800c288 <_printf_i+0x1f8>
 800c29c:	2b00      	cmp	r3, #0
 800c29e:	d1ac      	bne.n	800c1fa <_printf_i+0x16a>
 800c2a0:	7803      	ldrb	r3, [r0, #0]
 800c2a2:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c2a6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c2aa:	e76c      	b.n	800c186 <_printf_i+0xf6>
 800c2ac:	0800cf37 	.word	0x0800cf37
 800c2b0:	0800cf48 	.word	0x0800cf48

0800c2b4 <_realloc_r>:
 800c2b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c2b6:	4607      	mov	r7, r0
 800c2b8:	4614      	mov	r4, r2
 800c2ba:	460e      	mov	r6, r1
 800c2bc:	b921      	cbnz	r1, 800c2c8 <_realloc_r+0x14>
 800c2be:	4611      	mov	r1, r2
 800c2c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800c2c4:	f7ff bc4c 	b.w	800bb60 <_malloc_r>
 800c2c8:	b922      	cbnz	r2, 800c2d4 <_realloc_r+0x20>
 800c2ca:	f7ff fbfb 	bl	800bac4 <_free_r>
 800c2ce:	4625      	mov	r5, r4
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c2d4:	f000 f814 	bl	800c300 <_malloc_usable_size_r>
 800c2d8:	42a0      	cmp	r0, r4
 800c2da:	d20f      	bcs.n	800c2fc <_realloc_r+0x48>
 800c2dc:	4621      	mov	r1, r4
 800c2de:	4638      	mov	r0, r7
 800c2e0:	f7ff fc3e 	bl	800bb60 <_malloc_r>
 800c2e4:	4605      	mov	r5, r0
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	d0f2      	beq.n	800c2d0 <_realloc_r+0x1c>
 800c2ea:	4631      	mov	r1, r6
 800c2ec:	4622      	mov	r2, r4
 800c2ee:	f7ff fbbd 	bl	800ba6c <memcpy>
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4638      	mov	r0, r7
 800c2f6:	f7ff fbe5 	bl	800bac4 <_free_r>
 800c2fa:	e7e9      	b.n	800c2d0 <_realloc_r+0x1c>
 800c2fc:	4635      	mov	r5, r6
 800c2fe:	e7e7      	b.n	800c2d0 <_realloc_r+0x1c>

0800c300 <_malloc_usable_size_r>:
 800c300:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c304:	1f18      	subs	r0, r3, #4
 800c306:	2b00      	cmp	r3, #0
 800c308:	bfbc      	itt	lt
 800c30a:	580b      	ldrlt	r3, [r1, r0]
 800c30c:	18c0      	addlt	r0, r0, r3
 800c30e:	4770      	bx	lr

0800c310 <_init>:
 800c310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c312:	bf00      	nop
 800c314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c316:	bc08      	pop	{r3}
 800c318:	469e      	mov	lr, r3
 800c31a:	4770      	bx	lr

0800c31c <_fini>:
 800c31c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c31e:	bf00      	nop
 800c320:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c322:	bc08      	pop	{r3}
 800c324:	469e      	mov	lr, r3
 800c326:	4770      	bx	lr
