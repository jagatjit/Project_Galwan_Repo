
Project_Galwan.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009af0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e8  08009c78  08009c78  00019c78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a260  0800a260  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  0800a260  0800a260  0001a260  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a268  0800a268  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800a268  0800a268  0001a268  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0800a270  0800a270  0001a270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  0800a278  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002428  20000078  0800a2f0  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200024a0  0800a2f0  000224a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023d9e  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003b23  00000000  00000000  00043e46  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000017b8  00000000  00000000  00047970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001660  00000000  00000000  00049128  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00008137  00000000  00000000  0004a788  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00013c96  00000000  00000000  000528bf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e5e41  00000000  00000000  00066555  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014c396  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007c88  00000000  00000000  0014c414  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000078 	.word	0x20000078
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08009c60 	.word	0x08009c60

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000007c 	.word	0x2000007c
 80001c4:	08009c60 	.word	0x08009c60

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b972 	b.w	80004d4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9e08      	ldr	r6, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	4688      	mov	r8, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14b      	bne.n	80002ae <__udivmoddi4+0xa6>
 8000216:	428a      	cmp	r2, r1
 8000218:	4615      	mov	r5, r2
 800021a:	d967      	bls.n	80002ec <__udivmoddi4+0xe4>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0720 	rsb	r7, r2, #32
 8000226:	fa01 f302 	lsl.w	r3, r1, r2
 800022a:	fa20 f707 	lsr.w	r7, r0, r7
 800022e:	4095      	lsls	r5, r2
 8000230:	ea47 0803 	orr.w	r8, r7, r3
 8000234:	4094      	lsls	r4, r2
 8000236:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800023a:	0c23      	lsrs	r3, r4, #16
 800023c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000240:	fa1f fc85 	uxth.w	ip, r5
 8000244:	fb0e 8817 	mls	r8, lr, r7, r8
 8000248:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800024c:	fb07 f10c 	mul.w	r1, r7, ip
 8000250:	4299      	cmp	r1, r3
 8000252:	d909      	bls.n	8000268 <__udivmoddi4+0x60>
 8000254:	18eb      	adds	r3, r5, r3
 8000256:	f107 30ff 	add.w	r0, r7, #4294967295
 800025a:	f080 811b 	bcs.w	8000494 <__udivmoddi4+0x28c>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 8118 	bls.w	8000494 <__udivmoddi4+0x28c>
 8000264:	3f02      	subs	r7, #2
 8000266:	442b      	add	r3, r5
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000270:	fb0e 3310 	mls	r3, lr, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 fc0c 	mul.w	ip, r0, ip
 800027c:	45a4      	cmp	ip, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x8c>
 8000280:	192c      	adds	r4, r5, r4
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x290>
 800028a:	45a4      	cmp	ip, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x290>
 8000290:	3802      	subs	r0, #2
 8000292:	442c      	add	r4, r5
 8000294:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000298:	eba4 040c 	sub.w	r4, r4, ip
 800029c:	2700      	movs	r7, #0
 800029e:	b11e      	cbz	r6, 80002a8 <__udivmoddi4+0xa0>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c6 4300 	strd	r4, r3, [r6]
 80002a8:	4639      	mov	r1, r7
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xbe>
 80002b2:	2e00      	cmp	r6, #0
 80002b4:	f000 80eb 	beq.w	800048e <__udivmoddi4+0x286>
 80002b8:	2700      	movs	r7, #0
 80002ba:	e9c6 0100 	strd	r0, r1, [r6]
 80002be:	4638      	mov	r0, r7
 80002c0:	4639      	mov	r1, r7
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f783 	clz	r7, r3
 80002ca:	2f00      	cmp	r7, #0
 80002cc:	d147      	bne.n	800035e <__udivmoddi4+0x156>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd0>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2c4>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	4698      	mov	r8, r3
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa0>
 80002e6:	e9c6 4800 	strd	r4, r8, [r6]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa0>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xe8>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 808f 	bne.w	8000418 <__udivmoddi4+0x210>
 80002fa:	1b49      	subs	r1, r1, r5
 80002fc:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000300:	fa1f f885 	uxth.w	r8, r5
 8000304:	2701      	movs	r7, #1
 8000306:	fbb1 fcfe 	udiv	ip, r1, lr
 800030a:	0c23      	lsrs	r3, r4, #16
 800030c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb08 f10c 	mul.w	r1, r8, ip
 8000318:	4299      	cmp	r1, r3
 800031a:	d907      	bls.n	800032c <__udivmoddi4+0x124>
 800031c:	18eb      	adds	r3, r5, r3
 800031e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x122>
 8000324:	4299      	cmp	r1, r3
 8000326:	f200 80cd 	bhi.w	80004c4 <__udivmoddi4+0x2bc>
 800032a:	4684      	mov	ip, r0
 800032c:	1a59      	subs	r1, r3, r1
 800032e:	b2a3      	uxth	r3, r4
 8000330:	fbb1 f0fe 	udiv	r0, r1, lr
 8000334:	fb0e 1410 	mls	r4, lr, r0, r1
 8000338:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800033c:	fb08 f800 	mul.w	r8, r8, r0
 8000340:	45a0      	cmp	r8, r4
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x14c>
 8000344:	192c      	adds	r4, r5, r4
 8000346:	f100 33ff 	add.w	r3, r0, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x14a>
 800034c:	45a0      	cmp	r8, r4
 800034e:	f200 80b6 	bhi.w	80004be <__udivmoddi4+0x2b6>
 8000352:	4618      	mov	r0, r3
 8000354:	eba4 0408 	sub.w	r4, r4, r8
 8000358:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800035c:	e79f      	b.n	800029e <__udivmoddi4+0x96>
 800035e:	f1c7 0c20 	rsb	ip, r7, #32
 8000362:	40bb      	lsls	r3, r7
 8000364:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000368:	ea4e 0e03 	orr.w	lr, lr, r3
 800036c:	fa01 f407 	lsl.w	r4, r1, r7
 8000370:	fa20 f50c 	lsr.w	r5, r0, ip
 8000374:	fa21 f30c 	lsr.w	r3, r1, ip
 8000378:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800037c:	4325      	orrs	r5, r4
 800037e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000382:	0c2c      	lsrs	r4, r5, #16
 8000384:	fb08 3319 	mls	r3, r8, r9, r3
 8000388:	fa1f fa8e 	uxth.w	sl, lr
 800038c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000390:	fb09 f40a 	mul.w	r4, r9, sl
 8000394:	429c      	cmp	r4, r3
 8000396:	fa02 f207 	lsl.w	r2, r2, r7
 800039a:	fa00 f107 	lsl.w	r1, r0, r7
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b0>
 80003a0:	eb1e 0303 	adds.w	r3, lr, r3
 80003a4:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a8:	f080 8087 	bcs.w	80004ba <__udivmoddi4+0x2b2>
 80003ac:	429c      	cmp	r4, r3
 80003ae:	f240 8084 	bls.w	80004ba <__udivmoddi4+0x2b2>
 80003b2:	f1a9 0902 	sub.w	r9, r9, #2
 80003b6:	4473      	add	r3, lr
 80003b8:	1b1b      	subs	r3, r3, r4
 80003ba:	b2ad      	uxth	r5, r5
 80003bc:	fbb3 f0f8 	udiv	r0, r3, r8
 80003c0:	fb08 3310 	mls	r3, r8, r0, r3
 80003c4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003cc:	45a2      	cmp	sl, r4
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1da>
 80003d0:	eb1e 0404 	adds.w	r4, lr, r4
 80003d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d8:	d26b      	bcs.n	80004b2 <__udivmoddi4+0x2aa>
 80003da:	45a2      	cmp	sl, r4
 80003dc:	d969      	bls.n	80004b2 <__udivmoddi4+0x2aa>
 80003de:	3802      	subs	r0, #2
 80003e0:	4474      	add	r4, lr
 80003e2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e6:	fba0 8902 	umull	r8, r9, r0, r2
 80003ea:	eba4 040a 	sub.w	r4, r4, sl
 80003ee:	454c      	cmp	r4, r9
 80003f0:	46c2      	mov	sl, r8
 80003f2:	464b      	mov	r3, r9
 80003f4:	d354      	bcc.n	80004a0 <__udivmoddi4+0x298>
 80003f6:	d051      	beq.n	800049c <__udivmoddi4+0x294>
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d069      	beq.n	80004d0 <__udivmoddi4+0x2c8>
 80003fc:	ebb1 050a 	subs.w	r5, r1, sl
 8000400:	eb64 0403 	sbc.w	r4, r4, r3
 8000404:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000408:	40fd      	lsrs	r5, r7
 800040a:	40fc      	lsrs	r4, r7
 800040c:	ea4c 0505 	orr.w	r5, ip, r5
 8000410:	e9c6 5400 	strd	r5, r4, [r6]
 8000414:	2700      	movs	r7, #0
 8000416:	e747      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000418:	f1c2 0320 	rsb	r3, r2, #32
 800041c:	fa20 f703 	lsr.w	r7, r0, r3
 8000420:	4095      	lsls	r5, r2
 8000422:	fa01 f002 	lsl.w	r0, r1, r2
 8000426:	fa21 f303 	lsr.w	r3, r1, r3
 800042a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042e:	4338      	orrs	r0, r7
 8000430:	0c01      	lsrs	r1, r0, #16
 8000432:	fbb3 f7fe 	udiv	r7, r3, lr
 8000436:	fa1f f885 	uxth.w	r8, r5
 800043a:	fb0e 3317 	mls	r3, lr, r7, r3
 800043e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000442:	fb07 f308 	mul.w	r3, r7, r8
 8000446:	428b      	cmp	r3, r1
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x256>
 800044e:	1869      	adds	r1, r5, r1
 8000450:	f107 3cff 	add.w	ip, r7, #4294967295
 8000454:	d22f      	bcs.n	80004b6 <__udivmoddi4+0x2ae>
 8000456:	428b      	cmp	r3, r1
 8000458:	d92d      	bls.n	80004b6 <__udivmoddi4+0x2ae>
 800045a:	3f02      	subs	r7, #2
 800045c:	4429      	add	r1, r5
 800045e:	1acb      	subs	r3, r1, r3
 8000460:	b281      	uxth	r1, r0
 8000462:	fbb3 f0fe 	udiv	r0, r3, lr
 8000466:	fb0e 3310 	mls	r3, lr, r0, r3
 800046a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046e:	fb00 f308 	mul.w	r3, r0, r8
 8000472:	428b      	cmp	r3, r1
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x27e>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f100 3cff 	add.w	ip, r0, #4294967295
 800047c:	d217      	bcs.n	80004ae <__udivmoddi4+0x2a6>
 800047e:	428b      	cmp	r3, r1
 8000480:	d915      	bls.n	80004ae <__udivmoddi4+0x2a6>
 8000482:	3802      	subs	r0, #2
 8000484:	4429      	add	r1, r5
 8000486:	1ac9      	subs	r1, r1, r3
 8000488:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800048c:	e73b      	b.n	8000306 <__udivmoddi4+0xfe>
 800048e:	4637      	mov	r7, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e709      	b.n	80002a8 <__udivmoddi4+0xa0>
 8000494:	4607      	mov	r7, r0
 8000496:	e6e7      	b.n	8000268 <__udivmoddi4+0x60>
 8000498:	4618      	mov	r0, r3
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x8c>
 800049c:	4541      	cmp	r1, r8
 800049e:	d2ab      	bcs.n	80003f8 <__udivmoddi4+0x1f0>
 80004a0:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a4:	eb69 020e 	sbc.w	r2, r9, lr
 80004a8:	3801      	subs	r0, #1
 80004aa:	4613      	mov	r3, r2
 80004ac:	e7a4      	b.n	80003f8 <__udivmoddi4+0x1f0>
 80004ae:	4660      	mov	r0, ip
 80004b0:	e7e9      	b.n	8000486 <__udivmoddi4+0x27e>
 80004b2:	4618      	mov	r0, r3
 80004b4:	e795      	b.n	80003e2 <__udivmoddi4+0x1da>
 80004b6:	4667      	mov	r7, ip
 80004b8:	e7d1      	b.n	800045e <__udivmoddi4+0x256>
 80004ba:	4681      	mov	r9, r0
 80004bc:	e77c      	b.n	80003b8 <__udivmoddi4+0x1b0>
 80004be:	3802      	subs	r0, #2
 80004c0:	442c      	add	r4, r5
 80004c2:	e747      	b.n	8000354 <__udivmoddi4+0x14c>
 80004c4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c8:	442b      	add	r3, r5
 80004ca:	e72f      	b.n	800032c <__udivmoddi4+0x124>
 80004cc:	4638      	mov	r0, r7
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xda>
 80004d0:	4637      	mov	r7, r6
 80004d2:	e6e9      	b.n	80002a8 <__udivmoddi4+0xa0>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <_ZN4OLEDC1Ev>:

#include "RJA_SSD1306.h"

constexpr unsigned char OLED::font1[];

OLED::OLED()
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
 80004e0:	4a09      	ldr	r2, [pc, #36]	; (8000508 <_ZN4OLEDC1Ev+0x30>)
 80004e2:	687b      	ldr	r3, [r7, #4]
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	687b      	ldr	r3, [r7, #4]
 80004e8:	2278      	movs	r2, #120	; 0x78
 80004ea:	711a      	strb	r2, [r3, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	227a      	movs	r2, #122	; 0x7a
 80004f0:	715a      	strb	r2, [r3, #5]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	2200      	movs	r2, #0
 80004f6:	719a      	strb	r2, [r3, #6]
{
	// TODO Auto-generated constructor stub

}
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	4618      	mov	r0, r3
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	0800a1dc 	.word	0x0800a1dc

0800050c <_ZN4OLEDD1Ev>:

OLED::~OLED()
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	4a04      	ldr	r2, [pc, #16]	; (8000528 <_ZN4OLEDD1Ev+0x1c>)
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	601a      	str	r2, [r3, #0]
{
	// TODO Auto-generated destructor stub
}
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	4618      	mov	r0, r3
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000526:	4770      	bx	lr
 8000528:	0800a1dc 	.word	0x0800a1dc

0800052c <_ZN4OLEDD0Ev>:
OLED::~OLED()
 800052c:	b580      	push	{r7, lr}
 800052e:	b082      	sub	sp, #8
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
}
 8000534:	6878      	ldr	r0, [r7, #4]
 8000536:	f7ff ffe9 	bl	800050c <_ZN4OLEDD1Ev>
 800053a:	f242 010c 	movw	r1, #8204	; 0x200c
 800053e:	6878      	ldr	r0, [r7, #4]
 8000540:	f009 f85a 	bl	80095f8 <_ZdlPvj>
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	4618      	mov	r0, r3
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}

0800054e <_ZN4OLED4initEP19__I2C_HandleTypeDef>:

void OLED::init(I2C_HandleTypeDef *hi2c1)
{
 800054e:	b580      	push	{r7, lr}
 8000550:	b088      	sub	sp, #32
 8000552:	af02      	add	r7, sp, #8
 8000554:	6078      	str	r0, [r7, #4]
 8000556:	6039      	str	r1, [r7, #0]
	uint8_t I2CBuff[2];
		//uint16_t OLEDCAddress = 0x78;
		hi2cI = hi2c1;
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	683a      	ldr	r2, [r7, #0]
 800055c:	609a      	str	r2, [r3, #8]

		//display off
		I2CBuff[0] = 0x00;
 800055e:	2300      	movs	r3, #0
 8000560:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAE;//0xAF; //0xAE; //off
 8000562:	23ae      	movs	r3, #174	; 0xae
 8000564:	737b      	strb	r3, [r7, #13]
		//memory mode: horizontal addressing
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	6898      	ldr	r0, [r3, #8]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	791b      	ldrb	r3, [r3, #4]
 800056e:	b299      	uxth	r1, r3
 8000570:	f107 020c 	add.w	r2, r7, #12
 8000574:	230a      	movs	r3, #10
 8000576:	9300      	str	r3, [sp, #0]
 8000578:	2302      	movs	r3, #2
 800057a:	f003 f9b7 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800057e:	2300      	movs	r3, #0
 8000580:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x20;	//memory mode
 8000582:	2320      	movs	r3, #32
 8000584:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8000586:	687b      	ldr	r3, [r7, #4]
 8000588:	6898      	ldr	r0, [r3, #8]
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	791b      	ldrb	r3, [r3, #4]
 800058e:	b299      	uxth	r1, r3
 8000590:	f107 020c 	add.w	r2, r7, #12
 8000594:	230a      	movs	r3, #10
 8000596:	9300      	str	r3, [sp, #0]
 8000598:	2302      	movs	r3, #2
 800059a:	f003 f9a7 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800059e:	2300      	movs	r3, #0
 80005a0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00;	//horizontal addressing
 80005a2:	2300      	movs	r3, #0
 80005a4:	737b      	strb	r3, [r7, #13]
		//scan starting line
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	6898      	ldr	r0, [r3, #8]
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	791b      	ldrb	r3, [r3, #4]
 80005ae:	b299      	uxth	r1, r3
 80005b0:	f107 020c 	add.w	r2, r7, #12
 80005b4:	230a      	movs	r3, #10
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	2302      	movs	r3, #2
 80005ba:	f003 f997 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80005be:	2300      	movs	r3, #0
 80005c0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x40; //0x40;	//start line 0-63: 11XXXXXX. So 40h-7Fh (basically negative, i.e. go up by)
 80005c2:	2340      	movs	r3, #64	; 0x40
 80005c4:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	6898      	ldr	r0, [r3, #8]
 80005ca:	687b      	ldr	r3, [r7, #4]
 80005cc:	791b      	ldrb	r3, [r3, #4]
 80005ce:	b299      	uxth	r1, r3
 80005d0:	f107 020c 	add.w	r2, r7, #12
 80005d4:	230a      	movs	r3, #10
 80005d6:	9300      	str	r3, [sp, #0]
 80005d8:	2302      	movs	r3, #2
 80005da:	f003 f987 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80005de:	2300      	movs	r3, #0
 80005e0:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x00; //0x00;	//start line: horizontal? the above is vertical.
 80005e2:	2300      	movs	r3, #0
 80005e4:	737b      	strb	r3, [r7, #13]
		//charge pump on (2 commands)
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	6898      	ldr	r0, [r3, #8]
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	b299      	uxth	r1, r3
 80005f0:	f107 020c 	add.w	r2, r7, #12
 80005f4:	230a      	movs	r3, #10
 80005f6:	9300      	str	r3, [sp, #0]
 80005f8:	2302      	movs	r3, #2
 80005fa:	f003 f977 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 80005fe:	2300      	movs	r3, #0
 8000600:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x8D;
 8000602:	238d      	movs	r3, #141	; 0x8d
 8000604:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	6898      	ldr	r0, [r3, #8]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	791b      	ldrb	r3, [r3, #4]
 800060e:	b299      	uxth	r1, r3
 8000610:	f107 020c 	add.w	r2, r7, #12
 8000614:	230a      	movs	r3, #10
 8000616:	9300      	str	r3, [sp, #0]
 8000618:	2302      	movs	r3, #2
 800061a:	f003 f967 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800061e:	2300      	movs	r3, #0
 8000620:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0x14;
 8000622:	2314      	movs	r3, #20
 8000624:	737b      	strb	r3, [r7, #13]
		//entire display on, from RAM content
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	6898      	ldr	r0, [r3, #8]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	791b      	ldrb	r3, [r3, #4]
 800062e:	b299      	uxth	r1, r3
 8000630:	f107 020c 	add.w	r2, r7, #12
 8000634:	230a      	movs	r3, #10
 8000636:	9300      	str	r3, [sp, #0]
 8000638:	2302      	movs	r3, #2
 800063a:	f003 f957 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800063e:	2300      	movs	r3, #0
 8000640:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xA4;//0xA5; //all-on //0xA4;
 8000642:	23a4      	movs	r3, #164	; 0xa4
 8000644:	737b      	strb	r3, [r7, #13]
		//display on
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	6898      	ldr	r0, [r3, #8]
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	791b      	ldrb	r3, [r3, #4]
 800064e:	b299      	uxth	r1, r3
 8000650:	f107 020c 	add.w	r2, r7, #12
 8000654:	230a      	movs	r3, #10
 8000656:	9300      	str	r3, [sp, #0]
 8000658:	2302      	movs	r3, #2
 800065a:	f003 f947 	bl	80038ec <HAL_I2C_Master_Transmit>
		I2CBuff[0] = 0x00;
 800065e:	2300      	movs	r3, #0
 8000660:	733b      	strb	r3, [r7, #12]
		I2CBuff[1] = 0xAF;//0xAF; //0xAE; //off
 8000662:	23af      	movs	r3, #175	; 0xaf
 8000664:	737b      	strb	r3, [r7, #13]
		HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 10);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	6898      	ldr	r0, [r3, #8]
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	791b      	ldrb	r3, [r3, #4]
 800066e:	b299      	uxth	r1, r3
 8000670:	f107 020c 	add.w	r2, r7, #12
 8000674:	230a      	movs	r3, #10
 8000676:	9300      	str	r3, [sp, #0]
 8000678:	2302      	movs	r3, #2
 800067a:	f003 f937 	bl	80038ec <HAL_I2C_Master_Transmit>

		//initialise frame to zeros i.e. "empty" GDDRAM
		for(int r = 0; r < 64; r++)
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
 8000682:	697b      	ldr	r3, [r7, #20]
 8000684:	2b3f      	cmp	r3, #63	; 0x3f
 8000686:	dc15      	bgt.n	80006b4 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x166>
		{
			for(int c = 0; c < 128; c++)
 8000688:	2300      	movs	r3, #0
 800068a:	613b      	str	r3, [r7, #16]
 800068c:	693b      	ldr	r3, [r7, #16]
 800068e:	2b7f      	cmp	r3, #127	; 0x7f
 8000690:	dc0c      	bgt.n	80006ac <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x15e>
			{
				//pixel(c,r,0);	//problem!
				frame[c][r] = 0;
 8000692:	687a      	ldr	r2, [r7, #4]
 8000694:	693b      	ldr	r3, [r7, #16]
 8000696:	019b      	lsls	r3, r3, #6
 8000698:	441a      	add	r2, r3
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	4413      	add	r3, r2
 800069e:	330c      	adds	r3, #12
 80006a0:	2200      	movs	r2, #0
 80006a2:	701a      	strb	r2, [r3, #0]
			for(int c = 0; c < 128; c++)
 80006a4:	693b      	ldr	r3, [r7, #16]
 80006a6:	3301      	adds	r3, #1
 80006a8:	613b      	str	r3, [r7, #16]
 80006aa:	e7ef      	b.n	800068c <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x13e>
		for(int r = 0; r < 64; r++)
 80006ac:	697b      	ldr	r3, [r7, #20]
 80006ae:	3301      	adds	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e7e6      	b.n	8000682 <_ZN4OLED4initEP19__I2C_HandleTypeDef+0x134>
			}
		}
}
 80006b4:	bf00      	nop
 80006b6:	3718      	adds	r7, #24
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bd80      	pop	{r7, pc}

080006bc <_ZN4OLED14drawFullscreenEv>:

void OLED::drawFullscreen() //I2C_HandleTypeDef *hi2c1
{
 80006bc:	b580      	push	{r7, lr}
 80006be:	b08c      	sub	sp, #48	; 0x30
 80006c0:	af02      	add	r7, sp, #8
 80006c2:	6078      	str	r0, [r7, #4]
	uint8_t I2CBuff[2];
	int r, c, b, row, col;
	for (r = 0; r < 8; r++)
 80006c4:	2300      	movs	r3, #0
 80006c6:	627b      	str	r3, [r7, #36]	; 0x24
 80006c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006ca:	2b07      	cmp	r3, #7
 80006cc:	dc40      	bgt.n	8000750 <_ZN4OLED14drawFullscreenEv+0x94>
	{
		for (c = 0; c < 128; c++)
 80006ce:	2300      	movs	r3, #0
 80006d0:	623b      	str	r3, [r7, #32]
 80006d2:	6a3b      	ldr	r3, [r7, #32]
 80006d4:	2b7f      	cmp	r3, #127	; 0x7f
 80006d6:	dc37      	bgt.n	8000748 <_ZN4OLED14drawFullscreenEv+0x8c>
		{
			uint8_t temp = 0x00;
 80006d8:	2300      	movs	r3, #0
 80006da:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 80006dc:	2300      	movs	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	2b07      	cmp	r3, #7
 80006e4:	dc1c      	bgt.n	8000720 <_ZN4OLED14drawFullscreenEv+0x64>
			{
				row = r*8 + b;
 80006e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80006e8:	00db      	lsls	r3, r3, #3
 80006ea:	69fa      	ldr	r2, [r7, #28]
 80006ec:	4413      	add	r3, r2
 80006ee:	617b      	str	r3, [r7, #20]
				col = c;
 80006f0:	6a3b      	ldr	r3, [r7, #32]
 80006f2:	613b      	str	r3, [r7, #16]
				temp |= (frame[col][row]) << b;
 80006f4:	687a      	ldr	r2, [r7, #4]
 80006f6:	693b      	ldr	r3, [r7, #16]
 80006f8:	019b      	lsls	r3, r3, #6
 80006fa:	441a      	add	r2, r3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	4413      	add	r3, r2
 8000700:	330c      	adds	r3, #12
 8000702:	781b      	ldrb	r3, [r3, #0]
 8000704:	461a      	mov	r2, r3
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	fa02 f303 	lsl.w	r3, r2, r3
 800070c:	b25a      	sxtb	r2, r3
 800070e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8000712:	4313      	orrs	r3, r2
 8000714:	b25b      	sxtb	r3, r3
 8000716:	76fb      	strb	r3, [r7, #27]
			for (b = 0; b < 8; b++)
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	3301      	adds	r3, #1
 800071c:	61fb      	str	r3, [r7, #28]
 800071e:	e7df      	b.n	80006e0 <_ZN4OLED14drawFullscreenEv+0x24>
			}
			//
			I2CBuff[0] = 0x40;	//to write data
 8000720:	2340      	movs	r3, #64	; 0x40
 8000722:	733b      	strb	r3, [r7, #12]
			I2CBuff[1] = temp;
 8000724:	7efb      	ldrb	r3, [r7, #27]
 8000726:	737b      	strb	r3, [r7, #13]
			HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	6898      	ldr	r0, [r3, #8]
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	791b      	ldrb	r3, [r3, #4]
 8000730:	b299      	uxth	r1, r3
 8000732:	f107 020c 	add.w	r2, r7, #12
 8000736:	2305      	movs	r3, #5
 8000738:	9300      	str	r3, [sp, #0]
 800073a:	2302      	movs	r3, #2
 800073c:	f003 f8d6 	bl	80038ec <HAL_I2C_Master_Transmit>
		for (c = 0; c < 128; c++)
 8000740:	6a3b      	ldr	r3, [r7, #32]
 8000742:	3301      	adds	r3, #1
 8000744:	623b      	str	r3, [r7, #32]
 8000746:	e7c4      	b.n	80006d2 <_ZN4OLED14drawFullscreenEv+0x16>
	for (r = 0; r < 8; r++)
 8000748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800074a:	3301      	adds	r3, #1
 800074c:	627b      	str	r3, [r7, #36]	; 0x24
 800074e:	e7bb      	b.n	80006c8 <_ZN4OLED14drawFullscreenEv+0xc>
		}
	}
}
 8000750:	bf00      	nop
 8000752:	3728      	adds	r7, #40	; 0x28
 8000754:	46bd      	mov	sp, r7
 8000756:	bd80      	pop	{r7, pc}

08000758 <_ZN4OLED11getCAddressEv>:
	}
	HAL_I2C_Master_Transmit(hi2cI, CAddress, I2CBuff, 2, 5);
}

uint8_t OLED::getCAddress()
{
 8000758:	b480      	push	{r7}
 800075a:	b083      	sub	sp, #12
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
	return CAddress;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
}
 8000764:	4618      	mov	r0, r3
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <_ZN4OLED5pixelEiibb>:
{
	return DAddress;
}

void OLED::pixel(int x, int y, bool colour, bool locked)	//use locked when inconvenient to lock from outside
{
 8000770:	b480      	push	{r7}
 8000772:	b085      	sub	sp, #20
 8000774:	af00      	add	r7, sp, #0
 8000776:	60f8      	str	r0, [r7, #12]
 8000778:	60b9      	str	r1, [r7, #8]
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	70fb      	strb	r3, [r7, #3]
	if(locked)
 800077e:	7e3b      	ldrb	r3, [r7, #24]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d00b      	beq.n	800079c <_ZN4OLED5pixelEiibb+0x2c>
	{
		if(x < 0 || y < 0 || x >= width || y >= height)
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	2b00      	cmp	r3, #0
 8000788:	db12      	blt.n	80007b0 <_ZN4OLED5pixelEiibb+0x40>
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	2b00      	cmp	r3, #0
 800078e:	db0f      	blt.n	80007b0 <_ZN4OLED5pixelEiibb+0x40>
 8000790:	68bb      	ldr	r3, [r7, #8]
 8000792:	2b7f      	cmp	r3, #127	; 0x7f
 8000794:	dc0c      	bgt.n	80007b0 <_ZN4OLED5pixelEiibb+0x40>
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	2b3f      	cmp	r3, #63	; 0x3f
 800079a:	dc09      	bgt.n	80007b0 <_ZN4OLED5pixelEiibb+0x40>
		{
			return;
		}
	}
	frame[x][y] = colour;
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	68bb      	ldr	r3, [r7, #8]
 80007a0:	019b      	lsls	r3, r3, #6
 80007a2:	441a      	add	r2, r3
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	4413      	add	r3, r2
 80007a8:	330c      	adds	r3, #12
 80007aa:	78fa      	ldrb	r2, [r7, #3]
 80007ac:	701a      	strb	r2, [r3, #0]
 80007ae:	e000      	b.n	80007b2 <_ZN4OLED5pixelEiibb+0x42>
			return;
 80007b0:	bf00      	nop
}
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr

080007bc <_ZN4OLED8fillRectEiiiib>:
	line(x0, y0, x0, y0+rectHeight, colour, lineWidth);
	line(x1, y1-rectHeight, x1, y1, colour, lineWidth);
}

void OLED::fillRect(int x0, int y0, int x1, int y1, bool colour)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b086      	sub	sp, #24
 80007c0:	af02      	add	r7, sp, #8
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
 80007c8:	603b      	str	r3, [r7, #0]
	fill(x0, y0, x1, y1, colour);
 80007ca:	7f3b      	ldrb	r3, [r7, #28]
 80007cc:	9301      	str	r3, [sp, #4]
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	9300      	str	r3, [sp, #0]
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	687a      	ldr	r2, [r7, #4]
 80007d6:	68b9      	ldr	r1, [r7, #8]
 80007d8:	68f8      	ldr	r0, [r7, #12]
 80007da:	f000 f829 	bl	8000830 <_ZN4OLED4fillEiiiib>
}
 80007de:	bf00      	nop
 80007e0:	3710      	adds	r7, #16
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}

080007e6 <_ZN4OLED4fillEb>:
	connectPoints(X, Y, pointsNum, colour, lineWidth);
	line(X[pointsNum - 1], Y[pointsNum - 1], X[0], Y[0], colour, lineWidth);
}

void OLED::fill(bool colour)
{
 80007e6:	b580      	push	{r7, lr}
 80007e8:	b086      	sub	sp, #24
 80007ea:	af02      	add	r7, sp, #8
 80007ec:	6078      	str	r0, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	70fb      	strb	r3, [r7, #3]
	for(int r = 0; r < 64; r++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	60fb      	str	r3, [r7, #12]
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	2b3f      	cmp	r3, #63	; 0x3f
 80007fa:	dc15      	bgt.n	8000828 <_ZN4OLED4fillEb+0x42>
	{
		for(int c = 0; c < 128; c++)
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	2b7f      	cmp	r3, #127	; 0x7f
 8000804:	dc0c      	bgt.n	8000820 <_ZN4OLED4fillEb+0x3a>
		{
			pixel(c,r,colour);	//frame[c][r] = colour;
 8000806:	78fa      	ldrb	r2, [r7, #3]
 8000808:	2300      	movs	r3, #0
 800080a:	9300      	str	r3, [sp, #0]
 800080c:	4613      	mov	r3, r2
 800080e:	68fa      	ldr	r2, [r7, #12]
 8000810:	68b9      	ldr	r1, [r7, #8]
 8000812:	6878      	ldr	r0, [r7, #4]
 8000814:	f7ff ffac 	bl	8000770 <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	3301      	adds	r3, #1
 800081c:	60bb      	str	r3, [r7, #8]
 800081e:	e7ef      	b.n	8000800 <_ZN4OLED4fillEb+0x1a>
	for(int r = 0; r < 64; r++)
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	3301      	adds	r3, #1
 8000824:	60fb      	str	r3, [r7, #12]
 8000826:	e7e6      	b.n	80007f6 <_ZN4OLED4fillEb+0x10>
		}
	}
}
 8000828:	bf00      	nop
 800082a:	3710      	adds	r7, #16
 800082c:	46bd      	mov	sp, r7
 800082e:	bd80      	pop	{r7, pc}

08000830 <_ZN4OLED4fillEiiiib>:
void OLED::fill(int x0, int y0, int x1, int y1, bool colour)
{
 8000830:	b580      	push	{r7, lr}
 8000832:	b088      	sub	sp, #32
 8000834:	af02      	add	r7, sp, #8
 8000836:	60f8      	str	r0, [r7, #12]
 8000838:	60b9      	str	r1, [r7, #8]
 800083a:	607a      	str	r2, [r7, #4]
 800083c:	603b      	str	r3, [r7, #0]
	for(int r = y0; r <= y1; r++)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	617b      	str	r3, [r7, #20]
 8000842:	697a      	ldr	r2, [r7, #20]
 8000844:	6a3b      	ldr	r3, [r7, #32]
 8000846:	429a      	cmp	r2, r3
 8000848:	dc17      	bgt.n	800087a <_ZN4OLED4fillEiiiib+0x4a>
	{
		for(int c = x0; c <= x1; c++)
 800084a:	68bb      	ldr	r3, [r7, #8]
 800084c:	613b      	str	r3, [r7, #16]
 800084e:	693a      	ldr	r2, [r7, #16]
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	429a      	cmp	r2, r3
 8000854:	dc0d      	bgt.n	8000872 <_ZN4OLED4fillEiiiib+0x42>
		{
			pixel(c, r, colour, 1);	//frame[c][r] = colour;
 8000856:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 800085a:	2301      	movs	r3, #1
 800085c:	9300      	str	r3, [sp, #0]
 800085e:	4613      	mov	r3, r2
 8000860:	697a      	ldr	r2, [r7, #20]
 8000862:	6939      	ldr	r1, [r7, #16]
 8000864:	68f8      	ldr	r0, [r7, #12]
 8000866:	f7ff ff83 	bl	8000770 <_ZN4OLED5pixelEiibb>
		for(int c = x0; c <= x1; c++)
 800086a:	693b      	ldr	r3, [r7, #16]
 800086c:	3301      	adds	r3, #1
 800086e:	613b      	str	r3, [r7, #16]
 8000870:	e7ed      	b.n	800084e <_ZN4OLED4fillEiiiib+0x1e>
	for(int r = y0; r <= y1; r++)
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	3301      	adds	r3, #1
 8000876:	617b      	str	r3, [r7, #20]
 8000878:	e7e3      	b.n	8000842 <_ZN4OLED4fillEiiiib+0x12>
		}
	}
}
 800087a:	bf00      	nop
 800087c:	3718      	adds	r7, #24
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}

08000882 <_ZN4OLED6invertEv>:

void OLED::invert()
{
 8000882:	b580      	push	{r7, lr}
 8000884:	b086      	sub	sp, #24
 8000886:	af02      	add	r7, sp, #8
 8000888:	6078      	str	r0, [r7, #4]
	for(int r = 0; r < 64; r++)
 800088a:	2300      	movs	r3, #0
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
 8000890:	2b3f      	cmp	r3, #63	; 0x3f
 8000892:	dc1f      	bgt.n	80008d4 <_ZN4OLED6invertEv+0x52>
	{
		for(int c = 0; c < 128; c++)
 8000894:	2300      	movs	r3, #0
 8000896:	60bb      	str	r3, [r7, #8]
 8000898:	68bb      	ldr	r3, [r7, #8]
 800089a:	2b7f      	cmp	r3, #127	; 0x7f
 800089c:	dc16      	bgt.n	80008cc <_ZN4OLED6invertEv+0x4a>
		{
			pixel(c,r,!frame[c][r]);	//frame[c][r] = !frame[c][r];	//just used pixel() here for good measure
 800089e:	687a      	ldr	r2, [r7, #4]
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	019b      	lsls	r3, r3, #6
 80008a4:	441a      	add	r2, r3
 80008a6:	68fb      	ldr	r3, [r7, #12]
 80008a8:	4413      	add	r3, r2
 80008aa:	330c      	adds	r3, #12
 80008ac:	781b      	ldrb	r3, [r3, #0]
 80008ae:	f083 0301 	eor.w	r3, r3, #1
 80008b2:	b2da      	uxtb	r2, r3
 80008b4:	2300      	movs	r3, #0
 80008b6:	9300      	str	r3, [sp, #0]
 80008b8:	4613      	mov	r3, r2
 80008ba:	68fa      	ldr	r2, [r7, #12]
 80008bc:	68b9      	ldr	r1, [r7, #8]
 80008be:	6878      	ldr	r0, [r7, #4]
 80008c0:	f7ff ff56 	bl	8000770 <_ZN4OLED5pixelEiibb>
		for(int c = 0; c < 128; c++)
 80008c4:	68bb      	ldr	r3, [r7, #8]
 80008c6:	3301      	adds	r3, #1
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	e7e5      	b.n	8000898 <_ZN4OLED6invertEv+0x16>
	for(int r = 0; r < 64; r++)
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	3301      	adds	r3, #1
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	e7dc      	b.n	800088e <_ZN4OLED6invertEv+0xc>
		}
	}
}
 80008d4:	bf00      	nop
 80008d6:	3710      	adds	r7, #16
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}

080008dc <_ZN4OLED9characterEiihbbi>:
		}
	}
}

void OLED::character(int x, int y, unsigned char c, bool colour, bool bg, int size)
{
 80008dc:	b5b0      	push	{r4, r5, r7, lr}
 80008de:	b088      	sub	sp, #32
 80008e0:	af02      	add	r7, sp, #8
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	607a      	str	r2, [r7, #4]
 80008e8:	70fb      	strb	r3, [r7, #3]
	if((x >= width)            || // Clip right
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2b7f      	cmp	r3, #127	; 0x7f
 80008ee:	f300 80df 	bgt.w	8000ab0 <_ZN4OLED9characterEiihbbi+0x1d4>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	2b3f      	cmp	r3, #63	; 0x3f
 80008f6:	f300 80db 	bgt.w	8000ab0 <_ZN4OLED9characterEiihbbi+0x1d4>
	 (y >= height)           || // Clip bottom
	 ((x + 6 * size - 1) < 0) || // Clip left
 80008fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80008fc:	4613      	mov	r3, r2
 80008fe:	005b      	lsls	r3, r3, #1
 8000900:	4413      	add	r3, r2
 8000902:	005b      	lsls	r3, r3, #1
 8000904:	461a      	mov	r2, r3
 8000906:	68bb      	ldr	r3, [r7, #8]
 8000908:	4413      	add	r3, r2
 800090a:	3b01      	subs	r3, #1
	 (y >= height)           || // Clip bottom
 800090c:	2b00      	cmp	r3, #0
 800090e:	f2c0 80cf 	blt.w	8000ab0 <_ZN4OLED9characterEiihbbi+0x1d4>
	 ((y + 8 * size - 1) < 0))   // Clip top
 8000912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000914:	00da      	lsls	r2, r3, #3
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4413      	add	r3, r2
 800091a:	3b01      	subs	r3, #1
	 ((x + 6 * size - 1) < 0) || // Clip left
 800091c:	2b00      	cmp	r3, #0
 800091e:	f2c0 80c7 	blt.w	8000ab0 <_ZN4OLED9characterEiihbbi+0x1d4>
	return;

	if(!_cp437 && (c >= 176)) c++; // Handle 'classic' charset behavior
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	799b      	ldrb	r3, [r3, #6]
 8000926:	f083 0301 	eor.w	r3, r3, #1
 800092a:	b2db      	uxtb	r3, r3
 800092c:	2b00      	cmp	r3, #0
 800092e:	d005      	beq.n	800093c <_ZN4OLED9characterEiihbbi+0x60>
 8000930:	78fb      	ldrb	r3, [r7, #3]
 8000932:	2baf      	cmp	r3, #175	; 0xaf
 8000934:	d902      	bls.n	800093c <_ZN4OLED9characterEiihbbi+0x60>
 8000936:	78fb      	ldrb	r3, [r7, #3]
 8000938:	3301      	adds	r3, #1
 800093a:	70fb      	strb	r3, [r7, #3]

	for (int8_t i=0; i<6; i++ )
 800093c:	2300      	movs	r3, #0
 800093e:	75fb      	strb	r3, [r7, #23]
 8000940:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000944:	2b05      	cmp	r3, #5
 8000946:	f300 80b4 	bgt.w	8000ab2 <_ZN4OLED9characterEiihbbi+0x1d6>
	{
		uint8_t line;
		if (i == 5)
 800094a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800094e:	2b05      	cmp	r3, #5
 8000950:	d102      	bne.n	8000958 <_ZN4OLED9characterEiihbbi+0x7c>
			line = 0x0;
 8000952:	2300      	movs	r3, #0
 8000954:	75bb      	strb	r3, [r7, #22]
 8000956:	e009      	b.n	800096c <_ZN4OLED9characterEiihbbi+0x90>
		else
		{
			line = pgm_read_byte(&font1[(c*5)+i]);
 8000958:	78fa      	ldrb	r2, [r7, #3]
 800095a:	4613      	mov	r3, r2
 800095c:	009b      	lsls	r3, r3, #2
 800095e:	441a      	add	r2, r3
 8000960:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000964:	4413      	add	r3, r2
 8000966:	4a54      	ldr	r2, [pc, #336]	; (8000ab8 <_ZN4OLED9characterEiihbbi+0x1dc>)
 8000968:	5cd3      	ldrb	r3, [r2, r3]
 800096a:	75bb      	strb	r3, [r7, #22]
		}
		for (int8_t j = 0; j<8; j++)
 800096c:	2300      	movs	r3, #0
 800096e:	757b      	strb	r3, [r7, #21]
 8000970:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000974:	2b07      	cmp	r3, #7
 8000976:	f300 8094 	bgt.w	8000aa2 <_ZN4OLED9characterEiihbbi+0x1c6>
		{
			if (line & 0x1)
 800097a:	7dbb      	ldrb	r3, [r7, #22]
 800097c:	f003 0301 	and.w	r3, r3, #1
 8000980:	2b00      	cmp	r3, #0
 8000982:	d03f      	beq.n	8000a04 <_ZN4OLED9characterEiihbbi+0x128>
			{
				if (size == 1) // default size
 8000984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000986:	2b01      	cmp	r3, #1
 8000988:	d110      	bne.n	80009ac <_ZN4OLED9characterEiihbbi+0xd0>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = colour;
 800098a:	f997 2017 	ldrsb.w	r2, [r7, #23]
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	18d1      	adds	r1, r2, r3
 8000992:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	441a      	add	r2, r3
 800099a:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 800099e:	2301      	movs	r3, #1
 80009a0:	9300      	str	r3, [sp, #0]
 80009a2:	4603      	mov	r3, r0
 80009a4:	68f8      	ldr	r0, [r7, #12]
 80009a6:	f7ff fee3 	bl	8000770 <_ZN4OLED5pixelEiibb>
 80009aa:	e070      	b.n	8000a8e <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+(i*size), y+(j*size), size + x+(i*size), size+1 + y+(j*size), colour);
 80009ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009b2:	fb02 f203 	mul.w	r2, r2, r3
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	18d0      	adds	r0, r2, r3
 80009ba:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80009be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009c0:	fb02 f203 	mul.w	r2, r2, r3
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	18d4      	adds	r4, r2, r3
 80009c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80009ca:	68bb      	ldr	r3, [r7, #8]
 80009cc:	441a      	add	r2, r3
 80009ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80009d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80009d4:	fb01 f303 	mul.w	r3, r1, r3
 80009d8:	18d5      	adds	r5, r2, r3
 80009da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80009dc:	1c5a      	adds	r2, r3, #1
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	441a      	add	r2, r3
 80009e2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80009e6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80009e8:	fb01 f303 	mul.w	r3, r1, r3
 80009ec:	4413      	add	r3, r2
 80009ee:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80009f2:	9201      	str	r2, [sp, #4]
 80009f4:	9300      	str	r3, [sp, #0]
 80009f6:	462b      	mov	r3, r5
 80009f8:	4622      	mov	r2, r4
 80009fa:	4601      	mov	r1, r0
 80009fc:	68f8      	ldr	r0, [r7, #12]
 80009fe:	f7ff fedd 	bl	80007bc <_ZN4OLED8fillRectEiiiib>
 8000a02:	e044      	b.n	8000a8e <_ZN4OLED9characterEiihbbi+0x1b2>
				}
			}
			else if (bg != colour)
 8000a04:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000a08:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d03e      	beq.n	8000a8e <_ZN4OLED9characterEiihbbi+0x1b2>
			{
				if (size == 1) // default size
 8000a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a12:	2b01      	cmp	r3, #1
 8000a14:	d110      	bne.n	8000a38 <_ZN4OLED9characterEiihbbi+0x15c>
				{
					pixel(x+i, y+j, colour, 1);	//frame[x+i][y+j] = bg;
 8000a16:	f997 2017 	ldrsb.w	r2, [r7, #23]
 8000a1a:	68bb      	ldr	r3, [r7, #8]
 8000a1c:	18d1      	adds	r1, r2, r3
 8000a1e:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	441a      	add	r2, r3
 8000a26:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	9300      	str	r3, [sp, #0]
 8000a2e:	4603      	mov	r3, r0
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fe9d 	bl	8000770 <_ZN4OLED5pixelEiibb>
 8000a36:	e02a      	b.n	8000a8e <_ZN4OLED9characterEiihbbi+0x1b2>
				}
				else
				{  // big size
					fillRect(x+i*size, y+j*size, size + x+i*size, size+1 + y+j*size, bg);
 8000a38:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a3c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a3e:	fb02 f203 	mul.w	r2, r2, r3
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	18d0      	adds	r0, r2, r3
 8000a46:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a4c:	fb02 f203 	mul.w	r2, r2, r3
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	18d4      	adds	r4, r2, r3
 8000a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000a56:	68bb      	ldr	r3, [r7, #8]
 8000a58:	441a      	add	r2, r3
 8000a5a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000a5e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a60:	fb01 f303 	mul.w	r3, r1, r3
 8000a64:	18d5      	adds	r5, r2, r3
 8000a66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	441a      	add	r2, r3
 8000a6e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a72:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000a74:	fb01 f303 	mul.w	r3, r1, r3
 8000a78:	4413      	add	r3, r2
 8000a7a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8000a7e:	9201      	str	r2, [sp, #4]
 8000a80:	9300      	str	r3, [sp, #0]
 8000a82:	462b      	mov	r3, r5
 8000a84:	4622      	mov	r2, r4
 8000a86:	4601      	mov	r1, r0
 8000a88:	68f8      	ldr	r0, [r7, #12]
 8000a8a:	f7ff fe97 	bl	80007bc <_ZN4OLED8fillRectEiiiib>
				}
			}
			line >>= 1;
 8000a8e:	7dbb      	ldrb	r3, [r7, #22]
 8000a90:	105b      	asrs	r3, r3, #1
 8000a92:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j<8; j++)
 8000a94:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8000a98:	b2db      	uxtb	r3, r3
 8000a9a:	3301      	adds	r3, #1
 8000a9c:	b2db      	uxtb	r3, r3
 8000a9e:	757b      	strb	r3, [r7, #21]
 8000aa0:	e766      	b.n	8000970 <_ZN4OLED9characterEiihbbi+0x94>
	for (int8_t i=0; i<6; i++ )
 8000aa2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8000aa6:	b2db      	uxtb	r3, r3
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	b2db      	uxtb	r3, r3
 8000aac:	75fb      	strb	r3, [r7, #23]
 8000aae:	e747      	b.n	8000940 <_ZN4OLED9characterEiihbbi+0x64>
	return;
 8000ab0:	bf00      	nop
		}
	}
}
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bdb0      	pop	{r4, r5, r7, pc}
 8000ab8:	08009cd4 	.word	0x08009cd4

08000abc <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>:

void OLED::text(int x, int y, string s, bool colour, bool bg, int size)
{
 8000abc:	b590      	push	{r4, r7, lr}
 8000abe:	b08b      	sub	sp, #44	; 0x2c
 8000ac0:	af04      	add	r7, sp, #16
 8000ac2:	60f8      	str	r0, [r7, #12]
 8000ac4:	60b9      	str	r1, [r7, #8]
 8000ac6:	607a      	str	r2, [r7, #4]
 8000ac8:	603b      	str	r3, [r7, #0]
	int offset = size*6;
 8000aca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000acc:	4613      	mov	r3, r2
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	4413      	add	r3, r2
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	613b      	str	r3, [r7, #16]
	for(string::size_type i = 0; i < s.size(); i++)
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	617b      	str	r3, [r7, #20]
 8000ada:	6838      	ldr	r0, [r7, #0]
 8000adc:	f008 fe34 	bl	8009748 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8000ae0:	4602      	mov	r2, r0
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	4293      	cmp	r3, r2
 8000ae6:	bf34      	ite	cc
 8000ae8:	2301      	movcc	r3, #1
 8000aea:	2300      	movcs	r3, #0
 8000aec:	b2db      	uxtb	r3, r3
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d01e      	beq.n	8000b30 <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x74>
	{
		character(x+(offset*i), y, s[i], colour, bg, size);
 8000af2:	693b      	ldr	r3, [r7, #16]
 8000af4:	697a      	ldr	r2, [r7, #20]
 8000af6:	fb02 f203 	mul.w	r2, r2, r3
 8000afa:	68bb      	ldr	r3, [r7, #8]
 8000afc:	4413      	add	r3, r2
 8000afe:	461c      	mov	r4, r3
 8000b00:	6979      	ldr	r1, [r7, #20]
 8000b02:	6838      	ldr	r0, [r7, #0]
 8000b04:	f008 fe22 	bl	800974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 8000b08:	4603      	mov	r3, r0
 8000b0a:	781a      	ldrb	r2, [r3, #0]
 8000b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000b0e:	9302      	str	r3, [sp, #8]
 8000b10:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000b14:	9301      	str	r3, [sp, #4]
 8000b16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000b1a:	9300      	str	r3, [sp, #0]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	687a      	ldr	r2, [r7, #4]
 8000b20:	4621      	mov	r1, r4
 8000b22:	68f8      	ldr	r0, [r7, #12]
 8000b24:	f7ff feda 	bl	80008dc <_ZN4OLED9characterEiihbbi>
	for(string::size_type i = 0; i < s.size(); i++)
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	617b      	str	r3, [r7, #20]
 8000b2e:	e7d4      	b.n	8000ada <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi+0x1e>
	}
}
 8000b30:	bf00      	nop
 8000b32:	371c      	adds	r7, #28
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd90      	pop	{r4, r7, pc}

08000b38 <_Z27OLED_One_Time_Configuartionv>:
extern OLED Obj_OLED_01;



void OLED_One_Time_Configuartion()
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b09a      	sub	sp, #104	; 0x68
 8000b3c:	af04      	add	r7, sp, #16



  Obj_OLED_01.fill(0);
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4843      	ldr	r0, [pc, #268]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000b42:	f7ff fe50 	bl	80007e6 <_ZN4OLED4fillEb>
  Obj_OLED_01.drawFullscreen();
 8000b46:	4842      	ldr	r0, [pc, #264]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000b48:	f7ff fdb8 	bl	80006bc <_ZN4OLED14drawFullscreenEv>

  Obj_OLED_01.text(2, 2, "WELCOME to",  1, 1, 2  );
 8000b4c:	f107 031c 	add.w	r3, r7, #28
 8000b50:	4618      	mov	r0, r3
 8000b52:	f008 fd55 	bl	8009600 <_ZNSaIcEC1Ev>
 8000b56:	f107 021c 	add.w	r2, r7, #28
 8000b5a:	1d3b      	adds	r3, r7, #4
 8000b5c:	493d      	ldr	r1, [pc, #244]	; (8000c54 <_Z27OLED_One_Time_Configuartionv+0x11c>)
 8000b5e:	4618      	mov	r0, r3
 8000b60:	f008 fedc 	bl	800991c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000b64:	1d3a      	adds	r2, r7, #4
 8000b66:	2302      	movs	r3, #2
 8000b68:	9302      	str	r3, [sp, #8]
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	9301      	str	r3, [sp, #4]
 8000b6e:	2301      	movs	r3, #1
 8000b70:	9300      	str	r3, [sp, #0]
 8000b72:	4613      	mov	r3, r2
 8000b74:	2202      	movs	r2, #2
 8000b76:	2102      	movs	r1, #2
 8000b78:	4835      	ldr	r0, [pc, #212]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000b7a:	f7ff ff9f 	bl	8000abc <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4618      	mov	r0, r3
 8000b82:	f008 fddb 	bl	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f008 fd39 	bl	8009602 <_ZNSaIcED1Ev>
  Obj_OLED_01.text(0, 22, "  Project ",  1, 0, 2  );
 8000b90:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b94:	4618      	mov	r0, r3
 8000b96:	f008 fd33 	bl	8009600 <_ZNSaIcEC1Ev>
 8000b9a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8000b9e:	f107 0320 	add.w	r3, r7, #32
 8000ba2:	492d      	ldr	r1, [pc, #180]	; (8000c58 <_Z27OLED_One_Time_Configuartionv+0x120>)
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f008 feb9 	bl	800991c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000baa:	f107 0220 	add.w	r2, r7, #32
 8000bae:	2302      	movs	r3, #2
 8000bb0:	9302      	str	r3, [sp, #8]
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	9301      	str	r3, [sp, #4]
 8000bb6:	2301      	movs	r3, #1
 8000bb8:	9300      	str	r3, [sp, #0]
 8000bba:	4613      	mov	r3, r2
 8000bbc:	2216      	movs	r2, #22
 8000bbe:	2100      	movs	r1, #0
 8000bc0:	4823      	ldr	r0, [pc, #140]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000bc2:	f7ff ff7b 	bl	8000abc <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000bc6:	f107 0320 	add.w	r3, r7, #32
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f008 fdb6 	bl	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000bd0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f008 fd14 	bl	8009602 <_ZNSaIcED1Ev>
  Obj_OLED_01.text(2, 49, "- GALWAN -",  1, 0, 2  );
 8000bda:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000bde:	4618      	mov	r0, r3
 8000be0:	f008 fd0e 	bl	8009600 <_ZNSaIcEC1Ev>
 8000be4:	f107 0254 	add.w	r2, r7, #84	; 0x54
 8000be8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000bec:	491b      	ldr	r1, [pc, #108]	; (8000c5c <_Z27OLED_One_Time_Configuartionv+0x124>)
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f008 fe94 	bl	800991c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000bf4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	9302      	str	r3, [sp, #8]
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	9301      	str	r3, [sp, #4]
 8000c00:	2301      	movs	r3, #1
 8000c02:	9300      	str	r3, [sp, #0]
 8000c04:	4613      	mov	r3, r2
 8000c06:	2231      	movs	r2, #49	; 0x31
 8000c08:	2102      	movs	r1, #2
 8000c0a:	4811      	ldr	r0, [pc, #68]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000c0c:	f7ff ff56 	bl	8000abc <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000c10:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000c14:	4618      	mov	r0, r3
 8000c16:	f008 fd91 	bl	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000c1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f008 fcef 	bl	8009602 <_ZNSaIcED1Ev>
  Obj_OLED_01.drawFullscreen();
 8000c24:	480a      	ldr	r0, [pc, #40]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000c26:	f7ff fd49 	bl	80006bc <_ZN4OLED14drawFullscreenEv>
  HAL_Delay(1000);
 8000c2a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c2e:	f001 fca9 	bl	8002584 <HAL_Delay>

  Obj_OLED_01.invert();
 8000c32:	4807      	ldr	r0, [pc, #28]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000c34:	f7ff fe25 	bl	8000882 <_ZN4OLED6invertEv>
  Obj_OLED_01.drawFullscreen();
 8000c38:	4805      	ldr	r0, [pc, #20]	; (8000c50 <_Z27OLED_One_Time_Configuartionv+0x118>)
 8000c3a:	f7ff fd3f 	bl	80006bc <_ZN4OLED14drawFullscreenEv>
  HAL_Delay(1000);
 8000c3e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c42:	f001 fc9f 	bl	8002584 <HAL_Delay>

}
 8000c46:	bf00      	nop
 8000c48:	3758      	adds	r7, #88	; 0x58
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	2000047c 	.word	0x2000047c
 8000c54:	08009c78 	.word	0x08009c78
 8000c58:	08009c84 	.word	0x08009c84
 8000c5c:	08009c90 	.word	0x08009c90

08000c60 <_Z31OLED_Schedule_And_Event_Controlv>:




void OLED_Schedule_And_Event_Control()
{
 8000c60:	b5b0      	push	{r4, r5, r7, lr}
 8000c62:	b092      	sub	sp, #72	; 0x48
 8000c64:	af04      	add	r7, sp, #16

  Obj_OLED_01.fill(0);
 8000c66:	2100      	movs	r1, #0
 8000c68:	4840      	ldr	r0, [pc, #256]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000c6a:	f7ff fdbc 	bl	80007e6 <_ZN4OLED4fillEb>
  Obj_OLED_01.drawFullscreen();
 8000c6e:	483f      	ldr	r0, [pc, #252]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000c70:	f7ff fd24 	bl	80006bc <_ZN4OLED14drawFullscreenEv>

//  sprintf( s, "x= %d and y= %d" );
  Obj_OLED_01.text(x, y, "Rx- RSSI ",  colour, bg, size  );
 8000c74:	4b3e      	ldr	r3, [pc, #248]	; (8000d70 <_Z31OLED_Schedule_And_Event_Controlv+0x110>)
 8000c76:	681c      	ldr	r4, [r3, #0]
 8000c78:	4b3e      	ldr	r3, [pc, #248]	; (8000d74 <_Z31OLED_Schedule_And_Event_Controlv+0x114>)
 8000c7a:	681d      	ldr	r5, [r3, #0]
 8000c7c:	f107 031c 	add.w	r3, r7, #28
 8000c80:	4618      	mov	r0, r3
 8000c82:	f008 fcbd 	bl	8009600 <_ZNSaIcEC1Ev>
 8000c86:	f107 021c 	add.w	r2, r7, #28
 8000c8a:	1d3b      	adds	r3, r7, #4
 8000c8c:	493a      	ldr	r1, [pc, #232]	; (8000d78 <_Z31OLED_Schedule_And_Event_Controlv+0x118>)
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f008 fe44 	bl	800991c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8000c94:	4b39      	ldr	r3, [pc, #228]	; (8000d7c <_Z31OLED_Schedule_And_Event_Controlv+0x11c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	4a39      	ldr	r2, [pc, #228]	; (8000d80 <_Z31OLED_Schedule_And_Event_Controlv+0x120>)
 8000c9a:	7812      	ldrb	r2, [r2, #0]
 8000c9c:	4939      	ldr	r1, [pc, #228]	; (8000d84 <_Z31OLED_Schedule_And_Event_Controlv+0x124>)
 8000c9e:	6809      	ldr	r1, [r1, #0]
 8000ca0:	1d38      	adds	r0, r7, #4
 8000ca2:	9102      	str	r1, [sp, #8]
 8000ca4:	9201      	str	r2, [sp, #4]
 8000ca6:	9300      	str	r3, [sp, #0]
 8000ca8:	4603      	mov	r3, r0
 8000caa:	462a      	mov	r2, r5
 8000cac:	4621      	mov	r1, r4
 8000cae:	482f      	ldr	r0, [pc, #188]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000cb0:	f7ff ff04 	bl	8000abc <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	f008 fd40 	bl	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8000cbc:	f107 031c 	add.w	r3, r7, #28
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f008 fc9e 	bl	8009602 <_ZNSaIcED1Ev>
  d+=1;
 8000cc6:	4b30      	ldr	r3, [pc, #192]	; (8000d88 <_Z31OLED_Schedule_And_Event_Controlv+0x128>)
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	3301      	adds	r3, #1
 8000ccc:	b2da      	uxtb	r2, r3
 8000cce:	4b2e      	ldr	r3, [pc, #184]	; (8000d88 <_Z31OLED_Schedule_And_Event_Controlv+0x128>)
 8000cd0:	701a      	strb	r2, [r3, #0]
  c = d;
 8000cd2:	4b2d      	ldr	r3, [pc, #180]	; (8000d88 <_Z31OLED_Schedule_And_Event_Controlv+0x128>)
 8000cd4:	781a      	ldrb	r2, [r3, #0]
 8000cd6:	4b2d      	ldr	r3, [pc, #180]	; (8000d8c <_Z31OLED_Schedule_And_Event_Controlv+0x12c>)
 8000cd8:	701a      	strb	r2, [r3, #0]
  Obj_OLED_01.character(0, 10,  c, colour, bg, size);
 8000cda:	4b2c      	ldr	r3, [pc, #176]	; (8000d8c <_Z31OLED_Schedule_And_Event_Controlv+0x12c>)
 8000cdc:	7818      	ldrb	r0, [r3, #0]
 8000cde:	4b27      	ldr	r3, [pc, #156]	; (8000d7c <_Z31OLED_Schedule_And_Event_Controlv+0x11c>)
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4a27      	ldr	r2, [pc, #156]	; (8000d80 <_Z31OLED_Schedule_And_Event_Controlv+0x120>)
 8000ce4:	7812      	ldrb	r2, [r2, #0]
 8000ce6:	4927      	ldr	r1, [pc, #156]	; (8000d84 <_Z31OLED_Schedule_And_Event_Controlv+0x124>)
 8000ce8:	6809      	ldr	r1, [r1, #0]
 8000cea:	9102      	str	r1, [sp, #8]
 8000cec:	9201      	str	r2, [sp, #4]
 8000cee:	9300      	str	r3, [sp, #0]
 8000cf0:	4603      	mov	r3, r0
 8000cf2:	220a      	movs	r2, #10
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	481d      	ldr	r0, [pc, #116]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000cf8:	f7ff fdf0 	bl	80008dc <_ZN4OLED9characterEiihbbi>
//  x++; y++;
  Obj_OLED_01.drawFullscreen();
 8000cfc:	481b      	ldr	r0, [pc, #108]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000cfe:	f7ff fcdd 	bl	80006bc <_ZN4OLED14drawFullscreenEv>
  gCounter++;
 8000d02:	4b23      	ldr	r3, [pc, #140]	; (8000d90 <_Z31OLED_Schedule_And_Event_Controlv+0x130>)
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	3301      	adds	r3, #1
 8000d08:	4a21      	ldr	r2, [pc, #132]	; (8000d90 <_Z31OLED_Schedule_And_Event_Controlv+0x130>)
 8000d0a:	6013      	str	r3, [r2, #0]

  HAL_Delay(500);
 8000d0c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d10:	f001 fc38 	bl	8002584 <HAL_Delay>

  s="Proj Galwan ";
 8000d14:	491f      	ldr	r1, [pc, #124]	; (8000d94 <_Z31OLED_Schedule_And_Event_Controlv+0x134>)
 8000d16:	4820      	ldr	r0, [pc, #128]	; (8000d98 <_Z31OLED_Schedule_And_Event_Controlv+0x138>)
 8000d18:	f008 fda5 	bl	8009866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
  Obj_OLED_01.text(0, 32, s,  colour, bg, size  );
 8000d1c:	f107 0320 	add.w	r3, r7, #32
 8000d20:	491d      	ldr	r1, [pc, #116]	; (8000d98 <_Z31OLED_Schedule_And_Event_Controlv+0x138>)
 8000d22:	4618      	mov	r0, r3
 8000d24:	f008 fdc8 	bl	80098b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>
 8000d28:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <_Z31OLED_Schedule_And_Event_Controlv+0x11c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	4a14      	ldr	r2, [pc, #80]	; (8000d80 <_Z31OLED_Schedule_And_Event_Controlv+0x120>)
 8000d2e:	7812      	ldrb	r2, [r2, #0]
 8000d30:	4914      	ldr	r1, [pc, #80]	; (8000d84 <_Z31OLED_Schedule_And_Event_Controlv+0x124>)
 8000d32:	6809      	ldr	r1, [r1, #0]
 8000d34:	f107 0020 	add.w	r0, r7, #32
 8000d38:	9102      	str	r1, [sp, #8]
 8000d3a:	9201      	str	r2, [sp, #4]
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2220      	movs	r2, #32
 8000d42:	2100      	movs	r1, #0
 8000d44:	4809      	ldr	r0, [pc, #36]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000d46:	f7ff feb9 	bl	8000abc <_ZN4OLED4textEiiNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEbbi>
 8000d4a:	f107 0320 	add.w	r3, r7, #32
 8000d4e:	4618      	mov	r0, r3
 8000d50:	f008 fcf4 	bl	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
  Obj_OLED_01.drawFullscreen();
 8000d54:	4805      	ldr	r0, [pc, #20]	; (8000d6c <_Z31OLED_Schedule_And_Event_Controlv+0x10c>)
 8000d56:	f7ff fcb1 	bl	80006bc <_ZN4OLED14drawFullscreenEv>





  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000d5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5e:	480f      	ldr	r0, [pc, #60]	; (8000d9c <_Z31OLED_Schedule_And_Event_Controlv+0x13c>)
 8000d60:	f002 fc71 	bl	8003646 <HAL_GPIO_TogglePin>


}
 8000d64:	bf00      	nop
 8000d66:	3738      	adds	r7, #56	; 0x38
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000d6c:	2000047c 	.word	0x2000047c
 8000d70:	20000094 	.word	0x20000094
 8000d74:	20000098 	.word	0x20000098
 8000d78:	08009c9c 	.word	0x08009c9c
 8000d7c:	20000004 	.word	0x20000004
 8000d80:	200000b4 	.word	0x200000b4
 8000d84:	20000000 	.word	0x20000000
 8000d88:	200000bc 	.word	0x200000bc
 8000d8c:	20000005 	.word	0x20000005
 8000d90:	200000b8 	.word	0x200000b8
 8000d94:	08009ca8 	.word	0x08009ca8
 8000d98:	2000009c 	.word	0x2000009c
 8000d9c:	40020c00 	.word	0x40020c00

08000da0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000da4:	f001 fb7c 	bl	80024a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da8:	f000 f842 	bl	8000e30 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dac:	f000 fd4c 	bl	8001848 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8000db0:	f000 fd0c 	bl	80017cc <_ZL11MX_DMA_Initv>
  MX_ADC1_Init();
 8000db4:	f000 f8d2 	bl	8000f5c <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 8000db8:	f000 f92c 	bl	8001014 <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 8000dbc:	f000 f95e 	bl	800107c <_ZL12MX_I2S3_Initv>
  MX_RTC_Init();
 8000dc0:	f000 f990 	bl	80010e4 <_ZL11MX_RTC_Initv>
  MX_SPI1_Init();
 8000dc4:	f000 fa2e 	bl	8001224 <_ZL12MX_SPI1_Initv>
  MX_TIM1_Init();
 8000dc8:	f000 fa68 	bl	800129c <_ZL12MX_TIM1_Initv>
  MX_TIM2_Init();
 8000dcc:	f000 fb76 	bl	80014bc <_ZL12MX_TIM2_Initv>
  MX_TIM3_Init();
 8000dd0:	f000 fbd0 	bl	8001574 <_ZL12MX_TIM3_Initv>
  MX_USART1_UART_Init();
 8000dd4:	f000 fc9e 	bl	8001714 <_ZL19MX_USART1_UART_Initv>
  MX_USART2_UART_Init();
 8000dd8:	f000 fcca 	bl	8001770 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  Obj_OLED_01.init(&hi2c1);
 8000ddc:	4911      	ldr	r1, [pc, #68]	; (8000e24 <main+0x84>)
 8000dde:	4812      	ldr	r0, [pc, #72]	; (8000e28 <main+0x88>)
 8000de0:	f7ff fbb5 	bl	800054e <_ZN4OLED4initEP19__I2C_HandleTypeDef>


  OLED_One_Time_Configuartion();
 8000de4:	f7ff fea8 	bl	8000b38 <_Z27OLED_One_Time_Configuartionv>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if (HAL_I2C_IsDeviceReady( &hi2c1, Obj_OLED_01.getCAddress(), 1, 10 ) ==  HAL_OK )
 8000de8:	480f      	ldr	r0, [pc, #60]	; (8000e28 <main+0x88>)
 8000dea:	f7ff fcb5 	bl	8000758 <_ZN4OLED11getCAddressEv>
 8000dee:	4603      	mov	r3, r0
 8000df0:	b299      	uxth	r1, r3
 8000df2:	230a      	movs	r3, #10
 8000df4:	2201      	movs	r2, #1
 8000df6:	480b      	ldr	r0, [pc, #44]	; (8000e24 <main+0x84>)
 8000df8:	f002 fe76 	bl	8003ae8 <HAL_I2C_IsDeviceReady>
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d004      	beq.n	8000e16 <main+0x76>
	  {
		 HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_15);
 8000e0c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e10:	4806      	ldr	r0, [pc, #24]	; (8000e2c <main+0x8c>)
 8000e12:	f002 fc18 	bl	8003646 <HAL_GPIO_TogglePin>

	  }


	  HAL_Delay(500);
 8000e16:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000e1a:	f001 fbb3 	bl	8002584 <HAL_Delay>
	  OLED_Schedule_And_Event_Control();
 8000e1e:	f7ff ff1f 	bl	8000c60 <_Z31OLED_Schedule_And_Event_Controlv>
	  if (HAL_I2C_IsDeviceReady( &hi2c1, Obj_OLED_01.getCAddress(), 1, 10 ) ==  HAL_OK )
 8000e22:	e7e1      	b.n	8000de8 <main+0x48>
 8000e24:	20000168 	.word	0x20000168
 8000e28:	2000047c 	.word	0x2000047c
 8000e2c:	40020c00 	.word	0x40020c00

08000e30 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b098      	sub	sp, #96	; 0x60
 8000e34:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e36:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000e3a:	2230      	movs	r2, #48	; 0x30
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4618      	mov	r0, r3
 8000e40:	f008 fe08 	bl	8009a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e44:	f107 031c 	add.w	r3, r7, #28
 8000e48:	2200      	movs	r2, #0
 8000e4a:	601a      	str	r2, [r3, #0]
 8000e4c:	605a      	str	r2, [r3, #4]
 8000e4e:	609a      	str	r2, [r3, #8]
 8000e50:	60da      	str	r2, [r3, #12]
 8000e52:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000e54:	f107 030c 	add.w	r3, r7, #12
 8000e58:	2200      	movs	r2, #0
 8000e5a:	601a      	str	r2, [r3, #0]
 8000e5c:	605a      	str	r2, [r3, #4]
 8000e5e:	609a      	str	r2, [r3, #8]
 8000e60:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	60bb      	str	r3, [r7, #8]
 8000e66:	4b3b      	ldr	r3, [pc, #236]	; (8000f54 <_Z18SystemClock_Configv+0x124>)
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	4a3a      	ldr	r2, [pc, #232]	; (8000f54 <_Z18SystemClock_Configv+0x124>)
 8000e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e70:	6413      	str	r3, [r2, #64]	; 0x40
 8000e72:	4b38      	ldr	r3, [pc, #224]	; (8000f54 <_Z18SystemClock_Configv+0x124>)
 8000e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000e7e:	2300      	movs	r3, #0
 8000e80:	607b      	str	r3, [r7, #4]
 8000e82:	4b35      	ldr	r3, [pc, #212]	; (8000f58 <_Z18SystemClock_Configv+0x128>)
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	4a34      	ldr	r2, [pc, #208]	; (8000f58 <_Z18SystemClock_Configv+0x128>)
 8000e88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e8c:	6013      	str	r3, [r2, #0]
 8000e8e:	4b32      	ldr	r3, [pc, #200]	; (8000f58 <_Z18SystemClock_Configv+0x128>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000e9a:	2309      	movs	r3, #9
 8000e9c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e9e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000ea2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ea8:	2302      	movs	r3, #2
 8000eaa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000eac:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000eb0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000eb2:	2304      	movs	r3, #4
 8000eb4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000eb6:	2354      	movs	r3, #84	; 0x54
 8000eb8:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000eba:	2302      	movs	r3, #2
 8000ebc:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ec2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f005 f8de 	bl	8006088 <HAL_RCC_OscConfig>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	bf14      	ite	ne
 8000ed2:	2301      	movne	r3, #1
 8000ed4:	2300      	moveq	r3, #0
 8000ed6:	b2db      	uxtb	r3, r3
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d001      	beq.n	8000ee0 <_Z18SystemClock_Configv+0xb0>
  {
    Error_Handler();
 8000edc:	f000 fdc8 	bl	8001a70 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ee0:	230f      	movs	r3, #15
 8000ee2:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ee4:	2302      	movs	r3, #2
 8000ee6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000eec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ef2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ef6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ef8:	f107 031c 	add.w	r3, r7, #28
 8000efc:	2102      	movs	r1, #2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f005 fb32 	bl	8006568 <HAL_RCC_ClockConfig>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bf14      	ite	ne
 8000f0a:	2301      	movne	r3, #1
 8000f0c:	2300      	moveq	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <_Z18SystemClock_Configv+0xe8>
  {
    Error_Handler();
 8000f14:	f000 fdac 	bl	8001a70 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S|RCC_PERIPHCLK_RTC;
 8000f18:	2303      	movs	r3, #3
 8000f1a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 50;
 8000f1c:	2332      	movs	r3, #50	; 0x32
 8000f1e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000f20:	2302      	movs	r3, #2
 8000f22:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000f24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000f28:	61bb      	str	r3, [r7, #24]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f005 fd34 	bl	800699c <HAL_RCCEx_PeriphCLKConfig>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	bf14      	ite	ne
 8000f3a:	2301      	movne	r3, #1
 8000f3c:	2300      	moveq	r3, #0
 8000f3e:	b2db      	uxtb	r3, r3
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <_Z18SystemClock_Configv+0x118>
  {
    Error_Handler();
 8000f44:	f000 fd94 	bl	8001a70 <Error_Handler>
  }
  /** Enables the Clock Security System 
  */
  HAL_RCC_EnableCSS();
 8000f48:	f005 fbf4 	bl	8006734 <HAL_RCC_EnableCSS>
}
 8000f4c:	bf00      	nop
 8000f4e:	3760      	adds	r7, #96	; 0x60
 8000f50:	46bd      	mov	sp, r7
 8000f52:	bd80      	pop	{r7, pc}
 8000f54:	40023800 	.word	0x40023800
 8000f58:	40007000 	.word	0x40007000

08000f5c <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f62:	463b      	mov	r3, r7
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f70:	4a26      	ldr	r2, [pc, #152]	; (800100c <_ZL12MX_ADC1_Initv+0xb0>)
 8000f72:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000f74:	4b24      	ldr	r3, [pc, #144]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f7a:	4b23      	ldr	r3, [pc, #140]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000f80:	4b21      	ldr	r3, [pc, #132]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f86:	4b20      	ldr	r3, [pc, #128]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f8c:	4b1e      	ldr	r3, [pc, #120]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f94:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000f9c:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <_ZL12MX_ADC1_Initv+0xb4>)
 8000f9e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000fa8:	2201      	movs	r2, #1
 8000faa:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fac:	4b16      	ldr	r3, [pc, #88]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fb4:	4b14      	ldr	r3, [pc, #80]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000fb6:	2201      	movs	r2, #1
 8000fb8:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fba:	4813      	ldr	r0, [pc, #76]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000fbc:	f001 fb04 	bl	80025c8 <HAL_ADC_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	bf14      	ite	ne
 8000fc6:	2301      	movne	r3, #1
 8000fc8:	2300      	moveq	r3, #0
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d001      	beq.n	8000fd4 <_ZL12MX_ADC1_Initv+0x78>
  {
    Error_Handler();
 8000fd0:	f000 fd4e 	bl	8001a70 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000fd4:	230a      	movs	r3, #10
 8000fd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe0:	463b      	mov	r3, r7
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	4808      	ldr	r0, [pc, #32]	; (8001008 <_ZL12MX_ADC1_Initv+0xac>)
 8000fe6:	f001 fb33 	bl	8002650 <HAL_ADC_ConfigChannel>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf14      	ite	ne
 8000ff0:	2301      	movne	r3, #1
 8000ff2:	2300      	moveq	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <_ZL12MX_ADC1_Initv+0xa2>
  {
    Error_Handler();
 8000ffa:	f000 fd39 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ffe:	bf00      	nop
 8001000:	3710      	adds	r7, #16
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200000c0 	.word	0x200000c0
 800100c:	40012000 	.word	0x40012000
 8001010:	0f000001 	.word	0x0f000001

08001014 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001018:	4b15      	ldr	r3, [pc, #84]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 800101a:	4a16      	ldr	r2, [pc, #88]	; (8001074 <_ZL12MX_I2C1_Initv+0x60>)
 800101c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800101e:	4b14      	ldr	r3, [pc, #80]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 8001020:	4a15      	ldr	r2, [pc, #84]	; (8001078 <_ZL12MX_I2C1_Initv+0x64>)
 8001022:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001024:	4b12      	ldr	r3, [pc, #72]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800102a:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 800102c:	2200      	movs	r2, #0
 800102e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001030:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 8001032:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001036:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001038:	4b0d      	ldr	r3, [pc, #52]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 800103a:	2200      	movs	r2, #0
 800103c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800103e:	4b0c      	ldr	r3, [pc, #48]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 8001040:	2200      	movs	r2, #0
 8001042:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001044:	4b0a      	ldr	r3, [pc, #40]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 8001046:	2200      	movs	r2, #0
 8001048:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800104a:	4b09      	ldr	r3, [pc, #36]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 800104c:	2200      	movs	r2, #0
 800104e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001050:	4807      	ldr	r0, [pc, #28]	; (8001070 <_ZL12MX_I2C1_Initv+0x5c>)
 8001052:	f002 fb13 	bl	800367c <HAL_I2C_Init>
 8001056:	4603      	mov	r3, r0
 8001058:	2b00      	cmp	r3, #0
 800105a:	bf14      	ite	ne
 800105c:	2301      	movne	r3, #1
 800105e:	2300      	moveq	r3, #0
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8001066:	f000 fd03 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	20000168 	.word	0x20000168
 8001074:	40005400 	.word	0x40005400
 8001078:	00061a80 	.word	0x00061a80

0800107c <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001080:	4b15      	ldr	r3, [pc, #84]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 8001082:	4a16      	ldr	r2, [pc, #88]	; (80010dc <_ZL12MX_I2S3_Initv+0x60>)
 8001084:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001086:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 8001088:	f44f 7200 	mov.w	r2, #512	; 0x200
 800108c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 8001090:	2200      	movs	r2, #0
 8001092:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001094:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 8001096:	2200      	movs	r2, #0
 8001098:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800109a:	4b0f      	ldr	r3, [pc, #60]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 800109c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010a0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80010a2:	4b0d      	ldr	r3, [pc, #52]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 80010a4:	4a0e      	ldr	r2, [pc, #56]	; (80010e0 <_ZL12MX_I2S3_Initv+0x64>)
 80010a6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80010ae:	4b0a      	ldr	r3, [pc, #40]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80010ba:	4807      	ldr	r0, [pc, #28]	; (80010d8 <_ZL12MX_I2S3_Initv+0x5c>)
 80010bc:	f004 fb44 	bl	8005748 <HAL_I2S_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	bf14      	ite	ne
 80010c6:	2301      	movne	r3, #1
 80010c8:	2300      	moveq	r3, #0
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d001      	beq.n	80010d4 <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 80010d0:	f000 fcce 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80010d4:	bf00      	nop
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	200001bc 	.word	0x200001bc
 80010dc:	40003c00 	.word	0x40003c00
 80010e0:	00017700 	.word	0x00017700

080010e4 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b090      	sub	sp, #64	; 0x40
 80010e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80010ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ee:	2200      	movs	r2, #0
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	605a      	str	r2, [r3, #4]
 80010f4:	609a      	str	r2, [r3, #8]
 80010f6:	60da      	str	r2, [r3, #12]
 80010f8:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80010fa:	2300      	movs	r3, #0
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  RTC_AlarmTypeDef sAlarm = {0};
 80010fe:	463b      	mov	r3, r7
 8001100:	2228      	movs	r2, #40	; 0x28
 8001102:	2100      	movs	r1, #0
 8001104:	4618      	mov	r0, r3
 8001106:	f008 fca5 	bl	8009a54 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only 
  */
  hrtc.Instance = RTC;
 800110a:	4b44      	ldr	r3, [pc, #272]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 800110c:	4a44      	ldr	r2, [pc, #272]	; (8001220 <_ZL11MX_RTC_Initv+0x13c>)
 800110e:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001110:	4b42      	ldr	r3, [pc, #264]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 8001112:	2200      	movs	r2, #0
 8001114:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001116:	4b41      	ldr	r3, [pc, #260]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 8001118:	227f      	movs	r2, #127	; 0x7f
 800111a:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800111c:	4b3f      	ldr	r3, [pc, #252]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 800111e:	22ff      	movs	r2, #255	; 0xff
 8001120:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001122:	4b3e      	ldr	r3, [pc, #248]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 8001124:	2200      	movs	r2, #0
 8001126:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001128:	4b3c      	ldr	r3, [pc, #240]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 800112a:	2200      	movs	r2, #0
 800112c:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800112e:	4b3b      	ldr	r3, [pc, #236]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 8001130:	2200      	movs	r2, #0
 8001132:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001134:	4839      	ldr	r0, [pc, #228]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 8001136:	f005 fd6f 	bl	8006c18 <HAL_RTC_Init>
 800113a:	4603      	mov	r3, r0
 800113c:	2b00      	cmp	r3, #0
 800113e:	bf14      	ite	ne
 8001140:	2301      	movne	r3, #1
 8001142:	2300      	moveq	r3, #0
 8001144:	b2db      	uxtb	r3, r3
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 800114a:	f000 fc91 	bl	8001a70 <Error_Handler>
    
  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date 
  */
  sTime.Hours = 0x0;
 800114e:	2300      	movs	r3, #0
 8001150:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sTime.Minutes = 0x0;
 8001154:	2300      	movs	r3, #0
 8001156:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sTime.Seconds = 0x0;
 800115a:	2300      	movs	r3, #0
 800115c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001160:	2300      	movs	r3, #0
 8001162:	63bb      	str	r3, [r7, #56]	; 0x38
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001164:	2300      	movs	r3, #0
 8001166:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001168:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800116c:	2201      	movs	r2, #1
 800116e:	4619      	mov	r1, r3
 8001170:	482a      	ldr	r0, [pc, #168]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 8001172:	f005 fde2 	bl	8006d3a <HAL_RTC_SetTime>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	bf14      	ite	ne
 800117c:	2301      	movne	r3, #1
 800117e:	2300      	moveq	r3, #0
 8001180:	b2db      	uxtb	r3, r3
 8001182:	2b00      	cmp	r3, #0
 8001184:	d001      	beq.n	800118a <_ZL11MX_RTC_Initv+0xa6>
  {
    Error_Handler();
 8001186:	f000 fc73 	bl	8001a70 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800118a:	2301      	movs	r3, #1
 800118c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  sDate.Month = RTC_MONTH_JANUARY;
 8001190:	2301      	movs	r3, #1
 8001192:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  sDate.Date = 0x1;
 8001196:	2301      	movs	r3, #1
 8001198:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  sDate.Year = 0x0;
 800119c:	2300      	movs	r3, #0
 800119e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011a6:	2201      	movs	r2, #1
 80011a8:	4619      	mov	r1, r3
 80011aa:	481c      	ldr	r0, [pc, #112]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 80011ac:	f005 fe82 	bl	8006eb4 <HAL_RTC_SetDate>
 80011b0:	4603      	mov	r3, r0
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	bf14      	ite	ne
 80011b6:	2301      	movne	r3, #1
 80011b8:	2300      	moveq	r3, #0
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <_ZL11MX_RTC_Initv+0xe0>
  {
    Error_Handler();
 80011c0:	f000 fc56 	bl	8001a70 <Error_Handler>
  }
  /** Enable the Alarm A 
  */
  sAlarm.AlarmTime.Hours = 0x0;
 80011c4:	2300      	movs	r3, #0
 80011c6:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 80011cc:	2300      	movs	r3, #0
 80011ce:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 80011d0:	2300      	movs	r3, #0
 80011d2:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011d4:	2300      	movs	r3, #0
 80011d6:	60fb      	str	r3, [r7, #12]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011d8:	2300      	movs	r3, #0
 80011da:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 80011dc:	2300      	movs	r3, #0
 80011de:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 80011e0:	2300      	movs	r3, #0
 80011e2:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 80011e4:	2300      	movs	r3, #0
 80011e6:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDay = 0x1;
 80011e8:	2301      	movs	r3, #1
 80011ea:	f887 3020 	strb.w	r3, [r7, #32]
  sAlarm.Alarm = RTC_ALARM_A;
 80011ee:	f44f 7380 	mov.w	r3, #256	; 0x100
 80011f2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_RTC_SetAlarm_IT(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	2201      	movs	r2, #1
 80011f8:	4619      	mov	r1, r3
 80011fa:	4808      	ldr	r0, [pc, #32]	; (800121c <_ZL11MX_RTC_Initv+0x138>)
 80011fc:	f005 ff02 	bl	8007004 <HAL_RTC_SetAlarm_IT>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	bf14      	ite	ne
 8001206:	2301      	movne	r3, #1
 8001208:	2300      	moveq	r3, #0
 800120a:	b2db      	uxtb	r3, r3
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <_ZL11MX_RTC_Initv+0x130>
  {
    Error_Handler();
 8001210:	f000 fc2e 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001214:	bf00      	nop
 8001216:	3740      	adds	r7, #64	; 0x40
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	20000204 	.word	0x20000204
 8001220:	40002800 	.word	0x40002800

08001224 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001228:	4b1a      	ldr	r3, [pc, #104]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 800122a:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <_ZL12MX_SPI1_Initv+0x74>)
 800122c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800122e:	4b19      	ldr	r3, [pc, #100]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001230:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001234:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001236:	4b17      	ldr	r3, [pc, #92]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001238:	2200      	movs	r2, #0
 800123a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800123c:	4b15      	ldr	r3, [pc, #84]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 800123e:	2200      	movs	r2, #0
 8001240:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001242:	4b14      	ldr	r3, [pc, #80]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001244:	2200      	movs	r2, #0
 8001246:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001254:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001256:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001258:	2220      	movs	r2, #32
 800125a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800125c:	4b0d      	ldr	r3, [pc, #52]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 800125e:	2200      	movs	r2, #0
 8001260:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001262:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001264:	2200      	movs	r2, #0
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 800126a:	2200      	movs	r2, #0
 800126c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001270:	220a      	movs	r2, #10
 8001272:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001274:	4807      	ldr	r0, [pc, #28]	; (8001294 <_ZL12MX_SPI1_Initv+0x70>)
 8001276:	f006 f8c9 	bl	800740c <HAL_SPI_Init>
 800127a:	4603      	mov	r3, r0
 800127c:	2b00      	cmp	r3, #0
 800127e:	bf14      	ite	ne
 8001280:	2301      	movne	r3, #1
 8001282:	2300      	moveq	r3, #0
 8001284:	b2db      	uxtb	r3, r3
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 800128a:	f000 fbf1 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000224 	.word	0x20000224
 8001298:	40013000 	.word	0x40013000

0800129c <_ZL12MX_TIM1_Initv>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b09a      	sub	sp, #104	; 0x68
 80012a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80012a2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80012a6:	2200      	movs	r2, #0
 80012a8:	601a      	str	r2, [r3, #0]
 80012aa:	605a      	str	r2, [r3, #4]
 80012ac:	609a      	str	r2, [r3, #8]
 80012ae:	60da      	str	r2, [r3, #12]
 80012b0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80012bc:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012ca:	f107 0320 	add.w	r3, r7, #32
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
 80012d2:	605a      	str	r2, [r3, #4]
 80012d4:	609a      	str	r2, [r3, #8]
 80012d6:	60da      	str	r2, [r3, #12]
 80012d8:	611a      	str	r2, [r3, #16]
 80012da:	615a      	str	r2, [r3, #20]
 80012dc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80012de:	463b      	mov	r3, r7
 80012e0:	2220      	movs	r2, #32
 80012e2:	2100      	movs	r1, #0
 80012e4:	4618      	mov	r0, r3
 80012e6:	f008 fbb5 	bl	8009a54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ea:	4b72      	ldr	r3, [pc, #456]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80012ec:	4a72      	ldr	r2, [pc, #456]	; (80014b8 <_ZL12MX_TIM1_Initv+0x21c>)
 80012ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012f0:	4b70      	ldr	r3, [pc, #448]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f6:	4b6f      	ldr	r3, [pc, #444]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 80012fc:	4b6d      	ldr	r3, [pc, #436]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80012fe:	2200      	movs	r2, #0
 8001300:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001302:	4b6c      	ldr	r3, [pc, #432]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001304:	2200      	movs	r2, #0
 8001306:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001308:	4b6a      	ldr	r3, [pc, #424]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 800130a:	2200      	movs	r2, #0
 800130c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800130e:	4b69      	ldr	r3, [pc, #420]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001310:	2200      	movs	r2, #0
 8001312:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001314:	4867      	ldr	r0, [pc, #412]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001316:	f006 f9fb 	bl	8007710 <HAL_TIM_Base_Init>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	bf14      	ite	ne
 8001320:	2301      	movne	r3, #1
 8001322:	2300      	moveq	r3, #0
 8001324:	b2db      	uxtb	r3, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <_ZL12MX_TIM1_Initv+0x92>
  {
    Error_Handler();
 800132a:	f000 fba1 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800132e:	4861      	ldr	r0, [pc, #388]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001330:	f006 fa83 	bl	800783a <HAL_TIM_IC_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	bf14      	ite	ne
 800133a:	2301      	movne	r3, #1
 800133c:	2300      	moveq	r3, #0
 800133e:	b2db      	uxtb	r3, r3
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <_ZL12MX_TIM1_Initv+0xac>
  {
    Error_Handler();
 8001344:	f000 fb94 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8001348:	485a      	ldr	r0, [pc, #360]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 800134a:	f006 fa0c 	bl	8007766 <HAL_TIM_OC_Init>
 800134e:	4603      	mov	r3, r0
 8001350:	2b00      	cmp	r3, #0
 8001352:	bf14      	ite	ne
 8001354:	2301      	movne	r3, #1
 8001356:	2300      	moveq	r3, #0
 8001358:	b2db      	uxtb	r3, r3
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <_ZL12MX_TIM1_Initv+0xc6>
  {
    Error_Handler();
 800135e:	f000 fb87 	bl	8001a70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001362:	2307      	movs	r3, #7
 8001364:	657b      	str	r3, [r7, #84]	; 0x54
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001366:	2300      	movs	r3, #0
 8001368:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 800136a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800136e:	4619      	mov	r1, r3
 8001370:	4850      	ldr	r0, [pc, #320]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001372:	f006 fd61 	bl	8007e38 <HAL_TIM_SlaveConfigSynchro>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	bf14      	ite	ne
 800137c:	2301      	movne	r3, #1
 800137e:	2300      	moveq	r3, #0
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <_ZL12MX_TIM1_Initv+0xee>
  {
    Error_Handler();
 8001386:	f000 fb73 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800138a:	2300      	movs	r3, #0
 800138c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800138e:	2300      	movs	r3, #0
 8001390:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001392:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001396:	4619      	mov	r1, r3
 8001398:	4846      	ldr	r0, [pc, #280]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 800139a:	f007 fa41 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	bf14      	ite	ne
 80013a4:	2301      	movne	r3, #1
 80013a6:	2300      	moveq	r3, #0
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d001      	beq.n	80013b2 <_ZL12MX_TIM1_Initv+0x116>
  {
    Error_Handler();
 80013ae:	f000 fb5f 	bl	8001a70 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013b2:	2300      	movs	r3, #0
 80013b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013b6:	2301      	movs	r3, #1
 80013b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013ba:	2300      	movs	r3, #0
 80013bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigIC.ICFilter = 0;
 80013be:	2300      	movs	r3, #0
 80013c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013c2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013c6:	2200      	movs	r2, #0
 80013c8:	4619      	mov	r1, r3
 80013ca:	483a      	ldr	r0, [pc, #232]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80013cc:	f006 fbd2 	bl	8007b74 <HAL_TIM_IC_ConfigChannel>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	bf14      	ite	ne
 80013d6:	2301      	movne	r3, #1
 80013d8:	2300      	moveq	r3, #0
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d001      	beq.n	80013e4 <_ZL12MX_TIM1_Initv+0x148>
  {
    Error_Handler();
 80013e0:	f000 fb46 	bl	8001a70 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80013e4:	2302      	movs	r3, #2
 80013e6:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80013e8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80013ec:	2204      	movs	r2, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	4830      	ldr	r0, [pc, #192]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80013f2:	f006 fbbf 	bl	8007b74 <HAL_TIM_IC_ConfigChannel>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	bf14      	ite	ne
 80013fc:	2301      	movne	r3, #1
 80013fe:	2300      	moveq	r3, #0
 8001400:	b2db      	uxtb	r3, r3
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <_ZL12MX_TIM1_Initv+0x16e>
  {
    Error_Handler();
 8001406:	f000 fb33 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800140a:	2300      	movs	r3, #0
 800140c:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 800140e:	2300      	movs	r3, #0
 8001410:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001412:	2300      	movs	r3, #0
 8001414:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001416:	2300      	movs	r3, #0
 8001418:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800141a:	2300      	movs	r3, #0
 800141c:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141e:	2300      	movs	r3, #0
 8001420:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001426:	f107 0320 	add.w	r3, r7, #32
 800142a:	2208      	movs	r2, #8
 800142c:	4619      	mov	r1, r3
 800142e:	4821      	ldr	r0, [pc, #132]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001430:	f006 fb40 	bl	8007ab4 <HAL_TIM_OC_ConfigChannel>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	bf14      	ite	ne
 800143a:	2301      	movne	r3, #1
 800143c:	2300      	moveq	r3, #0
 800143e:	b2db      	uxtb	r3, r3
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <_ZL12MX_TIM1_Initv+0x1ac>
  {
    Error_Handler();
 8001444:	f000 fb14 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001448:	f107 0320 	add.w	r3, r7, #32
 800144c:	220c      	movs	r2, #12
 800144e:	4619      	mov	r1, r3
 8001450:	4818      	ldr	r0, [pc, #96]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 8001452:	f006 fb2f 	bl	8007ab4 <HAL_TIM_OC_ConfigChannel>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	bf14      	ite	ne
 800145c:	2301      	movne	r3, #1
 800145e:	2300      	moveq	r3, #0
 8001460:	b2db      	uxtb	r3, r3
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <_ZL12MX_TIM1_Initv+0x1ce>
  {
    Error_Handler();
 8001466:	f000 fb03 	bl	8001a70 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800146a:	2300      	movs	r3, #0
 800146c:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800146e:	2300      	movs	r3, #0
 8001470:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001472:	2300      	movs	r3, #0
 8001474:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001476:	2300      	movs	r3, #0
 8001478:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800147a:	2300      	movs	r3, #0
 800147c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800147e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001482:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4809      	ldr	r0, [pc, #36]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 800148e:	f007 fa43 	bl	8008918 <HAL_TIMEx_ConfigBreakDeadTime>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	bf14      	ite	ne
 8001498:	2301      	movne	r3, #1
 800149a:	2300      	moveq	r3, #0
 800149c:	b2db      	uxtb	r3, r3
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <_ZL12MX_TIM1_Initv+0x20a>
  {
    Error_Handler();
 80014a2:	f000 fae5 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80014a6:	4803      	ldr	r0, [pc, #12]	; (80014b4 <_ZL12MX_TIM1_Initv+0x218>)
 80014a8:	f000 fd78 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 80014ac:	bf00      	nop
 80014ae:	3768      	adds	r7, #104	; 0x68
 80014b0:	46bd      	mov	sp, r7
 80014b2:	bd80      	pop	{r7, pc}
 80014b4:	2000027c 	.word	0x2000027c
 80014b8:	40010000 	.word	0x40010000

080014bc <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b088      	sub	sp, #32
 80014c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80014c2:	f107 030c 	add.w	r3, r7, #12
 80014c6:	2200      	movs	r2, #0
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	605a      	str	r2, [r3, #4]
 80014cc:	609a      	str	r2, [r3, #8]
 80014ce:	60da      	str	r2, [r3, #12]
 80014d0:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d2:	1d3b      	adds	r3, r7, #4
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014da:	4b25      	ldr	r3, [pc, #148]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 80014dc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014e0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014e2:	4b23      	ldr	r3, [pc, #140]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e8:	4b21      	ldr	r3, [pc, #132]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0;
 80014ee:	4b20      	ldr	r3, [pc, #128]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014f4:	4b1e      	ldr	r3, [pc, #120]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014fa:	4b1d      	ldr	r3, [pc, #116]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001500:	481b      	ldr	r0, [pc, #108]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 8001502:	f006 f905 	bl	8007710 <HAL_TIM_Base_Init>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	bf14      	ite	ne
 800150c:	2301      	movne	r3, #1
 800150e:	2300      	moveq	r3, #0
 8001510:	b2db      	uxtb	r3, r3
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <_ZL12MX_TIM2_Initv+0x5e>
  {
    Error_Handler();
 8001516:	f000 faab 	bl	8001a70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800151a:	2307      	movs	r3, #7
 800151c:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 800151e:	2300      	movs	r3, #0
 8001520:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	4619      	mov	r1, r3
 8001528:	4811      	ldr	r0, [pc, #68]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 800152a:	f006 fc85 	bl	8007e38 <HAL_TIM_SlaveConfigSynchro>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	bf14      	ite	ne
 8001534:	2301      	movne	r3, #1
 8001536:	2300      	moveq	r3, #0
 8001538:	b2db      	uxtb	r3, r3
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <_ZL12MX_TIM2_Initv+0x86>
  {
    Error_Handler();
 800153e:	f000 fa97 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4808      	ldr	r0, [pc, #32]	; (8001570 <_ZL12MX_TIM2_Initv+0xb4>)
 8001550:	f007 f966 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	bf14      	ite	ne
 800155a:	2301      	movne	r3, #1
 800155c:	2300      	moveq	r3, #0
 800155e:	b2db      	uxtb	r3, r3
 8001560:	2b00      	cmp	r3, #0
 8001562:	d001      	beq.n	8001568 <_ZL12MX_TIM2_Initv+0xac>
  {
    Error_Handler();
 8001564:	f000 fa84 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001568:	bf00      	nop
 800156a:	3720      	adds	r7, #32
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	200002bc 	.word	0x200002bc

08001574 <_ZL12MX_TIM3_Initv>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b08e      	sub	sp, #56	; 0x38
 8001578:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800157a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]
 8001588:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001594:	463b      	mov	r3, r7
 8001596:	2200      	movs	r2, #0
 8001598:	601a      	str	r2, [r3, #0]
 800159a:	605a      	str	r2, [r3, #4]
 800159c:	609a      	str	r2, [r3, #8]
 800159e:	60da      	str	r2, [r3, #12]
 80015a0:	611a      	str	r2, [r3, #16]
 80015a2:	615a      	str	r2, [r3, #20]
 80015a4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015a6:	4b59      	ldr	r3, [pc, #356]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015a8:	4a59      	ldr	r2, [pc, #356]	; (8001710 <_ZL12MX_TIM3_Initv+0x19c>)
 80015aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015ac:	4b57      	ldr	r3, [pc, #348]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b2:	4b56      	ldr	r3, [pc, #344]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0;
 80015b8:	4b54      	ldr	r3, [pc, #336]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015be:	4b53      	ldr	r3, [pc, #332]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c4:	4b51      	ldr	r3, [pc, #324]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015ca:	4850      	ldr	r0, [pc, #320]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015cc:	f006 f8a0 	bl	8007710 <HAL_TIM_Base_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	bf14      	ite	ne
 80015d6:	2301      	movne	r3, #1
 80015d8:	2300      	moveq	r3, #0
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <_ZL12MX_TIM3_Initv+0x70>
  {
    Error_Handler();
 80015e0:	f000 fa46 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015e4:	4849      	ldr	r0, [pc, #292]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80015e6:	f006 f8f3 	bl	80077d0 <HAL_TIM_PWM_Init>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	bf14      	ite	ne
 80015f0:	2301      	movne	r3, #1
 80015f2:	2300      	moveq	r3, #0
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d001      	beq.n	80015fe <_ZL12MX_TIM3_Initv+0x8a>
  {
    Error_Handler();
 80015fa:	f000 fa39 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 80015fe:	4843      	ldr	r0, [pc, #268]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 8001600:	f006 f8b1 	bl	8007766 <HAL_TIM_OC_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	bf14      	ite	ne
 800160a:	2301      	movne	r3, #1
 800160c:	2300      	moveq	r3, #0
 800160e:	b2db      	uxtb	r3, r3
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <_ZL12MX_TIM3_Initv+0xa4>
  {
    Error_Handler();
 8001614:	f000 fa2c 	bl	8001a70 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 800161c:	2310      	movs	r3, #16
 800161e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001620:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001624:	4619      	mov	r1, r3
 8001626:	4839      	ldr	r0, [pc, #228]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 8001628:	f006 fc06 	bl	8007e38 <HAL_TIM_SlaveConfigSynchro>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	bf14      	ite	ne
 8001632:	2301      	movne	r3, #1
 8001634:	2300      	moveq	r3, #0
 8001636:	b2db      	uxtb	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <_ZL12MX_TIM3_Initv+0xcc>
  {
    Error_Handler();
 800163c:	f000 fa18 	bl	8001a70 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001648:	f107 031c 	add.w	r3, r7, #28
 800164c:	4619      	mov	r1, r3
 800164e:	482f      	ldr	r0, [pc, #188]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 8001650:	f007 f8e6 	bl	8008820 <HAL_TIMEx_MasterConfigSynchronization>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	bf14      	ite	ne
 800165a:	2301      	movne	r3, #1
 800165c:	2300      	moveq	r3, #0
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <_ZL12MX_TIM3_Initv+0xf4>
  {
    Error_Handler();
 8001664:	f000 fa04 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	; 0x60
 800166a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001674:	2300      	movs	r3, #0
 8001676:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	4619      	mov	r1, r3
 800167e:	4823      	ldr	r0, [pc, #140]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 8001680:	f006 fb14 	bl	8007cac <HAL_TIM_PWM_ConfigChannel>
 8001684:	4603      	mov	r3, r0
 8001686:	2b00      	cmp	r3, #0
 8001688:	bf14      	ite	ne
 800168a:	2301      	movne	r3, #1
 800168c:	2300      	moveq	r3, #0
 800168e:	b2db      	uxtb	r3, r3
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <_ZL12MX_TIM3_Initv+0x124>
  {
    Error_Handler();
 8001694:	f000 f9ec 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001698:	463b      	mov	r3, r7
 800169a:	2204      	movs	r2, #4
 800169c:	4619      	mov	r1, r3
 800169e:	481b      	ldr	r0, [pc, #108]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80016a0:	f006 fb04 	bl	8007cac <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	bf14      	ite	ne
 80016aa:	2301      	movne	r3, #1
 80016ac:	2300      	moveq	r3, #0
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d001      	beq.n	80016b8 <_ZL12MX_TIM3_Initv+0x144>
  {
    Error_Handler();
 80016b4:	f000 f9dc 	bl	8001a70 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 80016b8:	2300      	movs	r3, #0
 80016ba:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016bc:	463b      	mov	r3, r7
 80016be:	2208      	movs	r2, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	4812      	ldr	r0, [pc, #72]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80016c4:	f006 f9f6 	bl	8007ab4 <HAL_TIM_OC_ConfigChannel>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	bf14      	ite	ne
 80016ce:	2301      	movne	r3, #1
 80016d0:	2300      	moveq	r3, #0
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <_ZL12MX_TIM3_Initv+0x168>
  {
    Error_Handler();
 80016d8:	f000 f9ca 	bl	8001a70 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016dc:	463b      	mov	r3, r7
 80016de:	220c      	movs	r2, #12
 80016e0:	4619      	mov	r1, r3
 80016e2:	480a      	ldr	r0, [pc, #40]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80016e4:	f006 f9e6 	bl	8007ab4 <HAL_TIM_OC_ConfigChannel>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	bf14      	ite	ne
 80016ee:	2301      	movne	r3, #1
 80016f0:	2300      	moveq	r3, #0
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <_ZL12MX_TIM3_Initv+0x188>
  {
    Error_Handler();
 80016f8:	f000 f9ba 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80016fc:	4803      	ldr	r0, [pc, #12]	; (800170c <_ZL12MX_TIM3_Initv+0x198>)
 80016fe:	f000 fc4d 	bl	8001f9c <HAL_TIM_MspPostInit>

}
 8001702:	bf00      	nop
 8001704:	3738      	adds	r7, #56	; 0x38
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}
 800170a:	bf00      	nop
 800170c:	200002fc 	.word	0x200002fc
 8001710:	40000400 	.word	0x40000400

08001714 <_ZL19MX_USART1_UART_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001718:	4b13      	ldr	r3, [pc, #76]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 800171a:	4a14      	ldr	r2, [pc, #80]	; (800176c <_ZL19MX_USART1_UART_Initv+0x58>)
 800171c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800171e:	4b12      	ldr	r3, [pc, #72]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001720:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001724:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001726:	4b10      	ldr	r3, [pc, #64]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800172c:	4b0e      	ldr	r3, [pc, #56]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 800172e:	2200      	movs	r2, #0
 8001730:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001732:	4b0d      	ldr	r3, [pc, #52]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001734:	2200      	movs	r2, #0
 8001736:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001738:	4b0b      	ldr	r3, [pc, #44]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 800173a:	220c      	movs	r2, #12
 800173c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800173e:	4b0a      	ldr	r3, [pc, #40]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001740:	2200      	movs	r2, #0
 8001742:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001744:	4b08      	ldr	r3, [pc, #32]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 8001746:	2200      	movs	r2, #0
 8001748:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800174a:	4807      	ldr	r0, [pc, #28]	; (8001768 <_ZL19MX_USART1_UART_Initv+0x54>)
 800174c:	f007 f94a 	bl	80089e4 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	bf14      	ite	ne
 8001756:	2301      	movne	r3, #1
 8001758:	2300      	moveq	r3, #0
 800175a:	b2db      	uxtb	r3, r3
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <_ZL19MX_USART1_UART_Initv+0x50>
  {
    Error_Handler();
 8001760:	f000 f986 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	bd80      	pop	{r7, pc}
 8001768:	2000033c 	.word	0x2000033c
 800176c:	40011000 	.word	0x40011000

08001770 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001774:	4b13      	ldr	r3, [pc, #76]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001776:	4a14      	ldr	r2, [pc, #80]	; (80017c8 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001778:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800177a:	4b12      	ldr	r3, [pc, #72]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800177c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001780:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001782:	4b10      	ldr	r3, [pc, #64]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001784:	2200      	movs	r2, #0
 8001786:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001788:	4b0e      	ldr	r3, [pc, #56]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800178a:	2200      	movs	r2, #0
 800178c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800178e:	4b0d      	ldr	r3, [pc, #52]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001794:	4b0b      	ldr	r3, [pc, #44]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001796:	220c      	movs	r2, #12
 8001798:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800179a:	4b0a      	ldr	r3, [pc, #40]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 800179c:	2200      	movs	r2, #0
 800179e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017a6:	4807      	ldr	r0, [pc, #28]	; (80017c4 <_ZL19MX_USART2_UART_Initv+0x54>)
 80017a8:	f007 f91c 	bl	80089e4 <HAL_UART_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	bf14      	ite	ne
 80017b2:	2301      	movne	r3, #1
 80017b4:	2300      	moveq	r3, #0
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d001      	beq.n	80017c0 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80017bc:	f000 f958 	bl	8001a70 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	2000037c 	.word	0x2000037c
 80017c8:	40004400 	.word	0x40004400

080017cc <_ZL11MX_DMA_Initv>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b082      	sub	sp, #8
 80017d0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	4b1b      	ldr	r3, [pc, #108]	; (8001844 <_ZL11MX_DMA_Initv+0x78>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017da:	4a1a      	ldr	r2, [pc, #104]	; (8001844 <_ZL11MX_DMA_Initv+0x78>)
 80017dc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80017e0:	6313      	str	r3, [r2, #48]	; 0x30
 80017e2:	4b18      	ldr	r3, [pc, #96]	; (8001844 <_ZL11MX_DMA_Initv+0x78>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ea:	607b      	str	r3, [r7, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	603b      	str	r3, [r7, #0]
 80017f2:	4b14      	ldr	r3, [pc, #80]	; (8001844 <_ZL11MX_DMA_Initv+0x78>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a13      	ldr	r2, [pc, #76]	; (8001844 <_ZL11MX_DMA_Initv+0x78>)
 80017f8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b11      	ldr	r3, [pc, #68]	; (8001844 <_ZL11MX_DMA_Initv+0x78>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001806:	603b      	str	r3, [r7, #0]
 8001808:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	2010      	movs	r0, #16
 8001810:	f001 fa17 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001814:	2010      	movs	r0, #16
 8001816:	f001 fa30 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	2011      	movs	r0, #17
 8001820:	f001 fa0f 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8001824:	2011      	movs	r0, #17
 8001826:	f001 fa28 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	2038      	movs	r0, #56	; 0x38
 8001830:	f001 fa07 	bl	8002c42 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001834:	2038      	movs	r0, #56	; 0x38
 8001836:	f001 fa20 	bl	8002c7a <HAL_NVIC_EnableIRQ>

}
 800183a:	bf00      	nop
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b08c      	sub	sp, #48	; 0x30
 800184c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184e:	f107 031c 	add.w	r3, r7, #28
 8001852:	2200      	movs	r2, #0
 8001854:	601a      	str	r2, [r3, #0]
 8001856:	605a      	str	r2, [r3, #4]
 8001858:	609a      	str	r2, [r3, #8]
 800185a:	60da      	str	r2, [r3, #12]
 800185c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185e:	2300      	movs	r3, #0
 8001860:	61bb      	str	r3, [r7, #24]
 8001862:	4b7c      	ldr	r3, [pc, #496]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a7b      	ldr	r2, [pc, #492]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 8001868:	f043 0310 	orr.w	r3, r3, #16
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b79      	ldr	r3, [pc, #484]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f003 0310 	and.w	r3, r3, #16
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800187a:	2300      	movs	r3, #0
 800187c:	617b      	str	r3, [r7, #20]
 800187e:	4b75      	ldr	r3, [pc, #468]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 8001880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001882:	4a74      	ldr	r2, [pc, #464]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 8001884:	f043 0304 	orr.w	r3, r3, #4
 8001888:	6313      	str	r3, [r2, #48]	; 0x30
 800188a:	4b72      	ldr	r3, [pc, #456]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 800188c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	617b      	str	r3, [r7, #20]
 8001894:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001896:	2300      	movs	r3, #0
 8001898:	613b      	str	r3, [r7, #16]
 800189a:	4b6e      	ldr	r3, [pc, #440]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 800189c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189e:	4a6d      	ldr	r2, [pc, #436]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018a4:	6313      	str	r3, [r2, #48]	; 0x30
 80018a6:	4b6b      	ldr	r3, [pc, #428]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	613b      	str	r3, [r7, #16]
 80018b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	4b67      	ldr	r3, [pc, #412]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	4a66      	ldr	r2, [pc, #408]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018bc:	f043 0301 	orr.w	r3, r3, #1
 80018c0:	6313      	str	r3, [r2, #48]	; 0x30
 80018c2:	4b64      	ldr	r3, [pc, #400]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	f003 0301 	and.w	r3, r3, #1
 80018ca:	60fb      	str	r3, [r7, #12]
 80018cc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ce:	2300      	movs	r3, #0
 80018d0:	60bb      	str	r3, [r7, #8]
 80018d2:	4b60      	ldr	r3, [pc, #384]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d6:	4a5f      	ldr	r2, [pc, #380]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018d8:	f043 0302 	orr.w	r3, r3, #2
 80018dc:	6313      	str	r3, [r2, #48]	; 0x30
 80018de:	4b5d      	ldr	r3, [pc, #372]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	60bb      	str	r3, [r7, #8]
 80018e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	607b      	str	r3, [r7, #4]
 80018ee:	4b59      	ldr	r3, [pc, #356]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f2:	4a58      	ldr	r2, [pc, #352]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018f4:	f043 0308 	orr.w	r3, r3, #8
 80018f8:	6313      	str	r3, [r2, #48]	; 0x30
 80018fa:	4b56      	ldr	r3, [pc, #344]	; (8001a54 <_ZL12MX_GPIO_Initv+0x20c>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fe:	f003 0308 	and.w	r3, r3, #8
 8001902:	607b      	str	r3, [r7, #4]
 8001904:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
 8001906:	2200      	movs	r2, #0
 8001908:	2108      	movs	r1, #8
 800190a:	4853      	ldr	r0, [pc, #332]	; (8001a58 <_ZL12MX_GPIO_Initv+0x210>)
 800190c:	f001 fe82 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS1_Pin|CS2_Pin, GPIO_PIN_RESET);
 8001910:	2200      	movs	r2, #0
 8001912:	2130      	movs	r1, #48	; 0x30
 8001914:	4851      	ldr	r0, [pc, #324]	; (8001a5c <_ZL12MX_GPIO_Initv+0x214>)
 8001916:	f001 fe7d 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS3_Pin|CS4_Pin|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800191a:	2200      	movs	r2, #0
 800191c:	f24c 0103 	movw	r1, #49155	; 0xc003
 8001920:	484f      	ldr	r0, [pc, #316]	; (8001a60 <_ZL12MX_GPIO_Initv+0x218>)
 8001922:	f001 fe77 	bl	8003614 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|GPIO_PIN_9|CSN_Pin|CE_Pin 
 8001926:	2200      	movs	r2, #0
 8001928:	f64f 7110 	movw	r1, #65296	; 0xff10
 800192c:	484d      	ldr	r0, [pc, #308]	; (8001a64 <_ZL12MX_GPIO_Initv+0x21c>)
 800192e:	f001 fe71 	bl	8003614 <HAL_GPIO_WritePin>
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001932:	2308      	movs	r3, #8
 8001934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001936:	2301      	movs	r3, #1
 8001938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800193a:	2300      	movs	r3, #0
 800193c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800193e:	2300      	movs	r3, #0
 8001940:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001942:	f107 031c 	add.w	r3, r7, #28
 8001946:	4619      	mov	r1, r3
 8001948:	4843      	ldr	r0, [pc, #268]	; (8001a58 <_ZL12MX_GPIO_Initv+0x210>)
 800194a:	f001 fcc9 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800194e:	2308      	movs	r3, #8
 8001950:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001952:	2302      	movs	r3, #2
 8001954:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001956:	2300      	movs	r3, #0
 8001958:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195a:	2300      	movs	r3, #0
 800195c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800195e:	2305      	movs	r3, #5
 8001960:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001962:	f107 031c 	add.w	r3, r7, #28
 8001966:	4619      	mov	r1, r3
 8001968:	483c      	ldr	r0, [pc, #240]	; (8001a5c <_ZL12MX_GPIO_Initv+0x214>)
 800196a:	f001 fcb9 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800196e:	2301      	movs	r3, #1
 8001970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001972:	4b3d      	ldr	r3, [pc, #244]	; (8001a68 <_ZL12MX_GPIO_Initv+0x220>)
 8001974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001976:	2300      	movs	r3, #0
 8001978:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800197a:	f107 031c 	add.w	r3, r7, #28
 800197e:	4619      	mov	r1, r3
 8001980:	483a      	ldr	r0, [pc, #232]	; (8001a6c <_ZL12MX_GPIO_Initv+0x224>)
 8001982:	f001 fcad 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS1_Pin CS2_Pin */
  GPIO_InitStruct.Pin = CS1_Pin|CS2_Pin;
 8001986:	2330      	movs	r3, #48	; 0x30
 8001988:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800198a:	2301      	movs	r3, #1
 800198c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001992:	2300      	movs	r3, #0
 8001994:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001996:	f107 031c 	add.w	r3, r7, #28
 800199a:	4619      	mov	r1, r3
 800199c:	482f      	ldr	r0, [pc, #188]	; (8001a5c <_ZL12MX_GPIO_Initv+0x214>)
 800199e:	f001 fc9f 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : CS3_Pin CS4_Pin PB14 PB15 */
  GPIO_InitStruct.Pin = CS3_Pin|CS4_Pin|GPIO_PIN_14|GPIO_PIN_15;
 80019a2:	f24c 0303 	movw	r3, #49155	; 0xc003
 80019a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a8:	2301      	movs	r3, #1
 80019aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019b0:	2300      	movs	r3, #0
 80019b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019b4:	f107 031c 	add.w	r3, r7, #28
 80019b8:	4619      	mov	r1, r3
 80019ba:	4829      	ldr	r0, [pc, #164]	; (8001a60 <_ZL12MX_GPIO_Initv+0x218>)
 80019bc:	f001 fc90 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019c0:	2304      	movs	r3, #4
 80019c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019cc:	f107 031c 	add.w	r3, r7, #28
 80019d0:	4619      	mov	r1, r3
 80019d2:	4823      	ldr	r0, [pc, #140]	; (8001a60 <_ZL12MX_GPIO_Initv+0x218>)
 80019d4:	f001 fc84 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 80019d8:	f44f 63f0 	mov.w	r3, #1920	; 0x780
 80019dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019de:	2300      	movs	r3, #0
 80019e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e6:	f107 031c 	add.w	r3, r7, #28
 80019ea:	4619      	mov	r1, r3
 80019ec:	481a      	ldr	r0, [pc, #104]	; (8001a58 <_ZL12MX_GPIO_Initv+0x210>)
 80019ee:	f001 fc77 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80019f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001a04:	2305      	movs	r3, #5
 8001a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001a08:	f107 031c 	add.w	r3, r7, #28
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	4814      	ldr	r0, [pc, #80]	; (8001a60 <_ZL12MX_GPIO_Initv+0x218>)
 8001a10:	f001 fc66 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 CSN_Pin CE_Pin 
                           LD4_Pin LD3_Pin LD5_Pin LD6_Pin 
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|CSN_Pin|CE_Pin 
 8001a14:	f64f 7310 	movw	r3, #65296	; 0xff10
 8001a18:	61fb      	str	r3, [r7, #28]
                          |LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin 
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	480d      	ldr	r0, [pc, #52]	; (8001a64 <_ZL12MX_GPIO_Initv+0x21c>)
 8001a2e:	f001 fc57 	bl	80032e0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001a32:	2302      	movs	r3, #2
 8001a34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a36:	4b0c      	ldr	r3, [pc, #48]	; (8001a68 <_ZL12MX_GPIO_Initv+0x220>)
 8001a38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001a3e:	f107 031c 	add.w	r3, r7, #28
 8001a42:	4619      	mov	r1, r3
 8001a44:	4804      	ldr	r0, [pc, #16]	; (8001a58 <_ZL12MX_GPIO_Initv+0x210>)
 8001a46:	f001 fc4b 	bl	80032e0 <HAL_GPIO_Init>

}
 8001a4a:	bf00      	nop
 8001a4c:	3730      	adds	r7, #48	; 0x30
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	40023800 	.word	0x40023800
 8001a58:	40021000 	.word	0x40021000
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40020400 	.word	0x40020400
 8001a64:	40020c00 	.word	0x40020c00
 8001a68:	10120000 	.word	0x10120000
 8001a6c:	40020000 	.word	0x40020000

08001a70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <_Z41__static_initialization_and_destruction_0ii>:
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b084      	sub	sp, #16
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
 8001a88:	6039      	str	r1, [r7, #0]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d118      	bne.n	8001ac2 <_Z41__static_initialization_and_destruction_0ii+0x42>
 8001a90:	683b      	ldr	r3, [r7, #0]
 8001a92:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d113      	bne.n	8001ac2 <_Z41__static_initialization_and_destruction_0ii+0x42>
string s ="Welcome to Project Galwan";
 8001a9a:	f107 030c 	add.w	r3, r7, #12
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f007 fdae 	bl	8009600 <_ZNSaIcEC1Ev>
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	490f      	ldr	r1, [pc, #60]	; (8001ae8 <_Z41__static_initialization_and_destruction_0ii+0x68>)
 8001aac:	480f      	ldr	r0, [pc, #60]	; (8001aec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001aae:	f007 ff35 	bl	800991c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f007 fda3 	bl	8009602 <_ZNSaIcED1Ev>
OLED Obj_OLED_01;
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001abe:	f7fe fd0b 	bl	80004d8 <_ZN4OLEDC1Ev>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d10a      	bne.n	8001ade <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d105      	bne.n	8001ade <_Z41__static_initialization_and_destruction_0ii+0x5e>
 8001ad2:	4807      	ldr	r0, [pc, #28]	; (8001af0 <_Z41__static_initialization_and_destruction_0ii+0x70>)
 8001ad4:	f7fe fd1a 	bl	800050c <_ZN4OLEDD1Ev>
 8001ad8:	4804      	ldr	r0, [pc, #16]	; (8001aec <_Z41__static_initialization_and_destruction_0ii+0x6c>)
 8001ada:	f007 fe2f 	bl	800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8001ade:	bf00      	nop
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	08009cb8 	.word	0x08009cb8
 8001aec:	2000009c 	.word	0x2000009c
 8001af0:	2000047c 	.word	0x2000047c

08001af4 <_GLOBAL__sub_I_x>:
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001afc:	2001      	movs	r0, #1
 8001afe:	f7ff ffbf 	bl	8001a80 <_Z41__static_initialization_and_destruction_0ii>
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <_GLOBAL__sub_D_x>:
 8001b04:	b580      	push	{r7, lr}
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b0c:	2000      	movs	r0, #0
 8001b0e:	f7ff ffb7 	bl	8001a80 <_Z41__static_initialization_and_destruction_0ii>
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	607b      	str	r3, [r7, #4]
 8001b1e:	4b10      	ldr	r3, [pc, #64]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b22:	4a0f      	ldr	r2, [pc, #60]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b24:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b28:	6453      	str	r3, [r2, #68]	; 0x44
 8001b2a:	4b0d      	ldr	r3, [pc, #52]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b32:	607b      	str	r3, [r7, #4]
 8001b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b36:	2300      	movs	r3, #0
 8001b38:	603b      	str	r3, [r7, #0]
 8001b3a:	4b09      	ldr	r3, [pc, #36]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a08      	ldr	r2, [pc, #32]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b06      	ldr	r3, [pc, #24]	; (8001b60 <HAL_MspInit+0x4c>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	603b      	str	r3, [r7, #0]
 8001b50:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001b52:	2007      	movs	r0, #7
 8001b54:	f001 f86a 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b58:	bf00      	nop
 8001b5a:	3708      	adds	r7, #8
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	bd80      	pop	{r7, pc}
 8001b60:	40023800 	.word	0x40023800

08001b64 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	b08a      	sub	sp, #40	; 0x28
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	2200      	movs	r2, #0
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	605a      	str	r2, [r3, #4]
 8001b76:	609a      	str	r2, [r3, #8]
 8001b78:	60da      	str	r2, [r3, #12]
 8001b7a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a2e      	ldr	r2, [pc, #184]	; (8001c3c <HAL_ADC_MspInit+0xd8>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d156      	bne.n	8001c34 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001b86:	2300      	movs	r3, #0
 8001b88:	613b      	str	r3, [r7, #16]
 8001b8a:	4b2d      	ldr	r3, [pc, #180]	; (8001c40 <HAL_ADC_MspInit+0xdc>)
 8001b8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b8e:	4a2c      	ldr	r2, [pc, #176]	; (8001c40 <HAL_ADC_MspInit+0xdc>)
 8001b90:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b94:	6453      	str	r3, [r2, #68]	; 0x44
 8001b96:	4b2a      	ldr	r3, [pc, #168]	; (8001c40 <HAL_ADC_MspInit+0xdc>)
 8001b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b9a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b9e:	613b      	str	r3, [r7, #16]
 8001ba0:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	60fb      	str	r3, [r7, #12]
 8001ba6:	4b26      	ldr	r3, [pc, #152]	; (8001c40 <HAL_ADC_MspInit+0xdc>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	4a25      	ldr	r2, [pc, #148]	; (8001c40 <HAL_ADC_MspInit+0xdc>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bb2:	4b23      	ldr	r3, [pc, #140]	; (8001c40 <HAL_ADC_MspInit+0xdc>)
 8001bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb6:	f003 0304 	and.w	r3, r3, #4
 8001bba:	60fb      	str	r3, [r7, #12]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PC0     ------> ADC1_IN10
    PC1     ------> ADC1_IN11
    PC2     ------> ADC1_IN12 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001bbe:	2307      	movs	r3, #7
 8001bc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bca:	f107 0314 	add.w	r3, r7, #20
 8001bce:	4619      	mov	r1, r3
 8001bd0:	481c      	ldr	r0, [pc, #112]	; (8001c44 <HAL_ADC_MspInit+0xe0>)
 8001bd2:	f001 fb85 	bl	80032e0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001bd8:	4a1c      	ldr	r2, [pc, #112]	; (8001c4c <HAL_ADC_MspInit+0xe8>)
 8001bda:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001bdc:	4b1a      	ldr	r3, [pc, #104]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001be2:	4b19      	ldr	r3, [pc, #100]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001be8:	4b17      	ldr	r3, [pc, #92]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001bea:	2200      	movs	r2, #0
 8001bec:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001bee:	4b16      	ldr	r3, [pc, #88]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001bf0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bf4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001bf6:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001bf8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001bfc:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001bfe:	4b12      	ldr	r3, [pc, #72]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c04:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8001c06:	4b10      	ldr	r3, [pc, #64]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c08:	2200      	movs	r2, #0
 8001c0a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c0e:	2200      	movs	r2, #0
 8001c10:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c12:	4b0d      	ldr	r3, [pc, #52]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c14:	2200      	movs	r2, #0
 8001c16:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001c18:	480b      	ldr	r0, [pc, #44]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c1a:	f001 f849 	bl	8002cb0 <HAL_DMA_Init>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8001c24:	f7ff ff24 	bl	8001a70 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c2c:	639a      	str	r2, [r3, #56]	; 0x38
 8001c2e:	4a06      	ldr	r2, [pc, #24]	; (8001c48 <HAL_ADC_MspInit+0xe4>)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001c34:	bf00      	nop
 8001c36:	3728      	adds	r7, #40	; 0x28
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40012000 	.word	0x40012000
 8001c40:	40023800 	.word	0x40023800
 8001c44:	40020800 	.word	0x40020800
 8001c48:	20000108 	.word	0x20000108
 8001c4c:	40026410 	.word	0x40026410

08001c50 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b08a      	sub	sp, #40	; 0x28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c58:	f107 0314 	add.w	r3, r7, #20
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	4a1d      	ldr	r2, [pc, #116]	; (8001ce4 <HAL_I2C_MspInit+0x94>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d134      	bne.n	8001cdc <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
 8001c76:	4b1c      	ldr	r3, [pc, #112]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001c7c:	f043 0302 	orr.w	r3, r3, #2
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b19      	ldr	r3, [pc, #100]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0302 	and.w	r3, r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001c8e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001c92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c94:	2312      	movs	r3, #18
 8001c96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001ca0:	2304      	movs	r3, #4
 8001ca2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca4:	f107 0314 	add.w	r3, r7, #20
 8001ca8:	4619      	mov	r1, r3
 8001caa:	4810      	ldr	r0, [pc, #64]	; (8001cec <HAL_I2C_MspInit+0x9c>)
 8001cac:	f001 fb18 	bl	80032e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001cb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cb8:	4a0b      	ldr	r2, [pc, #44]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001cba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001cbe:	6413      	str	r3, [r2, #64]	; 0x40
 8001cc0:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <HAL_I2C_MspInit+0x98>)
 8001cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cc8:	60fb      	str	r3, [r7, #12]
 8001cca:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001ccc:	2200      	movs	r2, #0
 8001cce:	2100      	movs	r1, #0
 8001cd0:	201f      	movs	r0, #31
 8001cd2:	f000 ffb6 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001cd6:	201f      	movs	r0, #31
 8001cd8:	f000 ffcf 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001cdc:	bf00      	nop
 8001cde:	3728      	adds	r7, #40	; 0x28
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40005400 	.word	0x40005400
 8001ce8:	40023800 	.word	0x40023800
 8001cec:	40020400 	.word	0x40020400

08001cf0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b08a      	sub	sp, #40	; 0x28
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cf8:	f107 0314 	add.w	r3, r7, #20
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI3)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a28      	ldr	r2, [pc, #160]	; (8001db0 <HAL_I2S_MspInit+0xc0>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d14a      	bne.n	8001da8 <HAL_I2S_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b27      	ldr	r3, [pc, #156]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	4a26      	ldr	r2, [pc, #152]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d20:	6413      	str	r3, [r2, #64]	; 0x40
 8001d22:	4b24      	ldr	r3, [pc, #144]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d26:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b20      	ldr	r3, [pc, #128]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a1f      	ldr	r2, [pc, #124]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b1d      	ldr	r3, [pc, #116]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0301 	and.w	r3, r3, #1
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b19      	ldr	r3, [pc, #100]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a18      	ldr	r2, [pc, #96]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d54:	f043 0304 	orr.w	r3, r3, #4
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b16      	ldr	r3, [pc, #88]	; (8001db4 <HAL_I2S_MspInit+0xc4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0304 	and.w	r3, r3, #4
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD 
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001d66:	2310      	movs	r3, #16
 8001d68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6a:	2302      	movs	r3, #2
 8001d6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d72:	2300      	movs	r3, #0
 8001d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d76:	2306      	movs	r3, #6
 8001d78:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001d7a:	f107 0314 	add.w	r3, r7, #20
 8001d7e:	4619      	mov	r1, r3
 8001d80:	480d      	ldr	r0, [pc, #52]	; (8001db8 <HAL_I2S_MspInit+0xc8>)
 8001d82:	f001 faad 	bl	80032e0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001d86:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d8c:	2302      	movs	r3, #2
 8001d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d94:	2300      	movs	r3, #0
 8001d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001d98:	2306      	movs	r3, #6
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001d9c:	f107 0314 	add.w	r3, r7, #20
 8001da0:	4619      	mov	r1, r3
 8001da2:	4806      	ldr	r0, [pc, #24]	; (8001dbc <HAL_I2S_MspInit+0xcc>)
 8001da4:	f001 fa9c 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001da8:	bf00      	nop
 8001daa:	3728      	adds	r7, #40	; 0x28
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40003c00 	.word	0x40003c00
 8001db4:	40023800 	.word	0x40023800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020800 	.word	0x40020800

08001dc0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b082      	sub	sp, #8
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a08      	ldr	r2, [pc, #32]	; (8001df0 <HAL_RTC_MspInit+0x30>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d10a      	bne.n	8001de8 <HAL_RTC_MspInit+0x28>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001dd2:	4b08      	ldr	r3, [pc, #32]	; (8001df4 <HAL_RTC_MspInit+0x34>)
 8001dd4:	2201      	movs	r2, #1
 8001dd6:	601a      	str	r2, [r3, #0]
    /* RTC interrupt Init */
    HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0, 0);
 8001dd8:	2200      	movs	r2, #0
 8001dda:	2100      	movs	r1, #0
 8001ddc:	2029      	movs	r0, #41	; 0x29
 8001dde:	f000 ff30 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
 8001de2:	2029      	movs	r0, #41	; 0x29
 8001de4:	f000 ff49 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001de8:	bf00      	nop
 8001dea:	3708      	adds	r7, #8
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	40002800 	.word	0x40002800
 8001df4:	42470e3c 	.word	0x42470e3c

08001df8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b08a      	sub	sp, #40	; 0x28
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e00:	f107 0314 	add.w	r3, r7, #20
 8001e04:	2200      	movs	r2, #0
 8001e06:	601a      	str	r2, [r3, #0]
 8001e08:	605a      	str	r2, [r3, #4]
 8001e0a:	609a      	str	r2, [r3, #8]
 8001e0c:	60da      	str	r2, [r3, #12]
 8001e0e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a1d      	ldr	r2, [pc, #116]	; (8001e8c <HAL_SPI_MspInit+0x94>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d133      	bne.n	8001e82 <HAL_SPI_MspInit+0x8a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	613b      	str	r3, [r7, #16]
 8001e1e:	4b1c      	ldr	r3, [pc, #112]	; (8001e90 <HAL_SPI_MspInit+0x98>)
 8001e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e22:	4a1b      	ldr	r2, [pc, #108]	; (8001e90 <HAL_SPI_MspInit+0x98>)
 8001e24:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001e28:	6453      	str	r3, [r2, #68]	; 0x44
 8001e2a:	4b19      	ldr	r3, [pc, #100]	; (8001e90 <HAL_SPI_MspInit+0x98>)
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e32:	613b      	str	r3, [r7, #16]
 8001e34:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	60fb      	str	r3, [r7, #12]
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_SPI_MspInit+0x98>)
 8001e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_SPI_MspInit+0x98>)
 8001e40:	f043 0301 	orr.w	r3, r3, #1
 8001e44:	6313      	str	r3, [r2, #48]	; 0x30
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_SPI_MspInit+0x98>)
 8001e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4a:	f003 0301 	and.w	r3, r3, #1
 8001e4e:	60fb      	str	r3, [r7, #12]
 8001e50:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001e52:	23e0      	movs	r3, #224	; 0xe0
 8001e54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e56:	2302      	movs	r3, #2
 8001e58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001e62:	2305      	movs	r3, #5
 8001e64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e66:	f107 0314 	add.w	r3, r7, #20
 8001e6a:	4619      	mov	r1, r3
 8001e6c:	4809      	ldr	r0, [pc, #36]	; (8001e94 <HAL_SPI_MspInit+0x9c>)
 8001e6e:	f001 fa37 	bl	80032e0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001e72:	2200      	movs	r2, #0
 8001e74:	2100      	movs	r1, #0
 8001e76:	2023      	movs	r0, #35	; 0x23
 8001e78:	f000 fee3 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001e7c:	2023      	movs	r0, #35	; 0x23
 8001e7e:	f000 fefc 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001e82:	bf00      	nop
 8001e84:	3728      	adds	r7, #40	; 0x28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40013000 	.word	0x40013000
 8001e90:	40023800 	.word	0x40023800
 8001e94:	40020000 	.word	0x40020000

08001e98 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b08c      	sub	sp, #48	; 0x30
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ea0:	f107 031c 	add.w	r3, r7, #28
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	605a      	str	r2, [r3, #4]
 8001eaa:	609a      	str	r2, [r3, #8]
 8001eac:	60da      	str	r2, [r3, #12]
 8001eae:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a35      	ldr	r2, [pc, #212]	; (8001f8c <HAL_TIM_Base_MspInit+0xf4>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d135      	bne.n	8001f26 <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	61bb      	str	r3, [r7, #24]
 8001ebe:	4b34      	ldr	r3, [pc, #208]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ec2:	4a33      	ldr	r2, [pc, #204]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001ec4:	f043 0301 	orr.w	r3, r3, #1
 8001ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8001eca:	4b31      	ldr	r3, [pc, #196]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ece:	f003 0301 	and.w	r3, r3, #1
 8001ed2:	61bb      	str	r3, [r7, #24]
 8001ed4:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	617b      	str	r3, [r7, #20]
 8001eda:	4b2d      	ldr	r3, [pc, #180]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ede:	4a2c      	ldr	r2, [pc, #176]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee6:	4b2a      	ldr	r3, [pc, #168]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eea:	f003 0301 	and.w	r3, r3, #1
 8001eee:	617b      	str	r3, [r7, #20]
 8001ef0:	697b      	ldr	r3, [r7, #20]
    /**TIM1 GPIO Configuration    
    PA8     ------> TIM1_CH1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001ef2:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ef6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef8:	2302      	movs	r3, #2
 8001efa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001efc:	2300      	movs	r3, #0
 8001efe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f00:	2300      	movs	r3, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f04:	2301      	movs	r3, #1
 8001f06:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f08:	f107 031c 	add.w	r3, r7, #28
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	4821      	ldr	r0, [pc, #132]	; (8001f94 <HAL_TIM_Base_MspInit+0xfc>)
 8001f10:	f001 f9e6 	bl	80032e0 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001f14:	2200      	movs	r2, #0
 8001f16:	2100      	movs	r1, #0
 8001f18:	2018      	movs	r0, #24
 8001f1a:	f000 fe92 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001f1e:	2018      	movs	r0, #24
 8001f20:	f000 feab 	bl	8002c7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f24:	e02e      	b.n	8001f84 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM2)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f2e:	d10e      	bne.n	8001f4e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f30:	2300      	movs	r3, #0
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	4b16      	ldr	r3, [pc, #88]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f38:	4a15      	ldr	r2, [pc, #84]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001f3a:	f043 0301 	orr.w	r3, r3, #1
 8001f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001f40:	4b13      	ldr	r3, [pc, #76]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f44:	f003 0301 	and.w	r3, r3, #1
 8001f48:	613b      	str	r3, [r7, #16]
 8001f4a:	693b      	ldr	r3, [r7, #16]
}
 8001f4c:	e01a      	b.n	8001f84 <HAL_TIM_Base_MspInit+0xec>
  else if(htim_base->Instance==TIM3)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a11      	ldr	r2, [pc, #68]	; (8001f98 <HAL_TIM_Base_MspInit+0x100>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d115      	bne.n	8001f84 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f58:	2300      	movs	r3, #0
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	4b0c      	ldr	r3, [pc, #48]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f60:	4a0b      	ldr	r2, [pc, #44]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001f62:	f043 0302 	orr.w	r3, r3, #2
 8001f66:	6413      	str	r3, [r2, #64]	; 0x40
 8001f68:	4b09      	ldr	r3, [pc, #36]	; (8001f90 <HAL_TIM_Base_MspInit+0xf8>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	f003 0302 	and.w	r3, r3, #2
 8001f70:	60fb      	str	r3, [r7, #12]
 8001f72:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f74:	2200      	movs	r2, #0
 8001f76:	2100      	movs	r1, #0
 8001f78:	201d      	movs	r0, #29
 8001f7a:	f000 fe62 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001f7e:	201d      	movs	r0, #29
 8001f80:	f000 fe7b 	bl	8002c7a <HAL_NVIC_EnableIRQ>
}
 8001f84:	bf00      	nop
 8001f86:	3730      	adds	r7, #48	; 0x30
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	bd80      	pop	{r7, pc}
 8001f8c:	40010000 	.word	0x40010000
 8001f90:	40023800 	.word	0x40023800
 8001f94:	40020000 	.word	0x40020000
 8001f98:	40000400 	.word	0x40000400

08001f9c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b08a      	sub	sp, #40	; 0x28
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fa4:	f107 0314 	add.w	r3, r7, #20
 8001fa8:	2200      	movs	r2, #0
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	605a      	str	r2, [r3, #4]
 8001fae:	609a      	str	r2, [r3, #8]
 8001fb0:	60da      	str	r2, [r3, #12]
 8001fb2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4a33      	ldr	r2, [pc, #204]	; (8002088 <HAL_TIM_MspPostInit+0xec>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d11f      	bne.n	8001ffe <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	613b      	str	r3, [r7, #16]
 8001fc2:	4b32      	ldr	r3, [pc, #200]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	4a31      	ldr	r2, [pc, #196]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 8001fc8:	f043 0310 	orr.w	r3, r3, #16
 8001fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fce:	4b2f      	ldr	r3, [pc, #188]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 8001fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd2:	f003 0310 	and.w	r3, r3, #16
 8001fd6:	613b      	str	r3, [r7, #16]
 8001fd8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration    
    PE14     ------> TIM1_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001fda:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fe0:	2302      	movs	r3, #2
 8001fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe4:	2300      	movs	r3, #0
 8001fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001fec:	2301      	movs	r3, #1
 8001fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ff0:	f107 0314 	add.w	r3, r7, #20
 8001ff4:	4619      	mov	r1, r3
 8001ff6:	4826      	ldr	r0, [pc, #152]	; (8002090 <HAL_TIM_MspPostInit+0xf4>)
 8001ff8:	f001 f972 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001ffc:	e040      	b.n	8002080 <HAL_TIM_MspPostInit+0xe4>
  else if(htim->Instance==TIM3)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	4a24      	ldr	r2, [pc, #144]	; (8002094 <HAL_TIM_MspPostInit+0xf8>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d13b      	bne.n	8002080 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]
 800200c:	4b1f      	ldr	r3, [pc, #124]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4a1e      	ldr	r2, [pc, #120]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 8002012:	f043 0304 	orr.w	r3, r3, #4
 8002016:	6313      	str	r3, [r2, #48]	; 0x30
 8002018:	4b1c      	ldr	r3, [pc, #112]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 800201a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201c:	f003 0304 	and.w	r3, r3, #4
 8002020:	60fb      	str	r3, [r7, #12]
 8002022:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002024:	2300      	movs	r3, #0
 8002026:	60bb      	str	r3, [r7, #8]
 8002028:	4b18      	ldr	r3, [pc, #96]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202c:	4a17      	ldr	r2, [pc, #92]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 800202e:	f043 0302 	orr.w	r3, r3, #2
 8002032:	6313      	str	r3, [r2, #48]	; 0x30
 8002034:	4b15      	ldr	r3, [pc, #84]	; (800208c <HAL_TIM_MspPostInit+0xf0>)
 8002036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002040:	2340      	movs	r3, #64	; 0x40
 8002042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002044:	2302      	movs	r3, #2
 8002046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002048:	2300      	movs	r3, #0
 800204a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800204c:	2300      	movs	r3, #0
 800204e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002050:	2302      	movs	r3, #2
 8002052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	4619      	mov	r1, r3
 800205a:	480f      	ldr	r0, [pc, #60]	; (8002098 <HAL_TIM_MspPostInit+0xfc>)
 800205c:	f001 f940 	bl	80032e0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002060:	2320      	movs	r3, #32
 8002062:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002064:	2302      	movs	r3, #2
 8002066:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002068:	2300      	movs	r3, #0
 800206a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800206c:	2300      	movs	r3, #0
 800206e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002070:	2302      	movs	r3, #2
 8002072:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002074:	f107 0314 	add.w	r3, r7, #20
 8002078:	4619      	mov	r1, r3
 800207a:	4808      	ldr	r0, [pc, #32]	; (800209c <HAL_TIM_MspPostInit+0x100>)
 800207c:	f001 f930 	bl	80032e0 <HAL_GPIO_Init>
}
 8002080:	bf00      	nop
 8002082:	3728      	adds	r7, #40	; 0x28
 8002084:	46bd      	mov	sp, r7
 8002086:	bd80      	pop	{r7, pc}
 8002088:	40010000 	.word	0x40010000
 800208c:	40023800 	.word	0x40023800
 8002090:	40021000 	.word	0x40021000
 8002094:	40000400 	.word	0x40000400
 8002098:	40020800 	.word	0x40020800
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b08c      	sub	sp, #48	; 0x30
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a8:	f107 031c 	add.w	r3, r7, #28
 80020ac:	2200      	movs	r2, #0
 80020ae:	601a      	str	r2, [r3, #0]
 80020b0:	605a      	str	r2, [r3, #4]
 80020b2:	609a      	str	r2, [r3, #8]
 80020b4:	60da      	str	r2, [r3, #12]
 80020b6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a65      	ldr	r2, [pc, #404]	; (8002254 <HAL_UART_MspInit+0x1b4>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d12d      	bne.n	800211e <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80020c2:	2300      	movs	r3, #0
 80020c4:	61bb      	str	r3, [r7, #24]
 80020c6:	4b64      	ldr	r3, [pc, #400]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 80020c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ca:	4a63      	ldr	r2, [pc, #396]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 80020cc:	f043 0310 	orr.w	r3, r3, #16
 80020d0:	6453      	str	r3, [r2, #68]	; 0x44
 80020d2:	4b61      	ldr	r3, [pc, #388]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	61bb      	str	r3, [r7, #24]
 80020dc:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
 80020e2:	4b5d      	ldr	r3, [pc, #372]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	4a5c      	ldr	r2, [pc, #368]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 80020e8:	f043 0301 	orr.w	r3, r3, #1
 80020ec:	6313      	str	r3, [r2, #48]	; 0x30
 80020ee:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	f003 0301 	and.w	r3, r3, #1
 80020f6:	617b      	str	r3, [r7, #20]
 80020f8:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80020fa:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80020fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002100:	2302      	movs	r3, #2
 8002102:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002104:	2300      	movs	r3, #0
 8002106:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002108:	2303      	movs	r3, #3
 800210a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800210c:	2307      	movs	r3, #7
 800210e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002110:	f107 031c 	add.w	r3, r7, #28
 8002114:	4619      	mov	r1, r3
 8002116:	4851      	ldr	r0, [pc, #324]	; (800225c <HAL_UART_MspInit+0x1bc>)
 8002118:	f001 f8e2 	bl	80032e0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800211c:	e095      	b.n	800224a <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART2)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a4f      	ldr	r2, [pc, #316]	; (8002260 <HAL_UART_MspInit+0x1c0>)
 8002124:	4293      	cmp	r3, r2
 8002126:	f040 8090 	bne.w	800224a <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART2_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b4a      	ldr	r3, [pc, #296]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 8002130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002132:	4a49      	ldr	r2, [pc, #292]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 8002134:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002138:	6413      	str	r3, [r2, #64]	; 0x40
 800213a:	4b47      	ldr	r3, [pc, #284]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 800213c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	60fb      	str	r3, [r7, #12]
 800214a:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214e:	4a42      	ldr	r2, [pc, #264]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 8002150:	f043 0301 	orr.w	r3, r3, #1
 8002154:	6313      	str	r3, [r2, #48]	; 0x30
 8002156:	4b40      	ldr	r3, [pc, #256]	; (8002258 <HAL_UART_MspInit+0x1b8>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002162:	230c      	movs	r3, #12
 8002164:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002166:	2302      	movs	r3, #2
 8002168:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216e:	2303      	movs	r3, #3
 8002170:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002172:	2307      	movs	r3, #7
 8002174:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 031c 	add.w	r3, r7, #28
 800217a:	4619      	mov	r1, r3
 800217c:	4837      	ldr	r0, [pc, #220]	; (800225c <HAL_UART_MspInit+0x1bc>)
 800217e:	f001 f8af 	bl	80032e0 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002182:	4b38      	ldr	r3, [pc, #224]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 8002184:	4a38      	ldr	r2, [pc, #224]	; (8002268 <HAL_UART_MspInit+0x1c8>)
 8002186:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002188:	4b36      	ldr	r3, [pc, #216]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 800218a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800218e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002190:	4b34      	ldr	r3, [pc, #208]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 8002192:	2200      	movs	r2, #0
 8002194:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 8002198:	2200      	movs	r2, #0
 800219a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800219c:	4b31      	ldr	r3, [pc, #196]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 800219e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021a2:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80021aa:	4b2e      	ldr	r3, [pc, #184]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021ac:	2200      	movs	r2, #0
 80021ae:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 80021b0:	4b2c      	ldr	r3, [pc, #176]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80021b6:	4b2b      	ldr	r3, [pc, #172]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80021bc:	4b29      	ldr	r3, [pc, #164]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021be:	2200      	movs	r2, #0
 80021c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80021c2:	4828      	ldr	r0, [pc, #160]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021c4:	f000 fd74 	bl	8002cb0 <HAL_DMA_Init>
 80021c8:	4603      	mov	r3, r0
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d001      	beq.n	80021d2 <HAL_UART_MspInit+0x132>
      Error_Handler();
 80021ce:	f7ff fc4f 	bl	8001a70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a23      	ldr	r2, [pc, #140]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021d6:	635a      	str	r2, [r3, #52]	; 0x34
 80021d8:	4a22      	ldr	r2, [pc, #136]	; (8002264 <HAL_UART_MspInit+0x1c4>)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_UART_MspInit+0x1cc>)
 80021e0:	4a23      	ldr	r2, [pc, #140]	; (8002270 <HAL_UART_MspInit+0x1d0>)
 80021e2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80021e4:	4b21      	ldr	r3, [pc, #132]	; (800226c <HAL_UART_MspInit+0x1cc>)
 80021e6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80021ea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80021ec:	4b1f      	ldr	r3, [pc, #124]	; (800226c <HAL_UART_MspInit+0x1cc>)
 80021ee:	2240      	movs	r2, #64	; 0x40
 80021f0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80021f2:	4b1e      	ldr	r3, [pc, #120]	; (800226c <HAL_UART_MspInit+0x1cc>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80021f8:	4b1c      	ldr	r3, [pc, #112]	; (800226c <HAL_UART_MspInit+0x1cc>)
 80021fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80021fe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002200:	4b1a      	ldr	r3, [pc, #104]	; (800226c <HAL_UART_MspInit+0x1cc>)
 8002202:	2200      	movs	r2, #0
 8002204:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002206:	4b19      	ldr	r3, [pc, #100]	; (800226c <HAL_UART_MspInit+0x1cc>)
 8002208:	2200      	movs	r2, #0
 800220a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800220c:	4b17      	ldr	r3, [pc, #92]	; (800226c <HAL_UART_MspInit+0x1cc>)
 800220e:	2200      	movs	r2, #0
 8002210:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002212:	4b16      	ldr	r3, [pc, #88]	; (800226c <HAL_UART_MspInit+0x1cc>)
 8002214:	2200      	movs	r2, #0
 8002216:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002218:	4b14      	ldr	r3, [pc, #80]	; (800226c <HAL_UART_MspInit+0x1cc>)
 800221a:	2200      	movs	r2, #0
 800221c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800221e:	4813      	ldr	r0, [pc, #76]	; (800226c <HAL_UART_MspInit+0x1cc>)
 8002220:	f000 fd46 	bl	8002cb0 <HAL_DMA_Init>
 8002224:	4603      	mov	r3, r0
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <HAL_UART_MspInit+0x18e>
      Error_Handler();
 800222a:	f7ff fc21 	bl	8001a70 <Error_Handler>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a0e      	ldr	r2, [pc, #56]	; (800226c <HAL_UART_MspInit+0x1cc>)
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
 8002234:	4a0d      	ldr	r2, [pc, #52]	; (800226c <HAL_UART_MspInit+0x1cc>)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800223a:	2200      	movs	r2, #0
 800223c:	2100      	movs	r1, #0
 800223e:	2026      	movs	r0, #38	; 0x26
 8002240:	f000 fcff 	bl	8002c42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002244:	2026      	movs	r0, #38	; 0x26
 8002246:	f000 fd18 	bl	8002c7a <HAL_NVIC_EnableIRQ>
}
 800224a:	bf00      	nop
 800224c:	3730      	adds	r7, #48	; 0x30
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40011000 	.word	0x40011000
 8002258:	40023800 	.word	0x40023800
 800225c:	40020000 	.word	0x40020000
 8002260:	40004400 	.word	0x40004400
 8002264:	200003bc 	.word	0x200003bc
 8002268:	40026088 	.word	0x40026088
 800226c:	2000041c 	.word	0x2000041c
 8002270:	400260a0 	.word	0x400260a0

08002274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8002278:	f004 fb74 	bl	8006964 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800227c:	bf00      	nop
 800227e:	bd80      	pop	{r7, pc}

08002280 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002284:	e7fe      	b.n	8002284 <HardFault_Handler+0x4>

08002286 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002286:	b480      	push	{r7}
 8002288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800228a:	e7fe      	b.n	800228a <MemManage_Handler+0x4>

0800228c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002290:	e7fe      	b.n	8002290 <BusFault_Handler+0x4>

08002292 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002296:	e7fe      	b.n	8002296 <UsageFault_Handler+0x4>

08002298 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr

080022a6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022a6:	b480      	push	{r7}
 80022a8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022aa:	bf00      	nop
 80022ac:	46bd      	mov	sp, r7
 80022ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b2:	4770      	bx	lr

080022b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022b4:	b480      	push	{r7}
 80022b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022c2:	b580      	push	{r7, lr}
 80022c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022c6:	f000 f93d 	bl	8002544 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */



  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <DMA1_Stream5_IRQHandler+0x10>)
 80022d6:	f000 fdbb 	bl	8002e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */



  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	200003bc 	.word	0x200003bc

080022e4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0




  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <DMA1_Stream6_IRQHandler+0x10>)
 80022ea:	f000 fdb1 	bl	8002e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */



  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000041c 	.word	0x2000041c

080022f8 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80022fe:	f005 fad1 	bl	80078a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	2000027c 	.word	0x2000027c

0800230c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002310:	4802      	ldr	r0, [pc, #8]	; (800231c <TIM3_IRQHandler+0x10>)
 8002312:	f005 fac7 	bl	80078a4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002316:	bf00      	nop
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	200002fc 	.word	0x200002fc

08002320 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002324:	4802      	ldr	r0, [pc, #8]	; (8002330 <I2C1_EV_IRQHandler+0x10>)
 8002326:	f001 fd0d 	bl	8003d44 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800232a:	bf00      	nop
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	20000168 	.word	0x20000168

08002334 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8002338:	4802      	ldr	r0, [pc, #8]	; (8002344 <SPI1_IRQHandler+0x10>)
 800233a:	f005 f8cb 	bl	80074d4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 800233e:	bf00      	nop
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	20000224 	.word	0x20000224

08002348 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800234c:	4802      	ldr	r0, [pc, #8]	; (8002358 <USART2_IRQHandler+0x10>)
 800234e:	f006 fb97 	bl	8008a80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	2000037c 	.word	0x2000037c

0800235c <RTC_Alarm_IRQHandler>:

/**
  * @brief This function handles RTC alarms A and B interrupt through EXTI line 17.
  */
void RTC_Alarm_IRQHandler(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN RTC_Alarm_IRQn 0 */

  /* USER CODE END RTC_Alarm_IRQn 0 */
  HAL_RTC_AlarmIRQHandler(&hrtc);
 8002360:	4802      	ldr	r0, [pc, #8]	; (800236c <RTC_Alarm_IRQHandler+0x10>)
 8002362:	f004 ff87 	bl	8007274 <HAL_RTC_AlarmIRQHandler>
  /* USER CODE BEGIN RTC_Alarm_IRQn 1 */

  /* USER CODE END RTC_Alarm_IRQn 1 */
}
 8002366:	bf00      	nop
 8002368:	bd80      	pop	{r7, pc}
 800236a:	bf00      	nop
 800236c:	20000204 	.word	0x20000204

08002370 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002374:	4802      	ldr	r0, [pc, #8]	; (8002380 <DMA2_Stream0_IRQHandler+0x10>)
 8002376:	f000 fd6b 	bl	8002e50 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800237a:	bf00      	nop
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	20000108 	.word	0x20000108

08002384 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
	return 1;
 8002388:	2301      	movs	r3, #1
}
 800238a:	4618      	mov	r0, r3
 800238c:	46bd      	mov	sp, r7
 800238e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002392:	4770      	bx	lr

08002394 <_kill>:

int _kill(int pid, int sig)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800239e:	f007 fafb 	bl	8009998 <__errno>
 80023a2:	4602      	mov	r2, r0
 80023a4:	2316      	movs	r3, #22
 80023a6:	6013      	str	r3, [r2, #0]
	return -1;
 80023a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3708      	adds	r7, #8
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <_exit>:

void _exit (int status)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b082      	sub	sp, #8
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80023bc:	f04f 31ff 	mov.w	r1, #4294967295
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff ffe7 	bl	8002394 <_kill>
	while (1) {}		/* Make sure we hang here */
 80023c6:	e7fe      	b.n	80023c6 <_exit+0x12>

080023c8 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80023d0:	4b11      	ldr	r3, [pc, #68]	; (8002418 <_sbrk+0x50>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d102      	bne.n	80023de <_sbrk+0x16>
		heap_end = &end;
 80023d8:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <_sbrk+0x50>)
 80023da:	4a10      	ldr	r2, [pc, #64]	; (800241c <_sbrk+0x54>)
 80023dc:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80023de:	4b0e      	ldr	r3, [pc, #56]	; (8002418 <_sbrk+0x50>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <_sbrk+0x50>)
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	4413      	add	r3, r2
 80023ec:	466a      	mov	r2, sp
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d907      	bls.n	8002402 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80023f2:	f007 fad1 	bl	8009998 <__errno>
 80023f6:	4602      	mov	r2, r0
 80023f8:	230c      	movs	r3, #12
 80023fa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80023fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002400:	e006      	b.n	8002410 <_sbrk+0x48>
	}

	heap_end += incr;
 8002402:	4b05      	ldr	r3, [pc, #20]	; (8002418 <_sbrk+0x50>)
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	4413      	add	r3, r2
 800240a:	4a03      	ldr	r2, [pc, #12]	; (8002418 <_sbrk+0x50>)
 800240c:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800240e:	68fb      	ldr	r3, [r7, #12]
}
 8002410:	4618      	mov	r0, r3
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	20002488 	.word	0x20002488
 800241c:	200024a0 	.word	0x200024a0

08002420 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002424:	4b08      	ldr	r3, [pc, #32]	; (8002448 <SystemInit+0x28>)
 8002426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800242a:	4a07      	ldr	r2, [pc, #28]	; (8002448 <SystemInit+0x28>)
 800242c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002434:	4b04      	ldr	r3, [pc, #16]	; (8002448 <SystemInit+0x28>)
 8002436:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800243a:	609a      	str	r2, [r3, #8]
#endif
}
 800243c:	bf00      	nop
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr
 8002446:	bf00      	nop
 8002448:	e000ed00 	.word	0xe000ed00

0800244c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800244c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002484 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002450:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002452:	e003      	b.n	800245c <LoopCopyDataInit>

08002454 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002454:	4b0c      	ldr	r3, [pc, #48]	; (8002488 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002456:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002458:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800245a:	3104      	adds	r1, #4

0800245c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800245c:	480b      	ldr	r0, [pc, #44]	; (800248c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800245e:	4b0c      	ldr	r3, [pc, #48]	; (8002490 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002460:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002462:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002464:	d3f6      	bcc.n	8002454 <CopyDataInit>
  ldr  r2, =_sbss
 8002466:	4a0b      	ldr	r2, [pc, #44]	; (8002494 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002468:	e002      	b.n	8002470 <LoopFillZerobss>

0800246a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800246a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800246c:	f842 3b04 	str.w	r3, [r2], #4

08002470 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002472:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002474:	d3f9      	bcc.n	800246a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002476:	f7ff ffd3 	bl	8002420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800247a:	f007 fa93 	bl	80099a4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800247e:	f7fe fc8f 	bl	8000da0 <main>
  bx  lr    
 8002482:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002484:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002488:	0800a278 	.word	0x0800a278
  ldr  r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002490:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8002494:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8002498:	200024a0 	.word	0x200024a0

0800249c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800249c:	e7fe      	b.n	800249c <ADC_IRQHandler>
	...

080024a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a4:	4b0e      	ldr	r3, [pc, #56]	; (80024e0 <HAL_Init+0x40>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4a0d      	ldr	r2, [pc, #52]	; (80024e0 <HAL_Init+0x40>)
 80024aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80024ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b0:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <HAL_Init+0x40>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	4a0a      	ldr	r2, [pc, #40]	; (80024e0 <HAL_Init+0x40>)
 80024b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024bc:	4b08      	ldr	r3, [pc, #32]	; (80024e0 <HAL_Init+0x40>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a07      	ldr	r2, [pc, #28]	; (80024e0 <HAL_Init+0x40>)
 80024c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024c8:	2003      	movs	r0, #3
 80024ca:	f000 fbaf 	bl	8002c2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024ce:	2000      	movs	r0, #0
 80024d0:	f000 f808 	bl	80024e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d4:	f7ff fb1e 	bl	8001b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024d8:	2300      	movs	r3, #0
}
 80024da:	4618      	mov	r0, r3
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	40023c00 	.word	0x40023c00

080024e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b082      	sub	sp, #8
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ec:	4b12      	ldr	r3, [pc, #72]	; (8002538 <HAL_InitTick+0x54>)
 80024ee:	681a      	ldr	r2, [r3, #0]
 80024f0:	4b12      	ldr	r3, [pc, #72]	; (800253c <HAL_InitTick+0x58>)
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80024fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002502:	4618      	mov	r0, r3
 8002504:	f000 fbc7 	bl	8002c96 <HAL_SYSTICK_Config>
 8002508:	4603      	mov	r3, r0
 800250a:	2b00      	cmp	r3, #0
 800250c:	d001      	beq.n	8002512 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e00e      	b.n	8002530 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2b0f      	cmp	r3, #15
 8002516:	d80a      	bhi.n	800252e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002518:	2200      	movs	r2, #0
 800251a:	6879      	ldr	r1, [r7, #4]
 800251c:	f04f 30ff 	mov.w	r0, #4294967295
 8002520:	f000 fb8f 	bl	8002c42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002524:	4a06      	ldr	r2, [pc, #24]	; (8002540 <HAL_InitTick+0x5c>)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800252a:	2300      	movs	r3, #0
 800252c:	e000      	b.n	8002530 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
}
 8002530:	4618      	mov	r0, r3
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	20000008 	.word	0x20000008
 800253c:	20000010 	.word	0x20000010
 8002540:	2000000c 	.word	0x2000000c

08002544 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <HAL_IncTick+0x20>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	461a      	mov	r2, r3
 800254e:	4b06      	ldr	r3, [pc, #24]	; (8002568 <HAL_IncTick+0x24>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4413      	add	r3, r2
 8002554:	4a04      	ldr	r2, [pc, #16]	; (8002568 <HAL_IncTick+0x24>)
 8002556:	6013      	str	r3, [r2, #0]
}
 8002558:	bf00      	nop
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
 8002562:	bf00      	nop
 8002564:	20000010 	.word	0x20000010
 8002568:	20002498 	.word	0x20002498

0800256c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800256c:	b480      	push	{r7}
 800256e:	af00      	add	r7, sp, #0
  return uwTick;
 8002570:	4b03      	ldr	r3, [pc, #12]	; (8002580 <HAL_GetTick+0x14>)
 8002572:	681b      	ldr	r3, [r3, #0]
}
 8002574:	4618      	mov	r0, r3
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr
 800257e:	bf00      	nop
 8002580:	20002498 	.word	0x20002498

08002584 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b084      	sub	sp, #16
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800258c:	f7ff ffee 	bl	800256c <HAL_GetTick>
 8002590:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	f1b3 3fff 	cmp.w	r3, #4294967295
 800259c:	d005      	beq.n	80025aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800259e:	4b09      	ldr	r3, [pc, #36]	; (80025c4 <HAL_Delay+0x40>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	4413      	add	r3, r2
 80025a8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80025aa:	bf00      	nop
 80025ac:	f7ff ffde 	bl	800256c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	68fa      	ldr	r2, [r7, #12]
 80025b8:	429a      	cmp	r2, r3
 80025ba:	d8f7      	bhi.n	80025ac <HAL_Delay+0x28>
  {
  }
}
 80025bc:	bf00      	nop
 80025be:	3710      	adds	r7, #16
 80025c0:	46bd      	mov	sp, r7
 80025c2:	bd80      	pop	{r7, pc}
 80025c4:	20000010 	.word	0x20000010

080025c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b084      	sub	sp, #16
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025d0:	2300      	movs	r3, #0
 80025d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d101      	bne.n	80025de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e033      	b.n	8002646 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d109      	bne.n	80025fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025e6:	6878      	ldr	r0, [r7, #4]
 80025e8:	f7ff fabc 	bl	8001b64 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2200      	movs	r2, #0
 80025f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	2200      	movs	r2, #0
 80025f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f003 0310 	and.w	r3, r3, #16
 8002602:	2b00      	cmp	r3, #0
 8002604:	d118      	bne.n	8002638 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800260a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800260e:	f023 0302 	bic.w	r3, r3, #2
 8002612:	f043 0202 	orr.w	r2, r3, #2
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f000 f93a 	bl	8002894 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800262a:	f023 0303 	bic.w	r3, r3, #3
 800262e:	f043 0201 	orr.w	r2, r3, #1
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	641a      	str	r2, [r3, #64]	; 0x40
 8002636:	e001      	b.n	800263c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2200      	movs	r2, #0
 8002640:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
}
 8002646:	4618      	mov	r0, r3
 8002648:	3710      	adds	r7, #16
 800264a:	46bd      	mov	sp, r7
 800264c:	bd80      	pop	{r7, pc}
	...

08002650 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
 8002658:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800265a:	2300      	movs	r3, #0
 800265c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002664:	2b01      	cmp	r3, #1
 8002666:	d101      	bne.n	800266c <HAL_ADC_ConfigChannel+0x1c>
 8002668:	2302      	movs	r3, #2
 800266a:	e105      	b.n	8002878 <HAL_ADC_ConfigChannel+0x228>
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2201      	movs	r2, #1
 8002670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b09      	cmp	r3, #9
 800267a:	d925      	bls.n	80026c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68d9      	ldr	r1, [r3, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	461a      	mov	r2, r3
 800268a:	4613      	mov	r3, r2
 800268c:	005b      	lsls	r3, r3, #1
 800268e:	4413      	add	r3, r2
 8002690:	3b1e      	subs	r3, #30
 8002692:	2207      	movs	r2, #7
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43da      	mvns	r2, r3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	400a      	ands	r2, r1
 80026a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	68d9      	ldr	r1, [r3, #12]
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689a      	ldr	r2, [r3, #8]
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	b29b      	uxth	r3, r3
 80026b2:	4618      	mov	r0, r3
 80026b4:	4603      	mov	r3, r0
 80026b6:	005b      	lsls	r3, r3, #1
 80026b8:	4403      	add	r3, r0
 80026ba:	3b1e      	subs	r3, #30
 80026bc:	409a      	lsls	r2, r3
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	430a      	orrs	r2, r1
 80026c4:	60da      	str	r2, [r3, #12]
 80026c6:	e022      	b.n	800270e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	6919      	ldr	r1, [r3, #16]
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	b29b      	uxth	r3, r3
 80026d4:	461a      	mov	r2, r3
 80026d6:	4613      	mov	r3, r2
 80026d8:	005b      	lsls	r3, r3, #1
 80026da:	4413      	add	r3, r2
 80026dc:	2207      	movs	r2, #7
 80026de:	fa02 f303 	lsl.w	r3, r2, r3
 80026e2:	43da      	mvns	r2, r3
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	400a      	ands	r2, r1
 80026ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	6919      	ldr	r1, [r3, #16]
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	689a      	ldr	r2, [r3, #8]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	b29b      	uxth	r3, r3
 80026fc:	4618      	mov	r0, r3
 80026fe:	4603      	mov	r3, r0
 8002700:	005b      	lsls	r3, r3, #1
 8002702:	4403      	add	r3, r0
 8002704:	409a      	lsls	r2, r3
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	430a      	orrs	r2, r1
 800270c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2b06      	cmp	r3, #6
 8002714:	d824      	bhi.n	8002760 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685a      	ldr	r2, [r3, #4]
 8002720:	4613      	mov	r3, r2
 8002722:	009b      	lsls	r3, r3, #2
 8002724:	4413      	add	r3, r2
 8002726:	3b05      	subs	r3, #5
 8002728:	221f      	movs	r2, #31
 800272a:	fa02 f303 	lsl.w	r3, r2, r3
 800272e:	43da      	mvns	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	400a      	ands	r2, r1
 8002736:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	4618      	mov	r0, r3
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685a      	ldr	r2, [r3, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	4413      	add	r3, r2
 8002750:	3b05      	subs	r3, #5
 8002752:	fa00 f203 	lsl.w	r2, r0, r3
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	430a      	orrs	r2, r1
 800275c:	635a      	str	r2, [r3, #52]	; 0x34
 800275e:	e04c      	b.n	80027fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b0c      	cmp	r3, #12
 8002766:	d824      	bhi.n	80027b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685a      	ldr	r2, [r3, #4]
 8002772:	4613      	mov	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	4413      	add	r3, r2
 8002778:	3b23      	subs	r3, #35	; 0x23
 800277a:	221f      	movs	r2, #31
 800277c:	fa02 f303 	lsl.w	r3, r2, r3
 8002780:	43da      	mvns	r2, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	400a      	ands	r2, r1
 8002788:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	b29b      	uxth	r3, r3
 8002796:	4618      	mov	r0, r3
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	685a      	ldr	r2, [r3, #4]
 800279c:	4613      	mov	r3, r2
 800279e:	009b      	lsls	r3, r3, #2
 80027a0:	4413      	add	r3, r2
 80027a2:	3b23      	subs	r3, #35	; 0x23
 80027a4:	fa00 f203 	lsl.w	r2, r0, r3
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	631a      	str	r2, [r3, #48]	; 0x30
 80027b0:	e023      	b.n	80027fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685a      	ldr	r2, [r3, #4]
 80027bc:	4613      	mov	r3, r2
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	4413      	add	r3, r2
 80027c2:	3b41      	subs	r3, #65	; 0x41
 80027c4:	221f      	movs	r2, #31
 80027c6:	fa02 f303 	lsl.w	r3, r2, r3
 80027ca:	43da      	mvns	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	400a      	ands	r2, r1
 80027d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	b29b      	uxth	r3, r3
 80027e0:	4618      	mov	r0, r3
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685a      	ldr	r2, [r3, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	009b      	lsls	r3, r3, #2
 80027ea:	4413      	add	r3, r2
 80027ec:	3b41      	subs	r3, #65	; 0x41
 80027ee:	fa00 f203 	lsl.w	r2, r0, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027fa:	4b22      	ldr	r3, [pc, #136]	; (8002884 <HAL_ADC_ConfigChannel+0x234>)
 80027fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a21      	ldr	r2, [pc, #132]	; (8002888 <HAL_ADC_ConfigChannel+0x238>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1cc>
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	2b12      	cmp	r3, #18
 800280e:	d105      	bne.n	800281c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	4a19      	ldr	r2, [pc, #100]	; (8002888 <HAL_ADC_ConfigChannel+0x238>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d123      	bne.n	800286e <HAL_ADC_ConfigChannel+0x21e>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b10      	cmp	r3, #16
 800282c:	d003      	beq.n	8002836 <HAL_ADC_ConfigChannel+0x1e6>
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	2b11      	cmp	r3, #17
 8002834:	d11b      	bne.n	800286e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2b10      	cmp	r3, #16
 8002848:	d111      	bne.n	800286e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800284a:	4b10      	ldr	r3, [pc, #64]	; (800288c <HAL_ADC_ConfigChannel+0x23c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	4a10      	ldr	r2, [pc, #64]	; (8002890 <HAL_ADC_ConfigChannel+0x240>)
 8002850:	fba2 2303 	umull	r2, r3, r2, r3
 8002854:	0c9a      	lsrs	r2, r3, #18
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002860:	e002      	b.n	8002868 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	3b01      	subs	r3, #1
 8002866:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	2b00      	cmp	r3, #0
 800286c:	d1f9      	bne.n	8002862 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2200      	movs	r2, #0
 8002872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3714      	adds	r7, #20
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	40012300 	.word	0x40012300
 8002888:	40012000 	.word	0x40012000
 800288c:	20000008 	.word	0x20000008
 8002890:	431bde83 	.word	0x431bde83

08002894 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002894:	b480      	push	{r7}
 8002896:	b085      	sub	sp, #20
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800289c:	4b79      	ldr	r3, [pc, #484]	; (8002a84 <ADC_Init+0x1f0>)
 800289e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	685a      	ldr	r2, [r3, #4]
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	431a      	orrs	r2, r3
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80028c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	6859      	ldr	r1, [r3, #4]
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	021a      	lsls	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	430a      	orrs	r2, r1
 80028dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	685a      	ldr	r2, [r3, #4]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80028ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6859      	ldr	r1, [r3, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	689a      	ldr	r2, [r3, #8]
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	430a      	orrs	r2, r1
 80028fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	689a      	ldr	r2, [r3, #8]
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800290e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	6899      	ldr	r1, [r3, #8]
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	68da      	ldr	r2, [r3, #12]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	430a      	orrs	r2, r1
 8002920:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002926:	4a58      	ldr	r2, [pc, #352]	; (8002a88 <ADC_Init+0x1f4>)
 8002928:	4293      	cmp	r3, r2
 800292a:	d022      	beq.n	8002972 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689a      	ldr	r2, [r3, #8]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800293a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	6899      	ldr	r1, [r3, #8]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	430a      	orrs	r2, r1
 800294c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800295c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	6899      	ldr	r1, [r3, #8]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	430a      	orrs	r2, r1
 800296e:	609a      	str	r2, [r3, #8]
 8002970:	e00f      	b.n	8002992 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	689a      	ldr	r2, [r3, #8]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002980:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689a      	ldr	r2, [r3, #8]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002990:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f022 0202 	bic.w	r2, r2, #2
 80029a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	6899      	ldr	r1, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	7e1b      	ldrb	r3, [r3, #24]
 80029ac:	005a      	lsls	r2, r3, #1
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	430a      	orrs	r2, r1
 80029b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d01b      	beq.n	80029f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	685a      	ldr	r2, [r3, #4]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80029ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	685a      	ldr	r2, [r3, #4]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80029de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	6859      	ldr	r1, [r3, #4]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029ea:	3b01      	subs	r3, #1
 80029ec:	035a      	lsls	r2, r3, #13
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	430a      	orrs	r2, r1
 80029f4:	605a      	str	r2, [r3, #4]
 80029f6:	e007      	b.n	8002a08 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	685a      	ldr	r2, [r3, #4]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002a06:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	69db      	ldr	r3, [r3, #28]
 8002a22:	3b01      	subs	r3, #1
 8002a24:	051a      	lsls	r2, r3, #20
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	430a      	orrs	r2, r1
 8002a2c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	689a      	ldr	r2, [r3, #8]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002a3c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6899      	ldr	r1, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002a4a:	025a      	lsls	r2, r3, #9
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	430a      	orrs	r2, r1
 8002a52:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	6899      	ldr	r1, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	029a      	lsls	r2, r3, #10
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	430a      	orrs	r2, r1
 8002a76:	609a      	str	r2, [r3, #8]
}
 8002a78:	bf00      	nop
 8002a7a:	3714      	adds	r7, #20
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40012300 	.word	0x40012300
 8002a88:	0f000001 	.word	0x0f000001

08002a8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b085      	sub	sp, #20
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f003 0307 	and.w	r3, r3, #7
 8002a9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a9c:	4b0c      	ldr	r3, [pc, #48]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002aa2:	68ba      	ldr	r2, [r7, #8]
 8002aa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ab4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ab8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002abc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002abe:	4a04      	ldr	r2, [pc, #16]	; (8002ad0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	60d3      	str	r3, [r2, #12]
}
 8002ac4:	bf00      	nop
 8002ac6:	3714      	adds	r7, #20
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	e000ed00 	.word	0xe000ed00

08002ad4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ad8:	4b04      	ldr	r3, [pc, #16]	; (8002aec <__NVIC_GetPriorityGrouping+0x18>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	0a1b      	lsrs	r3, r3, #8
 8002ade:	f003 0307 	and.w	r3, r3, #7
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000ed00 	.word	0xe000ed00

08002af0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002af0:	b480      	push	{r7}
 8002af2:	b083      	sub	sp, #12
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	4603      	mov	r3, r0
 8002af8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	db0b      	blt.n	8002b1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b02:	79fb      	ldrb	r3, [r7, #7]
 8002b04:	f003 021f 	and.w	r2, r3, #31
 8002b08:	4907      	ldr	r1, [pc, #28]	; (8002b28 <__NVIC_EnableIRQ+0x38>)
 8002b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b0e:	095b      	lsrs	r3, r3, #5
 8002b10:	2001      	movs	r0, #1
 8002b12:	fa00 f202 	lsl.w	r2, r0, r2
 8002b16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b1a:	bf00      	nop
 8002b1c:	370c      	adds	r7, #12
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000e100 	.word	0xe000e100

08002b2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	b083      	sub	sp, #12
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	4603      	mov	r3, r0
 8002b34:	6039      	str	r1, [r7, #0]
 8002b36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	db0a      	blt.n	8002b56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	b2da      	uxtb	r2, r3
 8002b44:	490c      	ldr	r1, [pc, #48]	; (8002b78 <__NVIC_SetPriority+0x4c>)
 8002b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b4a:	0112      	lsls	r2, r2, #4
 8002b4c:	b2d2      	uxtb	r2, r2
 8002b4e:	440b      	add	r3, r1
 8002b50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b54:	e00a      	b.n	8002b6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	4908      	ldr	r1, [pc, #32]	; (8002b7c <__NVIC_SetPriority+0x50>)
 8002b5c:	79fb      	ldrb	r3, [r7, #7]
 8002b5e:	f003 030f 	and.w	r3, r3, #15
 8002b62:	3b04      	subs	r3, #4
 8002b64:	0112      	lsls	r2, r2, #4
 8002b66:	b2d2      	uxtb	r2, r2
 8002b68:	440b      	add	r3, r1
 8002b6a:	761a      	strb	r2, [r3, #24]
}
 8002b6c:	bf00      	nop
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	e000e100 	.word	0xe000e100
 8002b7c:	e000ed00 	.word	0xe000ed00

08002b80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b80:	b480      	push	{r7}
 8002b82:	b089      	sub	sp, #36	; 0x24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f1c3 0307 	rsb	r3, r3, #7
 8002b9a:	2b04      	cmp	r3, #4
 8002b9c:	bf28      	it	cs
 8002b9e:	2304      	movcs	r3, #4
 8002ba0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3304      	adds	r3, #4
 8002ba6:	2b06      	cmp	r3, #6
 8002ba8:	d902      	bls.n	8002bb0 <NVIC_EncodePriority+0x30>
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	3b03      	subs	r3, #3
 8002bae:	e000      	b.n	8002bb2 <NVIC_EncodePriority+0x32>
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bb4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb8:	69bb      	ldr	r3, [r7, #24]
 8002bba:	fa02 f303 	lsl.w	r3, r2, r3
 8002bbe:	43da      	mvns	r2, r3
 8002bc0:	68bb      	ldr	r3, [r7, #8]
 8002bc2:	401a      	ands	r2, r3
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	fa01 f303 	lsl.w	r3, r1, r3
 8002bd2:	43d9      	mvns	r1, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd8:	4313      	orrs	r3, r2
         );
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3724      	adds	r7, #36	; 0x24
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
	...

08002be8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bf8:	d301      	bcc.n	8002bfe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002bfa:	2301      	movs	r3, #1
 8002bfc:	e00f      	b.n	8002c1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfe:	4a0a      	ldr	r2, [pc, #40]	; (8002c28 <SysTick_Config+0x40>)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	3b01      	subs	r3, #1
 8002c04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c06:	210f      	movs	r1, #15
 8002c08:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0c:	f7ff ff8e 	bl	8002b2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c10:	4b05      	ldr	r3, [pc, #20]	; (8002c28 <SysTick_Config+0x40>)
 8002c12:	2200      	movs	r2, #0
 8002c14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c16:	4b04      	ldr	r3, [pc, #16]	; (8002c28 <SysTick_Config+0x40>)
 8002c18:	2207      	movs	r2, #7
 8002c1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c1c:	2300      	movs	r3, #0
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	e000e010 	.word	0xe000e010

08002c2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c34:	6878      	ldr	r0, [r7, #4]
 8002c36:	f7ff ff29 	bl	8002a8c <__NVIC_SetPriorityGrouping>
}
 8002c3a:	bf00      	nop
 8002c3c:	3708      	adds	r7, #8
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}

08002c42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c42:	b580      	push	{r7, lr}
 8002c44:	b086      	sub	sp, #24
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	4603      	mov	r3, r0
 8002c4a:	60b9      	str	r1, [r7, #8]
 8002c4c:	607a      	str	r2, [r7, #4]
 8002c4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c50:	2300      	movs	r3, #0
 8002c52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c54:	f7ff ff3e 	bl	8002ad4 <__NVIC_GetPriorityGrouping>
 8002c58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	68b9      	ldr	r1, [r7, #8]
 8002c5e:	6978      	ldr	r0, [r7, #20]
 8002c60:	f7ff ff8e 	bl	8002b80 <NVIC_EncodePriority>
 8002c64:	4602      	mov	r2, r0
 8002c66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c6a:	4611      	mov	r1, r2
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff ff5d 	bl	8002b2c <__NVIC_SetPriority>
}
 8002c72:	bf00      	nop
 8002c74:	3718      	adds	r7, #24
 8002c76:	46bd      	mov	sp, r7
 8002c78:	bd80      	pop	{r7, pc}

08002c7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c7a:	b580      	push	{r7, lr}
 8002c7c:	b082      	sub	sp, #8
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	4603      	mov	r3, r0
 8002c82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c88:	4618      	mov	r0, r3
 8002c8a:	f7ff ff31 	bl	8002af0 <__NVIC_EnableIRQ>
}
 8002c8e:	bf00      	nop
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ffa2 	bl	8002be8 <SysTick_Config>
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	3708      	adds	r7, #8
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd80      	pop	{r7, pc}
	...

08002cb0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002cbc:	f7ff fc56 	bl	800256c <HAL_GetTick>
 8002cc0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d101      	bne.n	8002ccc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e099      	b.n	8002e00 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f022 0201 	bic.w	r2, r2, #1
 8002cea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cec:	e00f      	b.n	8002d0e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cee:	f7ff fc3d 	bl	800256c <HAL_GetTick>
 8002cf2:	4602      	mov	r2, r0
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	2b05      	cmp	r3, #5
 8002cfa:	d908      	bls.n	8002d0e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2220      	movs	r2, #32
 8002d00:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2203      	movs	r2, #3
 8002d06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002d0a:	2303      	movs	r3, #3
 8002d0c:	e078      	b.n	8002e00 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0301 	and.w	r3, r3, #1
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d1e8      	bne.n	8002cee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002d24:	697a      	ldr	r2, [r7, #20]
 8002d26:	4b38      	ldr	r3, [pc, #224]	; (8002e08 <HAL_DMA_Init+0x158>)
 8002d28:	4013      	ands	r3, r2
 8002d2a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	685a      	ldr	r2, [r3, #4]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002d46:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	699b      	ldr	r3, [r3, #24]
 8002d4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002d52:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a1b      	ldr	r3, [r3, #32]
 8002d58:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d64:	2b04      	cmp	r3, #4
 8002d66:	d107      	bne.n	8002d78 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d70:	4313      	orrs	r3, r2
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f023 0307 	bic.w	r3, r3, #7
 8002d8e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d9e:	2b04      	cmp	r3, #4
 8002da0:	d117      	bne.n	8002dd2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002da6:	697a      	ldr	r2, [r7, #20]
 8002da8:	4313      	orrs	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d00e      	beq.n	8002dd2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 fa19 	bl	80031ec <DMA_CheckFifoParam>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d008      	beq.n	8002dd2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2240      	movs	r2, #64	; 0x40
 8002dc4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e016      	b.n	8002e00 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	697a      	ldr	r2, [r7, #20]
 8002dd8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f000 f9d0 	bl	8003180 <DMA_CalcBaseAndBitshift>
 8002de0:	4603      	mov	r3, r0
 8002de2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002de8:	223f      	movs	r2, #63	; 0x3f
 8002dea:	409a      	lsls	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	3718      	adds	r7, #24
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bd80      	pop	{r7, pc}
 8002e08:	f010803f 	.word	0xf010803f

08002e0c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b02      	cmp	r3, #2
 8002e1e:	d004      	beq.n	8002e2a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2280      	movs	r2, #128	; 0x80
 8002e24:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002e26:	2301      	movs	r3, #1
 8002e28:	e00c      	b.n	8002e44 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2205      	movs	r2, #5
 8002e2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	681a      	ldr	r2, [r3, #0]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f022 0201 	bic.w	r2, r2, #1
 8002e40:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e42:	2300      	movs	r3, #0
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	370c      	adds	r7, #12
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4e:	4770      	bx	lr

08002e50 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b086      	sub	sp, #24
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e5c:	4b92      	ldr	r3, [pc, #584]	; (80030a8 <HAL_DMA_IRQHandler+0x258>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a92      	ldr	r2, [pc, #584]	; (80030ac <HAL_DMA_IRQHandler+0x25c>)
 8002e62:	fba2 2303 	umull	r2, r3, r2, r3
 8002e66:	0a9b      	lsrs	r3, r3, #10
 8002e68:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7a:	2208      	movs	r2, #8
 8002e7c:	409a      	lsls	r2, r3
 8002e7e:	68fb      	ldr	r3, [r7, #12]
 8002e80:	4013      	ands	r3, r2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d01a      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0304 	and.w	r3, r3, #4
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d013      	beq.n	8002ebc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0204 	bic.w	r2, r2, #4
 8002ea2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ea8:	2208      	movs	r2, #8
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eb4:	f043 0201 	orr.w	r2, r3, #1
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ec0:	2201      	movs	r2, #1
 8002ec2:	409a      	lsls	r2, r3
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	4013      	ands	r3, r2
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d012      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00b      	beq.n	8002ef2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ede:	2201      	movs	r2, #1
 8002ee0:	409a      	lsls	r2, r3
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	f043 0202 	orr.w	r2, r3, #2
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ef6:	2204      	movs	r2, #4
 8002ef8:	409a      	lsls	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d00b      	beq.n	8002f28 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f14:	2204      	movs	r2, #4
 8002f16:	409a      	lsls	r2, r3
 8002f18:	693b      	ldr	r3, [r7, #16]
 8002f1a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f20:	f043 0204 	orr.w	r2, r3, #4
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f2c:	2210      	movs	r2, #16
 8002f2e:	409a      	lsls	r2, r3
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	4013      	ands	r3, r2
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d043      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d03c      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f4a:	2210      	movs	r2, #16
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	693b      	ldr	r3, [r7, #16]
 8002f50:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d018      	beq.n	8002f92 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d108      	bne.n	8002f80 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d024      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	6878      	ldr	r0, [r7, #4]
 8002f7c:	4798      	blx	r3
 8002f7e:	e01f      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d01b      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	4798      	blx	r3
 8002f90:	e016      	b.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d107      	bne.n	8002fb0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	681a      	ldr	r2, [r3, #0]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f022 0208 	bic.w	r2, r2, #8
 8002fae:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d003      	beq.n	8002fc0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	6878      	ldr	r0, [r7, #4]
 8002fbe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	409a      	lsls	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	4013      	ands	r3, r2
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 808e 	beq.w	80030ee <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f003 0310 	and.w	r3, r3, #16
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	f000 8086 	beq.w	80030ee <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fe6:	2220      	movs	r2, #32
 8002fe8:	409a      	lsls	r2, r3
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	2b05      	cmp	r3, #5
 8002ff8:	d136      	bne.n	8003068 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	681a      	ldr	r2, [r3, #0]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f022 0216 	bic.w	r2, r2, #22
 8003008:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	695a      	ldr	r2, [r3, #20]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003018:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	2b00      	cmp	r3, #0
 8003020:	d103      	bne.n	800302a <HAL_DMA_IRQHandler+0x1da>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003026:	2b00      	cmp	r3, #0
 8003028:	d007      	beq.n	800303a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0208 	bic.w	r2, r2, #8
 8003038:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800303e:	223f      	movs	r2, #63	; 0x3f
 8003040:	409a      	lsls	r2, r3
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800305a:	2b00      	cmp	r3, #0
 800305c:	d07d      	beq.n	800315a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003062:	6878      	ldr	r0, [r7, #4]
 8003064:	4798      	blx	r3
        }
        return;
 8003066:	e078      	b.n	800315a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003072:	2b00      	cmp	r3, #0
 8003074:	d01c      	beq.n	80030b0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003080:	2b00      	cmp	r3, #0
 8003082:	d108      	bne.n	8003096 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003088:	2b00      	cmp	r3, #0
 800308a:	d030      	beq.n	80030ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	4798      	blx	r3
 8003094:	e02b      	b.n	80030ee <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800309a:	2b00      	cmp	r3, #0
 800309c:	d027      	beq.n	80030ee <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	4798      	blx	r3
 80030a6:	e022      	b.n	80030ee <HAL_DMA_IRQHandler+0x29e>
 80030a8:	20000008 	.word	0x20000008
 80030ac:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d10f      	bne.n	80030de <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 0210 	bic.w	r2, r2, #16
 80030cc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2200      	movs	r2, #0
 80030d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2201      	movs	r2, #1
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	6878      	ldr	r0, [r7, #4]
 80030ec:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d032      	beq.n	800315c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030fa:	f003 0301 	and.w	r3, r3, #1
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d022      	beq.n	8003148 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2205      	movs	r2, #5
 8003106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	681a      	ldr	r2, [r3, #0]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0201 	bic.w	r2, r2, #1
 8003118:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800311a:	68bb      	ldr	r3, [r7, #8]
 800311c:	3301      	adds	r3, #1
 800311e:	60bb      	str	r3, [r7, #8]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	429a      	cmp	r2, r3
 8003124:	d307      	bcc.n	8003136 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b00      	cmp	r3, #0
 8003132:	d1f2      	bne.n	800311a <HAL_DMA_IRQHandler+0x2ca>
 8003134:	e000      	b.n	8003138 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003136:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800314c:	2b00      	cmp	r3, #0
 800314e:	d005      	beq.n	800315c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	4798      	blx	r3
 8003158:	e000      	b.n	800315c <HAL_DMA_IRQHandler+0x30c>
        return;
 800315a:	bf00      	nop
    }
  }
}
 800315c:	3718      	adds	r7, #24
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}
 8003162:	bf00      	nop

08003164 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003172:	b2db      	uxtb	r3, r3
}
 8003174:	4618      	mov	r0, r3
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr

08003180 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003180:	b480      	push	{r7}
 8003182:	b085      	sub	sp, #20
 8003184:	af00      	add	r7, sp, #0
 8003186:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	b2db      	uxtb	r3, r3
 800318e:	3b10      	subs	r3, #16
 8003190:	4a14      	ldr	r2, [pc, #80]	; (80031e4 <DMA_CalcBaseAndBitshift+0x64>)
 8003192:	fba2 2303 	umull	r2, r3, r2, r3
 8003196:	091b      	lsrs	r3, r3, #4
 8003198:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800319a:	4a13      	ldr	r2, [pc, #76]	; (80031e8 <DMA_CalcBaseAndBitshift+0x68>)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	4413      	add	r3, r2
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	461a      	mov	r2, r3
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	2b03      	cmp	r3, #3
 80031ac:	d909      	bls.n	80031c2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031b6:	f023 0303 	bic.w	r3, r3, #3
 80031ba:	1d1a      	adds	r2, r3, #4
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	659a      	str	r2, [r3, #88]	; 0x58
 80031c0:	e007      	b.n	80031d2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	687a      	ldr	r2, [r7, #4]
 80031d0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3714      	adds	r7, #20
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	aaaaaaab 	.word	0xaaaaaaab
 80031e8:	0800a1fc 	.word	0x0800a1fc

080031ec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031f4:	2300      	movs	r3, #0
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	699b      	ldr	r3, [r3, #24]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d11f      	bne.n	8003246 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003206:	68bb      	ldr	r3, [r7, #8]
 8003208:	2b03      	cmp	r3, #3
 800320a:	d855      	bhi.n	80032b8 <DMA_CheckFifoParam+0xcc>
 800320c:	a201      	add	r2, pc, #4	; (adr r2, 8003214 <DMA_CheckFifoParam+0x28>)
 800320e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003212:	bf00      	nop
 8003214:	08003225 	.word	0x08003225
 8003218:	08003237 	.word	0x08003237
 800321c:	08003225 	.word	0x08003225
 8003220:	080032b9 	.word	0x080032b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003228:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d045      	beq.n	80032bc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003234:	e042      	b.n	80032bc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800323e:	d13f      	bne.n	80032c0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003240:	2301      	movs	r3, #1
 8003242:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003244:	e03c      	b.n	80032c0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	699b      	ldr	r3, [r3, #24]
 800324a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800324e:	d121      	bne.n	8003294 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	2b03      	cmp	r3, #3
 8003254:	d836      	bhi.n	80032c4 <DMA_CheckFifoParam+0xd8>
 8003256:	a201      	add	r2, pc, #4	; (adr r2, 800325c <DMA_CheckFifoParam+0x70>)
 8003258:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800325c:	0800326d 	.word	0x0800326d
 8003260:	08003273 	.word	0x08003273
 8003264:	0800326d 	.word	0x0800326d
 8003268:	08003285 	.word	0x08003285
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	73fb      	strb	r3, [r7, #15]
      break;
 8003270:	e02f      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003276:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d024      	beq.n	80032c8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003282:	e021      	b.n	80032c8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003288:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800328c:	d11e      	bne.n	80032cc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003292:	e01b      	b.n	80032cc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d902      	bls.n	80032a0 <DMA_CheckFifoParam+0xb4>
 800329a:	2b03      	cmp	r3, #3
 800329c:	d003      	beq.n	80032a6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800329e:	e018      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80032a0:	2301      	movs	r3, #1
 80032a2:	73fb      	strb	r3, [r7, #15]
      break;
 80032a4:	e015      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d00e      	beq.n	80032d0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	73fb      	strb	r3, [r7, #15]
      break;
 80032b6:	e00b      	b.n	80032d0 <DMA_CheckFifoParam+0xe4>
      break;
 80032b8:	bf00      	nop
 80032ba:	e00a      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;
 80032bc:	bf00      	nop
 80032be:	e008      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;
 80032c0:	bf00      	nop
 80032c2:	e006      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;
 80032c4:	bf00      	nop
 80032c6:	e004      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;
 80032c8:	bf00      	nop
 80032ca:	e002      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;   
 80032cc:	bf00      	nop
 80032ce:	e000      	b.n	80032d2 <DMA_CheckFifoParam+0xe6>
      break;
 80032d0:	bf00      	nop
    }
  } 
  
  return status; 
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
 80032e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032f6:	2300      	movs	r3, #0
 80032f8:	61fb      	str	r3, [r7, #28]
 80032fa:	e16b      	b.n	80035d4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80032fc:	2201      	movs	r2, #1
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	697a      	ldr	r2, [r7, #20]
 800330c:	4013      	ands	r3, r2
 800330e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003310:	693a      	ldr	r2, [r7, #16]
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	429a      	cmp	r2, r3
 8003316:	f040 815a 	bne.w	80035ce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	2b01      	cmp	r3, #1
 8003320:	d00b      	beq.n	800333a <HAL_GPIO_Init+0x5a>
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d007      	beq.n	800333a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800332e:	2b11      	cmp	r3, #17
 8003330:	d003      	beq.n	800333a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	2b12      	cmp	r3, #18
 8003338:	d130      	bne.n	800339c <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	2203      	movs	r2, #3
 8003346:	fa02 f303 	lsl.w	r3, r2, r3
 800334a:	43db      	mvns	r3, r3
 800334c:	69ba      	ldr	r2, [r7, #24]
 800334e:	4013      	ands	r3, r2
 8003350:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68da      	ldr	r2, [r3, #12]
 8003356:	69fb      	ldr	r3, [r7, #28]
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	fa02 f303 	lsl.w	r3, r2, r3
 800335e:	69ba      	ldr	r2, [r7, #24]
 8003360:	4313      	orrs	r3, r2
 8003362:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003370:	2201      	movs	r2, #1
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	fa02 f303 	lsl.w	r3, r2, r3
 8003378:	43db      	mvns	r3, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4013      	ands	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	091b      	lsrs	r3, r3, #4
 8003386:	f003 0201 	and.w	r2, r3, #1
 800338a:	69fb      	ldr	r3, [r7, #28]
 800338c:	fa02 f303 	lsl.w	r3, r2, r3
 8003390:	69ba      	ldr	r2, [r7, #24]
 8003392:	4313      	orrs	r3, r2
 8003394:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	69ba      	ldr	r2, [r7, #24]
 800339a:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	005b      	lsls	r3, r3, #1
 80033a6:	2203      	movs	r2, #3
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	43db      	mvns	r3, r3
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	4013      	ands	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	689a      	ldr	r2, [r3, #8]
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	005b      	lsls	r3, r3, #1
 80033bc:	fa02 f303 	lsl.w	r3, r2, r3
 80033c0:	69ba      	ldr	r2, [r7, #24]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	69ba      	ldr	r2, [r7, #24]
 80033ca:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d003      	beq.n	80033dc <HAL_GPIO_Init+0xfc>
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	2b12      	cmp	r3, #18
 80033da:	d123      	bne.n	8003424 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	08da      	lsrs	r2, r3, #3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	3208      	adds	r2, #8
 80033e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80033e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	f003 0307 	and.w	r3, r3, #7
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	220f      	movs	r2, #15
 80033f4:	fa02 f303 	lsl.w	r3, r2, r3
 80033f8:	43db      	mvns	r3, r3
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	4013      	ands	r3, r2
 80033fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	691a      	ldr	r2, [r3, #16]
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	f003 0307 	and.w	r3, r3, #7
 800340a:	009b      	lsls	r3, r3, #2
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	69ba      	ldr	r2, [r7, #24]
 8003412:	4313      	orrs	r3, r2
 8003414:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003416:	69fb      	ldr	r3, [r7, #28]
 8003418:	08da      	lsrs	r2, r3, #3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	3208      	adds	r2, #8
 800341e:	69b9      	ldr	r1, [r7, #24]
 8003420:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800342a:	69fb      	ldr	r3, [r7, #28]
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	2203      	movs	r2, #3
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	69ba      	ldr	r2, [r7, #24]
 8003438:	4013      	ands	r3, r2
 800343a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	f003 0203 	and.w	r2, r3, #3
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	69ba      	ldr	r2, [r7, #24]
 800344e:	4313      	orrs	r3, r2
 8003450:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003458:	683b      	ldr	r3, [r7, #0]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003460:	2b00      	cmp	r3, #0
 8003462:	f000 80b4 	beq.w	80035ce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003466:	2300      	movs	r3, #0
 8003468:	60fb      	str	r3, [r7, #12]
 800346a:	4b5f      	ldr	r3, [pc, #380]	; (80035e8 <HAL_GPIO_Init+0x308>)
 800346c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800346e:	4a5e      	ldr	r2, [pc, #376]	; (80035e8 <HAL_GPIO_Init+0x308>)
 8003470:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003474:	6453      	str	r3, [r2, #68]	; 0x44
 8003476:	4b5c      	ldr	r3, [pc, #368]	; (80035e8 <HAL_GPIO_Init+0x308>)
 8003478:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800347a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800347e:	60fb      	str	r3, [r7, #12]
 8003480:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003482:	4a5a      	ldr	r2, [pc, #360]	; (80035ec <HAL_GPIO_Init+0x30c>)
 8003484:	69fb      	ldr	r3, [r7, #28]
 8003486:	089b      	lsrs	r3, r3, #2
 8003488:	3302      	adds	r3, #2
 800348a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800348e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003490:	69fb      	ldr	r3, [r7, #28]
 8003492:	f003 0303 	and.w	r3, r3, #3
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	220f      	movs	r2, #15
 800349a:	fa02 f303 	lsl.w	r3, r2, r3
 800349e:	43db      	mvns	r3, r3
 80034a0:	69ba      	ldr	r2, [r7, #24]
 80034a2:	4013      	ands	r3, r2
 80034a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a51      	ldr	r2, [pc, #324]	; (80035f0 <HAL_GPIO_Init+0x310>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d02b      	beq.n	8003506 <HAL_GPIO_Init+0x226>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a50      	ldr	r2, [pc, #320]	; (80035f4 <HAL_GPIO_Init+0x314>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d025      	beq.n	8003502 <HAL_GPIO_Init+0x222>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a4f      	ldr	r2, [pc, #316]	; (80035f8 <HAL_GPIO_Init+0x318>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d01f      	beq.n	80034fe <HAL_GPIO_Init+0x21e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4e      	ldr	r2, [pc, #312]	; (80035fc <HAL_GPIO_Init+0x31c>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d019      	beq.n	80034fa <HAL_GPIO_Init+0x21a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4d      	ldr	r2, [pc, #308]	; (8003600 <HAL_GPIO_Init+0x320>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d013      	beq.n	80034f6 <HAL_GPIO_Init+0x216>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4c      	ldr	r2, [pc, #304]	; (8003604 <HAL_GPIO_Init+0x324>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d00d      	beq.n	80034f2 <HAL_GPIO_Init+0x212>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4b      	ldr	r2, [pc, #300]	; (8003608 <HAL_GPIO_Init+0x328>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d007      	beq.n	80034ee <HAL_GPIO_Init+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4a      	ldr	r2, [pc, #296]	; (800360c <HAL_GPIO_Init+0x32c>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d101      	bne.n	80034ea <HAL_GPIO_Init+0x20a>
 80034e6:	2307      	movs	r3, #7
 80034e8:	e00e      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034ea:	2308      	movs	r3, #8
 80034ec:	e00c      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034ee:	2306      	movs	r3, #6
 80034f0:	e00a      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034f2:	2305      	movs	r3, #5
 80034f4:	e008      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034f6:	2304      	movs	r3, #4
 80034f8:	e006      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034fa:	2303      	movs	r3, #3
 80034fc:	e004      	b.n	8003508 <HAL_GPIO_Init+0x228>
 80034fe:	2302      	movs	r3, #2
 8003500:	e002      	b.n	8003508 <HAL_GPIO_Init+0x228>
 8003502:	2301      	movs	r3, #1
 8003504:	e000      	b.n	8003508 <HAL_GPIO_Init+0x228>
 8003506:	2300      	movs	r3, #0
 8003508:	69fa      	ldr	r2, [r7, #28]
 800350a:	f002 0203 	and.w	r2, r2, #3
 800350e:	0092      	lsls	r2, r2, #2
 8003510:	4093      	lsls	r3, r2
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	4313      	orrs	r3, r2
 8003516:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003518:	4934      	ldr	r1, [pc, #208]	; (80035ec <HAL_GPIO_Init+0x30c>)
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	089b      	lsrs	r3, r3, #2
 800351e:	3302      	adds	r3, #2
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003526:	4b3a      	ldr	r3, [pc, #232]	; (8003610 <HAL_GPIO_Init+0x330>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	43db      	mvns	r3, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4013      	ands	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800353e:	2b00      	cmp	r3, #0
 8003540:	d003      	beq.n	800354a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	4313      	orrs	r3, r2
 8003548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <HAL_GPIO_Init+0x330>)
 800354c:	69bb      	ldr	r3, [r7, #24]
 800354e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003550:	4b2f      	ldr	r3, [pc, #188]	; (8003610 <HAL_GPIO_Init+0x330>)
 8003552:	685b      	ldr	r3, [r3, #4]
 8003554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	43db      	mvns	r3, r3
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	4013      	ands	r3, r2
 800355e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003568:	2b00      	cmp	r3, #0
 800356a:	d003      	beq.n	8003574 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	4313      	orrs	r3, r2
 8003572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003574:	4a26      	ldr	r2, [pc, #152]	; (8003610 <HAL_GPIO_Init+0x330>)
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800357a:	4b25      	ldr	r3, [pc, #148]	; (8003610 <HAL_GPIO_Init+0x330>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	43db      	mvns	r3, r3
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	4013      	ands	r3, r2
 8003588:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	685b      	ldr	r3, [r3, #4]
 800358e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d003      	beq.n	800359e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003596:	69ba      	ldr	r2, [r7, #24]
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800359e:	4a1c      	ldr	r2, [pc, #112]	; (8003610 <HAL_GPIO_Init+0x330>)
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035a4:	4b1a      	ldr	r3, [pc, #104]	; (8003610 <HAL_GPIO_Init+0x330>)
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035aa:	693b      	ldr	r3, [r7, #16]
 80035ac:	43db      	mvns	r3, r3
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	4013      	ands	r3, r2
 80035b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685b      	ldr	r3, [r3, #4]
 80035b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d003      	beq.n	80035c8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035c8:	4a11      	ldr	r2, [pc, #68]	; (8003610 <HAL_GPIO_Init+0x330>)
 80035ca:	69bb      	ldr	r3, [r7, #24]
 80035cc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	3301      	adds	r3, #1
 80035d2:	61fb      	str	r3, [r7, #28]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	2b0f      	cmp	r3, #15
 80035d8:	f67f ae90 	bls.w	80032fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035dc:	bf00      	nop
 80035de:	3724      	adds	r7, #36	; 0x24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr
 80035e8:	40023800 	.word	0x40023800
 80035ec:	40013800 	.word	0x40013800
 80035f0:	40020000 	.word	0x40020000
 80035f4:	40020400 	.word	0x40020400
 80035f8:	40020800 	.word	0x40020800
 80035fc:	40020c00 	.word	0x40020c00
 8003600:	40021000 	.word	0x40021000
 8003604:	40021400 	.word	0x40021400
 8003608:	40021800 	.word	0x40021800
 800360c:	40021c00 	.word	0x40021c00
 8003610:	40013c00 	.word	0x40013c00

08003614 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003614:	b480      	push	{r7}
 8003616:	b083      	sub	sp, #12
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	460b      	mov	r3, r1
 800361e:	807b      	strh	r3, [r7, #2]
 8003620:	4613      	mov	r3, r2
 8003622:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003624:	787b      	ldrb	r3, [r7, #1]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d003      	beq.n	8003632 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800362a:	887a      	ldrh	r2, [r7, #2]
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003630:	e003      	b.n	800363a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003632:	887b      	ldrh	r3, [r7, #2]
 8003634:	041a      	lsls	r2, r3, #16
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	619a      	str	r2, [r3, #24]
}
 800363a:	bf00      	nop
 800363c:	370c      	adds	r7, #12
 800363e:	46bd      	mov	sp, r7
 8003640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003644:	4770      	bx	lr

08003646 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003646:	b480      	push	{r7}
 8003648:	b083      	sub	sp, #12
 800364a:	af00      	add	r7, sp, #0
 800364c:	6078      	str	r0, [r7, #4]
 800364e:	460b      	mov	r3, r1
 8003650:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	695a      	ldr	r2, [r3, #20]
 8003656:	887b      	ldrh	r3, [r7, #2]
 8003658:	401a      	ands	r2, r3
 800365a:	887b      	ldrh	r3, [r7, #2]
 800365c:	429a      	cmp	r2, r3
 800365e:	d104      	bne.n	800366a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8003660:	887b      	ldrh	r3, [r7, #2]
 8003662:	041a      	lsls	r2, r3, #16
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8003668:	e002      	b.n	8003670 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 800366a:	887a      	ldrh	r2, [r7, #2]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	619a      	str	r2, [r3, #24]
}
 8003670:	bf00      	nop
 8003672:	370c      	adds	r7, #12
 8003674:	46bd      	mov	sp, r7
 8003676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367a:	4770      	bx	lr

0800367c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b084      	sub	sp, #16
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800368a:	2301      	movs	r3, #1
 800368c:	e11f      	b.n	80038ce <HAL_I2C_Init+0x252>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003694:	b2db      	uxtb	r3, r3
 8003696:	2b00      	cmp	r3, #0
 8003698:	d106      	bne.n	80036a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2200      	movs	r2, #0
 800369e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7fe fad4 	bl	8001c50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2224      	movs	r2, #36	; 0x24
 80036ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f022 0201 	bic.w	r2, r2, #1
 80036be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80036de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80036e0:	f003 f918 	bl	8006914 <HAL_RCC_GetPCLK1Freq>
 80036e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	4a7b      	ldr	r2, [pc, #492]	; (80038d8 <HAL_I2C_Init+0x25c>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d807      	bhi.n	8003700 <HAL_I2C_Init+0x84>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4a7a      	ldr	r2, [pc, #488]	; (80038dc <HAL_I2C_Init+0x260>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	bf94      	ite	ls
 80036f8:	2301      	movls	r3, #1
 80036fa:	2300      	movhi	r3, #0
 80036fc:	b2db      	uxtb	r3, r3
 80036fe:	e006      	b.n	800370e <HAL_I2C_Init+0x92>
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	4a77      	ldr	r2, [pc, #476]	; (80038e0 <HAL_I2C_Init+0x264>)
 8003704:	4293      	cmp	r3, r2
 8003706:	bf94      	ite	ls
 8003708:	2301      	movls	r3, #1
 800370a:	2300      	movhi	r3, #0
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d001      	beq.n	8003716 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003712:	2301      	movs	r3, #1
 8003714:	e0db      	b.n	80038ce <HAL_I2C_Init+0x252>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	4a72      	ldr	r2, [pc, #456]	; (80038e4 <HAL_I2C_Init+0x268>)
 800371a:	fba2 2303 	umull	r2, r3, r2, r3
 800371e:	0c9b      	lsrs	r3, r3, #18
 8003720:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	430a      	orrs	r2, r1
 8003734:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	685b      	ldr	r3, [r3, #4]
 8003744:	4a64      	ldr	r2, [pc, #400]	; (80038d8 <HAL_I2C_Init+0x25c>)
 8003746:	4293      	cmp	r3, r2
 8003748:	d802      	bhi.n	8003750 <HAL_I2C_Init+0xd4>
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	3301      	adds	r3, #1
 800374e:	e009      	b.n	8003764 <HAL_I2C_Init+0xe8>
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003756:	fb02 f303 	mul.w	r3, r2, r3
 800375a:	4a63      	ldr	r2, [pc, #396]	; (80038e8 <HAL_I2C_Init+0x26c>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	099b      	lsrs	r3, r3, #6
 8003762:	3301      	adds	r3, #1
 8003764:	687a      	ldr	r2, [r7, #4]
 8003766:	6812      	ldr	r2, [r2, #0]
 8003768:	430b      	orrs	r3, r1
 800376a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	69db      	ldr	r3, [r3, #28]
 8003772:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003776:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	4956      	ldr	r1, [pc, #344]	; (80038d8 <HAL_I2C_Init+0x25c>)
 8003780:	428b      	cmp	r3, r1
 8003782:	d80d      	bhi.n	80037a0 <HAL_I2C_Init+0x124>
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	1e59      	subs	r1, r3, #1
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	005b      	lsls	r3, r3, #1
 800378e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003792:	3301      	adds	r3, #1
 8003794:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003798:	2b04      	cmp	r3, #4
 800379a:	bf38      	it	cc
 800379c:	2304      	movcc	r3, #4
 800379e:	e04f      	b.n	8003840 <HAL_I2C_Init+0x1c4>
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	689b      	ldr	r3, [r3, #8]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d111      	bne.n	80037cc <HAL_I2C_Init+0x150>
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	1e58      	subs	r0, r3, #1
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6859      	ldr	r1, [r3, #4]
 80037b0:	460b      	mov	r3, r1
 80037b2:	005b      	lsls	r3, r3, #1
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	bf0c      	ite	eq
 80037c4:	2301      	moveq	r3, #1
 80037c6:	2300      	movne	r3, #0
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	e012      	b.n	80037f2 <HAL_I2C_Init+0x176>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	1e58      	subs	r0, r3, #1
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6859      	ldr	r1, [r3, #4]
 80037d4:	460b      	mov	r3, r1
 80037d6:	009b      	lsls	r3, r3, #2
 80037d8:	440b      	add	r3, r1
 80037da:	0099      	lsls	r1, r3, #2
 80037dc:	440b      	add	r3, r1
 80037de:	fbb0 f3f3 	udiv	r3, r0, r3
 80037e2:	3301      	adds	r3, #1
 80037e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	bf0c      	ite	eq
 80037ec:	2301      	moveq	r3, #1
 80037ee:	2300      	movne	r3, #0
 80037f0:	b2db      	uxtb	r3, r3
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <HAL_I2C_Init+0x17e>
 80037f6:	2301      	movs	r3, #1
 80037f8:	e022      	b.n	8003840 <HAL_I2C_Init+0x1c4>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d10e      	bne.n	8003820 <HAL_I2C_Init+0x1a4>
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	1e58      	subs	r0, r3, #1
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6859      	ldr	r1, [r3, #4]
 800380a:	460b      	mov	r3, r1
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	440b      	add	r3, r1
 8003810:	fbb0 f3f3 	udiv	r3, r0, r3
 8003814:	3301      	adds	r3, #1
 8003816:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381e:	e00f      	b.n	8003840 <HAL_I2C_Init+0x1c4>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	1e58      	subs	r0, r3, #1
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6859      	ldr	r1, [r3, #4]
 8003828:	460b      	mov	r3, r1
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	440b      	add	r3, r1
 800382e:	0099      	lsls	r1, r3, #2
 8003830:	440b      	add	r3, r1
 8003832:	fbb0 f3f3 	udiv	r3, r0, r3
 8003836:	3301      	adds	r3, #1
 8003838:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800383c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003840:	6879      	ldr	r1, [r7, #4]
 8003842:	6809      	ldr	r1, [r1, #0]
 8003844:	4313      	orrs	r3, r2
 8003846:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	69da      	ldr	r2, [r3, #28]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6a1b      	ldr	r3, [r3, #32]
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	430a      	orrs	r2, r1
 8003862:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800386e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6911      	ldr	r1, [r2, #16]
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	68d2      	ldr	r2, [r2, #12]
 800387a:	4311      	orrs	r1, r2
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	6812      	ldr	r2, [r2, #0]
 8003880:	430b      	orrs	r3, r1
 8003882:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68db      	ldr	r3, [r3, #12]
 800388a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695a      	ldr	r2, [r3, #20]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	699b      	ldr	r3, [r3, #24]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	430a      	orrs	r2, r1
 800389e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681a      	ldr	r2, [r3, #0]
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f042 0201 	orr.w	r2, r2, #1
 80038ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2200      	movs	r2, #0
 80038b4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	2200      	movs	r2, #0
 80038c2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2200      	movs	r2, #0
 80038c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80038cc:	2300      	movs	r3, #0
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3710      	adds	r7, #16
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	000186a0 	.word	0x000186a0
 80038dc:	001e847f 	.word	0x001e847f
 80038e0:	003d08ff 	.word	0x003d08ff
 80038e4:	431bde83 	.word	0x431bde83
 80038e8:	10624dd3 	.word	0x10624dd3

080038ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b088      	sub	sp, #32
 80038f0:	af02      	add	r7, sp, #8
 80038f2:	60f8      	str	r0, [r7, #12]
 80038f4:	607a      	str	r2, [r7, #4]
 80038f6:	461a      	mov	r2, r3
 80038f8:	460b      	mov	r3, r1
 80038fa:	817b      	strh	r3, [r7, #10]
 80038fc:	4613      	mov	r3, r2
 80038fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003900:	f7fe fe34 	bl	800256c <HAL_GetTick>
 8003904:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800390c:	b2db      	uxtb	r3, r3
 800390e:	2b20      	cmp	r3, #32
 8003910:	f040 80e0 	bne.w	8003ad4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	9300      	str	r3, [sp, #0]
 8003918:	2319      	movs	r3, #25
 800391a:	2201      	movs	r2, #1
 800391c:	4970      	ldr	r1, [pc, #448]	; (8003ae0 <HAL_I2C_Master_Transmit+0x1f4>)
 800391e:	68f8      	ldr	r0, [r7, #12]
 8003920:	f001 fd6f 	bl	8005402 <I2C_WaitOnFlagUntilTimeout>
 8003924:	4603      	mov	r3, r0
 8003926:	2b00      	cmp	r3, #0
 8003928:	d001      	beq.n	800392e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800392a:	2302      	movs	r3, #2
 800392c:	e0d3      	b.n	8003ad6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003934:	2b01      	cmp	r3, #1
 8003936:	d101      	bne.n	800393c <HAL_I2C_Master_Transmit+0x50>
 8003938:	2302      	movs	r3, #2
 800393a:	e0cc      	b.n	8003ad6 <HAL_I2C_Master_Transmit+0x1ea>
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 0301 	and.w	r3, r3, #1
 800394e:	2b01      	cmp	r3, #1
 8003950:	d007      	beq.n	8003962 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f042 0201 	orr.w	r2, r2, #1
 8003960:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003970:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2221      	movs	r2, #33	; 0x21
 8003976:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2210      	movs	r2, #16
 800397e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	893a      	ldrh	r2, [r7, #8]
 8003992:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003998:	b29a      	uxth	r2, r3
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	4a50      	ldr	r2, [pc, #320]	; (8003ae4 <HAL_I2C_Master_Transmit+0x1f8>)
 80039a2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80039a4:	8979      	ldrh	r1, [r7, #10]
 80039a6:	697b      	ldr	r3, [r7, #20]
 80039a8:	6a3a      	ldr	r2, [r7, #32]
 80039aa:	68f8      	ldr	r0, [r7, #12]
 80039ac:	f001 fc28 	bl	8005200 <I2C_MasterRequestWrite>
 80039b0:	4603      	mov	r3, r0
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d001      	beq.n	80039ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80039b6:	2301      	movs	r3, #1
 80039b8:	e08d      	b.n	8003ad6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	695b      	ldr	r3, [r3, #20]
 80039c4:	613b      	str	r3, [r7, #16]
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	699b      	ldr	r3, [r3, #24]
 80039cc:	613b      	str	r3, [r7, #16]
 80039ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80039d0:	e066      	b.n	8003aa0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039d2:	697a      	ldr	r2, [r7, #20]
 80039d4:	6a39      	ldr	r1, [r7, #32]
 80039d6:	68f8      	ldr	r0, [r7, #12]
 80039d8:	f001 fde9 	bl	80055ae <I2C_WaitOnTXEFlagUntilTimeout>
 80039dc:	4603      	mov	r3, r0
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00d      	beq.n	80039fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e6:	2b04      	cmp	r3, #4
 80039e8:	d107      	bne.n	80039fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681a      	ldr	r2, [r3, #0]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80039f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e06b      	b.n	8003ad6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a02:	781a      	ldrb	r2, [r3, #0]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a18:	b29b      	uxth	r3, r3
 8003a1a:	3b01      	subs	r3, #1
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a26:	3b01      	subs	r3, #1
 8003a28:	b29a      	uxth	r2, r3
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d11b      	bne.n	8003a74 <HAL_I2C_Master_Transmit+0x188>
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d017      	beq.n	8003a74 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	781a      	ldrb	r2, [r3, #0]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a5e:	b29b      	uxth	r3, r3
 8003a60:	3b01      	subs	r3, #1
 8003a62:	b29a      	uxth	r2, r3
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a6c:	3b01      	subs	r3, #1
 8003a6e:	b29a      	uxth	r2, r3
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a74:	697a      	ldr	r2, [r7, #20]
 8003a76:	6a39      	ldr	r1, [r7, #32]
 8003a78:	68f8      	ldr	r0, [r7, #12]
 8003a7a:	f001 fdd9 	bl	8005630 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a88:	2b04      	cmp	r3, #4
 8003a8a:	d107      	bne.n	8003a9c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a9a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a9c:	2301      	movs	r3, #1
 8003a9e:	e01a      	b.n	8003ad6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d194      	bne.n	80039d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ab6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2220      	movs	r2, #32
 8003abc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2200      	movs	r2, #0
 8003acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	e000      	b.n	8003ad6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003ad4:	2302      	movs	r3, #2
  }
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3718      	adds	r7, #24
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	00100002 	.word	0x00100002
 8003ae4:	ffff0000 	.word	0xffff0000

08003ae8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b08a      	sub	sp, #40	; 0x28
 8003aec:	af02      	add	r7, sp, #8
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	607a      	str	r2, [r7, #4]
 8003af2:	603b      	str	r3, [r7, #0]
 8003af4:	460b      	mov	r3, r1
 8003af6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003af8:	f7fe fd38 	bl	800256c <HAL_GetTick>
 8003afc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003afe:	2301      	movs	r3, #1
 8003b00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b08:	b2db      	uxtb	r3, r3
 8003b0a:	2b20      	cmp	r3, #32
 8003b0c:	f040 8110 	bne.w	8003d30 <HAL_I2C_IsDeviceReady+0x248>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	9300      	str	r3, [sp, #0]
 8003b14:	2319      	movs	r3, #25
 8003b16:	2201      	movs	r2, #1
 8003b18:	4988      	ldr	r1, [pc, #544]	; (8003d3c <HAL_I2C_IsDeviceReady+0x254>)
 8003b1a:	68f8      	ldr	r0, [r7, #12]
 8003b1c:	f001 fc71 	bl	8005402 <I2C_WaitOnFlagUntilTimeout>
 8003b20:	4603      	mov	r3, r0
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003b26:	2302      	movs	r3, #2
 8003b28:	e103      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b30:	2b01      	cmp	r3, #1
 8003b32:	d101      	bne.n	8003b38 <HAL_I2C_IsDeviceReady+0x50>
 8003b34:	2302      	movs	r3, #2
 8003b36:	e0fc      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0301 	and.w	r3, r3, #1
 8003b4a:	2b01      	cmp	r3, #1
 8003b4c:	d007      	beq.n	8003b5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681a      	ldr	r2, [r3, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f042 0201 	orr.w	r2, r2, #1
 8003b5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	681a      	ldr	r2, [r3, #0]
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	2224      	movs	r2, #36	; 0x24
 8003b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a70      	ldr	r2, [pc, #448]	; (8003d40 <HAL_I2C_IsDeviceReady+0x258>)
 8003b80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	681a      	ldr	r2, [r3, #0]
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003b90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003b92:	69fb      	ldr	r3, [r7, #28]
 8003b94:	9300      	str	r3, [sp, #0]
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	2200      	movs	r2, #0
 8003b9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003b9e:	68f8      	ldr	r0, [r7, #12]
 8003ba0:	f001 fc2f 	bl	8005402 <I2C_WaitOnFlagUntilTimeout>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d00c      	beq.n	8003bc4 <HAL_I2C_IsDeviceReady+0xdc>
      {
        if (hi2c->Instance->CR1 & I2C_CR1_START)
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d003      	beq.n	8003bc0 <HAL_I2C_IsDeviceReady+0xd8>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bbe:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e0b6      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bc4:	897b      	ldrh	r3, [r7, #10]
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	461a      	mov	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003bd2:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003bd4:	f7fe fcca 	bl	800256c <HAL_GetTick>
 8003bd8:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	695b      	ldr	r3, [r3, #20]
 8003be0:	f003 0302 	and.w	r3, r3, #2
 8003be4:	2b02      	cmp	r3, #2
 8003be6:	bf0c      	ite	eq
 8003be8:	2301      	moveq	r3, #1
 8003bea:	2300      	movne	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	695b      	ldr	r3, [r3, #20]
 8003bf6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bfe:	bf0c      	ite	eq
 8003c00:	2301      	moveq	r3, #1
 8003c02:	2300      	movne	r3, #0
 8003c04:	b2db      	uxtb	r3, r3
 8003c06:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c08:	e025      	b.n	8003c56 <HAL_I2C_IsDeviceReady+0x16e>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003c0a:	f7fe fcaf 	bl	800256c <HAL_GetTick>
 8003c0e:	4602      	mov	r2, r0
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	1ad3      	subs	r3, r2, r3
 8003c14:	683a      	ldr	r2, [r7, #0]
 8003c16:	429a      	cmp	r2, r3
 8003c18:	d302      	bcc.n	8003c20 <HAL_I2C_IsDeviceReady+0x138>
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d103      	bne.n	8003c28 <HAL_I2C_IsDeviceReady+0x140>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	22a0      	movs	r2, #160	; 0xa0
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	bf0c      	ite	eq
 8003c36:	2301      	moveq	r3, #1
 8003c38:	2300      	movne	r3, #0
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	695b      	ldr	r3, [r3, #20]
 8003c44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4c:	bf0c      	ite	eq
 8003c4e:	2301      	moveq	r3, #1
 8003c50:	2300      	movne	r3, #0
 8003c52:	b2db      	uxtb	r3, r3
 8003c54:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c5c:	b2db      	uxtb	r3, r3
 8003c5e:	2ba0      	cmp	r3, #160	; 0xa0
 8003c60:	d005      	beq.n	8003c6e <HAL_I2C_IsDeviceReady+0x186>
 8003c62:	7dfb      	ldrb	r3, [r7, #23]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d102      	bne.n	8003c6e <HAL_I2C_IsDeviceReady+0x186>
 8003c68:	7dbb      	ldrb	r3, [r7, #22]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d0cd      	beq.n	8003c0a <HAL_I2C_IsDeviceReady+0x122>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2220      	movs	r2, #32
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695b      	ldr	r3, [r3, #20]
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d129      	bne.n	8003cd8 <HAL_I2C_IsDeviceReady+0x1f0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c92:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c94:	2300      	movs	r3, #0
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	695b      	ldr	r3, [r3, #20]
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	699b      	ldr	r3, [r3, #24]
 8003ca6:	613b      	str	r3, [r7, #16]
 8003ca8:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003caa:	69fb      	ldr	r3, [r7, #28]
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	2319      	movs	r3, #25
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	4922      	ldr	r1, [pc, #136]	; (8003d3c <HAL_I2C_IsDeviceReady+0x254>)
 8003cb4:	68f8      	ldr	r0, [r7, #12]
 8003cb6:	f001 fba4 	bl	8005402 <I2C_WaitOnFlagUntilTimeout>
 8003cba:	4603      	mov	r3, r0
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d001      	beq.n	8003cc4 <HAL_I2C_IsDeviceReady+0x1dc>
        {
          return HAL_ERROR;
 8003cc0:	2301      	movs	r3, #1
 8003cc2:	e036      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	e02c      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ce6:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003cf0:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cf2:	69fb      	ldr	r3, [r7, #28]
 8003cf4:	9300      	str	r3, [sp, #0]
 8003cf6:	2319      	movs	r3, #25
 8003cf8:	2201      	movs	r2, #1
 8003cfa:	4910      	ldr	r1, [pc, #64]	; (8003d3c <HAL_I2C_IsDeviceReady+0x254>)
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f001 fb80 	bl	8005402 <I2C_WaitOnFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_IsDeviceReady+0x224>
        {
          return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e012      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003d0c:	69bb      	ldr	r3, [r7, #24]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003d12:	69ba      	ldr	r2, [r7, #24]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	429a      	cmp	r2, r3
 8003d18:	f4ff af33 	bcc.w	8003b82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	2220      	movs	r2, #32
 8003d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	e000      	b.n	8003d32 <HAL_I2C_IsDeviceReady+0x24a>
  }
  else
  {
    return HAL_BUSY;
 8003d30:	2302      	movs	r3, #2
  }
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3720      	adds	r7, #32
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	00100002 	.word	0x00100002
 8003d40:	ffff0000 	.word	0xffff0000

08003d44 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b088      	sub	sp, #32
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d64:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003d6e:	7bfb      	ldrb	r3, [r7, #15]
 8003d70:	2b10      	cmp	r3, #16
 8003d72:	d003      	beq.n	8003d7c <HAL_I2C_EV_IRQHandler+0x38>
 8003d74:	7bfb      	ldrb	r3, [r7, #15]
 8003d76:	2b40      	cmp	r3, #64	; 0x40
 8003d78:	f040 80b6 	bne.w	8003ee8 <HAL_I2C_EV_IRQHandler+0x1a4>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	695b      	ldr	r3, [r3, #20]
 8003d8a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10d      	bne.n	8003db2 <HAL_I2C_EV_IRQHandler+0x6e>
 8003d96:	693b      	ldr	r3, [r7, #16]
 8003d98:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003d9c:	d003      	beq.n	8003da6 <HAL_I2C_EV_IRQHandler+0x62>
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003da4:	d101      	bne.n	8003daa <HAL_I2C_EV_IRQHandler+0x66>
 8003da6:	2301      	movs	r3, #1
 8003da8:	e000      	b.n	8003dac <HAL_I2C_EV_IRQHandler+0x68>
 8003daa:	2300      	movs	r3, #0
 8003dac:	2b01      	cmp	r3, #1
 8003dae:	f000 8127 	beq.w	8004000 <HAL_I2C_EV_IRQHandler+0x2bc>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db2:	69fb      	ldr	r3, [r7, #28]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d00c      	beq.n	8003dd6 <HAL_I2C_EV_IRQHandler+0x92>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	0a5b      	lsrs	r3, r3, #9
 8003dc0:	f003 0301 	and.w	r3, r3, #1
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d006      	beq.n	8003dd6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f001 fca1 	bl	8005710 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 fc75 	bl	80046be <I2C_Master_SB>
 8003dd4:	e087      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	08db      	lsrs	r3, r3, #3
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d009      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0xb2>
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	0a5b      	lsrs	r3, r3, #9
 8003de6:	f003 0301 	and.w	r3, r3, #1
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d003      	beq.n	8003df6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f000 fceb 	bl	80047ca <I2C_Master_ADD10>
 8003df4:	e077      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df6:	69fb      	ldr	r3, [r7, #28]
 8003df8:	085b      	lsrs	r3, r3, #1
 8003dfa:	f003 0301 	and.w	r3, r3, #1
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d009      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0xd2>
 8003e02:	697b      	ldr	r3, [r7, #20]
 8003e04:	0a5b      	lsrs	r3, r3, #9
 8003e06:	f003 0301 	and.w	r3, r3, #1
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d003      	beq.n	8003e16 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 fd05 	bl	800481e <I2C_Master_ADDR>
 8003e14:	e067      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x1a2>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	089b      	lsrs	r3, r3, #2
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d030      	beq.n	8003e84 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e30:	f000 80e8 	beq.w	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e34:	69fb      	ldr	r3, [r7, #28]
 8003e36:	09db      	lsrs	r3, r3, #7
 8003e38:	f003 0301 	and.w	r3, r3, #1
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d00f      	beq.n	8003e60 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	0a9b      	lsrs	r3, r3, #10
 8003e44:	f003 0301 	and.w	r3, r3, #1
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d009      	beq.n	8003e60 <HAL_I2C_EV_IRQHandler+0x11c>
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	089b      	lsrs	r3, r3, #2
 8003e50:	f003 0301 	and.w	r3, r3, #1
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d103      	bne.n	8003e60 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f000 f941 	bl	80040e0 <I2C_MasterTransmit_TXE>
 8003e5e:	e042      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e60:	69fb      	ldr	r3, [r7, #28]
 8003e62:	089b      	lsrs	r3, r3, #2
 8003e64:	f003 0301 	and.w	r3, r3, #1
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80cb 	beq.w	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	0a5b      	lsrs	r3, r3, #9
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	f000 80c4 	beq.w	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterTransmit_BTF(hi2c);
 8003e7c:	6878      	ldr	r0, [r7, #4]
 8003e7e:	f000 f9cb 	bl	8004218 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e82:	e0bf      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003e8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003e92:	f000 80b7 	beq.w	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e96:	69fb      	ldr	r3, [r7, #28]
 8003e98:	099b      	lsrs	r3, r3, #6
 8003e9a:	f003 0301 	and.w	r3, r3, #1
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00f      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	0a9b      	lsrs	r3, r3, #10
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d009      	beq.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x17e>
 8003eae:	69fb      	ldr	r3, [r7, #28]
 8003eb0:	089b      	lsrs	r3, r3, #2
 8003eb2:	f003 0301 	and.w	r3, r3, #1
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d103      	bne.n	8003ec2 <HAL_I2C_EV_IRQHandler+0x17e>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 fa93 	bl	80043e6 <I2C_MasterReceive_RXNE>
 8003ec0:	e011      	b.n	8003ee6 <HAL_I2C_EV_IRQHandler+0x1a2>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ec2:	69fb      	ldr	r3, [r7, #28]
 8003ec4:	089b      	lsrs	r3, r3, #2
 8003ec6:	f003 0301 	and.w	r3, r3, #1
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	f000 809a 	beq.w	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	0a5b      	lsrs	r3, r3, #9
 8003ed4:	f003 0301 	and.w	r3, r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	f000 8093 	beq.w	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fb03 	bl	80044ea <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ee4:	e08e      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
 8003ee6:	e08d      	b.n	8004004 <HAL_I2C_EV_IRQHandler+0x2c0>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_I2C_EV_IRQHandler+0x1b6>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	695b      	ldr	r3, [r3, #20]
 8003ef6:	61fb      	str	r3, [r7, #28]
 8003ef8:	e007      	b.n	8003f0a <HAL_I2C_EV_IRQHandler+0x1c6>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f0a:	69fb      	ldr	r3, [r7, #28]
 8003f0c:	085b      	lsrs	r3, r3, #1
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d012      	beq.n	8003f3c <HAL_I2C_EV_IRQHandler+0x1f8>
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	0a5b      	lsrs	r3, r3, #9
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d00c      	beq.n	8003f3c <HAL_I2C_EV_IRQHandler+0x1f8>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d003      	beq.n	8003f32 <HAL_I2C_EV_IRQHandler+0x1ee>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003f32:	69b9      	ldr	r1, [r7, #24]
 8003f34:	6878      	ldr	r0, [r7, #4]
 8003f36:	f000 fec1 	bl	8004cbc <I2C_Slave_ADDR>
 8003f3a:	e066      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f3c:	69fb      	ldr	r3, [r7, #28]
 8003f3e:	091b      	lsrs	r3, r3, #4
 8003f40:	f003 0301 	and.w	r3, r3, #1
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d009      	beq.n	8003f5c <HAL_I2C_EV_IRQHandler+0x218>
 8003f48:	697b      	ldr	r3, [r7, #20]
 8003f4a:	0a5b      	lsrs	r3, r3, #9
 8003f4c:	f003 0301 	and.w	r3, r3, #1
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d003      	beq.n	8003f5c <HAL_I2C_EV_IRQHandler+0x218>
    {
      I2C_Slave_STOPF(hi2c);
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 fef5 	bl	8004d44 <I2C_Slave_STOPF>
 8003f5a:	e056      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003f5c:	7bbb      	ldrb	r3, [r7, #14]
 8003f5e:	2b21      	cmp	r3, #33	; 0x21
 8003f60:	d002      	beq.n	8003f68 <HAL_I2C_EV_IRQHandler+0x224>
 8003f62:	7bbb      	ldrb	r3, [r7, #14]
 8003f64:	2b29      	cmp	r3, #41	; 0x29
 8003f66:	d125      	bne.n	8003fb4 <HAL_I2C_EV_IRQHandler+0x270>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f68:	69fb      	ldr	r3, [r7, #28]
 8003f6a:	09db      	lsrs	r3, r3, #7
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d00f      	beq.n	8003f94 <HAL_I2C_EV_IRQHandler+0x250>
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	0a9b      	lsrs	r3, r3, #10
 8003f78:	f003 0301 	and.w	r3, r3, #1
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d009      	beq.n	8003f94 <HAL_I2C_EV_IRQHandler+0x250>
 8003f80:	69fb      	ldr	r3, [r7, #28]
 8003f82:	089b      	lsrs	r3, r3, #2
 8003f84:	f003 0301 	and.w	r3, r3, #1
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d103      	bne.n	8003f94 <HAL_I2C_EV_IRQHandler+0x250>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fdd7 	bl	8004b40 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003f92:	e039      	b.n	8004008 <HAL_I2C_EV_IRQHandler+0x2c4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	089b      	lsrs	r3, r3, #2
 8003f98:	f003 0301 	and.w	r3, r3, #1
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d033      	beq.n	8004008 <HAL_I2C_EV_IRQHandler+0x2c4>
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	0a5b      	lsrs	r3, r3, #9
 8003fa4:	f003 0301 	and.w	r3, r3, #1
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d02d      	beq.n	8004008 <HAL_I2C_EV_IRQHandler+0x2c4>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003fac:	6878      	ldr	r0, [r7, #4]
 8003fae:	f000 fe04 	bl	8004bba <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb2:	e029      	b.n	8004008 <HAL_I2C_EV_IRQHandler+0x2c4>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003fb4:	69fb      	ldr	r3, [r7, #28]
 8003fb6:	099b      	lsrs	r3, r3, #6
 8003fb8:	f003 0301 	and.w	r3, r3, #1
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d00f      	beq.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x29c>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	0a9b      	lsrs	r3, r3, #10
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d009      	beq.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x29c>
 8003fcc:	69fb      	ldr	r3, [r7, #28]
 8003fce:	089b      	lsrs	r3, r3, #2
 8003fd0:	f003 0301 	and.w	r3, r3, #1
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d103      	bne.n	8003fe0 <HAL_I2C_EV_IRQHandler+0x29c>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003fd8:	6878      	ldr	r0, [r7, #4]
 8003fda:	f000 fe0f 	bl	8004bfc <I2C_SlaveReceive_RXNE>
 8003fde:	e014      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003fe0:	69fb      	ldr	r3, [r7, #28]
 8003fe2:	089b      	lsrs	r3, r3, #2
 8003fe4:	f003 0301 	and.w	r3, r3, #1
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d00e      	beq.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	0a5b      	lsrs	r3, r3, #9
 8003ff0:	f003 0301 	and.w	r3, r3, #1
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d008      	beq.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ff8:	6878      	ldr	r0, [r7, #4]
 8003ffa:	f000 fe3d 	bl	8004c78 <I2C_SlaveReceive_BTF>
 8003ffe:	e004      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
      return;
 8004000:	bf00      	nop
 8004002:	e002      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004004:	bf00      	nop
 8004006:	e000      	b.n	800400a <HAL_I2C_EV_IRQHandler+0x2c6>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004008:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800400a:	3720      	adds	r7, #32
 800400c:	46bd      	mov	sp, r7
 800400e:	bd80      	pop	{r7, pc}

08004010 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004022:	4770      	bx	lr

08004024 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800402c:	bf00      	nop
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8004040:	bf00      	nop
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800404c:	b480      	push	{r7}
 800404e:	b083      	sub	sp, #12
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8004054:	bf00      	nop
 8004056:	370c      	adds	r7, #12
 8004058:	46bd      	mov	sp, r7
 800405a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405e:	4770      	bx	lr

08004060 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	460b      	mov	r3, r1
 800406a:	70fb      	strb	r3, [r7, #3]
 800406c:	4613      	mov	r3, r2
 800406e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8004070:	bf00      	nop
 8004072:	370c      	adds	r7, #12
 8004074:	46bd      	mov	sp, r7
 8004076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407a:	4770      	bx	lr

0800407c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004090:	b480      	push	{r7}
 8004092:	b083      	sub	sp, #12
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8004098:	bf00      	nop
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80040ac:	bf00      	nop
 80040ae:	370c      	adds	r7, #12
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b083      	sub	sp, #12
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80040c0:	bf00      	nop
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b083      	sub	sp, #12
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80040d4:	bf00      	nop
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr

080040e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004102:	2b00      	cmp	r3, #0
 8004104:	d150      	bne.n	80041a8 <I2C_MasterTransmit_TXE+0xc8>
 8004106:	7bfb      	ldrb	r3, [r7, #15]
 8004108:	2b21      	cmp	r3, #33	; 0x21
 800410a:	d14d      	bne.n	80041a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b08      	cmp	r3, #8
 8004110:	d01d      	beq.n	800414e <I2C_MasterTransmit_TXE+0x6e>
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b20      	cmp	r3, #32
 8004116:	d01a      	beq.n	800414e <I2C_MasterTransmit_TXE+0x6e>
 8004118:	68bb      	ldr	r3, [r7, #8]
 800411a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800411e:	d016      	beq.n	800414e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	685a      	ldr	r2, [r3, #4]
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800412e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	2211      	movs	r2, #17
 8004134:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2220      	movs	r2, #32
 8004142:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff62 	bl	8004010 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800414c:	e060      	b.n	8004210 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800415c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2220      	movs	r2, #32
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004182:	b2db      	uxtb	r3, r3
 8004184:	2b40      	cmp	r3, #64	; 0x40
 8004186:	d107      	bne.n	8004198 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f7ff ff7d 	bl	8004090 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004196:	e03b      	b.n	8004210 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	f7ff ff35 	bl	8004010 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80041a6:	e033      	b.n	8004210 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80041a8:	7bfb      	ldrb	r3, [r7, #15]
 80041aa:	2b21      	cmp	r3, #33	; 0x21
 80041ac:	d005      	beq.n	80041ba <I2C_MasterTransmit_TXE+0xda>
 80041ae:	7bbb      	ldrb	r3, [r7, #14]
 80041b0:	2b40      	cmp	r3, #64	; 0x40
 80041b2:	d12d      	bne.n	8004210 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80041b4:	7bfb      	ldrb	r3, [r7, #15]
 80041b6:	2b22      	cmp	r3, #34	; 0x22
 80041b8:	d12a      	bne.n	8004210 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041be:	b29b      	uxth	r3, r3
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d108      	bne.n	80041d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	685a      	ldr	r2, [r3, #4]
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80041d4:	e01c      	b.n	8004210 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b40      	cmp	r3, #64	; 0x40
 80041e0:	d103      	bne.n	80041ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f000 f898 	bl	8004318 <I2C_MemoryTransmit_TXE_BTF>
}
 80041e8:	e012      	b.n	8004210 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ee:	781a      	ldrb	r2, [r3, #0]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fa:	1c5a      	adds	r2, r3, #1
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004204:	b29b      	uxth	r3, r3
 8004206:	3b01      	subs	r3, #1
 8004208:	b29a      	uxth	r2, r3
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800420e:	e7ff      	b.n	8004210 <I2C_MasterTransmit_TXE+0x130>
 8004210:	bf00      	nop
 8004212:	3710      	adds	r7, #16
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}

08004218 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004224:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b21      	cmp	r3, #33	; 0x21
 8004230:	d165      	bne.n	80042fe <I2C_MasterTransmit_BTF+0xe6>
  {
    if (hi2c->XferCount != 0U)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004236:	b29b      	uxth	r3, r3
 8004238:	2b00      	cmp	r3, #0
 800423a:	d012      	beq.n	8004262 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004240:	781a      	ldrb	r2, [r3, #0]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8004260:	e056      	b.n	8004310 <I2C_MasterTransmit_BTF+0xf8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	2b08      	cmp	r3, #8
 8004266:	d01d      	beq.n	80042a4 <I2C_MasterTransmit_BTF+0x8c>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2b20      	cmp	r3, #32
 800426c:	d01a      	beq.n	80042a4 <I2C_MasterTransmit_BTF+0x8c>
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004274:	d016      	beq.n	80042a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	685a      	ldr	r2, [r3, #4]
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004284:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	2211      	movs	r2, #17
 800428a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2220      	movs	r2, #32
 8004298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f7ff feb7 	bl	8004010 <HAL_I2C_MasterTxCpltCallback>
}
 80042a2:	e035      	b.n	8004310 <I2C_MasterTransmit_BTF+0xf8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	685a      	ldr	r2, [r3, #4]
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2220      	movs	r2, #32
 80042ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	2b40      	cmp	r3, #64	; 0x40
 80042dc:	d107      	bne.n	80042ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2200      	movs	r2, #0
 80042e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	f7ff fed2 	bl	8004090 <HAL_I2C_MemTxCpltCallback>
}
 80042ec:	e010      	b.n	8004310 <I2C_MasterTransmit_BTF+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7ff fe8a 	bl	8004010 <HAL_I2C_MasterTxCpltCallback>
}
 80042fc:	e008      	b.n	8004310 <I2C_MasterTransmit_BTF+0xf8>
  else if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004304:	b2db      	uxtb	r3, r3
 8004306:	2b40      	cmp	r3, #64	; 0x40
 8004308:	d102      	bne.n	8004310 <I2C_MasterTransmit_BTF+0xf8>
    I2C_MemoryTransmit_TXE_BTF(hi2c);
 800430a:	6878      	ldr	r0, [r7, #4]
 800430c:	f000 f804 	bl	8004318 <I2C_MemoryTransmit_TXE_BTF>
}
 8004310:	bf00      	nop
 8004312:	3710      	adds	r7, #16
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004318:	b480      	push	{r7}
 800431a:	b083      	sub	sp, #12
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  if (hi2c->EventCount == 0U)
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004324:	2b00      	cmp	r3, #0
 8004326:	d11d      	bne.n	8004364 <I2C_MemoryTransmit_TXE_BTF+0x4c>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800432c:	2b01      	cmp	r3, #1
 800432e:	d10b      	bne.n	8004348 <I2C_MemoryTransmit_TXE_BTF+0x30>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004334:	b2da      	uxtb	r2, r3
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004340:	1c9a      	adds	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004346:	e048      	b.n	80043da <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800434c:	b29b      	uxth	r3, r3
 800434e:	121b      	asrs	r3, r3, #8
 8004350:	b2da      	uxtb	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	1c5a      	adds	r2, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004362:	e03a      	b.n	80043da <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 1U)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004368:	2b01      	cmp	r3, #1
 800436a:	d10b      	bne.n	8004384 <I2C_MemoryTransmit_TXE_BTF+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004370:	b2da      	uxtb	r2, r3
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	1c5a      	adds	r2, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004382:	e02a      	b.n	80043da <I2C_MemoryTransmit_TXE_BTF+0xc2>
  else if (hi2c->EventCount == 2U)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004388:	2b02      	cmp	r3, #2
 800438a:	d126      	bne.n	80043da <I2C_MemoryTransmit_TXE_BTF+0xc2>
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004392:	b2db      	uxtb	r3, r3
 8004394:	2b22      	cmp	r3, #34	; 0x22
 8004396:	d108      	bne.n	80043aa <I2C_MemoryTransmit_TXE_BTF+0x92>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	681a      	ldr	r2, [r3, #0]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043a6:	601a      	str	r2, [r3, #0]
}
 80043a8:	e017      	b.n	80043da <I2C_MemoryTransmit_TXE_BTF+0xc2>
    else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b21      	cmp	r3, #33	; 0x21
 80043b4:	d111      	bne.n	80043da <I2C_MemoryTransmit_TXE_BTF+0xc2>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ba:	781a      	ldrb	r2, [r3, #0]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c6:	1c5a      	adds	r2, r3, #1
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043d0:	b29b      	uxth	r3, r3
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80043da:	bf00      	nop
 80043dc:	370c      	adds	r7, #12
 80043de:	46bd      	mov	sp, r7
 80043e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e4:	4770      	bx	lr

080043e6 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80043e6:	b580      	push	{r7, lr}
 80043e8:	b084      	sub	sp, #16
 80043ea:	af00      	add	r7, sp, #0
 80043ec:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	2b22      	cmp	r3, #34	; 0x22
 80043f8:	d173      	bne.n	80044e2 <I2C_MasterReceive_RXNE+0xfc>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fe:	b29b      	uxth	r3, r3
 8004400:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2b03      	cmp	r3, #3
 8004406:	d920      	bls.n	800444a <I2C_MasterReceive_RXNE+0x64>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	691a      	ldr	r2, [r3, #16]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	b2d2      	uxtb	r2, r2
 8004414:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	1c5a      	adds	r2, r3, #1
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004424:	b29b      	uxth	r3, r3
 8004426:	3b01      	subs	r3, #1
 8004428:	b29a      	uxth	r2, r3
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004432:	b29b      	uxth	r3, r3
 8004434:	2b03      	cmp	r3, #3
 8004436:	d154      	bne.n	80044e2 <I2C_MasterReceive_RXNE+0xfc>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004446:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004448:	e04b      	b.n	80044e2 <I2C_MasterReceive_RXNE+0xfc>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444e:	2b02      	cmp	r3, #2
 8004450:	d047      	beq.n	80044e2 <I2C_MasterReceive_RXNE+0xfc>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b01      	cmp	r3, #1
 8004456:	d002      	beq.n	800445e <I2C_MasterReceive_RXNE+0x78>
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d141      	bne.n	80044e2 <I2C_MasterReceive_RXNE+0xfc>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800446c:	601a      	str	r2, [r3, #0]
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800447c:	605a      	str	r2, [r3, #4]
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	691a      	ldr	r2, [r3, #16]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004488:	b2d2      	uxtb	r2, r2
 800448a:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004490:	1c5a      	adds	r2, r3, #1
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800449a:	b29b      	uxth	r3, r3
 800449c:	3b01      	subs	r3, #1
 800449e:	b29a      	uxth	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->State = HAL_I2C_STATE_READY;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2220      	movs	r2, #32
 80044a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	2b40      	cmp	r3, #64	; 0x40
 80044b6:	d10a      	bne.n	80044ce <I2C_MasterReceive_RXNE+0xe8>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f7ff fdec 	bl	80040a4 <HAL_I2C_MemRxCpltCallback>
}
 80044cc:	e009      	b.n	80044e2 <I2C_MasterReceive_RXNE+0xfc>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	2200      	movs	r2, #0
 80044d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	2212      	movs	r2, #18
 80044da:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80044dc:	6878      	ldr	r0, [r7, #4]
 80044de:	f7ff fda1 	bl	8004024 <HAL_I2C_MasterRxCpltCallback>
}
 80044e2:	bf00      	nop
 80044e4:	3710      	adds	r7, #16
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f6:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	2b04      	cmp	r3, #4
 8004500:	d11b      	bne.n	800453a <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685a      	ldr	r2, [r3, #4]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004510:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451c:	b2d2      	uxtb	r2, r2
 800451e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004524:	1c5a      	adds	r2, r3, #1
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800452e:	b29b      	uxth	r3, r3
 8004530:	3b01      	subs	r3, #1
 8004532:	b29a      	uxth	r2, r3
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004538:	e0bd      	b.n	80046b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800453e:	b29b      	uxth	r3, r3
 8004540:	2b03      	cmp	r3, #3
 8004542:	d129      	bne.n	8004598 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004552:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2b04      	cmp	r3, #4
 8004558:	d00a      	beq.n	8004570 <I2C_MasterReceive_BTF+0x86>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	2b02      	cmp	r3, #2
 800455e:	d007      	beq.n	8004570 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800456e:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	691a      	ldr	r2, [r3, #16]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457a:	b2d2      	uxtb	r2, r2
 800457c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004582:	1c5a      	adds	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800458c:	b29b      	uxth	r3, r3
 800458e:	3b01      	subs	r3, #1
 8004590:	b29a      	uxth	r2, r3
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004596:	e08e      	b.n	80046b6 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459c:	b29b      	uxth	r3, r3
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d176      	bne.n	8004690 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d002      	beq.n	80045ae <I2C_MasterReceive_BTF+0xc4>
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	2b10      	cmp	r3, #16
 80045ac:	d108      	bne.n	80045c0 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e019      	b.n	80045f4 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	2b04      	cmp	r3, #4
 80045c4:	d002      	beq.n	80045cc <I2C_MasterReceive_BTF+0xe2>
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d108      	bne.n	80045de <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	681a      	ldr	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045da:	601a      	str	r2, [r3, #0]
 80045dc:	e00a      	b.n	80045f4 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	2b10      	cmp	r3, #16
 80045e2:	d007      	beq.n	80045f4 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	681a      	ldr	r2, [r3, #0]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80045f2:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	691a      	ldr	r2, [r3, #16]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fe:	b2d2      	uxtb	r2, r2
 8004600:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004606:	1c5a      	adds	r2, r3, #1
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004610:	b29b      	uxth	r3, r3
 8004612:	3b01      	subs	r3, #1
 8004614:	b29a      	uxth	r2, r3
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	691a      	ldr	r2, [r3, #16]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004624:	b2d2      	uxtb	r2, r2
 8004626:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462c:	1c5a      	adds	r2, r3, #1
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004636:	b29b      	uxth	r3, r3
 8004638:	3b01      	subs	r3, #1
 800463a:	b29a      	uxth	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800464e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800465e:	b2db      	uxtb	r3, r3
 8004660:	2b40      	cmp	r3, #64	; 0x40
 8004662:	d10a      	bne.n	800467a <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7ff fd16 	bl	80040a4 <HAL_I2C_MemRxCpltCallback>
}
 8004678:	e01d      	b.n	80046b6 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2212      	movs	r2, #18
 8004686:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff fccb 	bl	8004024 <HAL_I2C_MasterRxCpltCallback>
}
 800468e:	e012      	b.n	80046b6 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	691a      	ldr	r2, [r3, #16]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800469a:	b2d2      	uxtb	r2, r2
 800469c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a2:	1c5a      	adds	r2, r3, #1
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ac:	b29b      	uxth	r3, r3
 80046ae:	3b01      	subs	r3, #1
 80046b0:	b29a      	uxth	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}

080046be <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80046be:	b480      	push	{r7}
 80046c0:	b083      	sub	sp, #12
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	2b40      	cmp	r3, #64	; 0x40
 80046d0:	d117      	bne.n	8004702 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d109      	bne.n	80046ee <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046de:	b2db      	uxtb	r3, r3
 80046e0:	461a      	mov	r2, r3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ea:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80046ec:	e067      	b.n	80047be <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f2:	b2db      	uxtb	r3, r3
 80046f4:	f043 0301 	orr.w	r3, r3, #1
 80046f8:	b2da      	uxtb	r2, r3
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	611a      	str	r2, [r3, #16]
}
 8004700:	e05d      	b.n	80047be <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800470a:	d133      	bne.n	8004774 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b21      	cmp	r3, #33	; 0x21
 8004716:	d109      	bne.n	800472c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471c:	b2db      	uxtb	r3, r3
 800471e:	461a      	mov	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004728:	611a      	str	r2, [r3, #16]
 800472a:	e008      	b.n	800473e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f043 0301 	orr.w	r3, r3, #1
 8004736:	b2da      	uxtb	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004742:	2b00      	cmp	r3, #0
 8004744:	d004      	beq.n	8004750 <I2C_Master_SB+0x92>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800474c:	2b00      	cmp	r3, #0
 800474e:	d108      	bne.n	8004762 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004754:	2b00      	cmp	r3, #0
 8004756:	d032      	beq.n	80047be <I2C_Master_SB+0x100>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800475c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800475e:	2b00      	cmp	r3, #0
 8004760:	d02d      	beq.n	80047be <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	685a      	ldr	r2, [r3, #4]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004770:	605a      	str	r2, [r3, #4]
}
 8004772:	e024      	b.n	80047be <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004778:	2b00      	cmp	r3, #0
 800477a:	d10e      	bne.n	800479a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004780:	b29b      	uxth	r3, r3
 8004782:	11db      	asrs	r3, r3, #7
 8004784:	b2db      	uxtb	r3, r3
 8004786:	f003 0306 	and.w	r3, r3, #6
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f063 030f 	orn	r3, r3, #15
 8004790:	b2da      	uxtb	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	611a      	str	r2, [r3, #16]
}
 8004798:	e011      	b.n	80047be <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d10d      	bne.n	80047be <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	11db      	asrs	r3, r3, #7
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	f003 0306 	and.w	r3, r3, #6
 80047b0:	b2db      	uxtb	r3, r3
 80047b2:	f063 030e 	orn	r3, r3, #14
 80047b6:	b2da      	uxtb	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	611a      	str	r2, [r3, #16]
}
 80047be:	bf00      	nop
 80047c0:	370c      	adds	r7, #12
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b083      	sub	sp, #12
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047d6:	b2da      	uxtb	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d103      	bne.n	80047ee <I2C_Master_ADD10+0x24>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d011      	beq.n	8004812 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d104      	bne.n	8004802 <I2C_Master_ADD10+0x38>
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d007      	beq.n	8004812 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	685a      	ldr	r2, [r3, #4]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004810:	605a      	str	r2, [r3, #4]
    }
  }
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800481e:	b480      	push	{r7}
 8004820:	b091      	sub	sp, #68	; 0x44
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800482c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004834:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004842:	b2db      	uxtb	r3, r3
 8004844:	2b22      	cmp	r3, #34	; 0x22
 8004846:	f040 8169 	bne.w	8004b1c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <I2C_Master_ADDR+0x54>
 8004852:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004856:	2b40      	cmp	r3, #64	; 0x40
 8004858:	d10b      	bne.n	8004872 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800485a:	2300      	movs	r3, #0
 800485c:	633b      	str	r3, [r7, #48]	; 0x30
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695b      	ldr	r3, [r3, #20]
 8004864:	633b      	str	r3, [r7, #48]	; 0x30
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	633b      	str	r3, [r7, #48]	; 0x30
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	e160      	b.n	8004b34 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004876:	2b00      	cmp	r3, #0
 8004878:	d11d      	bne.n	80048b6 <I2C_Master_ADDR+0x98>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	691b      	ldr	r3, [r3, #16]
 800487e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004882:	d118      	bne.n	80048b6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004884:	2300      	movs	r3, #0
 8004886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	695b      	ldr	r3, [r3, #20]
 800488e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	699b      	ldr	r3, [r3, #24]
 8004896:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004898:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80048a8:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	651a      	str	r2, [r3, #80]	; 0x50
 80048b4:	e13e      	b.n	8004b34 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d113      	bne.n	80048e8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048c0:	2300      	movs	r3, #0
 80048c2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	695b      	ldr	r3, [r3, #20]
 80048ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	699b      	ldr	r3, [r3, #24]
 80048d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681a      	ldr	r2, [r3, #0]
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048e4:	601a      	str	r2, [r3, #0]
 80048e6:	e115      	b.n	8004b14 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	f040 808a 	bne.w	8004a08 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80048f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80048fa:	d137      	bne.n	800496c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	681a      	ldr	r2, [r3, #0]
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490a:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004916:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491a:	d113      	bne.n	8004944 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800492c:	2300      	movs	r3, #0
 800492e:	627b      	str	r3, [r7, #36]	; 0x24
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	695b      	ldr	r3, [r3, #20]
 8004936:	627b      	str	r3, [r7, #36]	; 0x24
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	627b      	str	r3, [r7, #36]	; 0x24
 8004940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004942:	e0e7      	b.n	8004b14 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004944:	2300      	movs	r3, #0
 8004946:	623b      	str	r3, [r7, #32]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	695b      	ldr	r3, [r3, #20]
 800494e:	623b      	str	r3, [r7, #32]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	699b      	ldr	r3, [r3, #24]
 8004956:	623b      	str	r3, [r7, #32]
 8004958:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e0d3      	b.n	8004b14 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800496c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800496e:	2b08      	cmp	r3, #8
 8004970:	d02e      	beq.n	80049d0 <I2C_Master_ADDR+0x1b2>
 8004972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004974:	2b20      	cmp	r3, #32
 8004976:	d02b      	beq.n	80049d0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8004978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800497a:	2b12      	cmp	r3, #18
 800497c:	d102      	bne.n	8004984 <I2C_Master_ADDR+0x166>
 800497e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004980:	2b01      	cmp	r3, #1
 8004982:	d125      	bne.n	80049d0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004986:	2b04      	cmp	r3, #4
 8004988:	d00e      	beq.n	80049a8 <I2C_Master_ADDR+0x18a>
 800498a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800498c:	2b02      	cmp	r3, #2
 800498e:	d00b      	beq.n	80049a8 <I2C_Master_ADDR+0x18a>
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	2b10      	cmp	r3, #16
 8004994:	d008      	beq.n	80049a8 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	681a      	ldr	r2, [r3, #0]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049a4:	601a      	str	r2, [r3, #0]
 80049a6:	e007      	b.n	80049b8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049b6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049b8:	2300      	movs	r3, #0
 80049ba:	61fb      	str	r3, [r7, #28]
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	61fb      	str	r3, [r7, #28]
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	61fb      	str	r3, [r7, #28]
 80049cc:	69fb      	ldr	r3, [r7, #28]
 80049ce:	e0a1      	b.n	8004b14 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681a      	ldr	r2, [r3, #0]
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049de:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049e0:	2300      	movs	r3, #0
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	695b      	ldr	r3, [r3, #20]
 80049ea:	61bb      	str	r3, [r7, #24]
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	61bb      	str	r3, [r7, #24]
 80049f4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a04:	601a      	str	r2, [r3, #0]
 8004a06:	e085      	b.n	8004b14 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a0c:	b29b      	uxth	r3, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d14d      	bne.n	8004aae <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a14:	2b04      	cmp	r3, #4
 8004a16:	d016      	beq.n	8004a46 <I2C_Master_ADDR+0x228>
 8004a18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d013      	beq.n	8004a46 <I2C_Master_ADDR+0x228>
 8004a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a20:	2b10      	cmp	r3, #16
 8004a22:	d010      	beq.n	8004a46 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681a      	ldr	r2, [r3, #0]
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a32:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a42:	601a      	str	r2, [r3, #0]
 8004a44:	e007      	b.n	8004a56 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a54:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	685b      	ldr	r3, [r3, #4]
 8004a5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a64:	d117      	bne.n	8004a96 <I2C_Master_ADDR+0x278>
 8004a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a6c:	d00b      	beq.n	8004a86 <I2C_Master_ADDR+0x268>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d008      	beq.n	8004a86 <I2C_Master_ADDR+0x268>
 8004a74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a76:	2b08      	cmp	r3, #8
 8004a78:	d005      	beq.n	8004a86 <I2C_Master_ADDR+0x268>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	2b10      	cmp	r3, #16
 8004a7e:	d002      	beq.n	8004a86 <I2C_Master_ADDR+0x268>
 8004a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a82:	2b20      	cmp	r3, #32
 8004a84:	d107      	bne.n	8004a96 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	685a      	ldr	r2, [r3, #4]
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a94:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	695b      	ldr	r3, [r3, #20]
 8004aa0:	617b      	str	r3, [r7, #20]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	699b      	ldr	r3, [r3, #24]
 8004aa8:	617b      	str	r3, [r7, #20]
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	e032      	b.n	8004b14 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	681a      	ldr	r2, [r3, #0]
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004abc:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	685b      	ldr	r3, [r3, #4]
 8004ac4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ac8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004acc:	d117      	bne.n	8004afe <I2C_Master_ADDR+0x2e0>
 8004ace:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004ad4:	d00b      	beq.n	8004aee <I2C_Master_ADDR+0x2d0>
 8004ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad8:	2b01      	cmp	r3, #1
 8004ada:	d008      	beq.n	8004aee <I2C_Master_ADDR+0x2d0>
 8004adc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ade:	2b08      	cmp	r3, #8
 8004ae0:	d005      	beq.n	8004aee <I2C_Master_ADDR+0x2d0>
 8004ae2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae4:	2b10      	cmp	r3, #16
 8004ae6:	d002      	beq.n	8004aee <I2C_Master_ADDR+0x2d0>
 8004ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aea:	2b20      	cmp	r3, #32
 8004aec:	d107      	bne.n	8004afe <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004afc:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004afe:	2300      	movs	r3, #0
 8004b00:	613b      	str	r3, [r7, #16]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	695b      	ldr	r3, [r3, #20]
 8004b08:	613b      	str	r3, [r7, #16]
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	699b      	ldr	r3, [r3, #24]
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2200      	movs	r2, #0
 8004b18:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004b1a:	e00b      	b.n	8004b34 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	60fb      	str	r3, [r7, #12]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	60fb      	str	r3, [r7, #12]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	699b      	ldr	r3, [r3, #24]
 8004b2e:	60fb      	str	r3, [r7, #12]
 8004b30:	68fb      	ldr	r3, [r7, #12]
}
 8004b32:	e7ff      	b.n	8004b34 <I2C_Master_ADDR+0x316>
 8004b34:	bf00      	nop
 8004b36:	3744      	adds	r7, #68	; 0x44
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3e:	4770      	bx	lr

08004b40 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b084      	sub	sp, #16
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b4e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b54:	b29b      	uxth	r3, r3
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d02b      	beq.n	8004bb2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5e:	781a      	ldrb	r2, [r3, #0]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	1c5a      	adds	r2, r3, #1
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b74:	b29b      	uxth	r3, r3
 8004b76:	3b01      	subs	r3, #1
 8004b78:	b29a      	uxth	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b82:	b29b      	uxth	r3, r3
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d114      	bne.n	8004bb2 <I2C_SlaveTransmit_TXE+0x72>
 8004b88:	7bfb      	ldrb	r3, [r7, #15]
 8004b8a:	2b29      	cmp	r3, #41	; 0x29
 8004b8c:	d111      	bne.n	8004bb2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685a      	ldr	r2, [r3, #4]
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b9c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2221      	movs	r2, #33	; 0x21
 8004ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	2228      	movs	r2, #40	; 0x28
 8004ba8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f7ff fa43 	bl	8004038 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bb2:	bf00      	nop
 8004bb4:	3710      	adds	r7, #16
 8004bb6:	46bd      	mov	sp, r7
 8004bb8:	bd80      	pop	{r7, pc}

08004bba <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bba:	b480      	push	{r7}
 8004bbc:	b083      	sub	sp, #12
 8004bbe:	af00      	add	r7, sp, #0
 8004bc0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d011      	beq.n	8004bf0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd0:	781a      	ldrb	r2, [r3, #0]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bdc:	1c5a      	adds	r2, r3, #1
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004be6:	b29b      	uxth	r3, r3
 8004be8:	3b01      	subs	r3, #1
 8004bea:	b29a      	uxth	r2, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004bf0:	bf00      	nop
 8004bf2:	370c      	adds	r7, #12
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfa:	4770      	bx	lr

08004bfc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c10:	b29b      	uxth	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d02c      	beq.n	8004c70 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	691a      	ldr	r2, [r3, #16]
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c20:	b2d2      	uxtb	r2, r2
 8004c22:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c28:	1c5a      	adds	r2, r3, #1
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	3b01      	subs	r3, #1
 8004c36:	b29a      	uxth	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d114      	bne.n	8004c70 <I2C_SlaveReceive_RXNE+0x74>
 8004c46:	7bfb      	ldrb	r3, [r7, #15]
 8004c48:	2b2a      	cmp	r3, #42	; 0x2a
 8004c4a:	d111      	bne.n	8004c70 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	685a      	ldr	r2, [r3, #4]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2222      	movs	r2, #34	; 0x22
 8004c60:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2228      	movs	r2, #40	; 0x28
 8004c66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff f9ee 	bl	800404c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	3710      	adds	r7, #16
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004c78:	b480      	push	{r7}
 8004c7a:	b083      	sub	sp, #12
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d012      	beq.n	8004cb0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	691a      	ldr	r2, [r3, #16]
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	b2d2      	uxtb	r2, r2
 8004c96:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	1c5a      	adds	r2, r3, #1
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004cb0:	bf00      	nop
 8004cb2:	370c      	adds	r7, #12
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr

08004cbc <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b084      	sub	sp, #16
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	6078      	str	r0, [r7, #4]
 8004cc4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cd0:	b2db      	uxtb	r3, r3
 8004cd2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cd6:	2b28      	cmp	r3, #40	; 0x28
 8004cd8:	d127      	bne.n	8004d2a <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ce8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d101      	bne.n	8004cfa <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	09db      	lsrs	r3, r3, #7
 8004cfe:	f003 0301 	and.w	r3, r3, #1
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d103      	bne.n	8004d0e <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	68db      	ldr	r3, [r3, #12]
 8004d0a:	81bb      	strh	r3, [r7, #12]
 8004d0c:	e002      	b.n	8004d14 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	699b      	ldr	r3, [r3, #24]
 8004d12:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004d1c:	89ba      	ldrh	r2, [r7, #12]
 8004d1e:	7bfb      	ldrb	r3, [r7, #15]
 8004d20:	4619      	mov	r1, r3
 8004d22:	6878      	ldr	r0, [r7, #4]
 8004d24:	f7ff f99c 	bl	8004060 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004d28:	e008      	b.n	8004d3c <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f06f 0202 	mvn.w	r2, #2
 8004d32:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2200      	movs	r2, #0
 8004d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004d3c:	bf00      	nop
 8004d3e:	3710      	adds	r7, #16
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b084      	sub	sp, #16
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d52:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	685a      	ldr	r2, [r3, #4]
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004d62:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004d64:	2300      	movs	r3, #0
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	695b      	ldr	r3, [r3, #20]
 8004d6e:	60bb      	str	r3, [r7, #8]
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
 8004d80:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d90:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685b      	ldr	r3, [r3, #4]
 8004d98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d9c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004da0:	d172      	bne.n	8004e88 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004da2:	7bfb      	ldrb	r3, [r7, #15]
 8004da4:	2b22      	cmp	r3, #34	; 0x22
 8004da6:	d002      	beq.n	8004dae <I2C_Slave_STOPF+0x6a>
 8004da8:	7bfb      	ldrb	r3, [r7, #15]
 8004daa:	2b2a      	cmp	r3, #42	; 0x2a
 8004dac:	d135      	bne.n	8004e1a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	685b      	ldr	r3, [r3, #4]
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f043 0204 	orr.w	r2, r3, #4
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	685a      	ldr	r2, [r3, #4]
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004de0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	4618      	mov	r0, r3
 8004de8:	f7fe f9bc 	bl	8003164 <HAL_DMA_GetState>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d049      	beq.n	8004e86 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	4a69      	ldr	r2, [pc, #420]	; (8004f9c <I2C_Slave_STOPF+0x258>)
 8004df8:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f7fe f804 	bl	8002e0c <HAL_DMA_Abort_IT>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d03d      	beq.n	8004e86 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e14:	4610      	mov	r0, r2
 8004e16:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e18:	e035      	b.n	8004e86 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	685b      	ldr	r3, [r3, #4]
 8004e22:	b29a      	uxth	r2, r3
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e2c:	b29b      	uxth	r3, r3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d005      	beq.n	8004e3e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e36:	f043 0204 	orr.w	r2, r3, #4
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e4c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e52:	4618      	mov	r0, r3
 8004e54:	f7fe f986 	bl	8003164 <HAL_DMA_GetState>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d014      	beq.n	8004e88 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e62:	4a4e      	ldr	r2, [pc, #312]	; (8004f9c <I2C_Slave_STOPF+0x258>)
 8004e64:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fd ffce 	bl	8002e0c <HAL_DMA_Abort_IT>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d008      	beq.n	8004e88 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e7a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e7c:	687a      	ldr	r2, [r7, #4]
 8004e7e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
 8004e84:	e000      	b.n	8004e88 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e86:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8c:	b29b      	uxth	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d03e      	beq.n	8004f10 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	695b      	ldr	r3, [r3, #20]
 8004e98:	f003 0304 	and.w	r3, r3, #4
 8004e9c:	2b04      	cmp	r3, #4
 8004e9e:	d112      	bne.n	8004ec6 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	691a      	ldr	r2, [r3, #16]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eaa:	b2d2      	uxtb	r2, r2
 8004eac:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb2:	1c5a      	adds	r2, r3, #1
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ebc:	b29b      	uxth	r3, r3
 8004ebe:	3b01      	subs	r3, #1
 8004ec0:	b29a      	uxth	r2, r3
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	695b      	ldr	r3, [r3, #20]
 8004ecc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ed0:	2b40      	cmp	r3, #64	; 0x40
 8004ed2:	d112      	bne.n	8004efa <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	691a      	ldr	r2, [r3, #16]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ede:	b2d2      	uxtb	r2, r2
 8004ee0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	1c5a      	adds	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ef0:	b29b      	uxth	r3, r3
 8004ef2:	3b01      	subs	r3, #1
 8004ef4:	b29a      	uxth	r2, r3
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d005      	beq.n	8004f10 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f08:	f043 0204 	orr.w	r2, r3, #4
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d003      	beq.n	8004f20 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 f843 	bl	8004fa4 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004f1e:	e039      	b.n	8004f94 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004f20:	7bfb      	ldrb	r3, [r7, #15]
 8004f22:	2b2a      	cmp	r3, #42	; 0x2a
 8004f24:	d109      	bne.n	8004f3a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2228      	movs	r2, #40	; 0x28
 8004f30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f7ff f889 	bl	800404c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f40:	b2db      	uxtb	r3, r3
 8004f42:	2b28      	cmp	r3, #40	; 0x28
 8004f44:	d111      	bne.n	8004f6a <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a15      	ldr	r2, [pc, #84]	; (8004fa0 <I2C_Slave_STOPF+0x25c>)
 8004f4a:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004f62:	6878      	ldr	r0, [r7, #4]
 8004f64:	f7ff f88a 	bl	800407c <HAL_I2C_ListenCpltCallback>
}
 8004f68:	e014      	b.n	8004f94 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f6e:	2b22      	cmp	r3, #34	; 0x22
 8004f70:	d002      	beq.n	8004f78 <I2C_Slave_STOPF+0x234>
 8004f72:	7bfb      	ldrb	r3, [r7, #15]
 8004f74:	2b22      	cmp	r3, #34	; 0x22
 8004f76:	d10d      	bne.n	8004f94 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2220      	movs	r2, #32
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7ff f85c 	bl	800404c <HAL_I2C_SlaveRxCpltCallback>
}
 8004f94:	bf00      	nop
 8004f96:	3710      	adds	r7, #16
 8004f98:	46bd      	mov	sp, r7
 8004f9a:	bd80      	pop	{r7, pc}
 8004f9c:	08005305 	.word	0x08005305
 8004fa0:	ffff0000 	.word	0xffff0000

08004fa4 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b084      	sub	sp, #16
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fb2:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentError;

  if ((hi2c->Mode == HAL_I2C_MODE_MASTER) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fba:	b2db      	uxtb	r3, r3
 8004fbc:	2b10      	cmp	r3, #16
 8004fbe:	d10a      	bne.n	8004fd6 <I2C_ITError+0x32>
 8004fc0:	7bfb      	ldrb	r3, [r7, #15]
 8004fc2:	2b22      	cmp	r3, #34	; 0x22
 8004fc4:	d107      	bne.n	8004fd6 <I2C_ITError+0x32>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681a      	ldr	r2, [r3, #0]
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004fd6:	7bfb      	ldrb	r3, [r7, #15]
 8004fd8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004fdc:	2b28      	cmp	r3, #40	; 0x28
 8004fde:	d107      	bne.n	8004ff0 <I2C_ITError+0x4c>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2200      	movs	r2, #0
 8004fe4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2228      	movs	r2, #40	; 0x28
 8004fea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004fee:	e015      	b.n	800501c <I2C_ITError+0x78>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ffa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ffe:	d006      	beq.n	800500e <I2C_ITError+0x6a>
 8005000:	7bfb      	ldrb	r3, [r7, #15]
 8005002:	2b60      	cmp	r3, #96	; 0x60
 8005004:	d003      	beq.n	800500e <I2C_ITError+0x6a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2220      	movs	r2, #32
 800500a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005026:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800502a:	d162      	bne.n	80050f2 <I2C_ITError+0x14e>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	685a      	ldr	r2, [r3, #4]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800503a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005040:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b01      	cmp	r3, #1
 8005048:	d020      	beq.n	800508c <I2C_ITError+0xe8>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800504e:	4a6a      	ldr	r2, [pc, #424]	; (80051f8 <I2C_ITError+0x254>)
 8005050:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005056:	4618      	mov	r0, r3
 8005058:	f7fd fed8 	bl	8002e0c <HAL_DMA_Abort_IT>
 800505c:	4603      	mov	r3, r0
 800505e:	2b00      	cmp	r3, #0
 8005060:	f000 8089 	beq.w	8005176 <I2C_ITError+0x1d2>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	681a      	ldr	r2, [r3, #0]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f022 0201 	bic.w	r2, r2, #1
 8005072:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	2220      	movs	r2, #32
 8005078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005080:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005082:	687a      	ldr	r2, [r7, #4]
 8005084:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005086:	4610      	mov	r0, r2
 8005088:	4798      	blx	r3
 800508a:	e074      	b.n	8005176 <I2C_ITError+0x1d2>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005090:	4a59      	ldr	r2, [pc, #356]	; (80051f8 <I2C_ITError+0x254>)
 8005092:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005098:	4618      	mov	r0, r3
 800509a:	f7fd feb7 	bl	8002e0c <HAL_DMA_Abort_IT>
 800509e:	4603      	mov	r3, r0
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d068      	beq.n	8005176 <I2C_ITError+0x1d2>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d10b      	bne.n	80050ca <I2C_ITError+0x126>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2220      	movs	r2, #32
 80050de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80050ec:	4610      	mov	r0, r2
 80050ee:	4798      	blx	r3
 80050f0:	e041      	b.n	8005176 <I2C_ITError+0x1d2>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f8:	b2db      	uxtb	r3, r3
 80050fa:	2b60      	cmp	r3, #96	; 0x60
 80050fc:	d125      	bne.n	800514a <I2C_ITError+0x1a6>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	695b      	ldr	r3, [r3, #20]
 8005112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005116:	2b40      	cmp	r3, #64	; 0x40
 8005118:	d10b      	bne.n	8005132 <I2C_ITError+0x18e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	691a      	ldr	r2, [r3, #16]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005124:	b2d2      	uxtb	r2, r2
 8005126:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	681a      	ldr	r2, [r3, #0]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f022 0201 	bic.w	r2, r2, #1
 8005140:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f7fe ffc2 	bl	80040cc <HAL_I2C_AbortCpltCallback>
 8005148:	e015      	b.n	8005176 <I2C_ITError+0x1d2>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	695b      	ldr	r3, [r3, #20]
 8005150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005154:	2b40      	cmp	r3, #64	; 0x40
 8005156:	d10b      	bne.n	8005170 <I2C_ITError+0x1cc>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691a      	ldr	r2, [r3, #16]
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	b2d2      	uxtb	r2, r2
 8005164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800516a:	1c5a      	adds	r2, r3, #1
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005170:	6878      	ldr	r0, [r7, #4]
 8005172:	f7fe ffa1 	bl	80040b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800517c:	68bb      	ldr	r3, [r7, #8]
 800517e:	f003 0301 	and.w	r3, r3, #1
 8005182:	2b00      	cmp	r3, #0
 8005184:	d10e      	bne.n	80051a4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800518c:	2b00      	cmp	r3, #0
 800518e:	d109      	bne.n	80051a4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005190:	68bb      	ldr	r3, [r7, #8]
 8005192:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005196:	2b00      	cmp	r3, #0
 8005198:	d104      	bne.n	80051a4 <I2C_ITError+0x200>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d007      	beq.n	80051b4 <I2C_ITError+0x210>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	685a      	ldr	r2, [r3, #4]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80051b2:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051ba:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c0:	f003 0304 	and.w	r3, r3, #4
 80051c4:	2b04      	cmp	r3, #4
 80051c6:	d113      	bne.n	80051f0 <I2C_ITError+0x24c>
 80051c8:	7bfb      	ldrb	r3, [r7, #15]
 80051ca:	2b28      	cmp	r3, #40	; 0x28
 80051cc:	d110      	bne.n	80051f0 <I2C_ITError+0x24c>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	4a0a      	ldr	r2, [pc, #40]	; (80051fc <I2C_ITError+0x258>)
 80051d2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2200      	movs	r2, #0
 80051d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2220      	movs	r2, #32
 80051de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2200      	movs	r2, #0
 80051e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	f7fe ff46 	bl	800407c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	08005305 	.word	0x08005305
 80051fc:	ffff0000 	.word	0xffff0000

08005200 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b088      	sub	sp, #32
 8005204:	af02      	add	r7, sp, #8
 8005206:	60f8      	str	r0, [r7, #12]
 8005208:	607a      	str	r2, [r7, #4]
 800520a:	603b      	str	r3, [r7, #0]
 800520c:	460b      	mov	r3, r1
 800520e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	2b08      	cmp	r3, #8
 800521a:	d006      	beq.n	800522a <I2C_MasterRequestWrite+0x2a>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	2b01      	cmp	r3, #1
 8005220:	d003      	beq.n	800522a <I2C_MasterRequestWrite+0x2a>
 8005222:	697b      	ldr	r3, [r7, #20]
 8005224:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005228:	d108      	bne.n	800523c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	681a      	ldr	r2, [r3, #0]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005238:	601a      	str	r2, [r3, #0]
 800523a:	e00b      	b.n	8005254 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005240:	2b12      	cmp	r3, #18
 8005242:	d107      	bne.n	8005254 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	681a      	ldr	r2, [r3, #0]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005252:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	9300      	str	r3, [sp, #0]
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2200      	movs	r2, #0
 800525c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005260:	68f8      	ldr	r0, [r7, #12]
 8005262:	f000 f8ce 	bl	8005402 <I2C_WaitOnFlagUntilTimeout>
 8005266:	4603      	mov	r3, r0
 8005268:	2b00      	cmp	r3, #0
 800526a:	d00c      	beq.n	8005286 <I2C_MasterRequestWrite+0x86>
  {
    if (hi2c->Instance->CR1 & I2C_CR1_START)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005276:	2b00      	cmp	r3, #0
 8005278:	d003      	beq.n	8005282 <I2C_MasterRequestWrite+0x82>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005280:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e035      	b.n	80052f2 <I2C_MasterRequestWrite+0xf2>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	691b      	ldr	r3, [r3, #16]
 800528a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800528e:	d108      	bne.n	80052a2 <I2C_MasterRequestWrite+0xa2>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005290:	897b      	ldrh	r3, [r7, #10]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	461a      	mov	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800529e:	611a      	str	r2, [r3, #16]
 80052a0:	e01b      	b.n	80052da <I2C_MasterRequestWrite+0xda>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80052a2:	897b      	ldrh	r3, [r7, #10]
 80052a4:	11db      	asrs	r3, r3, #7
 80052a6:	b2db      	uxtb	r3, r3
 80052a8:	f003 0306 	and.w	r3, r3, #6
 80052ac:	b2db      	uxtb	r3, r3
 80052ae:	f063 030f 	orn	r3, r3, #15
 80052b2:	b2da      	uxtb	r2, r3
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	490f      	ldr	r1, [pc, #60]	; (80052fc <I2C_MasterRequestWrite+0xfc>)
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 f8f5 	bl	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d001      	beq.n	80052d0 <I2C_MasterRequestWrite+0xd0>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e010      	b.n	80052f2 <I2C_MasterRequestWrite+0xf2>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80052d0:	897b      	ldrh	r3, [r7, #10]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	687a      	ldr	r2, [r7, #4]
 80052de:	4908      	ldr	r1, [pc, #32]	; (8005300 <I2C_MasterRequestWrite+0x100>)
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f8e5 	bl	80054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80052e6:	4603      	mov	r3, r0
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d001      	beq.n	80052f0 <I2C_MasterRequestWrite+0xf0>
  {
    return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e000      	b.n	80052f2 <I2C_MasterRequestWrite+0xf2>
  }

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3718      	adds	r7, #24
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	00010008 	.word	0x00010008
 8005300:	00010002 	.word	0x00010002

08005304 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b084      	sub	sp, #16
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005310:	60fb      	str	r3, [r7, #12]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005318:	72fb      	strb	r3, [r7, #11]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800531e:	2b00      	cmp	r3, #0
 8005320:	d003      	beq.n	800532a <I2C_DMAAbort+0x26>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005326:	2200      	movs	r2, #0
 8005328:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800532e:	2b00      	cmp	r3, #0
 8005330:	d003      	beq.n	800533a <I2C_DMAAbort+0x36>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005336:	2200      	movs	r2, #0
 8005338:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005348:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2200      	movs	r2, #0
 800534e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005354:	2b00      	cmp	r3, #0
 8005356:	d003      	beq.n	8005360 <I2C_DMAAbort+0x5c>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800535c:	2200      	movs	r2, #0
 800535e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005364:	2b00      	cmp	r3, #0
 8005366:	d003      	beq.n	8005370 <I2C_DMAAbort+0x6c>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800536c:	2200      	movs	r2, #0
 800536e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f022 0201 	bic.w	r2, r2, #1
 800537e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005386:	b2db      	uxtb	r3, r3
 8005388:	2b60      	cmp	r3, #96	; 0x60
 800538a:	d10e      	bne.n	80053aa <I2C_DMAAbort+0xa6>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	2220      	movs	r2, #32
 8005390:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	2200      	movs	r2, #0
 80053a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80053a2:	68f8      	ldr	r0, [r7, #12]
 80053a4:	f7fe fe92 	bl	80040cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80053a8:	e027      	b.n	80053fa <I2C_DMAAbort+0xf6>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80053aa:	7afb      	ldrb	r3, [r7, #11]
 80053ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80053b0:	2b28      	cmp	r3, #40	; 0x28
 80053b2:	d117      	bne.n	80053e4 <I2C_DMAAbort+0xe0>
      __HAL_I2C_ENABLE(hi2c);
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f042 0201 	orr.w	r2, r2, #1
 80053c2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	681a      	ldr	r2, [r3, #0]
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80053d2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2200      	movs	r2, #0
 80053d8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	2228      	movs	r2, #40	; 0x28
 80053de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80053e2:	e007      	b.n	80053f4 <I2C_DMAAbort+0xf0>
      hi2c->State = HAL_I2C_STATE_READY;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2220      	movs	r2, #32
 80053e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	2200      	movs	r2, #0
 80053f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f7fe fe5f 	bl	80040b8 <HAL_I2C_ErrorCallback>
}
 80053fa:	bf00      	nop
 80053fc:	3710      	adds	r7, #16
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}

08005402 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005402:	b580      	push	{r7, lr}
 8005404:	b084      	sub	sp, #16
 8005406:	af00      	add	r7, sp, #0
 8005408:	60f8      	str	r0, [r7, #12]
 800540a:	60b9      	str	r1, [r7, #8]
 800540c:	603b      	str	r3, [r7, #0]
 800540e:	4613      	mov	r3, r2
 8005410:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005412:	e025      	b.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	f1b3 3fff 	cmp.w	r3, #4294967295
 800541a:	d021      	beq.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800541c:	f7fd f8a6 	bl	800256c <HAL_GetTick>
 8005420:	4602      	mov	r2, r0
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	1ad3      	subs	r3, r2, r3
 8005426:	683a      	ldr	r2, [r7, #0]
 8005428:	429a      	cmp	r2, r3
 800542a:	d302      	bcc.n	8005432 <I2C_WaitOnFlagUntilTimeout+0x30>
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d116      	bne.n	8005460 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	2200      	movs	r2, #0
 8005436:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	2220      	movs	r2, #32
 800543c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	2200      	movs	r2, #0
 8005444:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800544c:	f043 0220 	orr.w	r2, r3, #32
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	2200      	movs	r2, #0
 8005458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800545c:	2301      	movs	r3, #1
 800545e:	e023      	b.n	80054a8 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005460:	68bb      	ldr	r3, [r7, #8]
 8005462:	0c1b      	lsrs	r3, r3, #16
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b01      	cmp	r3, #1
 8005468:	d10d      	bne.n	8005486 <I2C_WaitOnFlagUntilTimeout+0x84>
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	695b      	ldr	r3, [r3, #20]
 8005470:	43da      	mvns	r2, r3
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	4013      	ands	r3, r2
 8005476:	b29b      	uxth	r3, r3
 8005478:	2b00      	cmp	r3, #0
 800547a:	bf0c      	ite	eq
 800547c:	2301      	moveq	r3, #1
 800547e:	2300      	movne	r3, #0
 8005480:	b2db      	uxtb	r3, r3
 8005482:	461a      	mov	r2, r3
 8005484:	e00c      	b.n	80054a0 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	699b      	ldr	r3, [r3, #24]
 800548c:	43da      	mvns	r2, r3
 800548e:	68bb      	ldr	r3, [r7, #8]
 8005490:	4013      	ands	r3, r2
 8005492:	b29b      	uxth	r3, r3
 8005494:	2b00      	cmp	r3, #0
 8005496:	bf0c      	ite	eq
 8005498:	2301      	moveq	r3, #1
 800549a:	2300      	movne	r3, #0
 800549c:	b2db      	uxtb	r3, r3
 800549e:	461a      	mov	r2, r3
 80054a0:	79fb      	ldrb	r3, [r7, #7]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d0b6      	beq.n	8005414 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80054a6:	2300      	movs	r3, #0
}
 80054a8:	4618      	mov	r0, r3
 80054aa:	3710      	adds	r7, #16
 80054ac:	46bd      	mov	sp, r7
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b084      	sub	sp, #16
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80054be:	e051      	b.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054ce:	d123      	bne.n	8005518 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054de:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80054e8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2200      	movs	r2, #0
 80054ee:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2220      	movs	r2, #32
 80054f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005504:	f043 0204 	orr.w	r2, r3, #4
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2200      	movs	r2, #0
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005514:	2301      	movs	r3, #1
 8005516:	e046      	b.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551e:	d021      	beq.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005520:	f7fd f824 	bl	800256c <HAL_GetTick>
 8005524:	4602      	mov	r2, r0
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	1ad3      	subs	r3, r2, r3
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	429a      	cmp	r2, r3
 800552e:	d302      	bcc.n	8005536 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2b00      	cmp	r3, #0
 8005534:	d116      	bne.n	8005564 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2200      	movs	r2, #0
 800553a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2220      	movs	r2, #32
 8005540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2200      	movs	r2, #0
 8005548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005550:	f043 0220 	orr.w	r2, r3, #32
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005560:	2301      	movs	r3, #1
 8005562:	e020      	b.n	80055a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	0c1b      	lsrs	r3, r3, #16
 8005568:	b2db      	uxtb	r3, r3
 800556a:	2b01      	cmp	r3, #1
 800556c:	d10c      	bne.n	8005588 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	695b      	ldr	r3, [r3, #20]
 8005574:	43da      	mvns	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4013      	ands	r3, r2
 800557a:	b29b      	uxth	r3, r3
 800557c:	2b00      	cmp	r3, #0
 800557e:	bf14      	ite	ne
 8005580:	2301      	movne	r3, #1
 8005582:	2300      	moveq	r3, #0
 8005584:	b2db      	uxtb	r3, r3
 8005586:	e00b      	b.n	80055a0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	43da      	mvns	r2, r3
 8005590:	68bb      	ldr	r3, [r7, #8]
 8005592:	4013      	ands	r3, r2
 8005594:	b29b      	uxth	r3, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	bf14      	ite	ne
 800559a:	2301      	movne	r3, #1
 800559c:	2300      	moveq	r3, #0
 800559e:	b2db      	uxtb	r3, r3
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d18d      	bne.n	80054c0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3710      	adds	r7, #16
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b084      	sub	sp, #16
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	60b9      	str	r1, [r7, #8]
 80055b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80055ba:	e02d      	b.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80055bc:	68f8      	ldr	r0, [r7, #12]
 80055be:	f000 f878 	bl	80056b2 <I2C_IsAcknowledgeFailed>
 80055c2:	4603      	mov	r3, r0
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d001      	beq.n	80055cc <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80055c8:	2301      	movs	r3, #1
 80055ca:	e02d      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055cc:	68bb      	ldr	r3, [r7, #8]
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055d2:	d021      	beq.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055d4:	f7fc ffca 	bl	800256c <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	429a      	cmp	r2, r3
 80055e2:	d302      	bcc.n	80055ea <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2200      	movs	r2, #0
 80055ee:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	2220      	movs	r2, #32
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005604:	f043 0220 	orr.w	r2, r3, #32
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005614:	2301      	movs	r3, #1
 8005616:	e007      	b.n	8005628 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	695b      	ldr	r3, [r3, #20]
 800561e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005622:	2b80      	cmp	r3, #128	; 0x80
 8005624:	d1ca      	bne.n	80055bc <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005626:	2300      	movs	r3, #0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3710      	adds	r7, #16
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b084      	sub	sp, #16
 8005634:	af00      	add	r7, sp, #0
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800563c:	e02d      	b.n	800569a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f837 	bl	80056b2 <I2C_IsAcknowledgeFailed>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e02d      	b.n	80056aa <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005654:	d021      	beq.n	800569a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7fc ff89 	bl	800256c <HAL_GetTick>
 800565a:	4602      	mov	r2, r0
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	1ad3      	subs	r3, r2, r3
 8005660:	68ba      	ldr	r2, [r7, #8]
 8005662:	429a      	cmp	r2, r3
 8005664:	d302      	bcc.n	800566c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d116      	bne.n	800569a <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	2200      	movs	r2, #0
 8005670:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2220      	movs	r2, #32
 8005676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2200      	movs	r2, #0
 800567e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005686:	f043 0220 	orr.w	r2, r3, #32
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005696:	2301      	movs	r3, #1
 8005698:	e007      	b.n	80056aa <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	695b      	ldr	r3, [r3, #20]
 80056a0:	f003 0304 	and.w	r3, r3, #4
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d1ca      	bne.n	800563e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80056a8:	2300      	movs	r3, #0
}
 80056aa:	4618      	mov	r0, r3
 80056ac:	3710      	adds	r7, #16
 80056ae:	46bd      	mov	sp, r7
 80056b0:	bd80      	pop	{r7, pc}

080056b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80056b2:	b480      	push	{r7}
 80056b4:	b083      	sub	sp, #12
 80056b6:	af00      	add	r7, sp, #0
 80056b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	695b      	ldr	r3, [r3, #20]
 80056c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056c8:	d11b      	bne.n	8005702 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2220      	movs	r2, #32
 80056de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ee:	f043 0204 	orr.w	r2, r3, #4
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80056fe:	2301      	movs	r3, #1
 8005700:	e000      	b.n	8005704 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005702:	2300      	movs	r3, #0
}
 8005704:	4618      	mov	r0, r3
 8005706:	370c      	adds	r7, #12
 8005708:	46bd      	mov	sp, r7
 800570a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570e:	4770      	bx	lr

08005710 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800571c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005720:	d103      	bne.n	800572a <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2201      	movs	r2, #1
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005728:	e007      	b.n	800573a <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005732:	d102      	bne.n	800573a <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2208      	movs	r2, #8
 8005738:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800573a:	bf00      	nop
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
	...

08005748 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b088      	sub	sp, #32
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8005756:	2301      	movs	r3, #1
 8005758:	e128      	b.n	80059ac <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b00      	cmp	r3, #0
 8005764:	d109      	bne.n	800577a <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	4a90      	ldr	r2, [pc, #576]	; (80059b4 <HAL_I2S_Init+0x26c>)
 8005772:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8005774:	6878      	ldr	r0, [r7, #4]
 8005776:	f7fc fabb 	bl	8001cf0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2202      	movs	r2, #2
 800577e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	69db      	ldr	r3, [r3, #28]
 8005788:	687a      	ldr	r2, [r7, #4]
 800578a:	6812      	ldr	r2, [r2, #0]
 800578c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005790:	f023 030f 	bic.w	r3, r3, #15
 8005794:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	2202      	movs	r2, #2
 800579c:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	695b      	ldr	r3, [r3, #20]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d060      	beq.n	8005868 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d102      	bne.n	80057b4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80057ae:	2310      	movs	r3, #16
 80057b0:	617b      	str	r3, [r7, #20]
 80057b2:	e001      	b.n	80057b8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80057b4:	2320      	movs	r3, #32
 80057b6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2b20      	cmp	r3, #32
 80057be:	d802      	bhi.n	80057c6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	005b      	lsls	r3, r3, #1
 80057c4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80057c6:	2001      	movs	r0, #1
 80057c8:	f001 f9ca 	bl	8006b60 <HAL_RCCEx_GetPeriphCLKFreq>
 80057cc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80057d6:	d125      	bne.n	8005824 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	68db      	ldr	r3, [r3, #12]
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d010      	beq.n	8005802 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80057e0:	697b      	ldr	r3, [r7, #20]
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	68fa      	ldr	r2, [r7, #12]
 80057e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80057ea:	4613      	mov	r3, r2
 80057ec:	009b      	lsls	r3, r3, #2
 80057ee:	4413      	add	r3, r2
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	461a      	mov	r2, r3
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057fc:	3305      	adds	r3, #5
 80057fe:	613b      	str	r3, [r7, #16]
 8005800:	e01f      	b.n	8005842 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	00db      	lsls	r3, r3, #3
 8005806:	68fa      	ldr	r2, [r7, #12]
 8005808:	fbb2 f2f3 	udiv	r2, r2, r3
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	005b      	lsls	r3, r3, #1
 8005814:	461a      	mov	r2, r3
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	fbb2 f3f3 	udiv	r3, r2, r3
 800581e:	3305      	adds	r3, #5
 8005820:	613b      	str	r3, [r7, #16]
 8005822:	e00e      	b.n	8005842 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8005824:	68fa      	ldr	r2, [r7, #12]
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	fbb2 f2f3 	udiv	r2, r2, r3
 800582c:	4613      	mov	r3, r2
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	4413      	add	r3, r2
 8005832:	005b      	lsls	r3, r3, #1
 8005834:	461a      	mov	r2, r3
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	fbb2 f3f3 	udiv	r3, r2, r3
 800583e:	3305      	adds	r3, #5
 8005840:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	4a5c      	ldr	r2, [pc, #368]	; (80059b8 <HAL_I2S_Init+0x270>)
 8005846:	fba2 2303 	umull	r2, r3, r2, r3
 800584a:	08db      	lsrs	r3, r3, #3
 800584c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800584e:	693b      	ldr	r3, [r7, #16]
 8005850:	f003 0301 	and.w	r3, r3, #1
 8005854:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	69bb      	ldr	r3, [r7, #24]
 800585a:	1ad3      	subs	r3, r2, r3
 800585c:	085b      	lsrs	r3, r3, #1
 800585e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8005860:	69bb      	ldr	r3, [r7, #24]
 8005862:	021b      	lsls	r3, r3, #8
 8005864:	61bb      	str	r3, [r7, #24]
 8005866:	e003      	b.n	8005870 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8005868:	2302      	movs	r3, #2
 800586a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800586c:	2300      	movs	r3, #0
 800586e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8005870:	69fb      	ldr	r3, [r7, #28]
 8005872:	2b01      	cmp	r3, #1
 8005874:	d902      	bls.n	800587c <HAL_I2S_Init+0x134>
 8005876:	69fb      	ldr	r3, [r7, #28]
 8005878:	2bff      	cmp	r3, #255	; 0xff
 800587a:	d907      	bls.n	800588c <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005880:	f043 0210 	orr.w	r2, r3, #16
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8005888:	2301      	movs	r3, #1
 800588a:	e08f      	b.n	80059ac <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	691a      	ldr	r2, [r3, #16]
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	ea42 0103 	orr.w	r1, r2, r3
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	69fa      	ldr	r2, [r7, #28]
 800589c:	430a      	orrs	r2, r1
 800589e:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	69db      	ldr	r3, [r3, #28]
 80058a6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80058aa:	f023 030f 	bic.w	r3, r3, #15
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6851      	ldr	r1, [r2, #4]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	6892      	ldr	r2, [r2, #8]
 80058b6:	4311      	orrs	r1, r2
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	68d2      	ldr	r2, [r2, #12]
 80058bc:	4311      	orrs	r1, r2
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	6992      	ldr	r2, [r2, #24]
 80058c2:	430a      	orrs	r2, r1
 80058c4:	431a      	orrs	r2, r3
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80058ce:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	6a1b      	ldr	r3, [r3, #32]
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d161      	bne.n	800599c <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a38      	ldr	r2, [pc, #224]	; (80059bc <HAL_I2S_Init+0x274>)
 80058dc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	4a37      	ldr	r2, [pc, #220]	; (80059c0 <HAL_I2S_Init+0x278>)
 80058e4:	4293      	cmp	r3, r2
 80058e6:	d101      	bne.n	80058ec <HAL_I2S_Init+0x1a4>
 80058e8:	4b36      	ldr	r3, [pc, #216]	; (80059c4 <HAL_I2S_Init+0x27c>)
 80058ea:	e001      	b.n	80058f0 <HAL_I2S_Init+0x1a8>
 80058ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	6812      	ldr	r2, [r2, #0]
 80058f6:	4932      	ldr	r1, [pc, #200]	; (80059c0 <HAL_I2S_Init+0x278>)
 80058f8:	428a      	cmp	r2, r1
 80058fa:	d101      	bne.n	8005900 <HAL_I2S_Init+0x1b8>
 80058fc:	4a31      	ldr	r2, [pc, #196]	; (80059c4 <HAL_I2S_Init+0x27c>)
 80058fe:	e001      	b.n	8005904 <HAL_I2S_Init+0x1bc>
 8005900:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8005904:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8005908:	f023 030f 	bic.w	r3, r3, #15
 800590c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a2b      	ldr	r2, [pc, #172]	; (80059c0 <HAL_I2S_Init+0x278>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d101      	bne.n	800591c <HAL_I2S_Init+0x1d4>
 8005918:	4b2a      	ldr	r3, [pc, #168]	; (80059c4 <HAL_I2S_Init+0x27c>)
 800591a:	e001      	b.n	8005920 <HAL_I2S_Init+0x1d8>
 800591c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005920:	2202      	movs	r2, #2
 8005922:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4a25      	ldr	r2, [pc, #148]	; (80059c0 <HAL_I2S_Init+0x278>)
 800592a:	4293      	cmp	r3, r2
 800592c:	d101      	bne.n	8005932 <HAL_I2S_Init+0x1ea>
 800592e:	4b25      	ldr	r3, [pc, #148]	; (80059c4 <HAL_I2S_Init+0x27c>)
 8005930:	e001      	b.n	8005936 <HAL_I2S_Init+0x1ee>
 8005932:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005936:	69db      	ldr	r3, [r3, #28]
 8005938:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005942:	d003      	beq.n	800594c <HAL_I2S_Init+0x204>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	2b00      	cmp	r3, #0
 800594a:	d103      	bne.n	8005954 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800594c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005950:	613b      	str	r3, [r7, #16]
 8005952:	e001      	b.n	8005958 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8005954:	2300      	movs	r3, #0
 8005956:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	689b      	ldr	r3, [r3, #8]
 8005960:	b299      	uxth	r1, r3
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	68db      	ldr	r3, [r3, #12]
 8005966:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800596e:	4303      	orrs	r3, r0
 8005970:	b29b      	uxth	r3, r3
 8005972:	430b      	orrs	r3, r1
 8005974:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8005976:	4313      	orrs	r3, r2
 8005978:	b29a      	uxth	r2, r3
 800597a:	897b      	ldrh	r3, [r7, #10]
 800597c:	4313      	orrs	r3, r2
 800597e:	b29b      	uxth	r3, r3
 8005980:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005984:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a0d      	ldr	r2, [pc, #52]	; (80059c0 <HAL_I2S_Init+0x278>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d101      	bne.n	8005994 <HAL_I2S_Init+0x24c>
 8005990:	4b0c      	ldr	r3, [pc, #48]	; (80059c4 <HAL_I2S_Init+0x27c>)
 8005992:	e001      	b.n	8005998 <HAL_I2S_Init+0x250>
 8005994:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005998:	897a      	ldrh	r2, [r7, #10]
 800599a:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2200      	movs	r2, #0
 80059a0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3720      	adds	r7, #32
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}
 80059b4:	08005abf 	.word	0x08005abf
 80059b8:	cccccccd 	.word	0xcccccccd
 80059bc:	08005bd5 	.word	0x08005bd5
 80059c0:	40003800 	.word	0x40003800
 80059c4:	40003400 	.word	0x40003400

080059c8 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b082      	sub	sp, #8
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a10:	881a      	ldrh	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a1c:	1c9a      	adds	r2, r3, #2
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a26:	b29b      	uxth	r3, r3
 8005a28:	3b01      	subs	r3, #1
 8005a2a:	b29a      	uxth	r2, r3
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10e      	bne.n	8005a58 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	685a      	ldr	r2, [r3, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005a48:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2201      	movs	r2, #1
 8005a4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7ff ffb8 	bl	80059c8 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005a58:	bf00      	nop
 8005a5a:	3708      	adds	r7, #8
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	bd80      	pop	{r7, pc}

08005a60 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	b082      	sub	sp, #8
 8005a64:	af00      	add	r7, sp, #0
 8005a66:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	68da      	ldr	r2, [r3, #12]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a72:	b292      	uxth	r2, r2
 8005a74:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7a:	1c9a      	adds	r2, r3, #2
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	3b01      	subs	r3, #1
 8005a88:	b29a      	uxth	r2, r3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005a92:	b29b      	uxth	r3, r3
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d10e      	bne.n	8005ab6 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	685a      	ldr	r2, [r3, #4]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005aa6:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2201      	movs	r2, #1
 8005aac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8005ab0:	6878      	ldr	r0, [r7, #4]
 8005ab2:	f7ff ff93 	bl	80059dc <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8005ab6:	bf00      	nop
 8005ab8:	3708      	adds	r7, #8
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b086      	sub	sp, #24
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b04      	cmp	r3, #4
 8005ad8:	d13a      	bne.n	8005b50 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f003 0301 	and.w	r3, r3, #1
 8005ae0:	2b01      	cmp	r3, #1
 8005ae2:	d109      	bne.n	8005af8 <I2S_IRQHandler+0x3a>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	685b      	ldr	r3, [r3, #4]
 8005aea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005aee:	2b40      	cmp	r3, #64	; 0x40
 8005af0:	d102      	bne.n	8005af8 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8005af2:	6878      	ldr	r0, [r7, #4]
 8005af4:	f7ff ffb4 	bl	8005a60 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005afe:	2b40      	cmp	r3, #64	; 0x40
 8005b00:	d126      	bne.n	8005b50 <I2S_IRQHandler+0x92>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	685b      	ldr	r3, [r3, #4]
 8005b08:	f003 0320 	and.w	r3, r3, #32
 8005b0c:	2b20      	cmp	r3, #32
 8005b0e:	d11f      	bne.n	8005b50 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	685a      	ldr	r2, [r3, #4]
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005b1e:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005b20:	2300      	movs	r3, #0
 8005b22:	613b      	str	r3, [r7, #16]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	613b      	str	r3, [r7, #16]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	613b      	str	r3, [r7, #16]
 8005b34:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	2201      	movs	r2, #1
 8005b3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b42:	f043 0202 	orr.w	r2, r3, #2
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005b4a:	6878      	ldr	r0, [r7, #4]
 8005b4c:	f7ff ff50 	bl	80059f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005b56:	b2db      	uxtb	r3, r3
 8005b58:	2b03      	cmp	r3, #3
 8005b5a:	d136      	bne.n	8005bca <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f003 0302 	and.w	r3, r3, #2
 8005b62:	2b02      	cmp	r3, #2
 8005b64:	d109      	bne.n	8005b7a <I2S_IRQHandler+0xbc>
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b70:	2b80      	cmp	r3, #128	; 0x80
 8005b72:	d102      	bne.n	8005b7a <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f7ff ff45 	bl	8005a04 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	f003 0308 	and.w	r3, r3, #8
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d122      	bne.n	8005bca <I2S_IRQHandler+0x10c>
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f003 0320 	and.w	r3, r3, #32
 8005b8e:	2b20      	cmp	r3, #32
 8005b90:	d11b      	bne.n	8005bca <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	685a      	ldr	r2, [r3, #4]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ba0:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	60fb      	str	r3, [r7, #12]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bbc:	f043 0204 	orr.w	r2, r3, #4
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f7ff ff13 	bl	80059f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005bca:	bf00      	nop
 8005bcc:	3718      	adds	r7, #24
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b088      	sub	sp, #32
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	4aa2      	ldr	r2, [pc, #648]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d101      	bne.n	8005bf2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005bee:	4ba2      	ldr	r3, [pc, #648]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005bf0:	e001      	b.n	8005bf6 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8005bf2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	685b      	ldr	r3, [r3, #4]
 8005c00:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4a9b      	ldr	r2, [pc, #620]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c08:	4293      	cmp	r3, r2
 8005c0a:	d101      	bne.n	8005c10 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005c0c:	4b9a      	ldr	r3, [pc, #616]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c0e:	e001      	b.n	8005c14 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005c10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	685b      	ldr	r3, [r3, #4]
 8005c1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c20:	d004      	beq.n	8005c2c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f040 8099 	bne.w	8005d5e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005c2c:	69fb      	ldr	r3, [r7, #28]
 8005c2e:	f003 0302 	and.w	r3, r3, #2
 8005c32:	2b02      	cmp	r3, #2
 8005c34:	d107      	bne.n	8005c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d002      	beq.n	8005c46 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 f925 	bl	8005e90 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8005c46:	69bb      	ldr	r3, [r7, #24]
 8005c48:	f003 0301 	and.w	r3, r3, #1
 8005c4c:	2b01      	cmp	r3, #1
 8005c4e:	d107      	bne.n	8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005c50:	693b      	ldr	r3, [r7, #16]
 8005c52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d002      	beq.n	8005c60 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f000 f9c8 	bl	8005ff0 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005c60:	69bb      	ldr	r3, [r7, #24]
 8005c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c66:	2b40      	cmp	r3, #64	; 0x40
 8005c68:	d13a      	bne.n	8005ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005c6a:	693b      	ldr	r3, [r7, #16]
 8005c6c:	f003 0320 	and.w	r3, r3, #32
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d035      	beq.n	8005ce0 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	4a7e      	ldr	r2, [pc, #504]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c7a:	4293      	cmp	r3, r2
 8005c7c:	d101      	bne.n	8005c82 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8005c7e:	4b7e      	ldr	r3, [pc, #504]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c80:	e001      	b.n	8005c86 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8005c82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	4979      	ldr	r1, [pc, #484]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005c8e:	428b      	cmp	r3, r1
 8005c90:	d101      	bne.n	8005c96 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8005c92:	4b79      	ldr	r3, [pc, #484]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005c94:	e001      	b.n	8005c9a <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8005c96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005c9a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005c9e:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	685a      	ldr	r2, [r3, #4]
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005cae:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8005cb0:	2300      	movs	r3, #0
 8005cb2:	60fb      	str	r3, [r7, #12]
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	68db      	ldr	r3, [r3, #12]
 8005cba:	60fb      	str	r3, [r7, #12]
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	689b      	ldr	r3, [r3, #8]
 8005cc2:	60fb      	str	r3, [r7, #12]
 8005cc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2201      	movs	r2, #1
 8005cca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	f043 0202 	orr.w	r2, r3, #2
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f7ff fe88 	bl	80059f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005ce0:	69fb      	ldr	r3, [r7, #28]
 8005ce2:	f003 0308 	and.w	r3, r3, #8
 8005ce6:	2b08      	cmp	r3, #8
 8005ce8:	f040 80be 	bne.w	8005e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	f003 0320 	and.w	r3, r3, #32
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f000 80b8 	beq.w	8005e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	685a      	ldr	r2, [r3, #4]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005d06:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a59      	ldr	r2, [pc, #356]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d101      	bne.n	8005d16 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8005d12:	4b59      	ldr	r3, [pc, #356]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d14:	e001      	b.n	8005d1a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8005d16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d1a:	685a      	ldr	r2, [r3, #4]
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4954      	ldr	r1, [pc, #336]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005d22:	428b      	cmp	r3, r1
 8005d24:	d101      	bne.n	8005d2a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8005d26:	4b54      	ldr	r3, [pc, #336]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005d28:	e001      	b.n	8005d2e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005d2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005d2e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005d32:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8005d34:	2300      	movs	r3, #0
 8005d36:	60bb      	str	r3, [r7, #8]
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	689b      	ldr	r3, [r3, #8]
 8005d3e:	60bb      	str	r3, [r7, #8]
 8005d40:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d4e:	f043 0204 	orr.w	r2, r3, #4
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005d56:	6878      	ldr	r0, [r7, #4]
 8005d58:	f7ff fe4a 	bl	80059f0 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d5c:	e084      	b.n	8005e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	f003 0302 	and.w	r3, r3, #2
 8005d64:	2b02      	cmp	r3, #2
 8005d66:	d107      	bne.n	8005d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d002      	beq.n	8005d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8005d72:	6878      	ldr	r0, [r7, #4]
 8005d74:	f000 f8be 	bl	8005ef4 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8005d78:	69fb      	ldr	r3, [r7, #28]
 8005d7a:	f003 0301 	and.w	r3, r3, #1
 8005d7e:	2b01      	cmp	r3, #1
 8005d80:	d107      	bne.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8005d82:	697b      	ldr	r3, [r7, #20]
 8005d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d002      	beq.n	8005d92 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f000 f8fd 	bl	8005f8c <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005d92:	69fb      	ldr	r3, [r7, #28]
 8005d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d98:	2b40      	cmp	r3, #64	; 0x40
 8005d9a:	d12f      	bne.n	8005dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	f003 0320 	and.w	r3, r3, #32
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d02a      	beq.n	8005dfc <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005db4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a2e      	ldr	r2, [pc, #184]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d101      	bne.n	8005dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8005dc0:	4b2d      	ldr	r3, [pc, #180]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dc2:	e001      	b.n	8005dc8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8005dc4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	4929      	ldr	r1, [pc, #164]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005dd0:	428b      	cmp	r3, r1
 8005dd2:	d101      	bne.n	8005dd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8005dd4:	4b28      	ldr	r3, [pc, #160]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005dd6:	e001      	b.n	8005ddc <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005dd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005ddc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005de0:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2201      	movs	r2, #1
 8005de6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dee:	f043 0202 	orr.w	r2, r3, #2
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f7ff fdfa 	bl	80059f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005dfc:	69bb      	ldr	r3, [r7, #24]
 8005dfe:	f003 0308 	and.w	r3, r3, #8
 8005e02:	2b08      	cmp	r3, #8
 8005e04:	d131      	bne.n	8005e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8005e06:	693b      	ldr	r3, [r7, #16]
 8005e08:	f003 0320 	and.w	r3, r3, #32
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02c      	beq.n	8005e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	4a17      	ldr	r2, [pc, #92]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e16:	4293      	cmp	r3, r2
 8005e18:	d101      	bne.n	8005e1e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005e1a:	4b17      	ldr	r3, [pc, #92]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e1c:	e001      	b.n	8005e22 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005e1e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e22:	685a      	ldr	r2, [r3, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	4912      	ldr	r1, [pc, #72]	; (8005e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8005e2a:	428b      	cmp	r3, r1
 8005e2c:	d101      	bne.n	8005e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8005e2e:	4b12      	ldr	r3, [pc, #72]	; (8005e78 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8005e30:	e001      	b.n	8005e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8005e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005e36:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005e3a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	685a      	ldr	r2, [r3, #4]
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005e4a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2201      	movs	r2, #1
 8005e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e58:	f043 0204 	orr.w	r2, r3, #4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff fdc5 	bl	80059f0 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005e66:	e000      	b.n	8005e6a <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005e68:	bf00      	nop
}
 8005e6a:	bf00      	nop
 8005e6c:	3720      	adds	r7, #32
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	bd80      	pop	{r7, pc}
 8005e72:	bf00      	nop
 8005e74:	40003800 	.word	0x40003800
 8005e78:	40003400 	.word	0x40003400

08005e7c <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8005e7c:	b480      	push	{r7}
 8005e7e:	b083      	sub	sp, #12
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8005e84:	bf00      	nop
 8005e86:	370c      	adds	r7, #12
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr

08005e90 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b082      	sub	sp, #8
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e9c:	1c99      	adds	r1, r3, #2
 8005e9e:	687a      	ldr	r2, [r7, #4]
 8005ea0:	6251      	str	r1, [r2, #36]	; 0x24
 8005ea2:	881a      	ldrh	r2, [r3, #0]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005eae:	b29b      	uxth	r3, r3
 8005eb0:	3b01      	subs	r3, #1
 8005eb2:	b29a      	uxth	r2, r3
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d113      	bne.n	8005eea <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	685a      	ldr	r2, [r3, #4]
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005ed0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005ed6:	b29b      	uxth	r3, r3
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d106      	bne.n	8005eea <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2201      	movs	r2, #1
 8005ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005ee4:	6878      	ldr	r0, [r7, #4]
 8005ee6:	f7ff ffc9 	bl	8005e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005eea:	bf00      	nop
 8005eec:	3708      	adds	r7, #8
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	bd80      	pop	{r7, pc}
	...

08005ef4 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ef4:	b580      	push	{r7, lr}
 8005ef6:	b082      	sub	sp, #8
 8005ef8:	af00      	add	r7, sp, #0
 8005efa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f00:	1c99      	adds	r1, r3, #2
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	6251      	str	r1, [r2, #36]	; 0x24
 8005f06:	8819      	ldrh	r1, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4a1d      	ldr	r2, [pc, #116]	; (8005f84 <I2SEx_TxISR_I2SExt+0x90>)
 8005f0e:	4293      	cmp	r3, r2
 8005f10:	d101      	bne.n	8005f16 <I2SEx_TxISR_I2SExt+0x22>
 8005f12:	4b1d      	ldr	r3, [pc, #116]	; (8005f88 <I2SEx_TxISR_I2SExt+0x94>)
 8005f14:	e001      	b.n	8005f1a <I2SEx_TxISR_I2SExt+0x26>
 8005f16:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	3b01      	subs	r3, #1
 8005f26:	b29a      	uxth	r2, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f30:	b29b      	uxth	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d121      	bne.n	8005f7a <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	4a12      	ldr	r2, [pc, #72]	; (8005f84 <I2SEx_TxISR_I2SExt+0x90>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d101      	bne.n	8005f44 <I2SEx_TxISR_I2SExt+0x50>
 8005f40:	4b11      	ldr	r3, [pc, #68]	; (8005f88 <I2SEx_TxISR_I2SExt+0x94>)
 8005f42:	e001      	b.n	8005f48 <I2SEx_TxISR_I2SExt+0x54>
 8005f44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f48:	685a      	ldr	r2, [r3, #4]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	490d      	ldr	r1, [pc, #52]	; (8005f84 <I2SEx_TxISR_I2SExt+0x90>)
 8005f50:	428b      	cmp	r3, r1
 8005f52:	d101      	bne.n	8005f58 <I2SEx_TxISR_I2SExt+0x64>
 8005f54:	4b0c      	ldr	r3, [pc, #48]	; (8005f88 <I2SEx_TxISR_I2SExt+0x94>)
 8005f56:	e001      	b.n	8005f5c <I2SEx_TxISR_I2SExt+0x68>
 8005f58:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005f5c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005f60:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d106      	bne.n	8005f7a <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f7ff ff81 	bl	8005e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005f7a:	bf00      	nop
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
 8005f82:	bf00      	nop
 8005f84:	40003800 	.word	0x40003800
 8005f88:	40003400 	.word	0x40003400

08005f8c <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8005f8c:	b580      	push	{r7, lr}
 8005f8e:	b082      	sub	sp, #8
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68d8      	ldr	r0, [r3, #12]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f9e:	1c99      	adds	r1, r3, #2
 8005fa0:	687a      	ldr	r2, [r7, #4]
 8005fa2:	62d1      	str	r1, [r2, #44]	; 0x2c
 8005fa4:	b282      	uxth	r2, r0
 8005fa6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	3b01      	subs	r3, #1
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005fba:	b29b      	uxth	r3, r3
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d113      	bne.n	8005fe8 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005fce:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d106      	bne.n	8005fe8 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2201      	movs	r2, #1
 8005fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005fe2:	6878      	ldr	r0, [r7, #4]
 8005fe4:	f7ff ff4a 	bl	8005e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005fe8:	bf00      	nop
 8005fea:	3708      	adds	r7, #8
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	4a20      	ldr	r2, [pc, #128]	; (8006080 <I2SEx_RxISR_I2SExt+0x90>)
 8005ffe:	4293      	cmp	r3, r2
 8006000:	d101      	bne.n	8006006 <I2SEx_RxISR_I2SExt+0x16>
 8006002:	4b20      	ldr	r3, [pc, #128]	; (8006084 <I2SEx_RxISR_I2SExt+0x94>)
 8006004:	e001      	b.n	800600a <I2SEx_RxISR_I2SExt+0x1a>
 8006006:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800600a:	68d8      	ldr	r0, [r3, #12]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006010:	1c99      	adds	r1, r3, #2
 8006012:	687a      	ldr	r2, [r7, #4]
 8006014:	62d1      	str	r1, [r2, #44]	; 0x2c
 8006016:	b282      	uxth	r2, r0
 8006018:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800601e:	b29b      	uxth	r3, r3
 8006020:	3b01      	subs	r3, #1
 8006022:	b29a      	uxth	r2, r3
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800602c:	b29b      	uxth	r3, r3
 800602e:	2b00      	cmp	r3, #0
 8006030:	d121      	bne.n	8006076 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a12      	ldr	r2, [pc, #72]	; (8006080 <I2SEx_RxISR_I2SExt+0x90>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d101      	bne.n	8006040 <I2SEx_RxISR_I2SExt+0x50>
 800603c:	4b11      	ldr	r3, [pc, #68]	; (8006084 <I2SEx_RxISR_I2SExt+0x94>)
 800603e:	e001      	b.n	8006044 <I2SEx_RxISR_I2SExt+0x54>
 8006040:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006044:	685a      	ldr	r2, [r3, #4]
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	490d      	ldr	r1, [pc, #52]	; (8006080 <I2SEx_RxISR_I2SExt+0x90>)
 800604c:	428b      	cmp	r3, r1
 800604e:	d101      	bne.n	8006054 <I2SEx_RxISR_I2SExt+0x64>
 8006050:	4b0c      	ldr	r3, [pc, #48]	; (8006084 <I2SEx_RxISR_I2SExt+0x94>)
 8006052:	e001      	b.n	8006058 <I2SEx_RxISR_I2SExt+0x68>
 8006054:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8006058:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800605c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006062:	b29b      	uxth	r3, r3
 8006064:	2b00      	cmp	r3, #0
 8006066:	d106      	bne.n	8006076 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2201      	movs	r2, #1
 800606c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f7ff ff03 	bl	8005e7c <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8006076:	bf00      	nop
 8006078:	3708      	adds	r7, #8
 800607a:	46bd      	mov	sp, r7
 800607c:	bd80      	pop	{r7, pc}
 800607e:	bf00      	nop
 8006080:	40003800 	.word	0x40003800
 8006084:	40003400 	.word	0x40003400

08006088 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d101      	bne.n	800609a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006096:	2301      	movs	r3, #1
 8006098:	e25b      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	f003 0301 	and.w	r3, r3, #1
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d075      	beq.n	8006192 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060a6:	4ba3      	ldr	r3, [pc, #652]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	f003 030c 	and.w	r3, r3, #12
 80060ae:	2b04      	cmp	r3, #4
 80060b0:	d00c      	beq.n	80060cc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060b2:	4ba0      	ldr	r3, [pc, #640]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80060b4:	689b      	ldr	r3, [r3, #8]
 80060b6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80060ba:	2b08      	cmp	r3, #8
 80060bc:	d112      	bne.n	80060e4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80060be:	4b9d      	ldr	r3, [pc, #628]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060c6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060ca:	d10b      	bne.n	80060e4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80060cc:	4b99      	ldr	r3, [pc, #612]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d05b      	beq.n	8006190 <HAL_RCC_OscConfig+0x108>
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d157      	bne.n	8006190 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80060e0:	2301      	movs	r3, #1
 80060e2:	e236      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	685b      	ldr	r3, [r3, #4]
 80060e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80060ec:	d106      	bne.n	80060fc <HAL_RCC_OscConfig+0x74>
 80060ee:	4b91      	ldr	r3, [pc, #580]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a90      	ldr	r2, [pc, #576]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80060f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060f8:	6013      	str	r3, [r2, #0]
 80060fa:	e01d      	b.n	8006138 <HAL_RCC_OscConfig+0xb0>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	685b      	ldr	r3, [r3, #4]
 8006100:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006104:	d10c      	bne.n	8006120 <HAL_RCC_OscConfig+0x98>
 8006106:	4b8b      	ldr	r3, [pc, #556]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a8a      	ldr	r2, [pc, #552]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 800610c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006110:	6013      	str	r3, [r2, #0]
 8006112:	4b88      	ldr	r3, [pc, #544]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	4a87      	ldr	r2, [pc, #540]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006118:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800611c:	6013      	str	r3, [r2, #0]
 800611e:	e00b      	b.n	8006138 <HAL_RCC_OscConfig+0xb0>
 8006120:	4b84      	ldr	r3, [pc, #528]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a83      	ldr	r2, [pc, #524]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006126:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800612a:	6013      	str	r3, [r2, #0]
 800612c:	4b81      	ldr	r3, [pc, #516]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	4a80      	ldr	r2, [pc, #512]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006132:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006136:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	685b      	ldr	r3, [r3, #4]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d013      	beq.n	8006168 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006140:	f7fc fa14 	bl	800256c <HAL_GetTick>
 8006144:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006146:	e008      	b.n	800615a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006148:	f7fc fa10 	bl	800256c <HAL_GetTick>
 800614c:	4602      	mov	r2, r0
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	1ad3      	subs	r3, r2, r3
 8006152:	2b64      	cmp	r3, #100	; 0x64
 8006154:	d901      	bls.n	800615a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006156:	2303      	movs	r3, #3
 8006158:	e1fb      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800615a:	4b76      	ldr	r3, [pc, #472]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006162:	2b00      	cmp	r3, #0
 8006164:	d0f0      	beq.n	8006148 <HAL_RCC_OscConfig+0xc0>
 8006166:	e014      	b.n	8006192 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006168:	f7fc fa00 	bl	800256c <HAL_GetTick>
 800616c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800616e:	e008      	b.n	8006182 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006170:	f7fc f9fc 	bl	800256c <HAL_GetTick>
 8006174:	4602      	mov	r2, r0
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	2b64      	cmp	r3, #100	; 0x64
 800617c:	d901      	bls.n	8006182 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800617e:	2303      	movs	r3, #3
 8006180:	e1e7      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006182:	4b6c      	ldr	r3, [pc, #432]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1f0      	bne.n	8006170 <HAL_RCC_OscConfig+0xe8>
 800618e:	e000      	b.n	8006192 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006190:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f003 0302 	and.w	r3, r3, #2
 800619a:	2b00      	cmp	r3, #0
 800619c:	d063      	beq.n	8006266 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800619e:	4b65      	ldr	r3, [pc, #404]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	f003 030c 	and.w	r3, r3, #12
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d00b      	beq.n	80061c2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061aa:	4b62      	ldr	r3, [pc, #392]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80061ac:	689b      	ldr	r3, [r3, #8]
 80061ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80061b2:	2b08      	cmp	r3, #8
 80061b4:	d11c      	bne.n	80061f0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80061b6:	4b5f      	ldr	r3, [pc, #380]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80061b8:	685b      	ldr	r3, [r3, #4]
 80061ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d116      	bne.n	80061f0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061c2:	4b5c      	ldr	r3, [pc, #368]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	f003 0302 	and.w	r3, r3, #2
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d005      	beq.n	80061da <HAL_RCC_OscConfig+0x152>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	2b01      	cmp	r3, #1
 80061d4:	d001      	beq.n	80061da <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e1bb      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80061da:	4b56      	ldr	r3, [pc, #344]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	691b      	ldr	r3, [r3, #16]
 80061e6:	00db      	lsls	r3, r3, #3
 80061e8:	4952      	ldr	r1, [pc, #328]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80061ea:	4313      	orrs	r3, r2
 80061ec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80061ee:	e03a      	b.n	8006266 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	68db      	ldr	r3, [r3, #12]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d020      	beq.n	800623a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80061f8:	4b4f      	ldr	r3, [pc, #316]	; (8006338 <HAL_RCC_OscConfig+0x2b0>)
 80061fa:	2201      	movs	r2, #1
 80061fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061fe:	f7fc f9b5 	bl	800256c <HAL_GetTick>
 8006202:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006204:	e008      	b.n	8006218 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006206:	f7fc f9b1 	bl	800256c <HAL_GetTick>
 800620a:	4602      	mov	r2, r0
 800620c:	693b      	ldr	r3, [r7, #16]
 800620e:	1ad3      	subs	r3, r2, r3
 8006210:	2b02      	cmp	r3, #2
 8006212:	d901      	bls.n	8006218 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006214:	2303      	movs	r3, #3
 8006216:	e19c      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006218:	4b46      	ldr	r3, [pc, #280]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	f003 0302 	and.w	r3, r3, #2
 8006220:	2b00      	cmp	r3, #0
 8006222:	d0f0      	beq.n	8006206 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006224:	4b43      	ldr	r3, [pc, #268]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	691b      	ldr	r3, [r3, #16]
 8006230:	00db      	lsls	r3, r3, #3
 8006232:	4940      	ldr	r1, [pc, #256]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006234:	4313      	orrs	r3, r2
 8006236:	600b      	str	r3, [r1, #0]
 8006238:	e015      	b.n	8006266 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800623a:	4b3f      	ldr	r3, [pc, #252]	; (8006338 <HAL_RCC_OscConfig+0x2b0>)
 800623c:	2200      	movs	r2, #0
 800623e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006240:	f7fc f994 	bl	800256c <HAL_GetTick>
 8006244:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006246:	e008      	b.n	800625a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006248:	f7fc f990 	bl	800256c <HAL_GetTick>
 800624c:	4602      	mov	r2, r0
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	1ad3      	subs	r3, r2, r3
 8006252:	2b02      	cmp	r3, #2
 8006254:	d901      	bls.n	800625a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006256:	2303      	movs	r3, #3
 8006258:	e17b      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800625a:	4b36      	ldr	r3, [pc, #216]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f003 0302 	and.w	r3, r3, #2
 8006262:	2b00      	cmp	r3, #0
 8006264:	d1f0      	bne.n	8006248 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0308 	and.w	r3, r3, #8
 800626e:	2b00      	cmp	r3, #0
 8006270:	d030      	beq.n	80062d4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	695b      	ldr	r3, [r3, #20]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d016      	beq.n	80062a8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800627a:	4b30      	ldr	r3, [pc, #192]	; (800633c <HAL_RCC_OscConfig+0x2b4>)
 800627c:	2201      	movs	r2, #1
 800627e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006280:	f7fc f974 	bl	800256c <HAL_GetTick>
 8006284:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006286:	e008      	b.n	800629a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006288:	f7fc f970 	bl	800256c <HAL_GetTick>
 800628c:	4602      	mov	r2, r0
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	1ad3      	subs	r3, r2, r3
 8006292:	2b02      	cmp	r3, #2
 8006294:	d901      	bls.n	800629a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006296:	2303      	movs	r3, #3
 8006298:	e15b      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800629a:	4b26      	ldr	r3, [pc, #152]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 800629c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800629e:	f003 0302 	and.w	r3, r3, #2
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0f0      	beq.n	8006288 <HAL_RCC_OscConfig+0x200>
 80062a6:	e015      	b.n	80062d4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80062a8:	4b24      	ldr	r3, [pc, #144]	; (800633c <HAL_RCC_OscConfig+0x2b4>)
 80062aa:	2200      	movs	r2, #0
 80062ac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80062ae:	f7fc f95d 	bl	800256c <HAL_GetTick>
 80062b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062b4:	e008      	b.n	80062c8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80062b6:	f7fc f959 	bl	800256c <HAL_GetTick>
 80062ba:	4602      	mov	r2, r0
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	1ad3      	subs	r3, r2, r3
 80062c0:	2b02      	cmp	r3, #2
 80062c2:	d901      	bls.n	80062c8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80062c4:	2303      	movs	r3, #3
 80062c6:	e144      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80062c8:	4b1a      	ldr	r3, [pc, #104]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80062ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80062cc:	f003 0302 	and.w	r3, r3, #2
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d1f0      	bne.n	80062b6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f003 0304 	and.w	r3, r3, #4
 80062dc:	2b00      	cmp	r3, #0
 80062de:	f000 80a0 	beq.w	8006422 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80062e2:	2300      	movs	r3, #0
 80062e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80062e6:	4b13      	ldr	r3, [pc, #76]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80062e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d10f      	bne.n	8006312 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	60bb      	str	r3, [r7, #8]
 80062f6:	4b0f      	ldr	r3, [pc, #60]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062fa:	4a0e      	ldr	r2, [pc, #56]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 80062fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006300:	6413      	str	r3, [r2, #64]	; 0x40
 8006302:	4b0c      	ldr	r3, [pc, #48]	; (8006334 <HAL_RCC_OscConfig+0x2ac>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800630a:	60bb      	str	r3, [r7, #8]
 800630c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800630e:	2301      	movs	r3, #1
 8006310:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006312:	4b0b      	ldr	r3, [pc, #44]	; (8006340 <HAL_RCC_OscConfig+0x2b8>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d121      	bne.n	8006362 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800631e:	4b08      	ldr	r3, [pc, #32]	; (8006340 <HAL_RCC_OscConfig+0x2b8>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a07      	ldr	r2, [pc, #28]	; (8006340 <HAL_RCC_OscConfig+0x2b8>)
 8006324:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006328:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800632a:	f7fc f91f 	bl	800256c <HAL_GetTick>
 800632e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006330:	e011      	b.n	8006356 <HAL_RCC_OscConfig+0x2ce>
 8006332:	bf00      	nop
 8006334:	40023800 	.word	0x40023800
 8006338:	42470000 	.word	0x42470000
 800633c:	42470e80 	.word	0x42470e80
 8006340:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006344:	f7fc f912 	bl	800256c <HAL_GetTick>
 8006348:	4602      	mov	r2, r0
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	1ad3      	subs	r3, r2, r3
 800634e:	2b02      	cmp	r3, #2
 8006350:	d901      	bls.n	8006356 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006352:	2303      	movs	r3, #3
 8006354:	e0fd      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006356:	4b81      	ldr	r3, [pc, #516]	; (800655c <HAL_RCC_OscConfig+0x4d4>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800635e:	2b00      	cmp	r3, #0
 8006360:	d0f0      	beq.n	8006344 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	689b      	ldr	r3, [r3, #8]
 8006366:	2b01      	cmp	r3, #1
 8006368:	d106      	bne.n	8006378 <HAL_RCC_OscConfig+0x2f0>
 800636a:	4b7d      	ldr	r3, [pc, #500]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 800636c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800636e:	4a7c      	ldr	r2, [pc, #496]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006370:	f043 0301 	orr.w	r3, r3, #1
 8006374:	6713      	str	r3, [r2, #112]	; 0x70
 8006376:	e01c      	b.n	80063b2 <HAL_RCC_OscConfig+0x32a>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	689b      	ldr	r3, [r3, #8]
 800637c:	2b05      	cmp	r3, #5
 800637e:	d10c      	bne.n	800639a <HAL_RCC_OscConfig+0x312>
 8006380:	4b77      	ldr	r3, [pc, #476]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006384:	4a76      	ldr	r2, [pc, #472]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006386:	f043 0304 	orr.w	r3, r3, #4
 800638a:	6713      	str	r3, [r2, #112]	; 0x70
 800638c:	4b74      	ldr	r3, [pc, #464]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 800638e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006390:	4a73      	ldr	r2, [pc, #460]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006392:	f043 0301 	orr.w	r3, r3, #1
 8006396:	6713      	str	r3, [r2, #112]	; 0x70
 8006398:	e00b      	b.n	80063b2 <HAL_RCC_OscConfig+0x32a>
 800639a:	4b71      	ldr	r3, [pc, #452]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 800639c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800639e:	4a70      	ldr	r2, [pc, #448]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 80063a0:	f023 0301 	bic.w	r3, r3, #1
 80063a4:	6713      	str	r3, [r2, #112]	; 0x70
 80063a6:	4b6e      	ldr	r3, [pc, #440]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 80063a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063aa:	4a6d      	ldr	r2, [pc, #436]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 80063ac:	f023 0304 	bic.w	r3, r3, #4
 80063b0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	689b      	ldr	r3, [r3, #8]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d015      	beq.n	80063e6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063ba:	f7fc f8d7 	bl	800256c <HAL_GetTick>
 80063be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063c0:	e00a      	b.n	80063d8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063c2:	f7fc f8d3 	bl	800256c <HAL_GetTick>
 80063c6:	4602      	mov	r2, r0
 80063c8:	693b      	ldr	r3, [r7, #16]
 80063ca:	1ad3      	subs	r3, r2, r3
 80063cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d901      	bls.n	80063d8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80063d4:	2303      	movs	r3, #3
 80063d6:	e0bc      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80063d8:	4b61      	ldr	r3, [pc, #388]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 80063da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063dc:	f003 0302 	and.w	r3, r3, #2
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d0ee      	beq.n	80063c2 <HAL_RCC_OscConfig+0x33a>
 80063e4:	e014      	b.n	8006410 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80063e6:	f7fc f8c1 	bl	800256c <HAL_GetTick>
 80063ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80063ec:	e00a      	b.n	8006404 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80063ee:	f7fc f8bd 	bl	800256c <HAL_GetTick>
 80063f2:	4602      	mov	r2, r0
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	1ad3      	subs	r3, r2, r3
 80063f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d901      	bls.n	8006404 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006400:	2303      	movs	r3, #3
 8006402:	e0a6      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006404:	4b56      	ldr	r3, [pc, #344]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006408:	f003 0302 	and.w	r3, r3, #2
 800640c:	2b00      	cmp	r3, #0
 800640e:	d1ee      	bne.n	80063ee <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006410:	7dfb      	ldrb	r3, [r7, #23]
 8006412:	2b01      	cmp	r3, #1
 8006414:	d105      	bne.n	8006422 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006416:	4b52      	ldr	r3, [pc, #328]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800641a:	4a51      	ldr	r2, [pc, #324]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 800641c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006420:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	699b      	ldr	r3, [r3, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	f000 8092 	beq.w	8006550 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800642c:	4b4c      	ldr	r3, [pc, #304]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 800642e:	689b      	ldr	r3, [r3, #8]
 8006430:	f003 030c 	and.w	r3, r3, #12
 8006434:	2b08      	cmp	r3, #8
 8006436:	d05c      	beq.n	80064f2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d141      	bne.n	80064c4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006440:	4b48      	ldr	r3, [pc, #288]	; (8006564 <HAL_RCC_OscConfig+0x4dc>)
 8006442:	2200      	movs	r2, #0
 8006444:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006446:	f7fc f891 	bl	800256c <HAL_GetTick>
 800644a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800644c:	e008      	b.n	8006460 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800644e:	f7fc f88d 	bl	800256c <HAL_GetTick>
 8006452:	4602      	mov	r2, r0
 8006454:	693b      	ldr	r3, [r7, #16]
 8006456:	1ad3      	subs	r3, r2, r3
 8006458:	2b02      	cmp	r3, #2
 800645a:	d901      	bls.n	8006460 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800645c:	2303      	movs	r3, #3
 800645e:	e078      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006460:	4b3f      	ldr	r3, [pc, #252]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006468:	2b00      	cmp	r3, #0
 800646a:	d1f0      	bne.n	800644e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	69da      	ldr	r2, [r3, #28]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647a:	019b      	lsls	r3, r3, #6
 800647c:	431a      	orrs	r2, r3
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	3b01      	subs	r3, #1
 8006486:	041b      	lsls	r3, r3, #16
 8006488:	431a      	orrs	r2, r3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800648e:	061b      	lsls	r3, r3, #24
 8006490:	4933      	ldr	r1, [pc, #204]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006492:	4313      	orrs	r3, r2
 8006494:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006496:	4b33      	ldr	r3, [pc, #204]	; (8006564 <HAL_RCC_OscConfig+0x4dc>)
 8006498:	2201      	movs	r2, #1
 800649a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800649c:	f7fc f866 	bl	800256c <HAL_GetTick>
 80064a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064a2:	e008      	b.n	80064b6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064a4:	f7fc f862 	bl	800256c <HAL_GetTick>
 80064a8:	4602      	mov	r2, r0
 80064aa:	693b      	ldr	r3, [r7, #16]
 80064ac:	1ad3      	subs	r3, r2, r3
 80064ae:	2b02      	cmp	r3, #2
 80064b0:	d901      	bls.n	80064b6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80064b2:	2303      	movs	r3, #3
 80064b4:	e04d      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064b6:	4b2a      	ldr	r3, [pc, #168]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d0f0      	beq.n	80064a4 <HAL_RCC_OscConfig+0x41c>
 80064c2:	e045      	b.n	8006550 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80064c4:	4b27      	ldr	r3, [pc, #156]	; (8006564 <HAL_RCC_OscConfig+0x4dc>)
 80064c6:	2200      	movs	r2, #0
 80064c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80064ca:	f7fc f84f 	bl	800256c <HAL_GetTick>
 80064ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064d0:	e008      	b.n	80064e4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80064d2:	f7fc f84b 	bl	800256c <HAL_GetTick>
 80064d6:	4602      	mov	r2, r0
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	1ad3      	subs	r3, r2, r3
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d901      	bls.n	80064e4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80064e0:	2303      	movs	r3, #3
 80064e2:	e036      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064e4:	4b1e      	ldr	r3, [pc, #120]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d1f0      	bne.n	80064d2 <HAL_RCC_OscConfig+0x44a>
 80064f0:	e02e      	b.n	8006550 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	699b      	ldr	r3, [r3, #24]
 80064f6:	2b01      	cmp	r3, #1
 80064f8:	d101      	bne.n	80064fe <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80064fa:	2301      	movs	r3, #1
 80064fc:	e029      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80064fe:	4b18      	ldr	r3, [pc, #96]	; (8006560 <HAL_RCC_OscConfig+0x4d8>)
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	69db      	ldr	r3, [r3, #28]
 800650e:	429a      	cmp	r2, r3
 8006510:	d11c      	bne.n	800654c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800651c:	429a      	cmp	r2, r3
 800651e:	d115      	bne.n	800654c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8006520:	68fa      	ldr	r2, [r7, #12]
 8006522:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006526:	4013      	ands	r3, r2
 8006528:	687a      	ldr	r2, [r7, #4]
 800652a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800652c:	4293      	cmp	r3, r2
 800652e:	d10d      	bne.n	800654c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800653a:	429a      	cmp	r2, r3
 800653c:	d106      	bne.n	800654c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006548:	429a      	cmp	r2, r3
 800654a:	d001      	beq.n	8006550 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e000      	b.n	8006552 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3718      	adds	r7, #24
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	40007000 	.word	0x40007000
 8006560:	40023800 	.word	0x40023800
 8006564:	42470060 	.word	0x42470060

08006568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	b084      	sub	sp, #16
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
 8006570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2b00      	cmp	r3, #0
 8006576:	d101      	bne.n	800657c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0cc      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800657c:	4b68      	ldr	r3, [pc, #416]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f003 030f 	and.w	r3, r3, #15
 8006584:	683a      	ldr	r2, [r7, #0]
 8006586:	429a      	cmp	r2, r3
 8006588:	d90c      	bls.n	80065a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800658a:	4b65      	ldr	r3, [pc, #404]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 800658c:	683a      	ldr	r2, [r7, #0]
 800658e:	b2d2      	uxtb	r2, r2
 8006590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006592:	4b63      	ldr	r3, [pc, #396]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f003 030f 	and.w	r3, r3, #15
 800659a:	683a      	ldr	r2, [r7, #0]
 800659c:	429a      	cmp	r2, r3
 800659e:	d001      	beq.n	80065a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80065a0:	2301      	movs	r3, #1
 80065a2:	e0b8      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0302 	and.w	r3, r3, #2
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d020      	beq.n	80065f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0304 	and.w	r3, r3, #4
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065bc:	4b59      	ldr	r3, [pc, #356]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4a58      	ldr	r2, [pc, #352]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80065c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f003 0308 	and.w	r3, r3, #8
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d005      	beq.n	80065e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065d4:	4b53      	ldr	r3, [pc, #332]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065d6:	689b      	ldr	r3, [r3, #8]
 80065d8:	4a52      	ldr	r2, [pc, #328]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80065de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80065e0:	4b50      	ldr	r3, [pc, #320]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	494d      	ldr	r1, [pc, #308]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80065ee:	4313      	orrs	r3, r2
 80065f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d044      	beq.n	8006688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	685b      	ldr	r3, [r3, #4]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d107      	bne.n	8006616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006606:	4b47      	ldr	r3, [pc, #284]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800660e:	2b00      	cmp	r3, #0
 8006610:	d119      	bne.n	8006646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006612:	2301      	movs	r3, #1
 8006614:	e07f      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d003      	beq.n	8006626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006622:	2b03      	cmp	r3, #3
 8006624:	d107      	bne.n	8006636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006626:	4b3f      	ldr	r3, [pc, #252]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800662e:	2b00      	cmp	r3, #0
 8006630:	d109      	bne.n	8006646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e06f      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006636:	4b3b      	ldr	r3, [pc, #236]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f003 0302 	and.w	r3, r3, #2
 800663e:	2b00      	cmp	r3, #0
 8006640:	d101      	bne.n	8006646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006642:	2301      	movs	r3, #1
 8006644:	e067      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006646:	4b37      	ldr	r3, [pc, #220]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	f023 0203 	bic.w	r2, r3, #3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	685b      	ldr	r3, [r3, #4]
 8006652:	4934      	ldr	r1, [pc, #208]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006654:	4313      	orrs	r3, r2
 8006656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006658:	f7fb ff88 	bl	800256c <HAL_GetTick>
 800665c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800665e:	e00a      	b.n	8006676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006660:	f7fb ff84 	bl	800256c <HAL_GetTick>
 8006664:	4602      	mov	r2, r0
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	f241 3288 	movw	r2, #5000	; 0x1388
 800666e:	4293      	cmp	r3, r2
 8006670:	d901      	bls.n	8006676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006672:	2303      	movs	r3, #3
 8006674:	e04f      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006676:	4b2b      	ldr	r3, [pc, #172]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 8006678:	689b      	ldr	r3, [r3, #8]
 800667a:	f003 020c 	and.w	r2, r3, #12
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	685b      	ldr	r3, [r3, #4]
 8006682:	009b      	lsls	r3, r3, #2
 8006684:	429a      	cmp	r2, r3
 8006686:	d1eb      	bne.n	8006660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006688:	4b25      	ldr	r3, [pc, #148]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f003 030f 	and.w	r3, r3, #15
 8006690:	683a      	ldr	r2, [r7, #0]
 8006692:	429a      	cmp	r2, r3
 8006694:	d20c      	bcs.n	80066b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006696:	4b22      	ldr	r3, [pc, #136]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 8006698:	683a      	ldr	r2, [r7, #0]
 800669a:	b2d2      	uxtb	r2, r2
 800669c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800669e:	4b20      	ldr	r3, [pc, #128]	; (8006720 <HAL_RCC_ClockConfig+0x1b8>)
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f003 030f 	and.w	r3, r3, #15
 80066a6:	683a      	ldr	r2, [r7, #0]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d001      	beq.n	80066b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80066ac:	2301      	movs	r3, #1
 80066ae:	e032      	b.n	8006716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f003 0304 	and.w	r3, r3, #4
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d008      	beq.n	80066ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066bc:	4b19      	ldr	r3, [pc, #100]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	68db      	ldr	r3, [r3, #12]
 80066c8:	4916      	ldr	r1, [pc, #88]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0308 	and.w	r3, r3, #8
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d009      	beq.n	80066ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80066da:	4b12      	ldr	r3, [pc, #72]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	691b      	ldr	r3, [r3, #16]
 80066e6:	00db      	lsls	r3, r3, #3
 80066e8:	490e      	ldr	r1, [pc, #56]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066ea:	4313      	orrs	r3, r2
 80066ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80066ee:	f000 f82d 	bl	800674c <HAL_RCC_GetSysClockFreq>
 80066f2:	4601      	mov	r1, r0
 80066f4:	4b0b      	ldr	r3, [pc, #44]	; (8006724 <HAL_RCC_ClockConfig+0x1bc>)
 80066f6:	689b      	ldr	r3, [r3, #8]
 80066f8:	091b      	lsrs	r3, r3, #4
 80066fa:	f003 030f 	and.w	r3, r3, #15
 80066fe:	4a0a      	ldr	r2, [pc, #40]	; (8006728 <HAL_RCC_ClockConfig+0x1c0>)
 8006700:	5cd3      	ldrb	r3, [r2, r3]
 8006702:	fa21 f303 	lsr.w	r3, r1, r3
 8006706:	4a09      	ldr	r2, [pc, #36]	; (800672c <HAL_RCC_ClockConfig+0x1c4>)
 8006708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <HAL_RCC_ClockConfig+0x1c8>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f7fb fee8 	bl	80024e4 <HAL_InitTick>

  return HAL_OK;
 8006714:	2300      	movs	r3, #0
}
 8006716:	4618      	mov	r0, r3
 8006718:	3710      	adds	r7, #16
 800671a:	46bd      	mov	sp, r7
 800671c:	bd80      	pop	{r7, pc}
 800671e:	bf00      	nop
 8006720:	40023c00 	.word	0x40023c00
 8006724:	40023800 	.word	0x40023800
 8006728:	0800a1e4 	.word	0x0800a1e4
 800672c:	20000008 	.word	0x20000008
 8006730:	2000000c 	.word	0x2000000c

08006734 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8006734:	b480      	push	{r7}
 8006736:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8006738:	4b03      	ldr	r3, [pc, #12]	; (8006748 <HAL_RCC_EnableCSS+0x14>)
 800673a:	2201      	movs	r2, #1
 800673c:	601a      	str	r2, [r3, #0]
}
 800673e:	bf00      	nop
 8006740:	46bd      	mov	sp, r7
 8006742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006746:	4770      	bx	lr
 8006748:	4247004c 	.word	0x4247004c

0800674c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800674c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800674e:	b085      	sub	sp, #20
 8006750:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006752:	2300      	movs	r3, #0
 8006754:	607b      	str	r3, [r7, #4]
 8006756:	2300      	movs	r3, #0
 8006758:	60fb      	str	r3, [r7, #12]
 800675a:	2300      	movs	r3, #0
 800675c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006762:	4b63      	ldr	r3, [pc, #396]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	f003 030c 	and.w	r3, r3, #12
 800676a:	2b04      	cmp	r3, #4
 800676c:	d007      	beq.n	800677e <HAL_RCC_GetSysClockFreq+0x32>
 800676e:	2b08      	cmp	r3, #8
 8006770:	d008      	beq.n	8006784 <HAL_RCC_GetSysClockFreq+0x38>
 8006772:	2b00      	cmp	r3, #0
 8006774:	f040 80b4 	bne.w	80068e0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006778:	4b5e      	ldr	r3, [pc, #376]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800677a:	60bb      	str	r3, [r7, #8]
       break;
 800677c:	e0b3      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800677e:	4b5e      	ldr	r3, [pc, #376]	; (80068f8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8006780:	60bb      	str	r3, [r7, #8]
      break;
 8006782:	e0b0      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006784:	4b5a      	ldr	r3, [pc, #360]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800678c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800678e:	4b58      	ldr	r3, [pc, #352]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d04a      	beq.n	8006830 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800679a:	4b55      	ldr	r3, [pc, #340]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	099b      	lsrs	r3, r3, #6
 80067a0:	f04f 0400 	mov.w	r4, #0
 80067a4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80067a8:	f04f 0200 	mov.w	r2, #0
 80067ac:	ea03 0501 	and.w	r5, r3, r1
 80067b0:	ea04 0602 	and.w	r6, r4, r2
 80067b4:	4629      	mov	r1, r5
 80067b6:	4632      	mov	r2, r6
 80067b8:	f04f 0300 	mov.w	r3, #0
 80067bc:	f04f 0400 	mov.w	r4, #0
 80067c0:	0154      	lsls	r4, r2, #5
 80067c2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80067c6:	014b      	lsls	r3, r1, #5
 80067c8:	4619      	mov	r1, r3
 80067ca:	4622      	mov	r2, r4
 80067cc:	1b49      	subs	r1, r1, r5
 80067ce:	eb62 0206 	sbc.w	r2, r2, r6
 80067d2:	f04f 0300 	mov.w	r3, #0
 80067d6:	f04f 0400 	mov.w	r4, #0
 80067da:	0194      	lsls	r4, r2, #6
 80067dc:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80067e0:	018b      	lsls	r3, r1, #6
 80067e2:	1a5b      	subs	r3, r3, r1
 80067e4:	eb64 0402 	sbc.w	r4, r4, r2
 80067e8:	f04f 0100 	mov.w	r1, #0
 80067ec:	f04f 0200 	mov.w	r2, #0
 80067f0:	00e2      	lsls	r2, r4, #3
 80067f2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80067f6:	00d9      	lsls	r1, r3, #3
 80067f8:	460b      	mov	r3, r1
 80067fa:	4614      	mov	r4, r2
 80067fc:	195b      	adds	r3, r3, r5
 80067fe:	eb44 0406 	adc.w	r4, r4, r6
 8006802:	f04f 0100 	mov.w	r1, #0
 8006806:	f04f 0200 	mov.w	r2, #0
 800680a:	0262      	lsls	r2, r4, #9
 800680c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8006810:	0259      	lsls	r1, r3, #9
 8006812:	460b      	mov	r3, r1
 8006814:	4614      	mov	r4, r2
 8006816:	4618      	mov	r0, r3
 8006818:	4621      	mov	r1, r4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f04f 0400 	mov.w	r4, #0
 8006820:	461a      	mov	r2, r3
 8006822:	4623      	mov	r3, r4
 8006824:	f7f9 fcd8 	bl	80001d8 <__aeabi_uldivmod>
 8006828:	4603      	mov	r3, r0
 800682a:	460c      	mov	r4, r1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	e049      	b.n	80068c4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006830:	4b2f      	ldr	r3, [pc, #188]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8006832:	685b      	ldr	r3, [r3, #4]
 8006834:	099b      	lsrs	r3, r3, #6
 8006836:	f04f 0400 	mov.w	r4, #0
 800683a:	f240 11ff 	movw	r1, #511	; 0x1ff
 800683e:	f04f 0200 	mov.w	r2, #0
 8006842:	ea03 0501 	and.w	r5, r3, r1
 8006846:	ea04 0602 	and.w	r6, r4, r2
 800684a:	4629      	mov	r1, r5
 800684c:	4632      	mov	r2, r6
 800684e:	f04f 0300 	mov.w	r3, #0
 8006852:	f04f 0400 	mov.w	r4, #0
 8006856:	0154      	lsls	r4, r2, #5
 8006858:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800685c:	014b      	lsls	r3, r1, #5
 800685e:	4619      	mov	r1, r3
 8006860:	4622      	mov	r2, r4
 8006862:	1b49      	subs	r1, r1, r5
 8006864:	eb62 0206 	sbc.w	r2, r2, r6
 8006868:	f04f 0300 	mov.w	r3, #0
 800686c:	f04f 0400 	mov.w	r4, #0
 8006870:	0194      	lsls	r4, r2, #6
 8006872:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8006876:	018b      	lsls	r3, r1, #6
 8006878:	1a5b      	subs	r3, r3, r1
 800687a:	eb64 0402 	sbc.w	r4, r4, r2
 800687e:	f04f 0100 	mov.w	r1, #0
 8006882:	f04f 0200 	mov.w	r2, #0
 8006886:	00e2      	lsls	r2, r4, #3
 8006888:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800688c:	00d9      	lsls	r1, r3, #3
 800688e:	460b      	mov	r3, r1
 8006890:	4614      	mov	r4, r2
 8006892:	195b      	adds	r3, r3, r5
 8006894:	eb44 0406 	adc.w	r4, r4, r6
 8006898:	f04f 0100 	mov.w	r1, #0
 800689c:	f04f 0200 	mov.w	r2, #0
 80068a0:	02a2      	lsls	r2, r4, #10
 80068a2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80068a6:	0299      	lsls	r1, r3, #10
 80068a8:	460b      	mov	r3, r1
 80068aa:	4614      	mov	r4, r2
 80068ac:	4618      	mov	r0, r3
 80068ae:	4621      	mov	r1, r4
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f04f 0400 	mov.w	r4, #0
 80068b6:	461a      	mov	r2, r3
 80068b8:	4623      	mov	r3, r4
 80068ba:	f7f9 fc8d 	bl	80001d8 <__aeabi_uldivmod>
 80068be:	4603      	mov	r3, r0
 80068c0:	460c      	mov	r4, r1
 80068c2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80068c4:	4b0a      	ldr	r3, [pc, #40]	; (80068f0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	0c1b      	lsrs	r3, r3, #16
 80068ca:	f003 0303 	and.w	r3, r3, #3
 80068ce:	3301      	adds	r3, #1
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80068d4:	68fa      	ldr	r2, [r7, #12]
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80068dc:	60bb      	str	r3, [r7, #8]
      break;
 80068de:	e002      	b.n	80068e6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80068e0:	4b04      	ldr	r3, [pc, #16]	; (80068f4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 80068e2:	60bb      	str	r3, [r7, #8]
      break;
 80068e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80068e6:	68bb      	ldr	r3, [r7, #8]
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068f0:	40023800 	.word	0x40023800
 80068f4:	00f42400 	.word	0x00f42400
 80068f8:	007a1200 	.word	0x007a1200

080068fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80068fc:	b480      	push	{r7}
 80068fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006900:	4b03      	ldr	r3, [pc, #12]	; (8006910 <HAL_RCC_GetHCLKFreq+0x14>)
 8006902:	681b      	ldr	r3, [r3, #0]
}
 8006904:	4618      	mov	r0, r3
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	20000008 	.word	0x20000008

08006914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006918:	f7ff fff0 	bl	80068fc <HAL_RCC_GetHCLKFreq>
 800691c:	4601      	mov	r1, r0
 800691e:	4b05      	ldr	r3, [pc, #20]	; (8006934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006920:	689b      	ldr	r3, [r3, #8]
 8006922:	0a9b      	lsrs	r3, r3, #10
 8006924:	f003 0307 	and.w	r3, r3, #7
 8006928:	4a03      	ldr	r2, [pc, #12]	; (8006938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800692a:	5cd3      	ldrb	r3, [r2, r3]
 800692c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006930:	4618      	mov	r0, r3
 8006932:	bd80      	pop	{r7, pc}
 8006934:	40023800 	.word	0x40023800
 8006938:	0800a1f4 	.word	0x0800a1f4

0800693c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006940:	f7ff ffdc 	bl	80068fc <HAL_RCC_GetHCLKFreq>
 8006944:	4601      	mov	r1, r0
 8006946:	4b05      	ldr	r3, [pc, #20]	; (800695c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	0b5b      	lsrs	r3, r3, #13
 800694c:	f003 0307 	and.w	r3, r3, #7
 8006950:	4a03      	ldr	r2, [pc, #12]	; (8006960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006952:	5cd3      	ldrb	r3, [r2, r3]
 8006954:	fa21 f303 	lsr.w	r3, r1, r3
}
 8006958:	4618      	mov	r0, r3
 800695a:	bd80      	pop	{r7, pc}
 800695c:	40023800 	.word	0x40023800
 8006960:	0800a1f4 	.word	0x0800a1f4

08006964 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if(__HAL_RCC_GET_IT(RCC_IT_CSS))
 8006968:	4b06      	ldr	r3, [pc, #24]	; (8006984 <HAL_RCC_NMI_IRQHandler+0x20>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006970:	2b80      	cmp	r3, #128	; 0x80
 8006972:	d104      	bne.n	800697e <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8006974:	f000 f80a 	bl	800698c <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8006978:	4b03      	ldr	r3, [pc, #12]	; (8006988 <HAL_RCC_NMI_IRQHandler+0x24>)
 800697a:	2280      	movs	r2, #128	; 0x80
 800697c:	701a      	strb	r2, [r3, #0]
  }
}
 800697e:	bf00      	nop
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40023800 	.word	0x40023800
 8006988:	4002380e 	.word	0x4002380e

0800698c <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800698c:	b480      	push	{r7}
 800698e:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8006990:	bf00      	nop
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80069a8:	2300      	movs	r3, #0
 80069aa:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f003 0301 	and.w	r3, r3, #1
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d105      	bne.n	80069c4 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d035      	beq.n	8006a30 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80069c4:	4b62      	ldr	r3, [pc, #392]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80069c6:	2200      	movs	r2, #0
 80069c8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80069ca:	f7fb fdcf 	bl	800256c <HAL_GetTick>
 80069ce:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069d0:	e008      	b.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80069d2:	f7fb fdcb 	bl	800256c <HAL_GetTick>
 80069d6:	4602      	mov	r2, r0
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	1ad3      	subs	r3, r2, r3
 80069dc:	2b02      	cmp	r3, #2
 80069de:	d901      	bls.n	80069e4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80069e0:	2303      	movs	r3, #3
 80069e2:	e0b0      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80069e4:	4b5b      	ldr	r3, [pc, #364]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d1f0      	bne.n	80069d2 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	019a      	lsls	r2, r3, #6
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	689b      	ldr	r3, [r3, #8]
 80069fa:	071b      	lsls	r3, r3, #28
 80069fc:	4955      	ldr	r1, [pc, #340]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80069fe:	4313      	orrs	r3, r2
 8006a00:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8006a04:	4b52      	ldr	r3, [pc, #328]	; (8006b50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8006a06:	2201      	movs	r2, #1
 8006a08:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8006a0a:	f7fb fdaf 	bl	800256c <HAL_GetTick>
 8006a0e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a10:	e008      	b.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8006a12:	f7fb fdab 	bl	800256c <HAL_GetTick>
 8006a16:	4602      	mov	r2, r0
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	1ad3      	subs	r3, r2, r3
 8006a1c:	2b02      	cmp	r3, #2
 8006a1e:	d901      	bls.n	8006a24 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8006a20:	2303      	movs	r3, #3
 8006a22:	e090      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8006a24:	4b4b      	ldr	r3, [pc, #300]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d0f0      	beq.n	8006a12 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0302 	and.w	r3, r3, #2
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8083 	beq.w	8006b44 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60fb      	str	r3, [r7, #12]
 8006a42:	4b44      	ldr	r3, [pc, #272]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a46:	4a43      	ldr	r2, [pc, #268]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a4c:	6413      	str	r3, [r2, #64]	; 0x40
 8006a4e:	4b41      	ldr	r3, [pc, #260]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a56:	60fb      	str	r3, [r7, #12]
 8006a58:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8006a5a:	4b3f      	ldr	r3, [pc, #252]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a3e      	ldr	r2, [pc, #248]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a64:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006a66:	f7fb fd81 	bl	800256c <HAL_GetTick>
 8006a6a:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a6c:	e008      	b.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8006a6e:	f7fb fd7d 	bl	800256c <HAL_GetTick>
 8006a72:	4602      	mov	r2, r0
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e062      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8006a80:	4b35      	ldr	r3, [pc, #212]	; (8006b58 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8006a8c:	4b31      	ldr	r3, [pc, #196]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006a8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a90:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a94:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d02f      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006aa4:	693a      	ldr	r2, [r7, #16]
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d028      	beq.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006aaa:	4b2a      	ldr	r3, [pc, #168]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ab2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8006ab4:	4b29      	ldr	r3, [pc, #164]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8006aba:	4b28      	ldr	r3, [pc, #160]	; (8006b5c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8006ac0:	4a24      	ldr	r2, [pc, #144]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006ac6:	4b23      	ldr	r3, [pc, #140]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aca:	f003 0301 	and.w	r3, r3, #1
 8006ace:	2b01      	cmp	r3, #1
 8006ad0:	d114      	bne.n	8006afc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8006ad2:	f7fb fd4b 	bl	800256c <HAL_GetTick>
 8006ad6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ad8:	e00a      	b.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ada:	f7fb fd47 	bl	800256c <HAL_GetTick>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	1ad3      	subs	r3, r2, r3
 8006ae4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ae8:	4293      	cmp	r3, r2
 8006aea:	d901      	bls.n	8006af0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8006aec:	2303      	movs	r3, #3
 8006aee:	e02a      	b.n	8006b46 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006af0:	4b18      	ldr	r3, [pc, #96]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006af4:	f003 0302 	and.w	r3, r3, #2
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d0ee      	beq.n	8006ada <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68db      	ldr	r3, [r3, #12]
 8006b00:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b04:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006b08:	d10d      	bne.n	8006b26 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8006b0a:	4b12      	ldr	r3, [pc, #72]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b0c:	689b      	ldr	r3, [r3, #8]
 8006b0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	68db      	ldr	r3, [r3, #12]
 8006b16:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8006b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b1e:	490d      	ldr	r1, [pc, #52]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	608b      	str	r3, [r1, #8]
 8006b24:	e005      	b.n	8006b32 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8006b26:	4b0b      	ldr	r3, [pc, #44]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b28:	689b      	ldr	r3, [r3, #8]
 8006b2a:	4a0a      	ldr	r2, [pc, #40]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b2c:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8006b30:	6093      	str	r3, [r2, #8]
 8006b32:	4b08      	ldr	r3, [pc, #32]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b34:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006b3e:	4905      	ldr	r1, [pc, #20]	; (8006b54 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8006b40:	4313      	orrs	r3, r2
 8006b42:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8006b44:	2300      	movs	r3, #0
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3718      	adds	r7, #24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	bd80      	pop	{r7, pc}
 8006b4e:	bf00      	nop
 8006b50:	42470068 	.word	0x42470068
 8006b54:	40023800 	.word	0x40023800
 8006b58:	40007000 	.word	0x40007000
 8006b5c:	42470e40 	.word	0x42470e40

08006b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8006b68:	2300      	movs	r3, #0
 8006b6a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8006b6c:	2300      	movs	r3, #0
 8006b6e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8006b70:	2300      	movs	r3, #0
 8006b72:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8006b74:	2300      	movs	r3, #0
 8006b76:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d13d      	bne.n	8006bfa <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8006b7e:	4b22      	ldr	r3, [pc, #136]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b80:	689b      	ldr	r3, [r3, #8]
 8006b82:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006b86:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d004      	beq.n	8006b98 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d12f      	bne.n	8006bf2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8006b92:	4b1e      	ldr	r3, [pc, #120]	; (8006c0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8006b94:	617b      	str	r3, [r7, #20]
          break;
 8006b96:	e02f      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8006b98:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006ba0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006ba4:	d108      	bne.n	8006bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006ba6:	4b18      	ldr	r3, [pc, #96]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bae:	4a18      	ldr	r2, [pc, #96]	; (8006c10 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8006bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bb4:	613b      	str	r3, [r7, #16]
 8006bb6:	e007      	b.n	8006bc8 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8006bb8:	4b13      	ldr	r3, [pc, #76]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bc0:	4a14      	ldr	r2, [pc, #80]	; (8006c14 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8006bc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bc6:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8006bc8:	4b0f      	ldr	r3, [pc, #60]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006bca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006bce:	099b      	lsrs	r3, r3, #6
 8006bd0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	fb02 f303 	mul.w	r3, r2, r3
 8006bda:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8006bdc:	4b0a      	ldr	r3, [pc, #40]	; (8006c08 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8006bde:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006be2:	0f1b      	lsrs	r3, r3, #28
 8006be4:	f003 0307 	and.w	r3, r3, #7
 8006be8:	68ba      	ldr	r2, [r7, #8]
 8006bea:	fbb2 f3f3 	udiv	r3, r2, r3
 8006bee:	617b      	str	r3, [r7, #20]
          break;
 8006bf0:	e002      	b.n	8006bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	617b      	str	r3, [r7, #20]
          break;
 8006bf6:	bf00      	nop
        }
      }
      break;
 8006bf8:	bf00      	nop
    }
  }
  return frequency;
 8006bfa:	697b      	ldr	r3, [r7, #20]
}
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	371c      	adds	r7, #28
 8006c00:	46bd      	mov	sp, r7
 8006c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c06:	4770      	bx	lr
 8006c08:	40023800 	.word	0x40023800
 8006c0c:	00bb8000 	.word	0x00bb8000
 8006c10:	007a1200 	.word	0x007a1200
 8006c14:	00f42400 	.word	0x00f42400

08006c18 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b082      	sub	sp, #8
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d101      	bne.n	8006c2a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8006c26:	2301      	movs	r3, #1
 8006c28:	e083      	b.n	8006d32 <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	7f5b      	ldrb	r3, [r3, #29]
 8006c2e:	b2db      	uxtb	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d105      	bne.n	8006c40 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8006c3a:	6878      	ldr	r0, [r7, #4]
 8006c3c:	f7fb f8c0 	bl	8001dc0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	2202      	movs	r2, #2
 8006c44:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	22ca      	movs	r2, #202	; 0xca
 8006c4c:	625a      	str	r2, [r3, #36]	; 0x24
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	2253      	movs	r2, #83	; 0x53
 8006c54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f000 fb84 	bl	8007364 <RTC_EnterInitMode>
 8006c5c:	4603      	mov	r3, r0
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d008      	beq.n	8006c74 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	22ff      	movs	r2, #255	; 0xff
 8006c68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	2204      	movs	r2, #4
 8006c6e:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8006c70:	2301      	movs	r3, #1
 8006c72:	e05e      	b.n	8006d32 <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	689b      	ldr	r3, [r3, #8]
 8006c7a:	687a      	ldr	r2, [r7, #4]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006c82:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c86:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6899      	ldr	r1, [r3, #8]
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	685a      	ldr	r2, [r3, #4]
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	431a      	orrs	r2, r3
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	695b      	ldr	r3, [r3, #20]
 8006c9c:	431a      	orrs	r2, r3
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	68d2      	ldr	r2, [r2, #12]
 8006cae:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	6919      	ldr	r1, [r3, #16]
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	041a      	lsls	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	430a      	orrs	r2, r1
 8006cc2:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	68da      	ldr	r2, [r3, #12]
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cd2:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	689b      	ldr	r3, [r3, #8]
 8006cda:	f003 0320 	and.w	r3, r3, #32
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d10e      	bne.n	8006d00 <HAL_RTC_Init+0xe8>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006ce2:	6878      	ldr	r0, [r7, #4]
 8006ce4:	f000 fb16 	bl	8007314 <HAL_RTC_WaitForSynchro>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d008      	beq.n	8006d00 <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	22ff      	movs	r2, #255	; 0xff
 8006cf4:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	2204      	movs	r2, #4
 8006cfa:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e018      	b.n	8006d32 <HAL_RTC_Init+0x11a>
      }
    }

    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006d0e:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	699a      	ldr	r2, [r3, #24]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	430a      	orrs	r2, r1
 8006d20:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	22ff      	movs	r2, #255	; 0xff
 8006d28:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2201      	movs	r2, #1
 8006d2e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8006d30:	2300      	movs	r3, #0
  }
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3708      	adds	r7, #8
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8006d3a:	b590      	push	{r4, r7, lr}
 8006d3c:	b087      	sub	sp, #28
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8006d46:	2300      	movs	r3, #0
 8006d48:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	7f1b      	ldrb	r3, [r3, #28]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d101      	bne.n	8006d56 <HAL_RTC_SetTime+0x1c>
 8006d52:	2302      	movs	r3, #2
 8006d54:	e0aa      	b.n	8006eac <HAL_RTC_SetTime+0x172>
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2201      	movs	r2, #1
 8006d5a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	2202      	movs	r2, #2
 8006d60:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d126      	bne.n	8006db6 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	689b      	ldr	r3, [r3, #8]
 8006d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d102      	bne.n	8006d7c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006d76:	68bb      	ldr	r3, [r7, #8]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006d7c:	68bb      	ldr	r3, [r7, #8]
 8006d7e:	781b      	ldrb	r3, [r3, #0]
 8006d80:	4618      	mov	r0, r3
 8006d82:	f000 fb1b 	bl	80073bc <RTC_ByteToBcd2>
 8006d86:	4603      	mov	r3, r0
 8006d88:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006d8a:	68bb      	ldr	r3, [r7, #8]
 8006d8c:	785b      	ldrb	r3, [r3, #1]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 fb14 	bl	80073bc <RTC_ByteToBcd2>
 8006d94:	4603      	mov	r3, r0
 8006d96:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006d98:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8006d9a:	68bb      	ldr	r3, [r7, #8]
 8006d9c:	789b      	ldrb	r3, [r3, #2]
 8006d9e:	4618      	mov	r0, r3
 8006da0:	f000 fb0c 	bl	80073bc <RTC_ByteToBcd2>
 8006da4:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8006da6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	78db      	ldrb	r3, [r3, #3]
 8006dae:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8006db0:	4313      	orrs	r3, r2
 8006db2:	617b      	str	r3, [r7, #20]
 8006db4:	e018      	b.n	8006de8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	689b      	ldr	r3, [r3, #8]
 8006dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d102      	bne.n	8006dca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dca:	68bb      	ldr	r3, [r7, #8]
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006dd0:	68bb      	ldr	r3, [r7, #8]
 8006dd2:	785b      	ldrb	r3, [r3, #1]
 8006dd4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006dd6:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8006dd8:	68ba      	ldr	r2, [r7, #8]
 8006dda:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8006ddc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8006dde:	68bb      	ldr	r3, [r7, #8]
 8006de0:	78db      	ldrb	r3, [r3, #3]
 8006de2:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8006de4:	4313      	orrs	r3, r2
 8006de6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	22ca      	movs	r2, #202	; 0xca
 8006dee:	625a      	str	r2, [r3, #36]	; 0x24
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2253      	movs	r2, #83	; 0x53
 8006df6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006df8:	68f8      	ldr	r0, [r7, #12]
 8006dfa:	f000 fab3 	bl	8007364 <RTC_EnterInitMode>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d00b      	beq.n	8006e1c <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	22ff      	movs	r2, #255	; 0xff
 8006e0a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2204      	movs	r2, #4
 8006e10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006e18:	2301      	movs	r3, #1
 8006e1a:	e047      	b.n	8006eac <HAL_RTC_SetTime+0x172>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681a      	ldr	r2, [r3, #0]
 8006e20:	697b      	ldr	r3, [r7, #20]
 8006e22:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8006e26:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 8006e2a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BCK;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	689a      	ldr	r2, [r3, #8]
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006e3a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	6899      	ldr	r1, [r3, #8]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	68da      	ldr	r2, [r3, #12]
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	691b      	ldr	r3, [r3, #16]
 8006e4a:	431a      	orrs	r2, r3
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	430a      	orrs	r2, r1
 8006e52:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	68da      	ldr	r2, [r3, #12]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006e62:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	689b      	ldr	r3, [r3, #8]
 8006e6a:	f003 0320 	and.w	r3, r3, #32
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d111      	bne.n	8006e96 <HAL_RTC_SetTime+0x15c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f000 fa4e 	bl	8007314 <HAL_RTC_WaitForSynchro>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00b      	beq.n	8006e96 <HAL_RTC_SetTime+0x15c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	22ff      	movs	r2, #255	; 0xff
 8006e84:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2204      	movs	r2, #4
 8006e8a:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	2200      	movs	r2, #0
 8006e90:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006e92:	2301      	movs	r3, #1
 8006e94:	e00a      	b.n	8006eac <HAL_RTC_SetTime+0x172>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	22ff      	movs	r2, #255	; 0xff
 8006e9c:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2201      	movs	r2, #1
 8006ea2:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8006eaa:	2300      	movs	r3, #0
  }
}
 8006eac:	4618      	mov	r0, r3
 8006eae:	371c      	adds	r7, #28
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	bd90      	pop	{r4, r7, pc}

08006eb4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8006eb4:	b590      	push	{r4, r7, lr}
 8006eb6:	b087      	sub	sp, #28
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	7f1b      	ldrb	r3, [r3, #28]
 8006ec8:	2b01      	cmp	r3, #1
 8006eca:	d101      	bne.n	8006ed0 <HAL_RTC_SetDate+0x1c>
 8006ecc:	2302      	movs	r3, #2
 8006ece:	e094      	b.n	8006ffa <HAL_RTC_SetDate+0x146>
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	2202      	movs	r2, #2
 8006eda:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10e      	bne.n	8006f00 <HAL_RTC_SetDate+0x4c>
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	785b      	ldrb	r3, [r3, #1]
 8006ee6:	f003 0310 	and.w	r3, r3, #16
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d008      	beq.n	8006f00 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	f023 0310 	bic.w	r3, r3, #16
 8006ef6:	b2db      	uxtb	r3, r3
 8006ef8:	330a      	adds	r3, #10
 8006efa:	b2da      	uxtb	r2, r3
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d11c      	bne.n	8006f40 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006f06:	68bb      	ldr	r3, [r7, #8]
 8006f08:	78db      	ldrb	r3, [r3, #3]
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f000 fa56 	bl	80073bc <RTC_ByteToBcd2>
 8006f10:	4603      	mov	r3, r0
 8006f12:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006f14:	68bb      	ldr	r3, [r7, #8]
 8006f16:	785b      	ldrb	r3, [r3, #1]
 8006f18:	4618      	mov	r0, r3
 8006f1a:	f000 fa4f 	bl	80073bc <RTC_ByteToBcd2>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006f22:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	789b      	ldrb	r3, [r3, #2]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fa47 	bl	80073bc <RTC_ByteToBcd2>
 8006f2e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 8006f30:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13U));
 8006f34:	68bb      	ldr	r3, [r7, #8]
 8006f36:	781b      	ldrb	r3, [r3, #0]
 8006f38:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 8006f3a:	4313      	orrs	r3, r2
 8006f3c:	617b      	str	r3, [r7, #20]
 8006f3e:	e00e      	b.n	8006f5e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	78db      	ldrb	r3, [r3, #3]
 8006f44:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	785b      	ldrb	r3, [r3, #1]
 8006f4a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006f4c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8006f4e:	68ba      	ldr	r2, [r7, #8]
 8006f50:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 8006f52:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	781b      	ldrb	r3, [r3, #0]
 8006f58:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8006f5a:	4313      	orrs	r3, r2
 8006f5c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	22ca      	movs	r2, #202	; 0xca
 8006f64:	625a      	str	r2, [r3, #36]	; 0x24
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	2253      	movs	r2, #83	; 0x53
 8006f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8006f6e:	68f8      	ldr	r0, [r7, #12]
 8006f70:	f000 f9f8 	bl	8007364 <RTC_EnterInitMode>
 8006f74:	4603      	mov	r3, r0
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d00b      	beq.n	8006f92 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	22ff      	movs	r2, #255	; 0xff
 8006f80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2204      	movs	r2, #4
 8006f86:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	e033      	b.n	8006ffa <HAL_RTC_SetDate+0x146>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681a      	ldr	r2, [r3, #0]
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006f9c:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8006fa0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68da      	ldr	r2, [r3, #12]
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006fb0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	689b      	ldr	r3, [r3, #8]
 8006fb8:	f003 0320 	and.w	r3, r3, #32
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d111      	bne.n	8006fe4 <HAL_RTC_SetDate+0x130>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8006fc0:	68f8      	ldr	r0, [r7, #12]
 8006fc2:	f000 f9a7 	bl	8007314 <HAL_RTC_WaitForSynchro>
 8006fc6:	4603      	mov	r3, r0
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d00b      	beq.n	8006fe4 <HAL_RTC_SetDate+0x130>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	22ff      	movs	r2, #255	; 0xff
 8006fd2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2204      	movs	r2, #4
 8006fd8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8006fe0:	2301      	movs	r3, #1
 8006fe2:	e00a      	b.n	8006ffa <HAL_RTC_SetDate+0x146>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	22ff      	movs	r2, #255	; 0xff
 8006fea:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8006ff8:	2300      	movs	r3, #0
  }
}
 8006ffa:	4618      	mov	r0, r3
 8006ffc:	371c      	adds	r7, #28
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd90      	pop	{r4, r7, pc}
	...

08007004 <HAL_RTC_SetAlarm_IT>:
  *             @arg RTC_FORMAT_BIN: Binary data format
  *             @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm_IT(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8007004:	b590      	push	{r4, r7, lr}
 8007006:	b089      	sub	sp, #36	; 0x24
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U, subsecondtmpreg = 0U;
 8007010:	2300      	movs	r3, #0
 8007012:	61fb      	str	r3, [r7, #28]
 8007014:	2300      	movs	r3, #0
 8007016:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = RTC_TIMEOUT_VALUE  * (SystemCoreClock / 32U / 1000U) ;
 8007018:	4b93      	ldr	r3, [pc, #588]	; (8007268 <HAL_RTC_SetAlarm_IT+0x264>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a93      	ldr	r2, [pc, #588]	; (800726c <HAL_RTC_SetAlarm_IT+0x268>)
 800701e:	fba2 2303 	umull	r2, r3, r2, r3
 8007022:	0adb      	lsrs	r3, r3, #11
 8007024:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007028:	fb02 f303 	mul.w	r3, r2, r3
 800702c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	7f1b      	ldrb	r3, [r3, #28]
 8007032:	2b01      	cmp	r3, #1
 8007034:	d101      	bne.n	800703a <HAL_RTC_SetAlarm_IT+0x36>
 8007036:	2302      	movs	r3, #2
 8007038:	e111      	b.n	800725e <HAL_RTC_SetAlarm_IT+0x25a>
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2201      	movs	r2, #1
 800703e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2202      	movs	r2, #2
 8007044:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2b00      	cmp	r3, #0
 800704a:	d137      	bne.n	80070bc <HAL_RTC_SetAlarm_IT+0xb8>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	689b      	ldr	r3, [r3, #8]
 8007052:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007056:	2b00      	cmp	r3, #0
 8007058:	d102      	bne.n	8007060 <HAL_RTC_SetAlarm_IT+0x5c>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	2200      	movs	r2, #0
 800705e:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 8007060:	68bb      	ldr	r3, [r7, #8]
 8007062:	781b      	ldrb	r3, [r3, #0]
 8007064:	4618      	mov	r0, r3
 8007066:	f000 f9a9 	bl	80073bc <RTC_ByteToBcd2>
 800706a:	4603      	mov	r3, r0
 800706c:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800706e:	68bb      	ldr	r3, [r7, #8]
 8007070:	785b      	ldrb	r3, [r3, #1]
 8007072:	4618      	mov	r0, r3
 8007074:	f000 f9a2 	bl	80073bc <RTC_ByteToBcd2>
 8007078:	4603      	mov	r3, r0
 800707a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 800707c:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 800707e:	68bb      	ldr	r3, [r7, #8]
 8007080:	789b      	ldrb	r3, [r3, #2]
 8007082:	4618      	mov	r0, r3
 8007084:	f000 f99a 	bl	80073bc <RTC_ByteToBcd2>
 8007088:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8U) | \
 800708a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 800708e:	68bb      	ldr	r3, [r7, #8]
 8007090:	78db      	ldrb	r3, [r3, #3]
 8007092:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8007094:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800709e:	4618      	mov	r0, r3
 80070a0:	f000 f98c 	bl	80073bc <RTC_ByteToBcd2>
 80070a4:	4603      	mov	r3, r0
 80070a6:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80070a8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070ac:	68bb      	ldr	r3, [r7, #8]
 80070ae:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24U) | \
 80070b0:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16U) | \
 80070b6:	4313      	orrs	r3, r2
 80070b8:	61fb      	str	r3, [r7, #28]
 80070ba:	e023      	b.n	8007104 <HAL_RTC_SetAlarm_IT+0x100>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	689b      	ldr	r3, [r3, #8]
 80070c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d102      	bne.n	80070d0 <HAL_RTC_SetAlarm_IT+0xcc>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00U;
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	2200      	movs	r2, #0
 80070ce:	70da      	strb	r2, [r3, #3]
    }
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80070d0:	68bb      	ldr	r3, [r7, #8]
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	785b      	ldrb	r3, [r3, #1]
 80070da:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 80070dc:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8U) | \
 80070e2:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	78db      	ldrb	r3, [r3, #3]
 80070e8:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 80070ea:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070f2:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16U) | \
 80070f4:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	69db      	ldr	r3, [r3, #28]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24U) | \
 80070fa:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80070fc:	68bb      	ldr	r3, [r7, #8]
 80070fe:	695b      	ldr	r3, [r3, #20]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16U) | \
 8007100:	4313      	orrs	r3, r2
 8007102:	61fb      	str	r3, [r7, #28]
  }
  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8007104:	68bb      	ldr	r3, [r7, #8]
 8007106:	685a      	ldr	r2, [r3, #4]
 8007108:	68bb      	ldr	r3, [r7, #8]
 800710a:	699b      	ldr	r3, [r3, #24]
 800710c:	4313      	orrs	r3, r2
 800710e:	61bb      	str	r3, [r7, #24]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	22ca      	movs	r2, #202	; 0xca
 8007116:	625a      	str	r2, [r3, #36]	; 0x24
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2253      	movs	r2, #83	; 0x53
 800711e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007124:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007128:	d141      	bne.n	80071ae <HAL_RTC_SetAlarm_IT+0x1aa>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007138:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm A */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRAF);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	68db      	ldr	r3, [r3, #12]
 8007140:	b2da      	uxtb	r2, r3
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f462 72c0 	orn	r2, r2, #384	; 0x180
 800714a:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 800714c:	697b      	ldr	r3, [r7, #20]
 800714e:	1e5a      	subs	r2, r3, #1
 8007150:	617a      	str	r2, [r7, #20]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d10b      	bne.n	800716e <HAL_RTC_SetAlarm_IT+0x16a>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	22ff      	movs	r2, #255	; 0xff
 800715c:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	2203      	movs	r2, #3
 8007162:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2200      	movs	r2, #0
 8007168:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e077      	b.n	800725e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET);
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	68db      	ldr	r3, [r3, #12]
 8007174:	f003 0301 	and.w	r3, r3, #1
 8007178:	2b00      	cmp	r3, #0
 800717a:	d0e7      	beq.n	800714c <HAL_RTC_SetAlarm_IT+0x148>

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	69fa      	ldr	r2, [r7, #28]
 8007182:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	69ba      	ldr	r2, [r7, #24]
 800718a:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	689a      	ldr	r2, [r3, #8]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800719a:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc,RTC_IT_ALRA);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	689a      	ldr	r2, [r3, #8]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80071aa:	609a      	str	r2, [r3, #8]
 80071ac:	e040      	b.n	8007230 <HAL_RTC_SetAlarm_IT+0x22c>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	689a      	ldr	r2, [r3, #8]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80071bc:	609a      	str	r2, [r3, #8]

    /* Clear flag alarm B */
    __HAL_RTC_ALARM_CLEAR_FLAG(hrtc, RTC_FLAG_ALRBF);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	68db      	ldr	r3, [r3, #12]
 80071c4:	b2da      	uxtb	r2, r3
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f462 7220 	orn	r2, r2, #640	; 0x280
 80071ce:	60da      	str	r2, [r3, #12]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    do
    {
      if (count-- == 0U)
 80071d0:	697b      	ldr	r3, [r7, #20]
 80071d2:	1e5a      	subs	r2, r3, #1
 80071d4:	617a      	str	r2, [r7, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d10b      	bne.n	80071f2 <HAL_RTC_SetAlarm_IT+0x1ee>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	22ff      	movs	r2, #255	; 0xff
 80071e0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2203      	movs	r2, #3
 80071e6:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	2200      	movs	r2, #0
 80071ec:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80071ee:	2303      	movs	r3, #3
 80071f0:	e035      	b.n	800725e <HAL_RTC_SetAlarm_IT+0x25a>
      }
    }
    while (__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET);
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d0e7      	beq.n	80071d0 <HAL_RTC_SetAlarm_IT+0x1cc>

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	681b      	ldr	r3, [r3, #0]
 800720c:	69ba      	ldr	r2, [r7, #24]
 800720e:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	689a      	ldr	r2, [r3, #8]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800721e:	609a      	str	r2, [r3, #8]
    /* Configure the Alarm interrupt */
    __HAL_RTC_ALARM_ENABLE_IT(hrtc, RTC_IT_ALRB);
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	689a      	ldr	r2, [r3, #8]
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800722e:	609a      	str	r2, [r3, #8]
  }

  /* RTC Alarm Interrupt Configuration: EXTI configuration */
  __HAL_RTC_ALARM_EXTI_ENABLE_IT();
 8007230:	4b0f      	ldr	r3, [pc, #60]	; (8007270 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	4a0e      	ldr	r2, [pc, #56]	; (8007270 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007236:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800723a:	6013      	str	r3, [r2, #0]

  EXTI->RTSR |= RTC_EXTI_LINE_ALARM_EVENT;
 800723c:	4b0c      	ldr	r3, [pc, #48]	; (8007270 <HAL_RTC_SetAlarm_IT+0x26c>)
 800723e:	689b      	ldr	r3, [r3, #8]
 8007240:	4a0b      	ldr	r2, [pc, #44]	; (8007270 <HAL_RTC_SetAlarm_IT+0x26c>)
 8007242:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007246:	6093      	str	r3, [r2, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	22ff      	movs	r2, #255	; 0xff
 800724e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2201      	movs	r2, #1
 8007254:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2200      	movs	r2, #0
 800725a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800725c:	2300      	movs	r3, #0
}
 800725e:	4618      	mov	r0, r3
 8007260:	3724      	adds	r7, #36	; 0x24
 8007262:	46bd      	mov	sp, r7
 8007264:	bd90      	pop	{r4, r7, pc}
 8007266:	bf00      	nop
 8007268:	20000008 	.word	0x20000008
 800726c:	10624dd3 	.word	0x10624dd3
 8007270:	40013c00 	.word	0x40013c00

08007274 <HAL_RTC_AlarmIRQHandler>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
void HAL_RTC_AlarmIRQHandler(RTC_HandleTypeDef* hrtc)
{
 8007274:	b580      	push	{r7, lr}
 8007276:	b082      	sub	sp, #8
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]
  /* Get the AlarmA interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRA) != (uint32_t)RESET)
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	689b      	ldr	r3, [r3, #8]
 8007282:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007286:	2b00      	cmp	r3, #0
 8007288:	d012      	beq.n	80072b0 <HAL_RTC_AlarmIRQHandler+0x3c>
  {
    /* Get the pending status of the AlarmA Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAF) != (uint32_t)RESET)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	68db      	ldr	r3, [r3, #12]
 8007290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007294:	2b00      	cmp	r3, #0
 8007296:	d00b      	beq.n	80072b0 <HAL_RTC_AlarmIRQHandler+0x3c>
    {
      /* AlarmA callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmAEventCallback(hrtc);
    #else
      HAL_RTC_AlarmAEventCallback(hrtc);
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 f831 	bl	8007300 <HAL_RTC_AlarmAEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmA interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRAF);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	b2da      	uxtb	r2, r3
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f462 72c0 	orn	r2, r2, #384	; 0x180
 80072ae:	60da      	str	r2, [r3, #12]
    }
  }

  /* Get the AlarmB interrupt source enable status */
  if(__HAL_RTC_ALARM_GET_IT_SOURCE(hrtc, RTC_IT_ALRB) != (uint32_t)RESET)
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	689b      	ldr	r3, [r3, #8]
 80072b6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d012      	beq.n	80072e4 <HAL_RTC_AlarmIRQHandler+0x70>
  {
    /* Get the pending status of the AlarmB Interrupt */
    if(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBF) != (uint32_t)RESET)
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00b      	beq.n	80072e4 <HAL_RTC_AlarmIRQHandler+0x70>
    {
      /* AlarmB callback */
    #if (USE_HAL_RTC_REGISTER_CALLBACKS == 1)
      hrtc->AlarmBEventCallback(hrtc);
    #else
      HAL_RTCEx_AlarmBEventCallback(hrtc);
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 f893 	bl	80073f8 <HAL_RTCEx_AlarmBEventCallback>
    #endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

      /* Clear the AlarmB interrupt pending bit */
      __HAL_RTC_ALARM_CLEAR_FLAG(hrtc,RTC_FLAG_ALRBF);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68db      	ldr	r3, [r3, #12]
 80072d8:	b2da      	uxtb	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	f462 7220 	orn	r2, r2, #640	; 0x280
 80072e2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Clear the EXTI's line Flag for RTC Alarm */
  __HAL_RTC_ALARM_EXTI_CLEAR_FLAG();
 80072e4:	4b05      	ldr	r3, [pc, #20]	; (80072fc <HAL_RTC_AlarmIRQHandler+0x88>)
 80072e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80072ea:	615a      	str	r2, [r3, #20]

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2201      	movs	r2, #1
 80072f0:	775a      	strb	r2, [r3, #29]
}
 80072f2:	bf00      	nop
 80072f4:	3708      	adds	r7, #8
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	40013c00 	.word	0x40013c00

08007300 <HAL_RTC_AlarmAEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTC_AlarmAEventCallback(RTC_HandleTypeDef *hrtc)
{
 8007300:	b480      	push	{r7}
 8007302:	b083      	sub	sp, #12
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_RTC_AlarmAEventCallback could be implemented in the user file
   */
}
 8007308:	bf00      	nop
 800730a:	370c      	adds	r7, #12
 800730c:	46bd      	mov	sp, r7
 800730e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007312:	4770      	bx	lr

08007314 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800731c:	2300      	movs	r3, #0
 800731e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	68da      	ldr	r2, [r3, #12]
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800732e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007330:	f7fb f91c 	bl	800256c <HAL_GetTick>
 8007334:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8007336:	e009      	b.n	800734c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007338:	f7fb f918 	bl	800256c <HAL_GetTick>
 800733c:	4602      	mov	r2, r0
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007346:	d901      	bls.n	800734c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8007348:	2303      	movs	r3, #3
 800734a:	e007      	b.n	800735c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	f003 0320 	and.w	r3, r3, #32
 8007356:	2b00      	cmp	r3, #0
 8007358:	d0ee      	beq.n	8007338 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800735a:	2300      	movs	r3, #0
}
 800735c:	4618      	mov	r0, r3
 800735e:	3710      	adds	r7, #16
 8007360:	46bd      	mov	sp, r7
 8007362:	bd80      	pop	{r7, pc}

08007364 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8007364:	b580      	push	{r7, lr}
 8007366:	b084      	sub	sp, #16
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800736c:	2300      	movs	r3, #0
 800736e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800737a:	2b00      	cmp	r3, #0
 800737c:	d119      	bne.n	80073b2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	f04f 32ff 	mov.w	r2, #4294967295
 8007386:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007388:	f7fb f8f0 	bl	800256c <HAL_GetTick>
 800738c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800738e:	e009      	b.n	80073a4 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8007390:	f7fb f8ec 	bl	800256c <HAL_GetTick>
 8007394:	4602      	mov	r2, r0
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	1ad3      	subs	r3, r2, r3
 800739a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800739e:	d901      	bls.n	80073a4 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 80073a0:	2303      	movs	r3, #3
 80073a2:	e007      	b.n	80073b4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68db      	ldr	r3, [r3, #12]
 80073aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d0ee      	beq.n	8007390 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80073bc:	b480      	push	{r7}
 80073be:	b085      	sub	sp, #20
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	4603      	mov	r3, r0
 80073c4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80073c6:	2300      	movs	r3, #0
 80073c8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10U)
 80073ca:	e005      	b.n	80073d8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3301      	adds	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80073d2:	79fb      	ldrb	r3, [r7, #7]
 80073d4:	3b0a      	subs	r3, #10
 80073d6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10U)
 80073d8:	79fb      	ldrb	r3, [r7, #7]
 80073da:	2b09      	cmp	r3, #9
 80073dc:	d8f6      	bhi.n	80073cc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Value);
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	b2db      	uxtb	r3, r3
 80073e2:	011b      	lsls	r3, r3, #4
 80073e4:	b2da      	uxtb	r2, r3
 80073e6:	79fb      	ldrb	r3, [r7, #7]
 80073e8:	4313      	orrs	r3, r2
 80073ea:	b2db      	uxtb	r3, r3
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3714      	adds	r7, #20
 80073f0:	46bd      	mov	sp, r7
 80073f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f6:	4770      	bx	lr

080073f8 <HAL_RTCEx_AlarmBEventCallback>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval None
  */
__weak void HAL_RTCEx_AlarmBEventCallback(RTC_HandleTypeDef *hrtc)
{
 80073f8:	b480      	push	{r7}
 80073fa:	b083      	sub	sp, #12
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrtc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RTC_AlarmBEventCallback could be implemented in the user file
   */
}
 8007400:	bf00      	nop
 8007402:	370c      	adds	r7, #12
 8007404:	46bd      	mov	sp, r7
 8007406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800740a:	4770      	bx	lr

0800740c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e056      	b.n	80074cc <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2200      	movs	r2, #0
 8007422:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800742a:	b2db      	uxtb	r3, r3
 800742c:	2b00      	cmp	r3, #0
 800742e:	d106      	bne.n	800743e <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7fa fcdd 	bl	8001df8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	2202      	movs	r2, #2
 8007442:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	681a      	ldr	r2, [r3, #0]
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007454:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	685a      	ldr	r2, [r3, #4]
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689b      	ldr	r3, [r3, #8]
 800745e:	431a      	orrs	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	431a      	orrs	r2, r3
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	431a      	orrs	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	695b      	ldr	r3, [r3, #20]
 8007470:	431a      	orrs	r2, r3
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800747a:	431a      	orrs	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69db      	ldr	r3, [r3, #28]
 8007480:	431a      	orrs	r2, r3
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	6a1b      	ldr	r3, [r3, #32]
 8007486:	ea42 0103 	orr.w	r1, r2, r3
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	430a      	orrs	r2, r1
 8007494:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	0c1b      	lsrs	r3, r3, #16
 800749c:	f003 0104 	and.w	r1, r3, #4
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	430a      	orrs	r2, r1
 80074aa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	69da      	ldr	r2, [r3, #28]
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80074ba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2201      	movs	r2, #1
 80074c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80074ca:	2300      	movs	r3, #0
}
 80074cc:	4618      	mov	r0, r3
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b088      	sub	sp, #32
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	685b      	ldr	r3, [r3, #4]
 80074e2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	689b      	ldr	r3, [r3, #8]
 80074ea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074ec:	69bb      	ldr	r3, [r7, #24]
 80074ee:	099b      	lsrs	r3, r3, #6
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10f      	bne.n	8007518 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80074f8:	69bb      	ldr	r3, [r7, #24]
 80074fa:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	099b      	lsrs	r3, r3, #6
 8007506:	f003 0301 	and.w	r3, r3, #1
 800750a:	2b00      	cmp	r3, #0
 800750c:	d004      	beq.n	8007518 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	4798      	blx	r3
    return;
 8007516:	e0d8      	b.n	80076ca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8007518:	69bb      	ldr	r3, [r7, #24]
 800751a:	085b      	lsrs	r3, r3, #1
 800751c:	f003 0301 	and.w	r3, r3, #1
 8007520:	2b00      	cmp	r3, #0
 8007522:	d00a      	beq.n	800753a <HAL_SPI_IRQHandler+0x66>
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	09db      	lsrs	r3, r3, #7
 8007528:	f003 0301 	and.w	r3, r3, #1
 800752c:	2b00      	cmp	r3, #0
 800752e:	d004      	beq.n	800753a <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007534:	6878      	ldr	r0, [r7, #4]
 8007536:	4798      	blx	r3
    return;
 8007538:	e0c7      	b.n	80076ca <HAL_SPI_IRQHandler+0x1f6>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800753a:	69bb      	ldr	r3, [r7, #24]
 800753c:	095b      	lsrs	r3, r3, #5
 800753e:	f003 0301 	and.w	r3, r3, #1
 8007542:	2b00      	cmp	r3, #0
 8007544:	d10c      	bne.n	8007560 <HAL_SPI_IRQHandler+0x8c>
 8007546:	69bb      	ldr	r3, [r7, #24]
 8007548:	099b      	lsrs	r3, r3, #6
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d106      	bne.n	8007560 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8007552:	69bb      	ldr	r3, [r7, #24]
 8007554:	0a1b      	lsrs	r3, r3, #8
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	f000 80b5 	beq.w	80076ca <HAL_SPI_IRQHandler+0x1f6>
 8007560:	69fb      	ldr	r3, [r7, #28]
 8007562:	095b      	lsrs	r3, r3, #5
 8007564:	f003 0301 	and.w	r3, r3, #1
 8007568:	2b00      	cmp	r3, #0
 800756a:	f000 80ae 	beq.w	80076ca <HAL_SPI_IRQHandler+0x1f6>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800756e:	69bb      	ldr	r3, [r7, #24]
 8007570:	099b      	lsrs	r3, r3, #6
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	2b00      	cmp	r3, #0
 8007578:	d023      	beq.n	80075c2 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007580:	b2db      	uxtb	r3, r3
 8007582:	2b03      	cmp	r3, #3
 8007584:	d011      	beq.n	80075aa <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800758a:	f043 0204 	orr.w	r2, r3, #4
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8007592:	2300      	movs	r3, #0
 8007594:	617b      	str	r3, [r7, #20]
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68db      	ldr	r3, [r3, #12]
 800759c:	617b      	str	r3, [r7, #20]
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	689b      	ldr	r3, [r3, #8]
 80075a4:	617b      	str	r3, [r7, #20]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	e00b      	b.n	80075c2 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80075aa:	2300      	movs	r3, #0
 80075ac:	613b      	str	r3, [r7, #16]
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	68db      	ldr	r3, [r3, #12]
 80075b4:	613b      	str	r3, [r7, #16]
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	689b      	ldr	r3, [r3, #8]
 80075bc:	613b      	str	r3, [r7, #16]
 80075be:	693b      	ldr	r3, [r7, #16]
        return;
 80075c0:	e083      	b.n	80076ca <HAL_SPI_IRQHandler+0x1f6>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80075c2:	69bb      	ldr	r3, [r7, #24]
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f003 0301 	and.w	r3, r3, #1
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d014      	beq.n	80075f8 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80075d2:	f043 0201 	orr.w	r2, r3, #1
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80075da:	2300      	movs	r3, #0
 80075dc:	60fb      	str	r3, [r7, #12]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	689b      	ldr	r3, [r3, #8]
 80075e4:	60fb      	str	r3, [r7, #12]
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	681a      	ldr	r2, [r3, #0]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075f4:	601a      	str	r2, [r3, #0]
 80075f6:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80075f8:	69bb      	ldr	r3, [r7, #24]
 80075fa:	0a1b      	lsrs	r3, r3, #8
 80075fc:	f003 0301 	and.w	r3, r3, #1
 8007600:	2b00      	cmp	r3, #0
 8007602:	d00c      	beq.n	800761e <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007608:	f043 0208 	orr.w	r2, r3, #8
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8007610:	2300      	movs	r3, #0
 8007612:	60bb      	str	r3, [r7, #8]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	60bb      	str	r3, [r7, #8]
 800761c:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007622:	2b00      	cmp	r3, #0
 8007624:	d050      	beq.n	80076c8 <HAL_SPI_IRQHandler+0x1f4>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	685a      	ldr	r2, [r3, #4]
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8007634:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2201      	movs	r2, #1
 800763a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800763e:	69fb      	ldr	r3, [r7, #28]
 8007640:	f003 0302 	and.w	r3, r3, #2
 8007644:	2b00      	cmp	r3, #0
 8007646:	d104      	bne.n	8007652 <HAL_SPI_IRQHandler+0x17e>
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f003 0301 	and.w	r3, r3, #1
 800764e:	2b00      	cmp	r3, #0
 8007650:	d034      	beq.n	80076bc <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	685a      	ldr	r2, [r3, #4]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0203 	bic.w	r2, r2, #3
 8007660:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d011      	beq.n	800768e <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800766e:	4a18      	ldr	r2, [pc, #96]	; (80076d0 <HAL_SPI_IRQHandler+0x1fc>)
 8007670:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007676:	4618      	mov	r0, r3
 8007678:	f7fb fbc8 	bl	8002e0c <HAL_DMA_Abort_IT>
 800767c:	4603      	mov	r3, r0
 800767e:	2b00      	cmp	r3, #0
 8007680:	d005      	beq.n	800768e <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007686:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007692:	2b00      	cmp	r3, #0
 8007694:	d016      	beq.n	80076c4 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769a:	4a0d      	ldr	r2, [pc, #52]	; (80076d0 <HAL_SPI_IRQHandler+0x1fc>)
 800769c:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076a2:	4618      	mov	r0, r3
 80076a4:	f7fb fbb2 	bl	8002e0c <HAL_DMA_Abort_IT>
 80076a8:	4603      	mov	r3, r0
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d00a      	beq.n	80076c4 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80076b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 80076ba:	e003      	b.n	80076c4 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80076bc:	6878      	ldr	r0, [r7, #4]
 80076be:	f000 f809 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80076c2:	e000      	b.n	80076c6 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80076c4:	bf00      	nop
    return;
 80076c6:	bf00      	nop
 80076c8:	bf00      	nop
  }
}
 80076ca:	3720      	adds	r7, #32
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	080076e9 	.word	0x080076e9

080076d4 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b083      	sub	sp, #12
 80076d8:	af00      	add	r7, sp, #0
 80076da:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80076dc:	bf00      	nop
 80076de:	370c      	adds	r7, #12
 80076e0:	46bd      	mov	sp, r7
 80076e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e6:	4770      	bx	lr

080076e8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b084      	sub	sp, #16
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076f4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	2200      	movs	r2, #0
 80076fa:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	2200      	movs	r2, #0
 8007700:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8007702:	68f8      	ldr	r0, [r7, #12]
 8007704:	f7ff ffe6 	bl	80076d4 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8007708:	bf00      	nop
 800770a:	3710      	adds	r7, #16
 800770c:	46bd      	mov	sp, r7
 800770e:	bd80      	pop	{r7, pc}

08007710 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007710:	b580      	push	{r7, lr}
 8007712:	b082      	sub	sp, #8
 8007714:	af00      	add	r7, sp, #0
 8007716:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d101      	bne.n	8007722 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800771e:	2301      	movs	r3, #1
 8007720:	e01d      	b.n	800775e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007728:	b2db      	uxtb	r3, r3
 800772a:	2b00      	cmp	r3, #0
 800772c:	d106      	bne.n	800773c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f7fa fbae 	bl	8001e98 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2202      	movs	r2, #2
 8007740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	681a      	ldr	r2, [r3, #0]
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	3304      	adds	r3, #4
 800774c:	4619      	mov	r1, r3
 800774e:	4610      	mov	r0, r2
 8007750:	f000 fbe6 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	2201      	movs	r2, #1
 8007758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800775c:	2300      	movs	r3, #0
}
 800775e:	4618      	mov	r0, r3
 8007760:	3708      	adds	r7, #8
 8007762:	46bd      	mov	sp, r7
 8007764:	bd80      	pop	{r7, pc}

08007766 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8007766:	b580      	push	{r7, lr}
 8007768:	b082      	sub	sp, #8
 800776a:	af00      	add	r7, sp, #0
 800776c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	2b00      	cmp	r3, #0
 8007772:	d101      	bne.n	8007778 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8007774:	2301      	movs	r3, #1
 8007776:	e01d      	b.n	80077b4 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800777e:	b2db      	uxtb	r3, r3
 8007780:	2b00      	cmp	r3, #0
 8007782:	d106      	bne.n	8007792 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 f815 	bl	80077bc <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	2202      	movs	r2, #2
 8007796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	3304      	adds	r3, #4
 80077a2:	4619      	mov	r1, r3
 80077a4:	4610      	mov	r0, r2
 80077a6:	f000 fbbb 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	2201      	movs	r2, #1
 80077ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80077b2:	2300      	movs	r3, #0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 80077bc:	b480      	push	{r7}
 80077be:	b083      	sub	sp, #12
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 80077c4:	bf00      	nop
 80077c6:	370c      	adds	r7, #12
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b082      	sub	sp, #8
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e01d      	b.n	800781e <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077e8:	b2db      	uxtb	r3, r3
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d106      	bne.n	80077fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	2200      	movs	r2, #0
 80077f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80077f6:	6878      	ldr	r0, [r7, #4]
 80077f8:	f000 f815 	bl	8007826 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681a      	ldr	r2, [r3, #0]
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	3304      	adds	r3, #4
 800780c:	4619      	mov	r1, r3
 800780e:	4610      	mov	r0, r2
 8007810:	f000 fb86 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800781c:	2300      	movs	r3, #0
}
 800781e:	4618      	mov	r0, r3
 8007820:	3708      	adds	r7, #8
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}

08007826 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007826:	b480      	push	{r7}
 8007828:	b083      	sub	sp, #12
 800782a:	af00      	add	r7, sp, #0
 800782c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800782e:	bf00      	nop
 8007830:	370c      	adds	r7, #12
 8007832:	46bd      	mov	sp, r7
 8007834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007838:	4770      	bx	lr

0800783a <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b082      	sub	sp, #8
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d101      	bne.n	800784c <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007848:	2301      	movs	r3, #1
 800784a:	e01d      	b.n	8007888 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007852:	b2db      	uxtb	r3, r3
 8007854:	2b00      	cmp	r3, #0
 8007856:	d106      	bne.n	8007866 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2200      	movs	r2, #0
 800785c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f815 	bl	8007890 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2202      	movs	r2, #2
 800786a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f000 fb51 	bl	8007f20 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	2201      	movs	r2, #1
 8007882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007886:	2300      	movs	r3, #0
}
 8007888:	4618      	mov	r0, r3
 800788a:	3708      	adds	r7, #8
 800788c:	46bd      	mov	sp, r7
 800788e:	bd80      	pop	{r7, pc}

08007890 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007898:	bf00      	nop
 800789a:	370c      	adds	r7, #12
 800789c:	46bd      	mov	sp, r7
 800789e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a2:	4770      	bx	lr

080078a4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	691b      	ldr	r3, [r3, #16]
 80078b2:	f003 0302 	and.w	r3, r3, #2
 80078b6:	2b02      	cmp	r3, #2
 80078b8:	d122      	bne.n	8007900 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	f003 0302 	and.w	r3, r3, #2
 80078c4:	2b02      	cmp	r3, #2
 80078c6:	d11b      	bne.n	8007900 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f06f 0202 	mvn.w	r2, #2
 80078d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	2201      	movs	r2, #1
 80078d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	699b      	ldr	r3, [r3, #24]
 80078de:	f003 0303 	and.w	r3, r3, #3
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d003      	beq.n	80078ee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 fafc 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 80078ec:	e005      	b.n	80078fa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 faee 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078f4:	6878      	ldr	r0, [r7, #4]
 80078f6:	f000 faff 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2200      	movs	r2, #0
 80078fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	f003 0304 	and.w	r3, r3, #4
 800790a:	2b04      	cmp	r3, #4
 800790c:	d122      	bne.n	8007954 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	68db      	ldr	r3, [r3, #12]
 8007914:	f003 0304 	and.w	r3, r3, #4
 8007918:	2b04      	cmp	r3, #4
 800791a:	d11b      	bne.n	8007954 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f06f 0204 	mvn.w	r2, #4
 8007924:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	2202      	movs	r2, #2
 800792a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007936:	2b00      	cmp	r3, #0
 8007938:	d003      	beq.n	8007942 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	f000 fad2 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 8007940:	e005      	b.n	800794e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f000 fac4 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007948:	6878      	ldr	r0, [r7, #4]
 800794a:	f000 fad5 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	2200      	movs	r2, #0
 8007952:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	691b      	ldr	r3, [r3, #16]
 800795a:	f003 0308 	and.w	r3, r3, #8
 800795e:	2b08      	cmp	r3, #8
 8007960:	d122      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	68db      	ldr	r3, [r3, #12]
 8007968:	f003 0308 	and.w	r3, r3, #8
 800796c:	2b08      	cmp	r3, #8
 800796e:	d11b      	bne.n	80079a8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	f06f 0208 	mvn.w	r2, #8
 8007978:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2204      	movs	r2, #4
 800797e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	69db      	ldr	r3, [r3, #28]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b00      	cmp	r3, #0
 800798c:	d003      	beq.n	8007996 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800798e:	6878      	ldr	r0, [r7, #4]
 8007990:	f000 faa8 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 8007994:	e005      	b.n	80079a2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007996:	6878      	ldr	r0, [r7, #4]
 8007998:	f000 fa9a 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800799c:	6878      	ldr	r0, [r7, #4]
 800799e:	f000 faab 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2200      	movs	r2, #0
 80079a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	691b      	ldr	r3, [r3, #16]
 80079ae:	f003 0310 	and.w	r3, r3, #16
 80079b2:	2b10      	cmp	r3, #16
 80079b4:	d122      	bne.n	80079fc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	68db      	ldr	r3, [r3, #12]
 80079bc:	f003 0310 	and.w	r3, r3, #16
 80079c0:	2b10      	cmp	r3, #16
 80079c2:	d11b      	bne.n	80079fc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f06f 0210 	mvn.w	r2, #16
 80079cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2208      	movs	r2, #8
 80079d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	69db      	ldr	r3, [r3, #28]
 80079da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d003      	beq.n	80079ea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f000 fa7e 	bl	8007ee4 <HAL_TIM_IC_CaptureCallback>
 80079e8:	e005      	b.n	80079f6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f000 fa70 	bl	8007ed0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f000 fa81 	bl	8007ef8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	2200      	movs	r2, #0
 80079fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	691b      	ldr	r3, [r3, #16]
 8007a02:	f003 0301 	and.w	r3, r3, #1
 8007a06:	2b01      	cmp	r3, #1
 8007a08:	d10e      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	f003 0301 	and.w	r3, r3, #1
 8007a14:	2b01      	cmp	r3, #1
 8007a16:	d107      	bne.n	8007a28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f06f 0201 	mvn.w	r2, #1
 8007a20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fa4a 	bl	8007ebc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	691b      	ldr	r3, [r3, #16]
 8007a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a32:	2b80      	cmp	r3, #128	; 0x80
 8007a34:	d10e      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a40:	2b80      	cmp	r3, #128	; 0x80
 8007a42:	d107      	bne.n	8007a54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007a4e:	6878      	ldr	r0, [r7, #4]
 8007a50:	f000 ffbe 	bl	80089d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a5e:	2b40      	cmp	r3, #64	; 0x40
 8007a60:	d10e      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	68db      	ldr	r3, [r3, #12]
 8007a68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a6c:	2b40      	cmp	r3, #64	; 0x40
 8007a6e:	d107      	bne.n	8007a80 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a7a:	6878      	ldr	r0, [r7, #4]
 8007a7c:	f000 fa46 	bl	8007f0c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	691b      	ldr	r3, [r3, #16]
 8007a86:	f003 0320 	and.w	r3, r3, #32
 8007a8a:	2b20      	cmp	r3, #32
 8007a8c:	d10e      	bne.n	8007aac <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	f003 0320 	and.w	r3, r3, #32
 8007a98:	2b20      	cmp	r3, #32
 8007a9a:	d107      	bne.n	8007aac <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	f06f 0220 	mvn.w	r2, #32
 8007aa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007aa6:	6878      	ldr	r0, [r7, #4]
 8007aa8:	f000 ff88 	bl	80089bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007aac:	bf00      	nop
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b084      	sub	sp, #16
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	60f8      	str	r0, [r7, #12]
 8007abc:	60b9      	str	r1, [r7, #8]
 8007abe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007ac0:	68fb      	ldr	r3, [r7, #12]
 8007ac2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007ac6:	2b01      	cmp	r3, #1
 8007ac8:	d101      	bne.n	8007ace <HAL_TIM_OC_ConfigChannel+0x1a>
 8007aca:	2302      	movs	r3, #2
 8007acc:	e04e      	b.n	8007b6c <HAL_TIM_OC_ConfigChannel+0xb8>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	2202      	movs	r2, #2
 8007ada:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2b0c      	cmp	r3, #12
 8007ae2:	d839      	bhi.n	8007b58 <HAL_TIM_OC_ConfigChannel+0xa4>
 8007ae4:	a201      	add	r2, pc, #4	; (adr r2, 8007aec <HAL_TIM_OC_ConfigChannel+0x38>)
 8007ae6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007aea:	bf00      	nop
 8007aec:	08007b21 	.word	0x08007b21
 8007af0:	08007b59 	.word	0x08007b59
 8007af4:	08007b59 	.word	0x08007b59
 8007af8:	08007b59 	.word	0x08007b59
 8007afc:	08007b2f 	.word	0x08007b2f
 8007b00:	08007b59 	.word	0x08007b59
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007b59 	.word	0x08007b59
 8007b0c:	08007b3d 	.word	0x08007b3d
 8007b10:	08007b59 	.word	0x08007b59
 8007b14:	08007b59 	.word	0x08007b59
 8007b18:	08007b59 	.word	0x08007b59
 8007b1c:	08007b4b 	.word	0x08007b4b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	68b9      	ldr	r1, [r7, #8]
 8007b26:	4618      	mov	r0, r3
 8007b28:	f000 fa9a 	bl	8008060 <TIM_OC1_SetConfig>
      break;
 8007b2c:	e015      	b.n	8007b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	68b9      	ldr	r1, [r7, #8]
 8007b34:	4618      	mov	r0, r3
 8007b36:	f000 fb03 	bl	8008140 <TIM_OC2_SetConfig>
      break;
 8007b3a:	e00e      	b.n	8007b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	68b9      	ldr	r1, [r7, #8]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 fb72 	bl	800822c <TIM_OC3_SetConfig>
      break;
 8007b48:	e007      	b.n	8007b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	68b9      	ldr	r1, [r7, #8]
 8007b50:	4618      	mov	r0, r3
 8007b52:	f000 fbdf 	bl	8008314 <TIM_OC4_SetConfig>
      break;
 8007b56:	e000      	b.n	8007b5a <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 8007b58:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	2201      	movs	r2, #1
 8007b5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	2200      	movs	r2, #0
 8007b66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3710      	adds	r7, #16
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}

08007b74 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b084      	sub	sp, #16
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	60f8      	str	r0, [r7, #12]
 8007b7c:	60b9      	str	r1, [r7, #8]
 8007b7e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b80:	68fb      	ldr	r3, [r7, #12]
 8007b82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d101      	bne.n	8007b8e <HAL_TIM_IC_ConfigChannel+0x1a>
 8007b8a:	2302      	movs	r3, #2
 8007b8c:	e08a      	b.n	8007ca4 <HAL_TIM_IC_ConfigChannel+0x130>
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	2201      	movs	r2, #1
 8007b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b96:	68fb      	ldr	r3, [r7, #12]
 8007b98:	2202      	movs	r2, #2
 8007b9a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d11b      	bne.n	8007bdc <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	6818      	ldr	r0, [r3, #0]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	6819      	ldr	r1, [r3, #0]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	685a      	ldr	r2, [r3, #4]
 8007bb0:	68bb      	ldr	r3, [r7, #8]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f000 fc8a 	bl	80084cc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	699a      	ldr	r2, [r3, #24]
 8007bbe:	68fb      	ldr	r3, [r7, #12]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 020c 	bic.w	r2, r2, #12
 8007bc6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	6999      	ldr	r1, [r3, #24]
 8007bce:	68bb      	ldr	r3, [r7, #8]
 8007bd0:	689a      	ldr	r2, [r3, #8]
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	430a      	orrs	r2, r1
 8007bd8:	619a      	str	r2, [r3, #24]
 8007bda:	e05a      	b.n	8007c92 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b04      	cmp	r3, #4
 8007be0:	d11c      	bne.n	8007c1c <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	68bb      	ldr	r3, [r7, #8]
 8007be8:	6819      	ldr	r1, [r3, #0]
 8007bea:	68bb      	ldr	r3, [r7, #8]
 8007bec:	685a      	ldr	r2, [r3, #4]
 8007bee:	68bb      	ldr	r3, [r7, #8]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f000 fd0e 	bl	8008612 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	699a      	ldr	r2, [r3, #24]
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c04:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	6999      	ldr	r1, [r3, #24]
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	689b      	ldr	r3, [r3, #8]
 8007c10:	021a      	lsls	r2, r3, #8
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	430a      	orrs	r2, r1
 8007c18:	619a      	str	r2, [r3, #24]
 8007c1a:	e03a      	b.n	8007c92 <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b08      	cmp	r3, #8
 8007c20:	d11b      	bne.n	8007c5a <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	6818      	ldr	r0, [r3, #0]
 8007c26:	68bb      	ldr	r3, [r7, #8]
 8007c28:	6819      	ldr	r1, [r3, #0]
 8007c2a:	68bb      	ldr	r3, [r7, #8]
 8007c2c:	685a      	ldr	r2, [r3, #4]
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	f000 fd5b 	bl	80086ec <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	69da      	ldr	r2, [r3, #28]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	f022 020c 	bic.w	r2, r2, #12
 8007c44:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	69d9      	ldr	r1, [r3, #28]
 8007c4c:	68bb      	ldr	r3, [r7, #8]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	681b      	ldr	r3, [r3, #0]
 8007c54:	430a      	orrs	r2, r1
 8007c56:	61da      	str	r2, [r3, #28]
 8007c58:	e01b      	b.n	8007c92 <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	6818      	ldr	r0, [r3, #0]
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	6819      	ldr	r1, [r3, #0]
 8007c62:	68bb      	ldr	r3, [r7, #8]
 8007c64:	685a      	ldr	r2, [r3, #4]
 8007c66:	68bb      	ldr	r3, [r7, #8]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	f000 fd7b 	bl	8008764 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	69da      	ldr	r2, [r3, #28]
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007c7c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	69d9      	ldr	r1, [r3, #28]
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	021a      	lsls	r2, r3, #8
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	430a      	orrs	r2, r1
 8007c90:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2201      	movs	r2, #1
 8007c96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c9a:	68fb      	ldr	r3, [r7, #12]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ca2:	2300      	movs	r3, #0
}
 8007ca4:	4618      	mov	r0, r3
 8007ca6:	3710      	adds	r7, #16
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	bd80      	pop	{r7, pc}

08007cac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	60f8      	str	r0, [r7, #12]
 8007cb4:	60b9      	str	r1, [r7, #8]
 8007cb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007cbe:	2b01      	cmp	r3, #1
 8007cc0:	d101      	bne.n	8007cc6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	e0b4      	b.n	8007e30 <HAL_TIM_PWM_ConfigChannel+0x184>
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	2201      	movs	r2, #1
 8007cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	2202      	movs	r2, #2
 8007cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2b0c      	cmp	r3, #12
 8007cda:	f200 809f 	bhi.w	8007e1c <HAL_TIM_PWM_ConfigChannel+0x170>
 8007cde:	a201      	add	r2, pc, #4	; (adr r2, 8007ce4 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8007ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ce4:	08007d19 	.word	0x08007d19
 8007ce8:	08007e1d 	.word	0x08007e1d
 8007cec:	08007e1d 	.word	0x08007e1d
 8007cf0:	08007e1d 	.word	0x08007e1d
 8007cf4:	08007d59 	.word	0x08007d59
 8007cf8:	08007e1d 	.word	0x08007e1d
 8007cfc:	08007e1d 	.word	0x08007e1d
 8007d00:	08007e1d 	.word	0x08007e1d
 8007d04:	08007d9b 	.word	0x08007d9b
 8007d08:	08007e1d 	.word	0x08007e1d
 8007d0c:	08007e1d 	.word	0x08007e1d
 8007d10:	08007e1d 	.word	0x08007e1d
 8007d14:	08007ddb 	.word	0x08007ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	68b9      	ldr	r1, [r7, #8]
 8007d1e:	4618      	mov	r0, r3
 8007d20:	f000 f99e 	bl	8008060 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	699a      	ldr	r2, [r3, #24]
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	f042 0208 	orr.w	r2, r2, #8
 8007d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	699a      	ldr	r2, [r3, #24]
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f022 0204 	bic.w	r2, r2, #4
 8007d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	6999      	ldr	r1, [r3, #24]
 8007d4a:	68bb      	ldr	r3, [r7, #8]
 8007d4c:	691a      	ldr	r2, [r3, #16]
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	430a      	orrs	r2, r1
 8007d54:	619a      	str	r2, [r3, #24]
      break;
 8007d56:	e062      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	68b9      	ldr	r1, [r7, #8]
 8007d5e:	4618      	mov	r0, r3
 8007d60:	f000 f9ee 	bl	8008140 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	699a      	ldr	r2, [r3, #24]
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	699a      	ldr	r2, [r3, #24]
 8007d7a:	68fb      	ldr	r3, [r7, #12]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6999      	ldr	r1, [r3, #24]
 8007d8a:	68bb      	ldr	r3, [r7, #8]
 8007d8c:	691b      	ldr	r3, [r3, #16]
 8007d8e:	021a      	lsls	r2, r3, #8
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	430a      	orrs	r2, r1
 8007d96:	619a      	str	r2, [r3, #24]
      break;
 8007d98:	e041      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	68b9      	ldr	r1, [r7, #8]
 8007da0:	4618      	mov	r0, r3
 8007da2:	f000 fa43 	bl	800822c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	69da      	ldr	r2, [r3, #28]
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f042 0208 	orr.w	r2, r2, #8
 8007db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	69da      	ldr	r2, [r3, #28]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f022 0204 	bic.w	r2, r2, #4
 8007dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	69d9      	ldr	r1, [r3, #28]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	691a      	ldr	r2, [r3, #16]
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	430a      	orrs	r2, r1
 8007dd6:	61da      	str	r2, [r3, #28]
      break;
 8007dd8:	e021      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	68b9      	ldr	r1, [r7, #8]
 8007de0:	4618      	mov	r0, r3
 8007de2:	f000 fa97 	bl	8008314 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	69da      	ldr	r2, [r3, #28]
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	021a      	lsls	r2, r3, #8
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	430a      	orrs	r2, r1
 8007e18:	61da      	str	r2, [r3, #28]
      break;
 8007e1a:	e000      	b.n	8007e1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8007e1c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	2201      	movs	r2, #1
 8007e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b082      	sub	sp, #8
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e48:	2b01      	cmp	r3, #1
 8007e4a:	d101      	bne.n	8007e50 <HAL_TIM_SlaveConfigSynchro+0x18>
 8007e4c:	2302      	movs	r3, #2
 8007e4e:	e031      	b.n	8007eb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2202      	movs	r2, #2
 8007e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8007e60:	6839      	ldr	r1, [r7, #0]
 8007e62:	6878      	ldr	r0, [r7, #4]
 8007e64:	f000 faac 	bl	80083c0 <TIM_SlaveTimer_SetConfig>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	2b00      	cmp	r3, #0
 8007e6c:	d009      	beq.n	8007e82 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2201      	movs	r2, #1
 8007e72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8007e7e:	2301      	movs	r3, #1
 8007e80:	e018      	b.n	8007eb4 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	68da      	ldr	r2, [r3, #12]
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e90:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	68da      	ldr	r2, [r3, #12]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007ea0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	2200      	movs	r2, #0
 8007eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007eb2:	2300      	movs	r3, #0
}
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	3708      	adds	r7, #8
 8007eb8:	46bd      	mov	sp, r7
 8007eba:	bd80      	pop	{r7, pc}

08007ebc <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b083      	sub	sp, #12
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007ec4:	bf00      	nop
 8007ec6:	370c      	adds	r7, #12
 8007ec8:	46bd      	mov	sp, r7
 8007eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ece:	4770      	bx	lr

08007ed0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b083      	sub	sp, #12
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007ed8:	bf00      	nop
 8007eda:	370c      	adds	r7, #12
 8007edc:	46bd      	mov	sp, r7
 8007ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee2:	4770      	bx	lr

08007ee4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007ee4:	b480      	push	{r7}
 8007ee6:	b083      	sub	sp, #12
 8007ee8:	af00      	add	r7, sp, #0
 8007eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007eec:	bf00      	nop
 8007eee:	370c      	adds	r7, #12
 8007ef0:	46bd      	mov	sp, r7
 8007ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ef6:	4770      	bx	lr

08007ef8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007ef8:	b480      	push	{r7}
 8007efa:	b083      	sub	sp, #12
 8007efc:	af00      	add	r7, sp, #0
 8007efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f00:	bf00      	nop
 8007f02:	370c      	adds	r7, #12
 8007f04:	46bd      	mov	sp, r7
 8007f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0a:	4770      	bx	lr

08007f0c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f0c:	b480      	push	{r7}
 8007f0e:	b083      	sub	sp, #12
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f14:	bf00      	nop
 8007f16:	370c      	adds	r7, #12
 8007f18:	46bd      	mov	sp, r7
 8007f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1e:	4770      	bx	lr

08007f20 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007f20:	b480      	push	{r7}
 8007f22:	b085      	sub	sp, #20
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	6078      	str	r0, [r7, #4]
 8007f28:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	4a40      	ldr	r2, [pc, #256]	; (8008034 <TIM_Base_SetConfig+0x114>)
 8007f34:	4293      	cmp	r3, r2
 8007f36:	d013      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f3e:	d00f      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	4a3d      	ldr	r2, [pc, #244]	; (8008038 <TIM_Base_SetConfig+0x118>)
 8007f44:	4293      	cmp	r3, r2
 8007f46:	d00b      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	4a3c      	ldr	r2, [pc, #240]	; (800803c <TIM_Base_SetConfig+0x11c>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d007      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	4a3b      	ldr	r2, [pc, #236]	; (8008040 <TIM_Base_SetConfig+0x120>)
 8007f54:	4293      	cmp	r3, r2
 8007f56:	d003      	beq.n	8007f60 <TIM_Base_SetConfig+0x40>
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	4a3a      	ldr	r2, [pc, #232]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8007f5c:	4293      	cmp	r3, r2
 8007f5e:	d108      	bne.n	8007f72 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f60:	68fb      	ldr	r3, [r7, #12]
 8007f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f68:	683b      	ldr	r3, [r7, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	68fa      	ldr	r2, [r7, #12]
 8007f6e:	4313      	orrs	r3, r2
 8007f70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	4a2f      	ldr	r2, [pc, #188]	; (8008034 <TIM_Base_SetConfig+0x114>)
 8007f76:	4293      	cmp	r3, r2
 8007f78:	d02b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f80:	d027      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	4a2c      	ldr	r2, [pc, #176]	; (8008038 <TIM_Base_SetConfig+0x118>)
 8007f86:	4293      	cmp	r3, r2
 8007f88:	d023      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a2b      	ldr	r2, [pc, #172]	; (800803c <TIM_Base_SetConfig+0x11c>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d01f      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	4a2a      	ldr	r2, [pc, #168]	; (8008040 <TIM_Base_SetConfig+0x120>)
 8007f96:	4293      	cmp	r3, r2
 8007f98:	d01b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	4a29      	ldr	r2, [pc, #164]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8007f9e:	4293      	cmp	r3, r2
 8007fa0:	d017      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a28      	ldr	r2, [pc, #160]	; (8008048 <TIM_Base_SetConfig+0x128>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d013      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	4a27      	ldr	r2, [pc, #156]	; (800804c <TIM_Base_SetConfig+0x12c>)
 8007fae:	4293      	cmp	r3, r2
 8007fb0:	d00f      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a26      	ldr	r2, [pc, #152]	; (8008050 <TIM_Base_SetConfig+0x130>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d00b      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a25      	ldr	r2, [pc, #148]	; (8008054 <TIM_Base_SetConfig+0x134>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d007      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a24      	ldr	r2, [pc, #144]	; (8008058 <TIM_Base_SetConfig+0x138>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d003      	beq.n	8007fd2 <TIM_Base_SetConfig+0xb2>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a23      	ldr	r2, [pc, #140]	; (800805c <TIM_Base_SetConfig+0x13c>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d108      	bne.n	8007fe4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fd8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	68db      	ldr	r3, [r3, #12]
 8007fde:	68fa      	ldr	r2, [r7, #12]
 8007fe0:	4313      	orrs	r3, r2
 8007fe2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fea:	683b      	ldr	r3, [r7, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	4313      	orrs	r3, r2
 8007ff0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007ff8:	683b      	ldr	r3, [r7, #0]
 8007ffa:	689a      	ldr	r2, [r3, #8]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	681a      	ldr	r2, [r3, #0]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <TIM_Base_SetConfig+0x114>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d003      	beq.n	8008018 <TIM_Base_SetConfig+0xf8>
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	4a0c      	ldr	r2, [pc, #48]	; (8008044 <TIM_Base_SetConfig+0x124>)
 8008014:	4293      	cmp	r3, r2
 8008016:	d103      	bne.n	8008020 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	691a      	ldr	r2, [r3, #16]
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	2201      	movs	r2, #1
 8008024:	615a      	str	r2, [r3, #20]
}
 8008026:	bf00      	nop
 8008028:	3714      	adds	r7, #20
 800802a:	46bd      	mov	sp, r7
 800802c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008030:	4770      	bx	lr
 8008032:	bf00      	nop
 8008034:	40010000 	.word	0x40010000
 8008038:	40000400 	.word	0x40000400
 800803c:	40000800 	.word	0x40000800
 8008040:	40000c00 	.word	0x40000c00
 8008044:	40010400 	.word	0x40010400
 8008048:	40014000 	.word	0x40014000
 800804c:	40014400 	.word	0x40014400
 8008050:	40014800 	.word	0x40014800
 8008054:	40001800 	.word	0x40001800
 8008058:	40001c00 	.word	0x40001c00
 800805c:	40002000 	.word	0x40002000

08008060 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008060:	b480      	push	{r7}
 8008062:	b087      	sub	sp, #28
 8008064:	af00      	add	r7, sp, #0
 8008066:	6078      	str	r0, [r7, #4]
 8008068:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6a1b      	ldr	r3, [r3, #32]
 800806e:	f023 0201 	bic.w	r2, r3, #1
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	6a1b      	ldr	r3, [r3, #32]
 800807a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	685b      	ldr	r3, [r3, #4]
 8008080:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	699b      	ldr	r3, [r3, #24]
 8008086:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800808e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0303 	bic.w	r3, r3, #3
 8008096:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f023 0302 	bic.w	r3, r3, #2
 80080a8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	689b      	ldr	r3, [r3, #8]
 80080ae:	697a      	ldr	r2, [r7, #20]
 80080b0:	4313      	orrs	r3, r2
 80080b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	4a20      	ldr	r2, [pc, #128]	; (8008138 <TIM_OC1_SetConfig+0xd8>)
 80080b8:	4293      	cmp	r3, r2
 80080ba:	d003      	beq.n	80080c4 <TIM_OC1_SetConfig+0x64>
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a1f      	ldr	r2, [pc, #124]	; (800813c <TIM_OC1_SetConfig+0xdc>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d10c      	bne.n	80080de <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	f023 0308 	bic.w	r3, r3, #8
 80080ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	68db      	ldr	r3, [r3, #12]
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80080d6:	697b      	ldr	r3, [r7, #20]
 80080d8:	f023 0304 	bic.w	r3, r3, #4
 80080dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	4a15      	ldr	r2, [pc, #84]	; (8008138 <TIM_OC1_SetConfig+0xd8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d003      	beq.n	80080ee <TIM_OC1_SetConfig+0x8e>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	4a14      	ldr	r2, [pc, #80]	; (800813c <TIM_OC1_SetConfig+0xdc>)
 80080ea:	4293      	cmp	r3, r2
 80080ec:	d111      	bne.n	8008112 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80080ee:	693b      	ldr	r3, [r7, #16]
 80080f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80080f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80080f6:	693b      	ldr	r3, [r7, #16]
 80080f8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80080fe:	683b      	ldr	r3, [r7, #0]
 8008100:	695b      	ldr	r3, [r3, #20]
 8008102:	693a      	ldr	r2, [r7, #16]
 8008104:	4313      	orrs	r3, r2
 8008106:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	699b      	ldr	r3, [r3, #24]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	4313      	orrs	r3, r2
 8008110:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	693a      	ldr	r2, [r7, #16]
 8008116:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	68fa      	ldr	r2, [r7, #12]
 800811c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800811e:	683b      	ldr	r3, [r7, #0]
 8008120:	685a      	ldr	r2, [r3, #4]
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	697a      	ldr	r2, [r7, #20]
 800812a:	621a      	str	r2, [r3, #32]
}
 800812c:	bf00      	nop
 800812e:	371c      	adds	r7, #28
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr
 8008138:	40010000 	.word	0x40010000
 800813c:	40010400 	.word	0x40010400

08008140 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008140:	b480      	push	{r7}
 8008142:	b087      	sub	sp, #28
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6a1b      	ldr	r3, [r3, #32]
 800814e:	f023 0210 	bic.w	r2, r3, #16
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	685b      	ldr	r3, [r3, #4]
 8008160:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	699b      	ldr	r3, [r3, #24]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800816e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008176:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	021b      	lsls	r3, r3, #8
 800817e:	68fa      	ldr	r2, [r7, #12]
 8008180:	4313      	orrs	r3, r2
 8008182:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008184:	697b      	ldr	r3, [r7, #20]
 8008186:	f023 0320 	bic.w	r3, r3, #32
 800818a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800818c:	683b      	ldr	r3, [r7, #0]
 800818e:	689b      	ldr	r3, [r3, #8]
 8008190:	011b      	lsls	r3, r3, #4
 8008192:	697a      	ldr	r2, [r7, #20]
 8008194:	4313      	orrs	r3, r2
 8008196:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	4a22      	ldr	r2, [pc, #136]	; (8008224 <TIM_OC2_SetConfig+0xe4>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d003      	beq.n	80081a8 <TIM_OC2_SetConfig+0x68>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	4a21      	ldr	r2, [pc, #132]	; (8008228 <TIM_OC2_SetConfig+0xe8>)
 80081a4:	4293      	cmp	r3, r2
 80081a6:	d10d      	bne.n	80081c4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80081b0:	683b      	ldr	r3, [r7, #0]
 80081b2:	68db      	ldr	r3, [r3, #12]
 80081b4:	011b      	lsls	r3, r3, #4
 80081b6:	697a      	ldr	r2, [r7, #20]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80081bc:	697b      	ldr	r3, [r7, #20]
 80081be:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80081c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	4a17      	ldr	r2, [pc, #92]	; (8008224 <TIM_OC2_SetConfig+0xe4>)
 80081c8:	4293      	cmp	r3, r2
 80081ca:	d003      	beq.n	80081d4 <TIM_OC2_SetConfig+0x94>
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	4a16      	ldr	r2, [pc, #88]	; (8008228 <TIM_OC2_SetConfig+0xe8>)
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d113      	bne.n	80081fc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80081da:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80081e2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80081e4:	683b      	ldr	r3, [r7, #0]
 80081e6:	695b      	ldr	r3, [r3, #20]
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	693a      	ldr	r2, [r7, #16]
 80081ec:	4313      	orrs	r3, r2
 80081ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	699b      	ldr	r3, [r3, #24]
 80081f4:	009b      	lsls	r3, r3, #2
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	693a      	ldr	r2, [r7, #16]
 8008200:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	68fa      	ldr	r2, [r7, #12]
 8008206:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	697a      	ldr	r2, [r7, #20]
 8008214:	621a      	str	r2, [r3, #32]
}
 8008216:	bf00      	nop
 8008218:	371c      	adds	r7, #28
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40010000 	.word	0x40010000
 8008228:	40010400 	.word	0x40010400

0800822c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800822c:	b480      	push	{r7}
 800822e:	b087      	sub	sp, #28
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
 8008234:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6a1b      	ldr	r3, [r3, #32]
 800823a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6a1b      	ldr	r3, [r3, #32]
 8008246:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	685b      	ldr	r3, [r3, #4]
 800824c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	69db      	ldr	r3, [r3, #28]
 8008252:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800825a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800825c:	68fb      	ldr	r3, [r7, #12]
 800825e:	f023 0303 	bic.w	r3, r3, #3
 8008262:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008264:	683b      	ldr	r3, [r7, #0]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	68fa      	ldr	r2, [r7, #12]
 800826a:	4313      	orrs	r3, r2
 800826c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800826e:	697b      	ldr	r3, [r7, #20]
 8008270:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008274:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008276:	683b      	ldr	r3, [r7, #0]
 8008278:	689b      	ldr	r3, [r3, #8]
 800827a:	021b      	lsls	r3, r3, #8
 800827c:	697a      	ldr	r2, [r7, #20]
 800827e:	4313      	orrs	r3, r2
 8008280:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	4a21      	ldr	r2, [pc, #132]	; (800830c <TIM_OC3_SetConfig+0xe0>)
 8008286:	4293      	cmp	r3, r2
 8008288:	d003      	beq.n	8008292 <TIM_OC3_SetConfig+0x66>
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	4a20      	ldr	r2, [pc, #128]	; (8008310 <TIM_OC3_SetConfig+0xe4>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10d      	bne.n	80082ae <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008292:	697b      	ldr	r3, [r7, #20]
 8008294:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008298:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	68db      	ldr	r3, [r3, #12]
 800829e:	021b      	lsls	r3, r3, #8
 80082a0:	697a      	ldr	r2, [r7, #20]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80082ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a16      	ldr	r2, [pc, #88]	; (800830c <TIM_OC3_SetConfig+0xe0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d003      	beq.n	80082be <TIM_OC3_SetConfig+0x92>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a15      	ldr	r2, [pc, #84]	; (8008310 <TIM_OC3_SetConfig+0xe4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d113      	bne.n	80082e6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80082be:	693b      	ldr	r3, [r7, #16]
 80082c0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80082c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80082c6:	693b      	ldr	r3, [r7, #16]
 80082c8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80082ce:	683b      	ldr	r3, [r7, #0]
 80082d0:	695b      	ldr	r3, [r3, #20]
 80082d2:	011b      	lsls	r3, r3, #4
 80082d4:	693a      	ldr	r2, [r7, #16]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	699b      	ldr	r3, [r3, #24]
 80082de:	011b      	lsls	r3, r3, #4
 80082e0:	693a      	ldr	r2, [r7, #16]
 80082e2:	4313      	orrs	r3, r2
 80082e4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	693a      	ldr	r2, [r7, #16]
 80082ea:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	68fa      	ldr	r2, [r7, #12]
 80082f0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80082f2:	683b      	ldr	r3, [r7, #0]
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	697a      	ldr	r2, [r7, #20]
 80082fe:	621a      	str	r2, [r3, #32]
}
 8008300:	bf00      	nop
 8008302:	371c      	adds	r7, #28
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr
 800830c:	40010000 	.word	0x40010000
 8008310:	40010400 	.word	0x40010400

08008314 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008314:	b480      	push	{r7}
 8008316:	b087      	sub	sp, #28
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
 800831c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	6a1b      	ldr	r3, [r3, #32]
 8008322:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800832a:	687b      	ldr	r3, [r7, #4]
 800832c:	6a1b      	ldr	r3, [r3, #32]
 800832e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	685b      	ldr	r3, [r3, #4]
 8008334:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	69db      	ldr	r3, [r3, #28]
 800833a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008342:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800834a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	021b      	lsls	r3, r3, #8
 8008352:	68fa      	ldr	r2, [r7, #12]
 8008354:	4313      	orrs	r3, r2
 8008356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008358:	693b      	ldr	r3, [r7, #16]
 800835a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800835e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008360:	683b      	ldr	r3, [r7, #0]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	031b      	lsls	r3, r3, #12
 8008366:	693a      	ldr	r2, [r7, #16]
 8008368:	4313      	orrs	r3, r2
 800836a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	4a12      	ldr	r2, [pc, #72]	; (80083b8 <TIM_OC4_SetConfig+0xa4>)
 8008370:	4293      	cmp	r3, r2
 8008372:	d003      	beq.n	800837c <TIM_OC4_SetConfig+0x68>
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	4a11      	ldr	r2, [pc, #68]	; (80083bc <TIM_OC4_SetConfig+0xa8>)
 8008378:	4293      	cmp	r3, r2
 800837a:	d109      	bne.n	8008390 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800837c:	697b      	ldr	r3, [r7, #20]
 800837e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008384:	683b      	ldr	r3, [r7, #0]
 8008386:	695b      	ldr	r3, [r3, #20]
 8008388:	019b      	lsls	r3, r3, #6
 800838a:	697a      	ldr	r2, [r7, #20]
 800838c:	4313      	orrs	r3, r2
 800838e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	697a      	ldr	r2, [r7, #20]
 8008394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	68fa      	ldr	r2, [r7, #12]
 800839a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800839c:	683b      	ldr	r3, [r7, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	693a      	ldr	r2, [r7, #16]
 80083a8:	621a      	str	r2, [r3, #32]
}
 80083aa:	bf00      	nop
 80083ac:	371c      	adds	r7, #28
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	40010000 	.word	0x40010000
 80083bc:	40010400 	.word	0x40010400

080083c0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80083c0:	b580      	push	{r7, lr}
 80083c2:	b086      	sub	sp, #24
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	6078      	str	r0, [r7, #4]
 80083c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	681b      	ldr	r3, [r3, #0]
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083d8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80083da:	683b      	ldr	r3, [r7, #0]
 80083dc:	685b      	ldr	r3, [r3, #4]
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	4313      	orrs	r3, r2
 80083e2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 80083e4:	697b      	ldr	r3, [r7, #20]
 80083e6:	f023 0307 	bic.w	r3, r3, #7
 80083ea:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	697a      	ldr	r2, [r7, #20]
 80083f2:	4313      	orrs	r3, r2
 80083f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80083fe:	683b      	ldr	r3, [r7, #0]
 8008400:	685b      	ldr	r3, [r3, #4]
 8008402:	2b30      	cmp	r3, #48	; 0x30
 8008404:	d05c      	beq.n	80084c0 <TIM_SlaveTimer_SetConfig+0x100>
 8008406:	2b30      	cmp	r3, #48	; 0x30
 8008408:	d806      	bhi.n	8008418 <TIM_SlaveTimer_SetConfig+0x58>
 800840a:	2b10      	cmp	r3, #16
 800840c:	d058      	beq.n	80084c0 <TIM_SlaveTimer_SetConfig+0x100>
 800840e:	2b20      	cmp	r3, #32
 8008410:	d056      	beq.n	80084c0 <TIM_SlaveTimer_SetConfig+0x100>
 8008412:	2b00      	cmp	r3, #0
 8008414:	d054      	beq.n	80084c0 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8008416:	e054      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008418:	2b50      	cmp	r3, #80	; 0x50
 800841a:	d03d      	beq.n	8008498 <TIM_SlaveTimer_SetConfig+0xd8>
 800841c:	2b50      	cmp	r3, #80	; 0x50
 800841e:	d802      	bhi.n	8008426 <TIM_SlaveTimer_SetConfig+0x66>
 8008420:	2b40      	cmp	r3, #64	; 0x40
 8008422:	d010      	beq.n	8008446 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 8008424:	e04d      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 8008426:	2b60      	cmp	r3, #96	; 0x60
 8008428:	d040      	beq.n	80084ac <TIM_SlaveTimer_SetConfig+0xec>
 800842a:	2b70      	cmp	r3, #112	; 0x70
 800842c:	d000      	beq.n	8008430 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800842e:	e048      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	6818      	ldr	r0, [r3, #0]
 8008434:	683b      	ldr	r3, [r7, #0]
 8008436:	68d9      	ldr	r1, [r3, #12]
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	689a      	ldr	r2, [r3, #8]
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	691b      	ldr	r3, [r3, #16]
 8008440:	f000 f9cd 	bl	80087de <TIM_ETR_SetConfig>
      break;
 8008444:	e03d      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8008446:	683b      	ldr	r3, [r7, #0]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	2b05      	cmp	r3, #5
 800844c:	d101      	bne.n	8008452 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800844e:	2301      	movs	r3, #1
 8008450:	e038      	b.n	80084c4 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a1b      	ldr	r3, [r3, #32]
 8008458:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	6a1a      	ldr	r2, [r3, #32]
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f022 0201 	bic.w	r2, r2, #1
 8008468:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	699b      	ldr	r3, [r3, #24]
 8008470:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008472:	68fb      	ldr	r3, [r7, #12]
 8008474:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008478:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	691b      	ldr	r3, [r3, #16]
 800847e:	011b      	lsls	r3, r3, #4
 8008480:	68fa      	ldr	r2, [r7, #12]
 8008482:	4313      	orrs	r3, r2
 8008484:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	68fa      	ldr	r2, [r7, #12]
 800848c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	621a      	str	r2, [r3, #32]
      break;
 8008496:	e014      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	6818      	ldr	r0, [r3, #0]
 800849c:	683b      	ldr	r3, [r7, #0]
 800849e:	6899      	ldr	r1, [r3, #8]
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	691b      	ldr	r3, [r3, #16]
 80084a4:	461a      	mov	r2, r3
 80084a6:	f000 f885 	bl	80085b4 <TIM_TI1_ConfigInputStage>
      break;
 80084aa:	e00a      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6818      	ldr	r0, [r3, #0]
 80084b0:	683b      	ldr	r3, [r7, #0]
 80084b2:	6899      	ldr	r1, [r3, #8]
 80084b4:	683b      	ldr	r3, [r7, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	461a      	mov	r2, r3
 80084ba:	f000 f8e7 	bl	800868c <TIM_TI2_ConfigInputStage>
      break;
 80084be:	e000      	b.n	80084c2 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 80084c0:	bf00      	nop
  }
  return HAL_OK;
 80084c2:	2300      	movs	r3, #0
}
 80084c4:	4618      	mov	r0, r3
 80084c6:	3718      	adds	r7, #24
 80084c8:	46bd      	mov	sp, r7
 80084ca:	bd80      	pop	{r7, pc}

080084cc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b087      	sub	sp, #28
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	60f8      	str	r0, [r7, #12]
 80084d4:	60b9      	str	r1, [r7, #8]
 80084d6:	607a      	str	r2, [r7, #4]
 80084d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	6a1b      	ldr	r3, [r3, #32]
 80084de:	f023 0201 	bic.w	r2, r3, #1
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	699b      	ldr	r3, [r3, #24]
 80084ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	6a1b      	ldr	r3, [r3, #32]
 80084f0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	4a28      	ldr	r2, [pc, #160]	; (8008598 <TIM_TI1_SetConfig+0xcc>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d01b      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008500:	d017      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	4a25      	ldr	r2, [pc, #148]	; (800859c <TIM_TI1_SetConfig+0xd0>)
 8008506:	4293      	cmp	r3, r2
 8008508:	d013      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	4a24      	ldr	r2, [pc, #144]	; (80085a0 <TIM_TI1_SetConfig+0xd4>)
 800850e:	4293      	cmp	r3, r2
 8008510:	d00f      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	4a23      	ldr	r2, [pc, #140]	; (80085a4 <TIM_TI1_SetConfig+0xd8>)
 8008516:	4293      	cmp	r3, r2
 8008518:	d00b      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	4a22      	ldr	r2, [pc, #136]	; (80085a8 <TIM_TI1_SetConfig+0xdc>)
 800851e:	4293      	cmp	r3, r2
 8008520:	d007      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 8008522:	68fb      	ldr	r3, [r7, #12]
 8008524:	4a21      	ldr	r2, [pc, #132]	; (80085ac <TIM_TI1_SetConfig+0xe0>)
 8008526:	4293      	cmp	r3, r2
 8008528:	d003      	beq.n	8008532 <TIM_TI1_SetConfig+0x66>
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	4a20      	ldr	r2, [pc, #128]	; (80085b0 <TIM_TI1_SetConfig+0xe4>)
 800852e:	4293      	cmp	r3, r2
 8008530:	d101      	bne.n	8008536 <TIM_TI1_SetConfig+0x6a>
 8008532:	2301      	movs	r3, #1
 8008534:	e000      	b.n	8008538 <TIM_TI1_SetConfig+0x6c>
 8008536:	2300      	movs	r3, #0
 8008538:	2b00      	cmp	r3, #0
 800853a:	d008      	beq.n	800854e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800853c:	697b      	ldr	r3, [r7, #20]
 800853e:	f023 0303 	bic.w	r3, r3, #3
 8008542:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008544:	697a      	ldr	r2, [r7, #20]
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	4313      	orrs	r3, r2
 800854a:	617b      	str	r3, [r7, #20]
 800854c:	e003      	b.n	8008556 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	f043 0301 	orr.w	r3, r3, #1
 8008554:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800855c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800855e:	683b      	ldr	r3, [r7, #0]
 8008560:	011b      	lsls	r3, r3, #4
 8008562:	b2db      	uxtb	r3, r3
 8008564:	697a      	ldr	r2, [r7, #20]
 8008566:	4313      	orrs	r3, r2
 8008568:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f023 030a 	bic.w	r3, r3, #10
 8008570:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008572:	68bb      	ldr	r3, [r7, #8]
 8008574:	f003 030a 	and.w	r3, r3, #10
 8008578:	693a      	ldr	r2, [r7, #16]
 800857a:	4313      	orrs	r3, r2
 800857c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	693a      	ldr	r2, [r7, #16]
 8008588:	621a      	str	r2, [r3, #32]
}
 800858a:	bf00      	nop
 800858c:	371c      	adds	r7, #28
 800858e:	46bd      	mov	sp, r7
 8008590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008594:	4770      	bx	lr
 8008596:	bf00      	nop
 8008598:	40010000 	.word	0x40010000
 800859c:	40000400 	.word	0x40000400
 80085a0:	40000800 	.word	0x40000800
 80085a4:	40000c00 	.word	0x40000c00
 80085a8:	40010400 	.word	0x40010400
 80085ac:	40014000 	.word	0x40014000
 80085b0:	40001800 	.word	0x40001800

080085b4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b087      	sub	sp, #28
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	60f8      	str	r0, [r7, #12]
 80085bc:	60b9      	str	r1, [r7, #8]
 80085be:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	6a1b      	ldr	r3, [r3, #32]
 80085c4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	6a1b      	ldr	r3, [r3, #32]
 80085ca:	f023 0201 	bic.w	r2, r3, #1
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80085d2:	68fb      	ldr	r3, [r7, #12]
 80085d4:	699b      	ldr	r3, [r3, #24]
 80085d6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80085de:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	011b      	lsls	r3, r3, #4
 80085e4:	693a      	ldr	r2, [r7, #16]
 80085e6:	4313      	orrs	r3, r2
 80085e8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80085ea:	697b      	ldr	r3, [r7, #20]
 80085ec:	f023 030a 	bic.w	r3, r3, #10
 80085f0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80085f2:	697a      	ldr	r2, [r7, #20]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	4313      	orrs	r3, r2
 80085f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80085fa:	68fb      	ldr	r3, [r7, #12]
 80085fc:	693a      	ldr	r2, [r7, #16]
 80085fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	697a      	ldr	r2, [r7, #20]
 8008604:	621a      	str	r2, [r3, #32]
}
 8008606:	bf00      	nop
 8008608:	371c      	adds	r7, #28
 800860a:	46bd      	mov	sp, r7
 800860c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008610:	4770      	bx	lr

08008612 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008612:	b480      	push	{r7}
 8008614:	b087      	sub	sp, #28
 8008616:	af00      	add	r7, sp, #0
 8008618:	60f8      	str	r0, [r7, #12]
 800861a:	60b9      	str	r1, [r7, #8]
 800861c:	607a      	str	r2, [r7, #4]
 800861e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	f023 0210 	bic.w	r2, r3, #16
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	699b      	ldr	r3, [r3, #24]
 8008630:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008632:	68fb      	ldr	r3, [r7, #12]
 8008634:	6a1b      	ldr	r3, [r3, #32]
 8008636:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008638:	697b      	ldr	r3, [r7, #20]
 800863a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800863e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	021b      	lsls	r3, r3, #8
 8008644:	697a      	ldr	r2, [r7, #20]
 8008646:	4313      	orrs	r3, r2
 8008648:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800864a:	697b      	ldr	r3, [r7, #20]
 800864c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008650:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	031b      	lsls	r3, r3, #12
 8008656:	b29b      	uxth	r3, r3
 8008658:	697a      	ldr	r2, [r7, #20]
 800865a:	4313      	orrs	r3, r2
 800865c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800865e:	693b      	ldr	r3, [r7, #16]
 8008660:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008664:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	011b      	lsls	r3, r3, #4
 800866a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800866e:	693a      	ldr	r2, [r7, #16]
 8008670:	4313      	orrs	r3, r2
 8008672:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	697a      	ldr	r2, [r7, #20]
 8008678:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	693a      	ldr	r2, [r7, #16]
 800867e:	621a      	str	r2, [r3, #32]
}
 8008680:	bf00      	nop
 8008682:	371c      	adds	r7, #28
 8008684:	46bd      	mov	sp, r7
 8008686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800868a:	4770      	bx	lr

0800868c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800868c:	b480      	push	{r7}
 800868e:	b087      	sub	sp, #28
 8008690:	af00      	add	r7, sp, #0
 8008692:	60f8      	str	r0, [r7, #12]
 8008694:	60b9      	str	r1, [r7, #8]
 8008696:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008698:	68fb      	ldr	r3, [r7, #12]
 800869a:	6a1b      	ldr	r3, [r3, #32]
 800869c:	f023 0210 	bic.w	r2, r3, #16
 80086a0:	68fb      	ldr	r3, [r7, #12]
 80086a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	699b      	ldr	r3, [r3, #24]
 80086a8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80086aa:	68fb      	ldr	r3, [r7, #12]
 80086ac:	6a1b      	ldr	r3, [r3, #32]
 80086ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80086b0:	697b      	ldr	r3, [r7, #20]
 80086b2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80086b6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	031b      	lsls	r3, r3, #12
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	4313      	orrs	r3, r2
 80086c0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80086c8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	011b      	lsls	r3, r3, #4
 80086ce:	693a      	ldr	r2, [r7, #16]
 80086d0:	4313      	orrs	r3, r2
 80086d2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80086d4:	68fb      	ldr	r3, [r7, #12]
 80086d6:	697a      	ldr	r2, [r7, #20]
 80086d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	693a      	ldr	r2, [r7, #16]
 80086de:	621a      	str	r2, [r3, #32]
}
 80086e0:	bf00      	nop
 80086e2:	371c      	adds	r7, #28
 80086e4:	46bd      	mov	sp, r7
 80086e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ea:	4770      	bx	lr

080086ec <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80086ec:	b480      	push	{r7}
 80086ee:	b087      	sub	sp, #28
 80086f0:	af00      	add	r7, sp, #0
 80086f2:	60f8      	str	r0, [r7, #12]
 80086f4:	60b9      	str	r1, [r7, #8]
 80086f6:	607a      	str	r2, [r7, #4]
 80086f8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	6a1b      	ldr	r3, [r3, #32]
 80086fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008706:	68fb      	ldr	r3, [r7, #12]
 8008708:	69db      	ldr	r3, [r3, #28]
 800870a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800870c:	68fb      	ldr	r3, [r7, #12]
 800870e:	6a1b      	ldr	r3, [r3, #32]
 8008710:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008712:	697b      	ldr	r3, [r7, #20]
 8008714:	f023 0303 	bic.w	r3, r3, #3
 8008718:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800871a:	697a      	ldr	r2, [r7, #20]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	4313      	orrs	r3, r2
 8008720:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008722:	697b      	ldr	r3, [r7, #20]
 8008724:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008728:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800872a:	683b      	ldr	r3, [r7, #0]
 800872c:	011b      	lsls	r3, r3, #4
 800872e:	b2db      	uxtb	r3, r3
 8008730:	697a      	ldr	r2, [r7, #20]
 8008732:	4313      	orrs	r3, r2
 8008734:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008736:	693b      	ldr	r3, [r7, #16]
 8008738:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800873c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800873e:	68bb      	ldr	r3, [r7, #8]
 8008740:	021b      	lsls	r3, r3, #8
 8008742:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008746:	693a      	ldr	r2, [r7, #16]
 8008748:	4313      	orrs	r3, r2
 800874a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	697a      	ldr	r2, [r7, #20]
 8008750:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	693a      	ldr	r2, [r7, #16]
 8008756:	621a      	str	r2, [r3, #32]
}
 8008758:	bf00      	nop
 800875a:	371c      	adds	r7, #28
 800875c:	46bd      	mov	sp, r7
 800875e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008762:	4770      	bx	lr

08008764 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008764:	b480      	push	{r7}
 8008766:	b087      	sub	sp, #28
 8008768:	af00      	add	r7, sp, #0
 800876a:	60f8      	str	r0, [r7, #12]
 800876c:	60b9      	str	r1, [r7, #8]
 800876e:	607a      	str	r2, [r7, #4]
 8008770:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	6a1b      	ldr	r3, [r3, #32]
 8008776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	69db      	ldr	r3, [r3, #28]
 8008782:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	6a1b      	ldr	r3, [r3, #32]
 8008788:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800878a:	697b      	ldr	r3, [r7, #20]
 800878c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008790:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	021b      	lsls	r3, r3, #8
 8008796:	697a      	ldr	r2, [r7, #20]
 8008798:	4313      	orrs	r3, r2
 800879a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800879c:	697b      	ldr	r3, [r7, #20]
 800879e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80087a2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	031b      	lsls	r3, r3, #12
 80087a8:	b29b      	uxth	r3, r3
 80087aa:	697a      	ldr	r2, [r7, #20]
 80087ac:	4313      	orrs	r3, r2
 80087ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80087b0:	693b      	ldr	r3, [r7, #16]
 80087b2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80087b6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80087b8:	68bb      	ldr	r3, [r7, #8]
 80087ba:	031b      	lsls	r3, r3, #12
 80087bc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80087c0:	693a      	ldr	r2, [r7, #16]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80087c6:	68fb      	ldr	r3, [r7, #12]
 80087c8:	697a      	ldr	r2, [r7, #20]
 80087ca:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	693a      	ldr	r2, [r7, #16]
 80087d0:	621a      	str	r2, [r3, #32]
}
 80087d2:	bf00      	nop
 80087d4:	371c      	adds	r7, #28
 80087d6:	46bd      	mov	sp, r7
 80087d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087dc:	4770      	bx	lr

080087de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80087de:	b480      	push	{r7}
 80087e0:	b087      	sub	sp, #28
 80087e2:	af00      	add	r7, sp, #0
 80087e4:	60f8      	str	r0, [r7, #12]
 80087e6:	60b9      	str	r1, [r7, #8]
 80087e8:	607a      	str	r2, [r7, #4]
 80087ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80087f2:	697b      	ldr	r3, [r7, #20]
 80087f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80087f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80087fa:	683b      	ldr	r3, [r7, #0]
 80087fc:	021a      	lsls	r2, r3, #8
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	431a      	orrs	r2, r3
 8008802:	68bb      	ldr	r3, [r7, #8]
 8008804:	4313      	orrs	r3, r2
 8008806:	697a      	ldr	r2, [r7, #20]
 8008808:	4313      	orrs	r3, r2
 800880a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	697a      	ldr	r2, [r7, #20]
 8008810:	609a      	str	r2, [r3, #8]
}
 8008812:	bf00      	nop
 8008814:	371c      	adds	r7, #28
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr
	...

08008820 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008820:	b480      	push	{r7}
 8008822:	b085      	sub	sp, #20
 8008824:	af00      	add	r7, sp, #0
 8008826:	6078      	str	r0, [r7, #4]
 8008828:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008830:	2b01      	cmp	r3, #1
 8008832:	d101      	bne.n	8008838 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008834:	2302      	movs	r3, #2
 8008836:	e05a      	b.n	80088ee <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	2201      	movs	r2, #1
 800883c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2202      	movs	r2, #2
 8008844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	685b      	ldr	r3, [r3, #4]
 800884e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	689b      	ldr	r3, [r3, #8]
 8008856:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800885e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008860:	683b      	ldr	r3, [r7, #0]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	68fa      	ldr	r2, [r7, #12]
 8008866:	4313      	orrs	r3, r2
 8008868:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a21      	ldr	r2, [pc, #132]	; (80088fc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d022      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008884:	d01d      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	4a1d      	ldr	r2, [pc, #116]	; (8008900 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800888c:	4293      	cmp	r3, r2
 800888e:	d018      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	4a1b      	ldr	r2, [pc, #108]	; (8008904 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008896:	4293      	cmp	r3, r2
 8008898:	d013      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a1a      	ldr	r2, [pc, #104]	; (8008908 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d00e      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a18      	ldr	r2, [pc, #96]	; (800890c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d009      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a17      	ldr	r2, [pc, #92]	; (8008910 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d004      	beq.n	80088c2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	4a15      	ldr	r2, [pc, #84]	; (8008914 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d10c      	bne.n	80088dc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80088c2:	68bb      	ldr	r3, [r7, #8]
 80088c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80088c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	685b      	ldr	r3, [r3, #4]
 80088ce:	68ba      	ldr	r2, [r7, #8]
 80088d0:	4313      	orrs	r3, r2
 80088d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	68ba      	ldr	r2, [r7, #8]
 80088da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	2201      	movs	r2, #1
 80088e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80088ec:	2300      	movs	r3, #0
}
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088f8:	4770      	bx	lr
 80088fa:	bf00      	nop
 80088fc:	40010000 	.word	0x40010000
 8008900:	40000400 	.word	0x40000400
 8008904:	40000800 	.word	0x40000800
 8008908:	40000c00 	.word	0x40000c00
 800890c:	40010400 	.word	0x40010400
 8008910:	40014000 	.word	0x40014000
 8008914:	40001800 	.word	0x40001800

08008918 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008918:	b480      	push	{r7}
 800891a:	b085      	sub	sp, #20
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008930:	2302      	movs	r3, #2
 8008932:	e03d      	b.n	80089b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2201      	movs	r2, #1
 8008938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	68db      	ldr	r3, [r3, #12]
 8008946:	4313      	orrs	r3, r2
 8008948:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800894a:	68fb      	ldr	r3, [r7, #12]
 800894c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008950:	683b      	ldr	r3, [r7, #0]
 8008952:	689b      	ldr	r3, [r3, #8]
 8008954:	4313      	orrs	r3, r2
 8008956:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	4313      	orrs	r3, r2
 8008964:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800896c:	683b      	ldr	r3, [r7, #0]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	4313      	orrs	r3, r2
 8008972:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8008974:	68fb      	ldr	r3, [r7, #12]
 8008976:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	691b      	ldr	r3, [r3, #16]
 800897e:	4313      	orrs	r3, r2
 8008980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	695b      	ldr	r3, [r3, #20]
 800898c:	4313      	orrs	r3, r2
 800898e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8008996:	683b      	ldr	r3, [r7, #0]
 8008998:	69db      	ldr	r3, [r3, #28]
 800899a:	4313      	orrs	r3, r2
 800899c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68fa      	ldr	r2, [r7, #12]
 80089a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2200      	movs	r2, #0
 80089aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80089ae:	2300      	movs	r3, #0
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3714      	adds	r7, #20
 80089b4:	46bd      	mov	sp, r7
 80089b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ba:	4770      	bx	lr

080089bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80089bc:	b480      	push	{r7}
 80089be:	b083      	sub	sp, #12
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80089c4:	bf00      	nop
 80089c6:	370c      	adds	r7, #12
 80089c8:	46bd      	mov	sp, r7
 80089ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ce:	4770      	bx	lr

080089d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80089d0:	b480      	push	{r7}
 80089d2:	b083      	sub	sp, #12
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b082      	sub	sp, #8
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d101      	bne.n	80089f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80089f2:	2301      	movs	r3, #1
 80089f4:	e03f      	b.n	8008a76 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089fc:	b2db      	uxtb	r3, r3
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d106      	bne.n	8008a10 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2200      	movs	r2, #0
 8008a06:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008a0a:	6878      	ldr	r0, [r7, #4]
 8008a0c:	f7f9 fb48 	bl	80020a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	2224      	movs	r2, #36	; 0x24
 8008a14:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	68da      	ldr	r2, [r3, #12]
 8008a1e:	687b      	ldr	r3, [r7, #4]
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008a26:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fa69 	bl	8008f00 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	691a      	ldr	r2, [r3, #16]
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008a3c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	695a      	ldr	r2, [r3, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008a4c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	68da      	ldr	r2, [r3, #12]
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008a5c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	2200      	movs	r2, #0
 8008a62:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2220      	movs	r2, #32
 8008a68:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	2220      	movs	r2, #32
 8008a70:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8008a74:	2300      	movs	r3, #0
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3708      	adds	r7, #8
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b088      	sub	sp, #32
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	68db      	ldr	r3, [r3, #12]
 8008a96:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008aa8:	69fb      	ldr	r3, [r7, #28]
 8008aaa:	f003 030f 	and.w	r3, r3, #15
 8008aae:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d10d      	bne.n	8008ad2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ab6:	69fb      	ldr	r3, [r7, #28]
 8008ab8:	f003 0320 	and.w	r3, r3, #32
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d008      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x52>
 8008ac0:	69bb      	ldr	r3, [r7, #24]
 8008ac2:	f003 0320 	and.w	r3, r3, #32
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d003      	beq.n	8008ad2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f000 f996 	bl	8008dfc <UART_Receive_IT>
      return;
 8008ad0:	e0d1      	b.n	8008c76 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008ad2:	693b      	ldr	r3, [r7, #16]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	f000 80b0 	beq.w	8008c3a <HAL_UART_IRQHandler+0x1ba>
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	f003 0301 	and.w	r3, r3, #1
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d105      	bne.n	8008af0 <HAL_UART_IRQHandler+0x70>
 8008ae4:	69bb      	ldr	r3, [r7, #24]
 8008ae6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80a5 	beq.w	8008c3a <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008af0:	69fb      	ldr	r3, [r7, #28]
 8008af2:	f003 0301 	and.w	r3, r3, #1
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d00a      	beq.n	8008b10 <HAL_UART_IRQHandler+0x90>
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d005      	beq.n	8008b10 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b08:	f043 0201 	orr.w	r2, r3, #1
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	f003 0304 	and.w	r3, r3, #4
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d00a      	beq.n	8008b30 <HAL_UART_IRQHandler+0xb0>
 8008b1a:	697b      	ldr	r3, [r7, #20]
 8008b1c:	f003 0301 	and.w	r3, r3, #1
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d005      	beq.n	8008b30 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b28:	f043 0202 	orr.w	r2, r3, #2
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008b30:	69fb      	ldr	r3, [r7, #28]
 8008b32:	f003 0302 	and.w	r3, r3, #2
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d00a      	beq.n	8008b50 <HAL_UART_IRQHandler+0xd0>
 8008b3a:	697b      	ldr	r3, [r7, #20]
 8008b3c:	f003 0301 	and.w	r3, r3, #1
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d005      	beq.n	8008b50 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b48:	f043 0204 	orr.w	r2, r3, #4
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8008b50:	69fb      	ldr	r3, [r7, #28]
 8008b52:	f003 0308 	and.w	r3, r3, #8
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d00f      	beq.n	8008b7a <HAL_UART_IRQHandler+0xfa>
 8008b5a:	69bb      	ldr	r3, [r7, #24]
 8008b5c:	f003 0320 	and.w	r3, r3, #32
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d104      	bne.n	8008b6e <HAL_UART_IRQHandler+0xee>
 8008b64:	697b      	ldr	r3, [r7, #20]
 8008b66:	f003 0301 	and.w	r3, r3, #1
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d005      	beq.n	8008b7a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b72:	f043 0208 	orr.w	r2, r3, #8
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d078      	beq.n	8008c74 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	f003 0320 	and.w	r3, r3, #32
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d007      	beq.n	8008b9c <HAL_UART_IRQHandler+0x11c>
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f003 0320 	and.w	r3, r3, #32
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d002      	beq.n	8008b9c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f000 f930 	bl	8008dfc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	695b      	ldr	r3, [r3, #20]
 8008ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ba6:	2b40      	cmp	r3, #64	; 0x40
 8008ba8:	bf0c      	ite	eq
 8008baa:	2301      	moveq	r3, #1
 8008bac:	2300      	movne	r3, #0
 8008bae:	b2db      	uxtb	r3, r3
 8008bb0:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008bb6:	f003 0308 	and.w	r3, r3, #8
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <HAL_UART_IRQHandler+0x144>
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d031      	beq.n	8008c28 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008bc4:	6878      	ldr	r0, [r7, #4]
 8008bc6:	f000 f879 	bl	8008cbc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	695b      	ldr	r3, [r3, #20]
 8008bd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd4:	2b40      	cmp	r3, #64	; 0x40
 8008bd6:	d123      	bne.n	8008c20 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	695a      	ldr	r2, [r3, #20]
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008be6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d013      	beq.n	8008c18 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bf4:	4a21      	ldr	r2, [pc, #132]	; (8008c7c <HAL_UART_IRQHandler+0x1fc>)
 8008bf6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	f7fa f905 	bl	8002e0c <HAL_DMA_Abort_IT>
 8008c02:	4603      	mov	r3, r0
 8008c04:	2b00      	cmp	r3, #0
 8008c06:	d016      	beq.n	8008c36 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008c0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008c0e:	687a      	ldr	r2, [r7, #4]
 8008c10:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008c12:	4610      	mov	r0, r2
 8008c14:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c16:	e00e      	b.n	8008c36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008c18:	6878      	ldr	r0, [r7, #4]
 8008c1a:	f000 f845 	bl	8008ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c1e:	e00a      	b.n	8008c36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008c20:	6878      	ldr	r0, [r7, #4]
 8008c22:	f000 f841 	bl	8008ca8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c26:	e006      	b.n	8008c36 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008c28:	6878      	ldr	r0, [r7, #4]
 8008c2a:	f000 f83d 	bl	8008ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	2200      	movs	r2, #0
 8008c32:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8008c34:	e01e      	b.n	8008c74 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008c36:	bf00      	nop
    return;
 8008c38:	e01c      	b.n	8008c74 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008c3a:	69fb      	ldr	r3, [r7, #28]
 8008c3c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c40:	2b00      	cmp	r3, #0
 8008c42:	d008      	beq.n	8008c56 <HAL_UART_IRQHandler+0x1d6>
 8008c44:	69bb      	ldr	r3, [r7, #24]
 8008c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c4a:	2b00      	cmp	r3, #0
 8008c4c:	d003      	beq.n	8008c56 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 8008c4e:	6878      	ldr	r0, [r7, #4]
 8008c50:	f000 f866 	bl	8008d20 <UART_Transmit_IT>
    return;
 8008c54:	e00f      	b.n	8008c76 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008c56:	69fb      	ldr	r3, [r7, #28]
 8008c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d00a      	beq.n	8008c76 <HAL_UART_IRQHandler+0x1f6>
 8008c60:	69bb      	ldr	r3, [r7, #24]
 8008c62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f8ae 	bl	8008dcc <UART_EndTransmit_IT>
    return;
 8008c70:	bf00      	nop
 8008c72:	e000      	b.n	8008c76 <HAL_UART_IRQHandler+0x1f6>
    return;
 8008c74:	bf00      	nop
  }
}
 8008c76:	3720      	adds	r7, #32
 8008c78:	46bd      	mov	sp, r7
 8008c7a:	bd80      	pop	{r7, pc}
 8008c7c:	08008cf9 	.word	0x08008cf9

08008c80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c80:	b480      	push	{r7}
 8008c82:	b083      	sub	sp, #12
 8008c84:	af00      	add	r7, sp, #0
 8008c86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008c88:	bf00      	nop
 8008c8a:	370c      	adds	r7, #12
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008cb0:	bf00      	nop
 8008cb2:	370c      	adds	r7, #12
 8008cb4:	46bd      	mov	sp, r7
 8008cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cba:	4770      	bx	lr

08008cbc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cbc:	b480      	push	{r7}
 8008cbe:	b083      	sub	sp, #12
 8008cc0:	af00      	add	r7, sp, #0
 8008cc2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	68da      	ldr	r2, [r3, #12]
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cd2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	695a      	ldr	r2, [r3, #20]
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	f022 0201 	bic.w	r2, r2, #1
 8008ce2:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2220      	movs	r2, #32
 8008ce8:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8008cec:	bf00      	nop
 8008cee:	370c      	adds	r7, #12
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f7ff ffc8 	bl	8008ca8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d18:	bf00      	nop
 8008d1a:	3710      	adds	r7, #16
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}

08008d20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d20:	b480      	push	{r7}
 8008d22:	b085      	sub	sp, #20
 8008d24:	af00      	add	r7, sp, #0
 8008d26:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008d2e:	b2db      	uxtb	r3, r3
 8008d30:	2b21      	cmp	r3, #33	; 0x21
 8008d32:	d144      	bne.n	8008dbe <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	689b      	ldr	r3, [r3, #8]
 8008d38:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d3c:	d11a      	bne.n	8008d74 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	6a1b      	ldr	r3, [r3, #32]
 8008d42:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	881b      	ldrh	r3, [r3, #0]
 8008d48:	461a      	mov	r2, r3
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d52:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	691b      	ldr	r3, [r3, #16]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d105      	bne.n	8008d68 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a1b      	ldr	r3, [r3, #32]
 8008d60:	1c9a      	adds	r2, r3, #2
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	621a      	str	r2, [r3, #32]
 8008d66:	e00e      	b.n	8008d86 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a1b      	ldr	r3, [r3, #32]
 8008d6c:	1c5a      	adds	r2, r3, #1
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	621a      	str	r2, [r3, #32]
 8008d72:	e008      	b.n	8008d86 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a1b      	ldr	r3, [r3, #32]
 8008d78:	1c59      	adds	r1, r3, #1
 8008d7a:	687a      	ldr	r2, [r7, #4]
 8008d7c:	6211      	str	r1, [r2, #32]
 8008d7e:	781a      	ldrb	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	3b01      	subs	r3, #1
 8008d8e:	b29b      	uxth	r3, r3
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	4619      	mov	r1, r3
 8008d94:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d10f      	bne.n	8008dba <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	68da      	ldr	r2, [r3, #12]
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008da8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	68da      	ldr	r2, [r3, #12]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008db8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008dba:	2300      	movs	r3, #0
 8008dbc:	e000      	b.n	8008dc0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8008dbe:	2302      	movs	r3, #2
  }
}
 8008dc0:	4618      	mov	r0, r3
 8008dc2:	3714      	adds	r7, #20
 8008dc4:	46bd      	mov	sp, r7
 8008dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dca:	4770      	bx	lr

08008dcc <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dcc:	b580      	push	{r7, lr}
 8008dce:	b082      	sub	sp, #8
 8008dd0:	af00      	add	r7, sp, #0
 8008dd2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	68da      	ldr	r2, [r3, #12]
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	2220      	movs	r2, #32
 8008de8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f7ff ff47 	bl	8008c80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008df2:	2300      	movs	r3, #0
}
 8008df4:	4618      	mov	r0, r3
 8008df6:	3708      	adds	r7, #8
 8008df8:	46bd      	mov	sp, r7
 8008dfa:	bd80      	pop	{r7, pc}

08008dfc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dfc:	b580      	push	{r7, lr}
 8008dfe:	b084      	sub	sp, #16
 8008e00:	af00      	add	r7, sp, #0
 8008e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008e0a:	b2db      	uxtb	r3, r3
 8008e0c:	2b22      	cmp	r3, #34	; 0x22
 8008e0e:	d171      	bne.n	8008ef4 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e18:	d123      	bne.n	8008e62 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e1e:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	691b      	ldr	r3, [r3, #16]
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d10e      	bne.n	8008e46 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	685b      	ldr	r3, [r3, #4]
 8008e2e:	b29b      	uxth	r3, r3
 8008e30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e34:	b29a      	uxth	r2, r3
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	1c9a      	adds	r2, r3, #2
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	629a      	str	r2, [r3, #40]	; 0x28
 8008e44:	e029      	b.n	8008e9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	b2db      	uxtb	r3, r3
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	68fb      	ldr	r3, [r7, #12]
 8008e54:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e5a:	1c5a      	adds	r2, r3, #1
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	629a      	str	r2, [r3, #40]	; 0x28
 8008e60:	e01b      	b.n	8008e9a <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	691b      	ldr	r3, [r3, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d10a      	bne.n	8008e80 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6858      	ldr	r0, [r3, #4]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e74:	1c59      	adds	r1, r3, #1
 8008e76:	687a      	ldr	r2, [r7, #4]
 8008e78:	6291      	str	r1, [r2, #40]	; 0x28
 8008e7a:	b2c2      	uxtb	r2, r0
 8008e7c:	701a      	strb	r2, [r3, #0]
 8008e7e:	e00c      	b.n	8008e9a <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	b2da      	uxtb	r2, r3
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e8c:	1c58      	adds	r0, r3, #1
 8008e8e:	6879      	ldr	r1, [r7, #4]
 8008e90:	6288      	str	r0, [r1, #40]	; 0x28
 8008e92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	3b01      	subs	r3, #1
 8008ea2:	b29b      	uxth	r3, r3
 8008ea4:	687a      	ldr	r2, [r7, #4]
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d120      	bne.n	8008ef0 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008eae:	687b      	ldr	r3, [r7, #4]
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	68da      	ldr	r2, [r3, #12]
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f022 0220 	bic.w	r2, r2, #32
 8008ebc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008ecc:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	695a      	ldr	r2, [r3, #20]
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f022 0201 	bic.w	r2, r2, #1
 8008edc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2220      	movs	r2, #32
 8008ee2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8008ee6:	6878      	ldr	r0, [r7, #4]
 8008ee8:	f7ff fed4 	bl	8008c94 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8008eec:	2300      	movs	r3, #0
 8008eee:	e002      	b.n	8008ef6 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	e000      	b.n	8008ef6 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8008ef4:	2302      	movs	r3, #2
  }
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	3710      	adds	r7, #16
 8008efa:	46bd      	mov	sp, r7
 8008efc:	bd80      	pop	{r7, pc}
	...

08008f00 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f04:	b085      	sub	sp, #20
 8008f06:	af00      	add	r7, sp, #0
 8008f08:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	691b      	ldr	r3, [r3, #16]
 8008f10:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	68da      	ldr	r2, [r3, #12]
 8008f18:	687b      	ldr	r3, [r7, #4]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	430a      	orrs	r2, r1
 8008f1e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	689a      	ldr	r2, [r3, #8]
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	691b      	ldr	r3, [r3, #16]
 8008f28:	431a      	orrs	r2, r3
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	695b      	ldr	r3, [r3, #20]
 8008f2e:	431a      	orrs	r2, r3
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	69db      	ldr	r3, [r3, #28]
 8008f34:	4313      	orrs	r3, r2
 8008f36:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	68db      	ldr	r3, [r3, #12]
 8008f3e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8008f42:	f023 030c 	bic.w	r3, r3, #12
 8008f46:	687a      	ldr	r2, [r7, #4]
 8008f48:	6812      	ldr	r2, [r2, #0]
 8008f4a:	68f9      	ldr	r1, [r7, #12]
 8008f4c:	430b      	orrs	r3, r1
 8008f4e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	695b      	ldr	r3, [r3, #20]
 8008f56:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	699a      	ldr	r2, [r3, #24]
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	681b      	ldr	r3, [r3, #0]
 8008f62:	430a      	orrs	r2, r1
 8008f64:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	69db      	ldr	r3, [r3, #28]
 8008f6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008f6e:	f040 818b 	bne.w	8009288 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	4ac1      	ldr	r2, [pc, #772]	; (800927c <UART_SetConfig+0x37c>)
 8008f78:	4293      	cmp	r3, r2
 8008f7a:	d005      	beq.n	8008f88 <UART_SetConfig+0x88>
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	4abf      	ldr	r2, [pc, #764]	; (8009280 <UART_SetConfig+0x380>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	f040 80bd 	bne.w	8009102 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008f88:	f7fd fcd8 	bl	800693c <HAL_RCC_GetPCLK2Freq>
 8008f8c:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	461d      	mov	r5, r3
 8008f92:	f04f 0600 	mov.w	r6, #0
 8008f96:	46a8      	mov	r8, r5
 8008f98:	46b1      	mov	r9, r6
 8008f9a:	eb18 0308 	adds.w	r3, r8, r8
 8008f9e:	eb49 0409 	adc.w	r4, r9, r9
 8008fa2:	4698      	mov	r8, r3
 8008fa4:	46a1      	mov	r9, r4
 8008fa6:	eb18 0805 	adds.w	r8, r8, r5
 8008faa:	eb49 0906 	adc.w	r9, r9, r6
 8008fae:	f04f 0100 	mov.w	r1, #0
 8008fb2:	f04f 0200 	mov.w	r2, #0
 8008fb6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8008fba:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8008fbe:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8008fc2:	4688      	mov	r8, r1
 8008fc4:	4691      	mov	r9, r2
 8008fc6:	eb18 0005 	adds.w	r0, r8, r5
 8008fca:	eb49 0106 	adc.w	r1, r9, r6
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	685b      	ldr	r3, [r3, #4]
 8008fd2:	461d      	mov	r5, r3
 8008fd4:	f04f 0600 	mov.w	r6, #0
 8008fd8:	196b      	adds	r3, r5, r5
 8008fda:	eb46 0406 	adc.w	r4, r6, r6
 8008fde:	461a      	mov	r2, r3
 8008fe0:	4623      	mov	r3, r4
 8008fe2:	f7f7 f8f9 	bl	80001d8 <__aeabi_uldivmod>
 8008fe6:	4603      	mov	r3, r0
 8008fe8:	460c      	mov	r4, r1
 8008fea:	461a      	mov	r2, r3
 8008fec:	4ba5      	ldr	r3, [pc, #660]	; (8009284 <UART_SetConfig+0x384>)
 8008fee:	fba3 2302 	umull	r2, r3, r3, r2
 8008ff2:	095b      	lsrs	r3, r3, #5
 8008ff4:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	461d      	mov	r5, r3
 8008ffc:	f04f 0600 	mov.w	r6, #0
 8009000:	46a9      	mov	r9, r5
 8009002:	46b2      	mov	sl, r6
 8009004:	eb19 0309 	adds.w	r3, r9, r9
 8009008:	eb4a 040a 	adc.w	r4, sl, sl
 800900c:	4699      	mov	r9, r3
 800900e:	46a2      	mov	sl, r4
 8009010:	eb19 0905 	adds.w	r9, r9, r5
 8009014:	eb4a 0a06 	adc.w	sl, sl, r6
 8009018:	f04f 0100 	mov.w	r1, #0
 800901c:	f04f 0200 	mov.w	r2, #0
 8009020:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009024:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009028:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800902c:	4689      	mov	r9, r1
 800902e:	4692      	mov	sl, r2
 8009030:	eb19 0005 	adds.w	r0, r9, r5
 8009034:	eb4a 0106 	adc.w	r1, sl, r6
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	685b      	ldr	r3, [r3, #4]
 800903c:	461d      	mov	r5, r3
 800903e:	f04f 0600 	mov.w	r6, #0
 8009042:	196b      	adds	r3, r5, r5
 8009044:	eb46 0406 	adc.w	r4, r6, r6
 8009048:	461a      	mov	r2, r3
 800904a:	4623      	mov	r3, r4
 800904c:	f7f7 f8c4 	bl	80001d8 <__aeabi_uldivmod>
 8009050:	4603      	mov	r3, r0
 8009052:	460c      	mov	r4, r1
 8009054:	461a      	mov	r2, r3
 8009056:	4b8b      	ldr	r3, [pc, #556]	; (8009284 <UART_SetConfig+0x384>)
 8009058:	fba3 1302 	umull	r1, r3, r3, r2
 800905c:	095b      	lsrs	r3, r3, #5
 800905e:	2164      	movs	r1, #100	; 0x64
 8009060:	fb01 f303 	mul.w	r3, r1, r3
 8009064:	1ad3      	subs	r3, r2, r3
 8009066:	00db      	lsls	r3, r3, #3
 8009068:	3332      	adds	r3, #50	; 0x32
 800906a:	4a86      	ldr	r2, [pc, #536]	; (8009284 <UART_SetConfig+0x384>)
 800906c:	fba2 2303 	umull	r2, r3, r2, r3
 8009070:	095b      	lsrs	r3, r3, #5
 8009072:	005b      	lsls	r3, r3, #1
 8009074:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009078:	4498      	add	r8, r3
 800907a:	68bb      	ldr	r3, [r7, #8]
 800907c:	461d      	mov	r5, r3
 800907e:	f04f 0600 	mov.w	r6, #0
 8009082:	46a9      	mov	r9, r5
 8009084:	46b2      	mov	sl, r6
 8009086:	eb19 0309 	adds.w	r3, r9, r9
 800908a:	eb4a 040a 	adc.w	r4, sl, sl
 800908e:	4699      	mov	r9, r3
 8009090:	46a2      	mov	sl, r4
 8009092:	eb19 0905 	adds.w	r9, r9, r5
 8009096:	eb4a 0a06 	adc.w	sl, sl, r6
 800909a:	f04f 0100 	mov.w	r1, #0
 800909e:	f04f 0200 	mov.w	r2, #0
 80090a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80090a6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80090aa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80090ae:	4689      	mov	r9, r1
 80090b0:	4692      	mov	sl, r2
 80090b2:	eb19 0005 	adds.w	r0, r9, r5
 80090b6:	eb4a 0106 	adc.w	r1, sl, r6
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	461d      	mov	r5, r3
 80090c0:	f04f 0600 	mov.w	r6, #0
 80090c4:	196b      	adds	r3, r5, r5
 80090c6:	eb46 0406 	adc.w	r4, r6, r6
 80090ca:	461a      	mov	r2, r3
 80090cc:	4623      	mov	r3, r4
 80090ce:	f7f7 f883 	bl	80001d8 <__aeabi_uldivmod>
 80090d2:	4603      	mov	r3, r0
 80090d4:	460c      	mov	r4, r1
 80090d6:	461a      	mov	r2, r3
 80090d8:	4b6a      	ldr	r3, [pc, #424]	; (8009284 <UART_SetConfig+0x384>)
 80090da:	fba3 1302 	umull	r1, r3, r3, r2
 80090de:	095b      	lsrs	r3, r3, #5
 80090e0:	2164      	movs	r1, #100	; 0x64
 80090e2:	fb01 f303 	mul.w	r3, r1, r3
 80090e6:	1ad3      	subs	r3, r2, r3
 80090e8:	00db      	lsls	r3, r3, #3
 80090ea:	3332      	adds	r3, #50	; 0x32
 80090ec:	4a65      	ldr	r2, [pc, #404]	; (8009284 <UART_SetConfig+0x384>)
 80090ee:	fba2 2303 	umull	r2, r3, r2, r3
 80090f2:	095b      	lsrs	r3, r3, #5
 80090f4:	f003 0207 	and.w	r2, r3, #7
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	4442      	add	r2, r8
 80090fe:	609a      	str	r2, [r3, #8]
 8009100:	e26f      	b.n	80095e2 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009102:	f7fd fc07 	bl	8006914 <HAL_RCC_GetPCLK1Freq>
 8009106:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009108:	68bb      	ldr	r3, [r7, #8]
 800910a:	461d      	mov	r5, r3
 800910c:	f04f 0600 	mov.w	r6, #0
 8009110:	46a8      	mov	r8, r5
 8009112:	46b1      	mov	r9, r6
 8009114:	eb18 0308 	adds.w	r3, r8, r8
 8009118:	eb49 0409 	adc.w	r4, r9, r9
 800911c:	4698      	mov	r8, r3
 800911e:	46a1      	mov	r9, r4
 8009120:	eb18 0805 	adds.w	r8, r8, r5
 8009124:	eb49 0906 	adc.w	r9, r9, r6
 8009128:	f04f 0100 	mov.w	r1, #0
 800912c:	f04f 0200 	mov.w	r2, #0
 8009130:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009134:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009138:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800913c:	4688      	mov	r8, r1
 800913e:	4691      	mov	r9, r2
 8009140:	eb18 0005 	adds.w	r0, r8, r5
 8009144:	eb49 0106 	adc.w	r1, r9, r6
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	461d      	mov	r5, r3
 800914e:	f04f 0600 	mov.w	r6, #0
 8009152:	196b      	adds	r3, r5, r5
 8009154:	eb46 0406 	adc.w	r4, r6, r6
 8009158:	461a      	mov	r2, r3
 800915a:	4623      	mov	r3, r4
 800915c:	f7f7 f83c 	bl	80001d8 <__aeabi_uldivmod>
 8009160:	4603      	mov	r3, r0
 8009162:	460c      	mov	r4, r1
 8009164:	461a      	mov	r2, r3
 8009166:	4b47      	ldr	r3, [pc, #284]	; (8009284 <UART_SetConfig+0x384>)
 8009168:	fba3 2302 	umull	r2, r3, r3, r2
 800916c:	095b      	lsrs	r3, r3, #5
 800916e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8009172:	68bb      	ldr	r3, [r7, #8]
 8009174:	461d      	mov	r5, r3
 8009176:	f04f 0600 	mov.w	r6, #0
 800917a:	46a9      	mov	r9, r5
 800917c:	46b2      	mov	sl, r6
 800917e:	eb19 0309 	adds.w	r3, r9, r9
 8009182:	eb4a 040a 	adc.w	r4, sl, sl
 8009186:	4699      	mov	r9, r3
 8009188:	46a2      	mov	sl, r4
 800918a:	eb19 0905 	adds.w	r9, r9, r5
 800918e:	eb4a 0a06 	adc.w	sl, sl, r6
 8009192:	f04f 0100 	mov.w	r1, #0
 8009196:	f04f 0200 	mov.w	r2, #0
 800919a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800919e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80091a2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80091a6:	4689      	mov	r9, r1
 80091a8:	4692      	mov	sl, r2
 80091aa:	eb19 0005 	adds.w	r0, r9, r5
 80091ae:	eb4a 0106 	adc.w	r1, sl, r6
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	685b      	ldr	r3, [r3, #4]
 80091b6:	461d      	mov	r5, r3
 80091b8:	f04f 0600 	mov.w	r6, #0
 80091bc:	196b      	adds	r3, r5, r5
 80091be:	eb46 0406 	adc.w	r4, r6, r6
 80091c2:	461a      	mov	r2, r3
 80091c4:	4623      	mov	r3, r4
 80091c6:	f7f7 f807 	bl	80001d8 <__aeabi_uldivmod>
 80091ca:	4603      	mov	r3, r0
 80091cc:	460c      	mov	r4, r1
 80091ce:	461a      	mov	r2, r3
 80091d0:	4b2c      	ldr	r3, [pc, #176]	; (8009284 <UART_SetConfig+0x384>)
 80091d2:	fba3 1302 	umull	r1, r3, r3, r2
 80091d6:	095b      	lsrs	r3, r3, #5
 80091d8:	2164      	movs	r1, #100	; 0x64
 80091da:	fb01 f303 	mul.w	r3, r1, r3
 80091de:	1ad3      	subs	r3, r2, r3
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	3332      	adds	r3, #50	; 0x32
 80091e4:	4a27      	ldr	r2, [pc, #156]	; (8009284 <UART_SetConfig+0x384>)
 80091e6:	fba2 2303 	umull	r2, r3, r2, r3
 80091ea:	095b      	lsrs	r3, r3, #5
 80091ec:	005b      	lsls	r3, r3, #1
 80091ee:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80091f2:	4498      	add	r8, r3
 80091f4:	68bb      	ldr	r3, [r7, #8]
 80091f6:	461d      	mov	r5, r3
 80091f8:	f04f 0600 	mov.w	r6, #0
 80091fc:	46a9      	mov	r9, r5
 80091fe:	46b2      	mov	sl, r6
 8009200:	eb19 0309 	adds.w	r3, r9, r9
 8009204:	eb4a 040a 	adc.w	r4, sl, sl
 8009208:	4699      	mov	r9, r3
 800920a:	46a2      	mov	sl, r4
 800920c:	eb19 0905 	adds.w	r9, r9, r5
 8009210:	eb4a 0a06 	adc.w	sl, sl, r6
 8009214:	f04f 0100 	mov.w	r1, #0
 8009218:	f04f 0200 	mov.w	r2, #0
 800921c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009220:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8009224:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009228:	4689      	mov	r9, r1
 800922a:	4692      	mov	sl, r2
 800922c:	eb19 0005 	adds.w	r0, r9, r5
 8009230:	eb4a 0106 	adc.w	r1, sl, r6
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	461d      	mov	r5, r3
 800923a:	f04f 0600 	mov.w	r6, #0
 800923e:	196b      	adds	r3, r5, r5
 8009240:	eb46 0406 	adc.w	r4, r6, r6
 8009244:	461a      	mov	r2, r3
 8009246:	4623      	mov	r3, r4
 8009248:	f7f6 ffc6 	bl	80001d8 <__aeabi_uldivmod>
 800924c:	4603      	mov	r3, r0
 800924e:	460c      	mov	r4, r1
 8009250:	461a      	mov	r2, r3
 8009252:	4b0c      	ldr	r3, [pc, #48]	; (8009284 <UART_SetConfig+0x384>)
 8009254:	fba3 1302 	umull	r1, r3, r3, r2
 8009258:	095b      	lsrs	r3, r3, #5
 800925a:	2164      	movs	r1, #100	; 0x64
 800925c:	fb01 f303 	mul.w	r3, r1, r3
 8009260:	1ad3      	subs	r3, r2, r3
 8009262:	00db      	lsls	r3, r3, #3
 8009264:	3332      	adds	r3, #50	; 0x32
 8009266:	4a07      	ldr	r2, [pc, #28]	; (8009284 <UART_SetConfig+0x384>)
 8009268:	fba2 2303 	umull	r2, r3, r2, r3
 800926c:	095b      	lsrs	r3, r3, #5
 800926e:	f003 0207 	and.w	r2, r3, #7
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4442      	add	r2, r8
 8009278:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800927a:	e1b2      	b.n	80095e2 <UART_SetConfig+0x6e2>
 800927c:	40011000 	.word	0x40011000
 8009280:	40011400 	.word	0x40011400
 8009284:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	4ad7      	ldr	r2, [pc, #860]	; (80095ec <UART_SetConfig+0x6ec>)
 800928e:	4293      	cmp	r3, r2
 8009290:	d005      	beq.n	800929e <UART_SetConfig+0x39e>
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	4ad6      	ldr	r2, [pc, #856]	; (80095f0 <UART_SetConfig+0x6f0>)
 8009298:	4293      	cmp	r3, r2
 800929a:	f040 80d1 	bne.w	8009440 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800929e:	f7fd fb4d 	bl	800693c <HAL_RCC_GetPCLK2Freq>
 80092a2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80092a4:	68bb      	ldr	r3, [r7, #8]
 80092a6:	469a      	mov	sl, r3
 80092a8:	f04f 0b00 	mov.w	fp, #0
 80092ac:	46d0      	mov	r8, sl
 80092ae:	46d9      	mov	r9, fp
 80092b0:	eb18 0308 	adds.w	r3, r8, r8
 80092b4:	eb49 0409 	adc.w	r4, r9, r9
 80092b8:	4698      	mov	r8, r3
 80092ba:	46a1      	mov	r9, r4
 80092bc:	eb18 080a 	adds.w	r8, r8, sl
 80092c0:	eb49 090b 	adc.w	r9, r9, fp
 80092c4:	f04f 0100 	mov.w	r1, #0
 80092c8:	f04f 0200 	mov.w	r2, #0
 80092cc:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80092d0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80092d4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80092d8:	4688      	mov	r8, r1
 80092da:	4691      	mov	r9, r2
 80092dc:	eb1a 0508 	adds.w	r5, sl, r8
 80092e0:	eb4b 0609 	adc.w	r6, fp, r9
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	685b      	ldr	r3, [r3, #4]
 80092e8:	4619      	mov	r1, r3
 80092ea:	f04f 0200 	mov.w	r2, #0
 80092ee:	f04f 0300 	mov.w	r3, #0
 80092f2:	f04f 0400 	mov.w	r4, #0
 80092f6:	0094      	lsls	r4, r2, #2
 80092f8:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80092fc:	008b      	lsls	r3, r1, #2
 80092fe:	461a      	mov	r2, r3
 8009300:	4623      	mov	r3, r4
 8009302:	4628      	mov	r0, r5
 8009304:	4631      	mov	r1, r6
 8009306:	f7f6 ff67 	bl	80001d8 <__aeabi_uldivmod>
 800930a:	4603      	mov	r3, r0
 800930c:	460c      	mov	r4, r1
 800930e:	461a      	mov	r2, r3
 8009310:	4bb8      	ldr	r3, [pc, #736]	; (80095f4 <UART_SetConfig+0x6f4>)
 8009312:	fba3 2302 	umull	r2, r3, r3, r2
 8009316:	095b      	lsrs	r3, r3, #5
 8009318:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800931c:	68bb      	ldr	r3, [r7, #8]
 800931e:	469b      	mov	fp, r3
 8009320:	f04f 0c00 	mov.w	ip, #0
 8009324:	46d9      	mov	r9, fp
 8009326:	46e2      	mov	sl, ip
 8009328:	eb19 0309 	adds.w	r3, r9, r9
 800932c:	eb4a 040a 	adc.w	r4, sl, sl
 8009330:	4699      	mov	r9, r3
 8009332:	46a2      	mov	sl, r4
 8009334:	eb19 090b 	adds.w	r9, r9, fp
 8009338:	eb4a 0a0c 	adc.w	sl, sl, ip
 800933c:	f04f 0100 	mov.w	r1, #0
 8009340:	f04f 0200 	mov.w	r2, #0
 8009344:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009348:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800934c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009350:	4689      	mov	r9, r1
 8009352:	4692      	mov	sl, r2
 8009354:	eb1b 0509 	adds.w	r5, fp, r9
 8009358:	eb4c 060a 	adc.w	r6, ip, sl
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	685b      	ldr	r3, [r3, #4]
 8009360:	4619      	mov	r1, r3
 8009362:	f04f 0200 	mov.w	r2, #0
 8009366:	f04f 0300 	mov.w	r3, #0
 800936a:	f04f 0400 	mov.w	r4, #0
 800936e:	0094      	lsls	r4, r2, #2
 8009370:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009374:	008b      	lsls	r3, r1, #2
 8009376:	461a      	mov	r2, r3
 8009378:	4623      	mov	r3, r4
 800937a:	4628      	mov	r0, r5
 800937c:	4631      	mov	r1, r6
 800937e:	f7f6 ff2b 	bl	80001d8 <__aeabi_uldivmod>
 8009382:	4603      	mov	r3, r0
 8009384:	460c      	mov	r4, r1
 8009386:	461a      	mov	r2, r3
 8009388:	4b9a      	ldr	r3, [pc, #616]	; (80095f4 <UART_SetConfig+0x6f4>)
 800938a:	fba3 1302 	umull	r1, r3, r3, r2
 800938e:	095b      	lsrs	r3, r3, #5
 8009390:	2164      	movs	r1, #100	; 0x64
 8009392:	fb01 f303 	mul.w	r3, r1, r3
 8009396:	1ad3      	subs	r3, r2, r3
 8009398:	011b      	lsls	r3, r3, #4
 800939a:	3332      	adds	r3, #50	; 0x32
 800939c:	4a95      	ldr	r2, [pc, #596]	; (80095f4 <UART_SetConfig+0x6f4>)
 800939e:	fba2 2303 	umull	r2, r3, r2, r3
 80093a2:	095b      	lsrs	r3, r3, #5
 80093a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80093a8:	4498      	add	r8, r3
 80093aa:	68bb      	ldr	r3, [r7, #8]
 80093ac:	469b      	mov	fp, r3
 80093ae:	f04f 0c00 	mov.w	ip, #0
 80093b2:	46d9      	mov	r9, fp
 80093b4:	46e2      	mov	sl, ip
 80093b6:	eb19 0309 	adds.w	r3, r9, r9
 80093ba:	eb4a 040a 	adc.w	r4, sl, sl
 80093be:	4699      	mov	r9, r3
 80093c0:	46a2      	mov	sl, r4
 80093c2:	eb19 090b 	adds.w	r9, r9, fp
 80093c6:	eb4a 0a0c 	adc.w	sl, sl, ip
 80093ca:	f04f 0100 	mov.w	r1, #0
 80093ce:	f04f 0200 	mov.w	r2, #0
 80093d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093d6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80093da:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80093de:	4689      	mov	r9, r1
 80093e0:	4692      	mov	sl, r2
 80093e2:	eb1b 0509 	adds.w	r5, fp, r9
 80093e6:	eb4c 060a 	adc.w	r6, ip, sl
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	4619      	mov	r1, r3
 80093f0:	f04f 0200 	mov.w	r2, #0
 80093f4:	f04f 0300 	mov.w	r3, #0
 80093f8:	f04f 0400 	mov.w	r4, #0
 80093fc:	0094      	lsls	r4, r2, #2
 80093fe:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009402:	008b      	lsls	r3, r1, #2
 8009404:	461a      	mov	r2, r3
 8009406:	4623      	mov	r3, r4
 8009408:	4628      	mov	r0, r5
 800940a:	4631      	mov	r1, r6
 800940c:	f7f6 fee4 	bl	80001d8 <__aeabi_uldivmod>
 8009410:	4603      	mov	r3, r0
 8009412:	460c      	mov	r4, r1
 8009414:	461a      	mov	r2, r3
 8009416:	4b77      	ldr	r3, [pc, #476]	; (80095f4 <UART_SetConfig+0x6f4>)
 8009418:	fba3 1302 	umull	r1, r3, r3, r2
 800941c:	095b      	lsrs	r3, r3, #5
 800941e:	2164      	movs	r1, #100	; 0x64
 8009420:	fb01 f303 	mul.w	r3, r1, r3
 8009424:	1ad3      	subs	r3, r2, r3
 8009426:	011b      	lsls	r3, r3, #4
 8009428:	3332      	adds	r3, #50	; 0x32
 800942a:	4a72      	ldr	r2, [pc, #456]	; (80095f4 <UART_SetConfig+0x6f4>)
 800942c:	fba2 2303 	umull	r2, r3, r2, r3
 8009430:	095b      	lsrs	r3, r3, #5
 8009432:	f003 020f 	and.w	r2, r3, #15
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4442      	add	r2, r8
 800943c:	609a      	str	r2, [r3, #8]
 800943e:	e0d0      	b.n	80095e2 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8009440:	f7fd fa68 	bl	8006914 <HAL_RCC_GetPCLK1Freq>
 8009444:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009446:	68bb      	ldr	r3, [r7, #8]
 8009448:	469a      	mov	sl, r3
 800944a:	f04f 0b00 	mov.w	fp, #0
 800944e:	46d0      	mov	r8, sl
 8009450:	46d9      	mov	r9, fp
 8009452:	eb18 0308 	adds.w	r3, r8, r8
 8009456:	eb49 0409 	adc.w	r4, r9, r9
 800945a:	4698      	mov	r8, r3
 800945c:	46a1      	mov	r9, r4
 800945e:	eb18 080a 	adds.w	r8, r8, sl
 8009462:	eb49 090b 	adc.w	r9, r9, fp
 8009466:	f04f 0100 	mov.w	r1, #0
 800946a:	f04f 0200 	mov.w	r2, #0
 800946e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8009472:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8009476:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800947a:	4688      	mov	r8, r1
 800947c:	4691      	mov	r9, r2
 800947e:	eb1a 0508 	adds.w	r5, sl, r8
 8009482:	eb4b 0609 	adc.w	r6, fp, r9
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	685b      	ldr	r3, [r3, #4]
 800948a:	4619      	mov	r1, r3
 800948c:	f04f 0200 	mov.w	r2, #0
 8009490:	f04f 0300 	mov.w	r3, #0
 8009494:	f04f 0400 	mov.w	r4, #0
 8009498:	0094      	lsls	r4, r2, #2
 800949a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800949e:	008b      	lsls	r3, r1, #2
 80094a0:	461a      	mov	r2, r3
 80094a2:	4623      	mov	r3, r4
 80094a4:	4628      	mov	r0, r5
 80094a6:	4631      	mov	r1, r6
 80094a8:	f7f6 fe96 	bl	80001d8 <__aeabi_uldivmod>
 80094ac:	4603      	mov	r3, r0
 80094ae:	460c      	mov	r4, r1
 80094b0:	461a      	mov	r2, r3
 80094b2:	4b50      	ldr	r3, [pc, #320]	; (80095f4 <UART_SetConfig+0x6f4>)
 80094b4:	fba3 2302 	umull	r2, r3, r3, r2
 80094b8:	095b      	lsrs	r3, r3, #5
 80094ba:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80094be:	68bb      	ldr	r3, [r7, #8]
 80094c0:	469b      	mov	fp, r3
 80094c2:	f04f 0c00 	mov.w	ip, #0
 80094c6:	46d9      	mov	r9, fp
 80094c8:	46e2      	mov	sl, ip
 80094ca:	eb19 0309 	adds.w	r3, r9, r9
 80094ce:	eb4a 040a 	adc.w	r4, sl, sl
 80094d2:	4699      	mov	r9, r3
 80094d4:	46a2      	mov	sl, r4
 80094d6:	eb19 090b 	adds.w	r9, r9, fp
 80094da:	eb4a 0a0c 	adc.w	sl, sl, ip
 80094de:	f04f 0100 	mov.w	r1, #0
 80094e2:	f04f 0200 	mov.w	r2, #0
 80094e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80094ea:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80094ee:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80094f2:	4689      	mov	r9, r1
 80094f4:	4692      	mov	sl, r2
 80094f6:	eb1b 0509 	adds.w	r5, fp, r9
 80094fa:	eb4c 060a 	adc.w	r6, ip, sl
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	685b      	ldr	r3, [r3, #4]
 8009502:	4619      	mov	r1, r3
 8009504:	f04f 0200 	mov.w	r2, #0
 8009508:	f04f 0300 	mov.w	r3, #0
 800950c:	f04f 0400 	mov.w	r4, #0
 8009510:	0094      	lsls	r4, r2, #2
 8009512:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8009516:	008b      	lsls	r3, r1, #2
 8009518:	461a      	mov	r2, r3
 800951a:	4623      	mov	r3, r4
 800951c:	4628      	mov	r0, r5
 800951e:	4631      	mov	r1, r6
 8009520:	f7f6 fe5a 	bl	80001d8 <__aeabi_uldivmod>
 8009524:	4603      	mov	r3, r0
 8009526:	460c      	mov	r4, r1
 8009528:	461a      	mov	r2, r3
 800952a:	4b32      	ldr	r3, [pc, #200]	; (80095f4 <UART_SetConfig+0x6f4>)
 800952c:	fba3 1302 	umull	r1, r3, r3, r2
 8009530:	095b      	lsrs	r3, r3, #5
 8009532:	2164      	movs	r1, #100	; 0x64
 8009534:	fb01 f303 	mul.w	r3, r1, r3
 8009538:	1ad3      	subs	r3, r2, r3
 800953a:	011b      	lsls	r3, r3, #4
 800953c:	3332      	adds	r3, #50	; 0x32
 800953e:	4a2d      	ldr	r2, [pc, #180]	; (80095f4 <UART_SetConfig+0x6f4>)
 8009540:	fba2 2303 	umull	r2, r3, r2, r3
 8009544:	095b      	lsrs	r3, r3, #5
 8009546:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800954a:	4498      	add	r8, r3
 800954c:	68bb      	ldr	r3, [r7, #8]
 800954e:	469b      	mov	fp, r3
 8009550:	f04f 0c00 	mov.w	ip, #0
 8009554:	46d9      	mov	r9, fp
 8009556:	46e2      	mov	sl, ip
 8009558:	eb19 0309 	adds.w	r3, r9, r9
 800955c:	eb4a 040a 	adc.w	r4, sl, sl
 8009560:	4699      	mov	r9, r3
 8009562:	46a2      	mov	sl, r4
 8009564:	eb19 090b 	adds.w	r9, r9, fp
 8009568:	eb4a 0a0c 	adc.w	sl, sl, ip
 800956c:	f04f 0100 	mov.w	r1, #0
 8009570:	f04f 0200 	mov.w	r2, #0
 8009574:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009578:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800957c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8009580:	4689      	mov	r9, r1
 8009582:	4692      	mov	sl, r2
 8009584:	eb1b 0509 	adds.w	r5, fp, r9
 8009588:	eb4c 060a 	adc.w	r6, ip, sl
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	4619      	mov	r1, r3
 8009592:	f04f 0200 	mov.w	r2, #0
 8009596:	f04f 0300 	mov.w	r3, #0
 800959a:	f04f 0400 	mov.w	r4, #0
 800959e:	0094      	lsls	r4, r2, #2
 80095a0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 80095a4:	008b      	lsls	r3, r1, #2
 80095a6:	461a      	mov	r2, r3
 80095a8:	4623      	mov	r3, r4
 80095aa:	4628      	mov	r0, r5
 80095ac:	4631      	mov	r1, r6
 80095ae:	f7f6 fe13 	bl	80001d8 <__aeabi_uldivmod>
 80095b2:	4603      	mov	r3, r0
 80095b4:	460c      	mov	r4, r1
 80095b6:	461a      	mov	r2, r3
 80095b8:	4b0e      	ldr	r3, [pc, #56]	; (80095f4 <UART_SetConfig+0x6f4>)
 80095ba:	fba3 1302 	umull	r1, r3, r3, r2
 80095be:	095b      	lsrs	r3, r3, #5
 80095c0:	2164      	movs	r1, #100	; 0x64
 80095c2:	fb01 f303 	mul.w	r3, r1, r3
 80095c6:	1ad3      	subs	r3, r2, r3
 80095c8:	011b      	lsls	r3, r3, #4
 80095ca:	3332      	adds	r3, #50	; 0x32
 80095cc:	4a09      	ldr	r2, [pc, #36]	; (80095f4 <UART_SetConfig+0x6f4>)
 80095ce:	fba2 2303 	umull	r2, r3, r2, r3
 80095d2:	095b      	lsrs	r3, r3, #5
 80095d4:	f003 020f 	and.w	r2, r3, #15
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	4442      	add	r2, r8
 80095de:	609a      	str	r2, [r3, #8]
}
 80095e0:	e7ff      	b.n	80095e2 <UART_SetConfig+0x6e2>
 80095e2:	bf00      	nop
 80095e4:	3714      	adds	r7, #20
 80095e6:	46bd      	mov	sp, r7
 80095e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095ec:	40011000 	.word	0x40011000
 80095f0:	40011400 	.word	0x40011400
 80095f4:	51eb851f 	.word	0x51eb851f

080095f8 <_ZdlPvj>:
 80095f8:	f000 b800 	b.w	80095fc <_ZdlPv>

080095fc <_ZdlPv>:
 80095fc:	f000 b9fe 	b.w	80099fc <free>

08009600 <_ZNSaIcEC1Ev>:
 8009600:	4770      	bx	lr

08009602 <_ZNSaIcED1Ev>:
 8009602:	4770      	bx	lr

08009604 <_ZNSt11char_traitsIcE4copyEPcPKcj>:
 8009604:	b10a      	cbz	r2, 800960a <_ZNSt11char_traitsIcE4copyEPcPKcj+0x6>
 8009606:	f000 ba01 	b.w	8009a0c <memcpy>
 800960a:	4770      	bx	lr

0800960c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800960c:	b508      	push	{r3, lr}
 800960e:	680b      	ldr	r3, [r1, #0]
 8009610:	2b00      	cmp	r3, #0
 8009612:	da02      	bge.n	800961a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0xe>
 8009614:	4809      	ldr	r0, [pc, #36]	; (800963c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x30>)
 8009616:	f000 f9b4 	bl	8009982 <_ZSt20__throw_length_errorPKc>
 800961a:	4293      	cmp	r3, r2
 800961c:	d908      	bls.n	8009630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 800961e:	0052      	lsls	r2, r2, #1
 8009620:	4293      	cmp	r3, r2
 8009622:	d205      	bcs.n	8009630 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x24>
 8009624:	2a00      	cmp	r2, #0
 8009626:	bfb6      	itet	lt
 8009628:	f06f 4300 	mvnlt.w	r3, #2147483648	; 0x80000000
 800962c:	600a      	strge	r2, [r1, #0]
 800962e:	600b      	strlt	r3, [r1, #0]
 8009630:	6808      	ldr	r0, [r1, #0]
 8009632:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8009636:	3001      	adds	r0, #1
 8009638:	f000 b986 	b.w	8009948 <_Znwj>
 800963c:	0800a247 	.word	0x0800a247

08009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 8009640:	4603      	mov	r3, r0
 8009642:	f853 0b08 	ldr.w	r0, [r3], #8
 8009646:	4298      	cmp	r0, r3
 8009648:	d001      	beq.n	800964e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 800964a:	f7ff bfd7 	b.w	80095fc <_ZdlPv>
 800964e:	4770      	bx	lr

08009650 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8009650:	b508      	push	{r3, lr}
 8009652:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
 8009656:	6840      	ldr	r0, [r0, #4]
 8009658:	3901      	subs	r1, #1
 800965a:	1a09      	subs	r1, r1, r0
 800965c:	4291      	cmp	r1, r2
 800965e:	d202      	bcs.n	8009666 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8009660:	4618      	mov	r0, r3
 8009662:	f000 f98e 	bl	8009982 <_ZSt20__throw_length_errorPKc>
 8009666:	bd08      	pop	{r3, pc}

08009668 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8009668:	6803      	ldr	r3, [r0, #0]
 800966a:	428b      	cmp	r3, r1
 800966c:	d806      	bhi.n	800967c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800966e:	6840      	ldr	r0, [r0, #4]
 8009670:	4418      	add	r0, r3
 8009672:	4281      	cmp	r1, r0
 8009674:	bf94      	ite	ls
 8009676:	2000      	movls	r0, #0
 8009678:	2001      	movhi	r0, #1
 800967a:	4770      	bx	lr
 800967c:	2001      	movs	r0, #1
 800967e:	4770      	bx	lr

08009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8009680:	2a01      	cmp	r2, #1
 8009682:	b510      	push	{r4, lr}
 8009684:	d102      	bne.n	800968c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xc>
 8009686:	780a      	ldrb	r2, [r1, #0]
 8009688:	7002      	strb	r2, [r0, #0]
 800968a:	bd10      	pop	{r4, pc}
 800968c:	f7ff ffba 	bl	8009604 <_ZNSt11char_traitsIcE4copyEPcPKcj>
 8009690:	e7fb      	b.n	800968a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0xa>

08009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8009692:	2a01      	cmp	r2, #1
 8009694:	b430      	push	{r4, r5}
 8009696:	d103      	bne.n	80096a0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8009698:	780b      	ldrb	r3, [r1, #0]
 800969a:	7003      	strb	r3, [r0, #0]
 800969c:	bc30      	pop	{r4, r5}
 800969e:	4770      	bx	lr
 80096a0:	2a00      	cmp	r2, #0
 80096a2:	d0fb      	beq.n	800969c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 80096a4:	bc30      	pop	{r4, r5}
 80096a6:	f000 b9bc 	b.w	8009a22 <memmove>

080096aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>:
 80096aa:	b508      	push	{r3, lr}
 80096ac:	1a52      	subs	r2, r2, r1
 80096ae:	f7ff ffe7 	bl	8009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096b2:	bd08      	pop	{r3, pc}

080096b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 80096b4:	b508      	push	{r3, lr}
 80096b6:	1a52      	subs	r2, r2, r1
 80096b8:	f7ff ffe2 	bl	8009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096bc:	bd08      	pop	{r3, pc}

080096be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 80096be:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80096c2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
 80096c6:	4616      	mov	r6, r2
 80096c8:	6842      	ldr	r2, [r0, #4]
 80096ca:	469a      	mov	sl, r3
 80096cc:	eba8 0306 	sub.w	r3, r8, r6
 80096d0:	1a57      	subs	r7, r2, r1
 80096d2:	4413      	add	r3, r2
 80096d4:	6802      	ldr	r2, [r0, #0]
 80096d6:	9301      	str	r3, [sp, #4]
 80096d8:	f100 0308 	add.w	r3, r0, #8
 80096dc:	429a      	cmp	r2, r3
 80096de:	460d      	mov	r5, r1
 80096e0:	bf14      	ite	ne
 80096e2:	6882      	ldrne	r2, [r0, #8]
 80096e4:	220f      	moveq	r2, #15
 80096e6:	a901      	add	r1, sp, #4
 80096e8:	4604      	mov	r4, r0
 80096ea:	f7ff ff8f 	bl	800960c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80096ee:	1bbf      	subs	r7, r7, r6
 80096f0:	4681      	mov	r9, r0
 80096f2:	b11d      	cbz	r5, 80096fc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80096f4:	462a      	mov	r2, r5
 80096f6:	6821      	ldr	r1, [r4, #0]
 80096f8:	f7ff ffc2 	bl	8009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80096fc:	f1ba 0f00 	cmp.w	sl, #0
 8009700:	d008      	beq.n	8009714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009702:	f1b8 0f00 	cmp.w	r8, #0
 8009706:	d005      	beq.n	8009714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x56>
 8009708:	4642      	mov	r2, r8
 800970a:	4651      	mov	r1, sl
 800970c:	eb09 0005 	add.w	r0, r9, r5
 8009710:	f7ff ffb6 	bl	8009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009714:	b147      	cbz	r7, 8009728 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x6a>
 8009716:	6821      	ldr	r1, [r4, #0]
 8009718:	442e      	add	r6, r5
 800971a:	eb05 0008 	add.w	r0, r5, r8
 800971e:	463a      	mov	r2, r7
 8009720:	4431      	add	r1, r6
 8009722:	4448      	add	r0, r9
 8009724:	f7ff ffac 	bl	8009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8009728:	4620      	mov	r0, r4
 800972a:	f7ff ff89 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800972e:	9b01      	ldr	r3, [sp, #4]
 8009730:	f8c4 9000 	str.w	r9, [r4]
 8009734:	60a3      	str	r3, [r4, #8]
 8009736:	b002      	add	sp, #8
 8009738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800973c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800973c:	b510      	push	{r4, lr}
 800973e:	4604      	mov	r4, r0
 8009740:	f7ff ff7e 	bl	8009640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8009744:	4620      	mov	r0, r4
 8009746:	bd10      	pop	{r4, pc}

08009748 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 8009748:	6840      	ldr	r0, [r0, #4]
 800974a:	4770      	bx	lr

0800974c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800974c:	6800      	ldr	r0, [r0, #0]
 800974e:	4408      	add	r0, r1
 8009750:	4770      	bx	lr
	...

08009754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8009754:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009758:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800975a:	4614      	mov	r4, r2
 800975c:	4681      	mov	r9, r0
 800975e:	462a      	mov	r2, r5
 8009760:	460f      	mov	r7, r1
 8009762:	4698      	mov	r8, r3
 8009764:	4621      	mov	r1, r4
 8009766:	4b37      	ldr	r3, [pc, #220]	; (8009844 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf0>)
 8009768:	f7ff ff72 	bl	8009650 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800976c:	464a      	mov	r2, r9
 800976e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8009772:	f852 6b08 	ldr.w	r6, [r2], #8
 8009776:	4296      	cmp	r6, r2
 8009778:	eba5 0b04 	sub.w	fp, r5, r4
 800977c:	bf18      	it	ne
 800977e:	f8d9 2008 	ldrne.w	r2, [r9, #8]
 8009782:	eb03 0a0b 	add.w	sl, r3, fp
 8009786:	bf08      	it	eq
 8009788:	220f      	moveq	r2, #15
 800978a:	4552      	cmp	r2, sl
 800978c:	d34e      	bcc.n	800982c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xd8>
 800978e:	443e      	add	r6, r7
 8009790:	4641      	mov	r1, r8
 8009792:	1bdf      	subs	r7, r3, r7
 8009794:	4648      	mov	r0, r9
 8009796:	1b3f      	subs	r7, r7, r4
 8009798:	f7ff ff66 	bl	8009668 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800979c:	b170      	cbz	r0, 80097bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 800979e:	b137      	cbz	r7, 80097ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80097a0:	42ac      	cmp	r4, r5
 80097a2:	d004      	beq.n	80097ae <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5a>
 80097a4:	463a      	mov	r2, r7
 80097a6:	1931      	adds	r1, r6, r4
 80097a8:	1970      	adds	r0, r6, r5
 80097aa:	f7ff ff72 	bl	8009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80097ae:	b30d      	cbz	r5, 80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80097b0:	462a      	mov	r2, r5
 80097b2:	4641      	mov	r1, r8
 80097b4:	4630      	mov	r0, r6
 80097b6:	f7ff ff63 	bl	8009680 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80097ba:	e01b      	b.n	80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80097bc:	b135      	cbz	r5, 80097cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x78>
 80097be:	42ac      	cmp	r4, r5
 80097c0:	d33c      	bcc.n	800983c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xe8>
 80097c2:	462a      	mov	r2, r5
 80097c4:	4641      	mov	r1, r8
 80097c6:	4630      	mov	r0, r6
 80097c8:	f7ff ff63 	bl	8009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80097cc:	b197      	cbz	r7, 80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80097ce:	42ac      	cmp	r4, r5
 80097d0:	d010      	beq.n	80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80097d2:	463a      	mov	r2, r7
 80097d4:	1931      	adds	r1, r6, r4
 80097d6:	1970      	adds	r0, r6, r5
 80097d8:	f7ff ff5b 	bl	8009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80097dc:	42ac      	cmp	r4, r5
 80097de:	d209      	bcs.n	80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 80097e0:	4434      	add	r4, r6
 80097e2:	eb08 0305 	add.w	r3, r8, r5
 80097e6:	429c      	cmp	r4, r3
 80097e8:	d30f      	bcc.n	800980a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xb6>
 80097ea:	462a      	mov	r2, r5
 80097ec:	4641      	mov	r1, r8
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7ff ff4f 	bl	8009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80097f4:	f8d9 3000 	ldr.w	r3, [r9]
 80097f8:	f8c9 a004 	str.w	sl, [r9, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	4648      	mov	r0, r9
 8009800:	f803 200a 	strb.w	r2, [r3, sl]
 8009804:	b003      	add	sp, #12
 8009806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800980a:	4544      	cmp	r4, r8
 800980c:	d803      	bhi.n	8009816 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc2>
 800980e:	462a      	mov	r2, r5
 8009810:	eb08 010b 	add.w	r1, r8, fp
 8009814:	e7ce      	b.n	80097b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 8009816:	eba4 0408 	sub.w	r4, r4, r8
 800981a:	4622      	mov	r2, r4
 800981c:	4641      	mov	r1, r8
 800981e:	4630      	mov	r0, r6
 8009820:	f7ff ff37 	bl	8009692 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8009824:	1b2a      	subs	r2, r5, r4
 8009826:	1971      	adds	r1, r6, r5
 8009828:	1930      	adds	r0, r6, r4
 800982a:	e7c4      	b.n	80097b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x62>
 800982c:	9500      	str	r5, [sp, #0]
 800982e:	4643      	mov	r3, r8
 8009830:	4622      	mov	r2, r4
 8009832:	4639      	mov	r1, r7
 8009834:	4648      	mov	r0, r9
 8009836:	f7ff ff42 	bl	80096be <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800983a:	e7db      	b.n	80097f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa0>
 800983c:	2f00      	cmp	r7, #0
 800983e:	d0cf      	beq.n	80097e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x8c>
 8009840:	e7c7      	b.n	80097d2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 8009842:	bf00      	nop
 8009844:	0800a204 	.word	0x0800a204

08009848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8009848:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800984a:	4604      	mov	r4, r0
 800984c:	4608      	mov	r0, r1
 800984e:	460d      	mov	r5, r1
 8009850:	f7f6 fcba 	bl	80001c8 <strlen>
 8009854:	462b      	mov	r3, r5
 8009856:	9000      	str	r0, [sp, #0]
 8009858:	6862      	ldr	r2, [r4, #4]
 800985a:	2100      	movs	r1, #0
 800985c:	4620      	mov	r0, r4
 800985e:	f7ff ff79 	bl	8009754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 8009862:	b003      	add	sp, #12
 8009864:	bd30      	pop	{r4, r5, pc}

08009866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 8009866:	b508      	push	{r3, lr}
 8009868:	f7ff ffee 	bl	8009848 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 800986c:	bd08      	pop	{r3, pc}
	...

08009870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>:
 8009870:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009872:	4604      	mov	r4, r0
 8009874:	4616      	mov	r6, r2
 8009876:	460d      	mov	r5, r1
 8009878:	b919      	cbnz	r1, 8009882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800987a:	b112      	cbz	r2, 8009882 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x12>
 800987c:	480d      	ldr	r0, [pc, #52]	; (80098b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x44>)
 800987e:	f000 f87d 	bl	800997c <_ZSt19__throw_logic_errorPKc>
 8009882:	1b73      	subs	r3, r6, r5
 8009884:	2b0f      	cmp	r3, #15
 8009886:	9301      	str	r3, [sp, #4]
 8009888:	d907      	bls.n	800989a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag+0x2a>
 800988a:	2200      	movs	r2, #0
 800988c:	a901      	add	r1, sp, #4
 800988e:	4620      	mov	r0, r4
 8009890:	f7ff febc 	bl	800960c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8009894:	9b01      	ldr	r3, [sp, #4]
 8009896:	6020      	str	r0, [r4, #0]
 8009898:	60a3      	str	r3, [r4, #8]
 800989a:	4632      	mov	r2, r6
 800989c:	4629      	mov	r1, r5
 800989e:	6820      	ldr	r0, [r4, #0]
 80098a0:	f7ff ff03 	bl	80096aa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcS5_S5_>
 80098a4:	9b01      	ldr	r3, [sp, #4]
 80098a6:	6822      	ldr	r2, [r4, #0]
 80098a8:	6063      	str	r3, [r4, #4]
 80098aa:	2100      	movs	r1, #0
 80098ac:	54d1      	strb	r1, [r2, r3]
 80098ae:	b002      	add	sp, #8
 80098b0:	bd70      	pop	{r4, r5, r6, pc}
 80098b2:	bf00      	nop
 80098b4:	0800a21d 	.word	0x0800a21d

080098b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS4_>:
 80098b8:	b510      	push	{r4, lr}
 80098ba:	f100 0208 	add.w	r2, r0, #8
 80098be:	6002      	str	r2, [r0, #0]
 80098c0:	e9d1 1200 	ldrd	r1, r2, [r1]
 80098c4:	4604      	mov	r4, r0
 80098c6:	f04f 0300 	mov.w	r3, #0
 80098ca:	440a      	add	r2, r1
 80098cc:	f7ff ffd0 	bl	8009870 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPcEEvT_S7_St20forward_iterator_tag>
 80098d0:	4620      	mov	r0, r4
 80098d2:	bd10      	pop	{r4, pc}

080098d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80098d4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	4616      	mov	r6, r2
 80098da:	460d      	mov	r5, r1
 80098dc:	b919      	cbnz	r1, 80098e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80098de:	b112      	cbz	r2, 80098e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80098e0:	480d      	ldr	r0, [pc, #52]	; (8009918 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80098e2:	f000 f84b 	bl	800997c <_ZSt19__throw_logic_errorPKc>
 80098e6:	1b73      	subs	r3, r6, r5
 80098e8:	2b0f      	cmp	r3, #15
 80098ea:	9301      	str	r3, [sp, #4]
 80098ec:	d907      	bls.n	80098fe <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80098ee:	2200      	movs	r2, #0
 80098f0:	a901      	add	r1, sp, #4
 80098f2:	4620      	mov	r0, r4
 80098f4:	f7ff fe8a 	bl	800960c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80098f8:	9b01      	ldr	r3, [sp, #4]
 80098fa:	6020      	str	r0, [r4, #0]
 80098fc:	60a3      	str	r3, [r4, #8]
 80098fe:	4632      	mov	r2, r6
 8009900:	4629      	mov	r1, r5
 8009902:	6820      	ldr	r0, [r4, #0]
 8009904:	f7ff fed6 	bl	80096b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 8009908:	9b01      	ldr	r3, [sp, #4]
 800990a:	6822      	ldr	r2, [r4, #0]
 800990c:	6063      	str	r3, [r4, #4]
 800990e:	2100      	movs	r1, #0
 8009910:	54d1      	strb	r1, [r2, r3]
 8009912:	b002      	add	sp, #8
 8009914:	bd70      	pop	{r4, r5, r6, pc}
 8009916:	bf00      	nop
 8009918:	0800a21d 	.word	0x0800a21d

0800991c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 800991c:	b538      	push	{r3, r4, r5, lr}
 800991e:	f100 0308 	add.w	r3, r0, #8
 8009922:	4604      	mov	r4, r0
 8009924:	6003      	str	r3, [r0, #0]
 8009926:	460d      	mov	r5, r1
 8009928:	b159      	cbz	r1, 8009942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 800992a:	4608      	mov	r0, r1
 800992c:	f7f6 fc4c 	bl	80001c8 <strlen>
 8009930:	182a      	adds	r2, r5, r0
 8009932:	4620      	mov	r0, r4
 8009934:	f04f 0300 	mov.w	r3, #0
 8009938:	4629      	mov	r1, r5
 800993a:	f7ff ffcb 	bl	80098d4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 800993e:	4620      	mov	r0, r4
 8009940:	bd38      	pop	{r3, r4, r5, pc}
 8009942:	f04f 32ff 	mov.w	r2, #4294967295
 8009946:	e7f4      	b.n	8009932 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

08009948 <_Znwj>:
 8009948:	b510      	push	{r4, lr}
 800994a:	2800      	cmp	r0, #0
 800994c:	bf14      	ite	ne
 800994e:	4604      	movne	r4, r0
 8009950:	2401      	moveq	r4, #1
 8009952:	4620      	mov	r0, r4
 8009954:	f000 f84a 	bl	80099ec <malloc>
 8009958:	b930      	cbnz	r0, 8009968 <_Znwj+0x20>
 800995a:	f000 f807 	bl	800996c <_ZSt15get_new_handlerv>
 800995e:	b908      	cbnz	r0, 8009964 <_Znwj+0x1c>
 8009960:	f000 f812 	bl	8009988 <abort>
 8009964:	4780      	blx	r0
 8009966:	e7f4      	b.n	8009952 <_Znwj+0xa>
 8009968:	bd10      	pop	{r4, pc}
	...

0800996c <_ZSt15get_new_handlerv>:
 800996c:	4b02      	ldr	r3, [pc, #8]	; (8009978 <_ZSt15get_new_handlerv+0xc>)
 800996e:	6818      	ldr	r0, [r3, #0]
 8009970:	f3bf 8f5b 	dmb	ish
 8009974:	4770      	bx	lr
 8009976:	bf00      	nop
 8009978:	2000248c 	.word	0x2000248c

0800997c <_ZSt19__throw_logic_errorPKc>:
 800997c:	b508      	push	{r3, lr}
 800997e:	f000 f803 	bl	8009988 <abort>

08009982 <_ZSt20__throw_length_errorPKc>:
 8009982:	b508      	push	{r3, lr}
 8009984:	f000 f800 	bl	8009988 <abort>

08009988 <abort>:
 8009988:	b508      	push	{r3, lr}
 800998a:	2006      	movs	r0, #6
 800998c:	f000 f94a 	bl	8009c24 <raise>
 8009990:	2001      	movs	r0, #1
 8009992:	f7f8 fd0f 	bl	80023b4 <_exit>
	...

08009998 <__errno>:
 8009998:	4b01      	ldr	r3, [pc, #4]	; (80099a0 <__errno+0x8>)
 800999a:	6818      	ldr	r0, [r3, #0]
 800999c:	4770      	bx	lr
 800999e:	bf00      	nop
 80099a0:	20000014 	.word	0x20000014

080099a4 <__libc_init_array>:
 80099a4:	b570      	push	{r4, r5, r6, lr}
 80099a6:	4e0d      	ldr	r6, [pc, #52]	; (80099dc <__libc_init_array+0x38>)
 80099a8:	4c0d      	ldr	r4, [pc, #52]	; (80099e0 <__libc_init_array+0x3c>)
 80099aa:	1ba4      	subs	r4, r4, r6
 80099ac:	10a4      	asrs	r4, r4, #2
 80099ae:	2500      	movs	r5, #0
 80099b0:	42a5      	cmp	r5, r4
 80099b2:	d109      	bne.n	80099c8 <__libc_init_array+0x24>
 80099b4:	4e0b      	ldr	r6, [pc, #44]	; (80099e4 <__libc_init_array+0x40>)
 80099b6:	4c0c      	ldr	r4, [pc, #48]	; (80099e8 <__libc_init_array+0x44>)
 80099b8:	f000 f952 	bl	8009c60 <_init>
 80099bc:	1ba4      	subs	r4, r4, r6
 80099be:	10a4      	asrs	r4, r4, #2
 80099c0:	2500      	movs	r5, #0
 80099c2:	42a5      	cmp	r5, r4
 80099c4:	d105      	bne.n	80099d2 <__libc_init_array+0x2e>
 80099c6:	bd70      	pop	{r4, r5, r6, pc}
 80099c8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099cc:	4798      	blx	r3
 80099ce:	3501      	adds	r5, #1
 80099d0:	e7ee      	b.n	80099b0 <__libc_init_array+0xc>
 80099d2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80099d6:	4798      	blx	r3
 80099d8:	3501      	adds	r5, #1
 80099da:	e7f2      	b.n	80099c2 <__libc_init_array+0x1e>
 80099dc:	0800a268 	.word	0x0800a268
 80099e0:	0800a268 	.word	0x0800a268
 80099e4:	0800a268 	.word	0x0800a268
 80099e8:	0800a270 	.word	0x0800a270

080099ec <malloc>:
 80099ec:	4b02      	ldr	r3, [pc, #8]	; (80099f8 <malloc+0xc>)
 80099ee:	4601      	mov	r1, r0
 80099f0:	6818      	ldr	r0, [r3, #0]
 80099f2:	f000 b885 	b.w	8009b00 <_malloc_r>
 80099f6:	bf00      	nop
 80099f8:	20000014 	.word	0x20000014

080099fc <free>:
 80099fc:	4b02      	ldr	r3, [pc, #8]	; (8009a08 <free+0xc>)
 80099fe:	4601      	mov	r1, r0
 8009a00:	6818      	ldr	r0, [r3, #0]
 8009a02:	f000 b82f 	b.w	8009a64 <_free_r>
 8009a06:	bf00      	nop
 8009a08:	20000014 	.word	0x20000014

08009a0c <memcpy>:
 8009a0c:	b510      	push	{r4, lr}
 8009a0e:	1e43      	subs	r3, r0, #1
 8009a10:	440a      	add	r2, r1
 8009a12:	4291      	cmp	r1, r2
 8009a14:	d100      	bne.n	8009a18 <memcpy+0xc>
 8009a16:	bd10      	pop	{r4, pc}
 8009a18:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a1c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009a20:	e7f7      	b.n	8009a12 <memcpy+0x6>

08009a22 <memmove>:
 8009a22:	4288      	cmp	r0, r1
 8009a24:	b510      	push	{r4, lr}
 8009a26:	eb01 0302 	add.w	r3, r1, r2
 8009a2a:	d807      	bhi.n	8009a3c <memmove+0x1a>
 8009a2c:	1e42      	subs	r2, r0, #1
 8009a2e:	4299      	cmp	r1, r3
 8009a30:	d00a      	beq.n	8009a48 <memmove+0x26>
 8009a32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009a36:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009a3a:	e7f8      	b.n	8009a2e <memmove+0xc>
 8009a3c:	4283      	cmp	r3, r0
 8009a3e:	d9f5      	bls.n	8009a2c <memmove+0xa>
 8009a40:	1881      	adds	r1, r0, r2
 8009a42:	1ad2      	subs	r2, r2, r3
 8009a44:	42d3      	cmn	r3, r2
 8009a46:	d100      	bne.n	8009a4a <memmove+0x28>
 8009a48:	bd10      	pop	{r4, pc}
 8009a4a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009a4e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009a52:	e7f7      	b.n	8009a44 <memmove+0x22>

08009a54 <memset>:
 8009a54:	4402      	add	r2, r0
 8009a56:	4603      	mov	r3, r0
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d100      	bne.n	8009a5e <memset+0xa>
 8009a5c:	4770      	bx	lr
 8009a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8009a62:	e7f9      	b.n	8009a58 <memset+0x4>

08009a64 <_free_r>:
 8009a64:	b538      	push	{r3, r4, r5, lr}
 8009a66:	4605      	mov	r5, r0
 8009a68:	2900      	cmp	r1, #0
 8009a6a:	d045      	beq.n	8009af8 <_free_r+0x94>
 8009a6c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a70:	1f0c      	subs	r4, r1, #4
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	bfb8      	it	lt
 8009a76:	18e4      	addlt	r4, r4, r3
 8009a78:	f000 f8f0 	bl	8009c5c <__malloc_lock>
 8009a7c:	4a1f      	ldr	r2, [pc, #124]	; (8009afc <_free_r+0x98>)
 8009a7e:	6813      	ldr	r3, [r2, #0]
 8009a80:	4610      	mov	r0, r2
 8009a82:	b933      	cbnz	r3, 8009a92 <_free_r+0x2e>
 8009a84:	6063      	str	r3, [r4, #4]
 8009a86:	6014      	str	r4, [r2, #0]
 8009a88:	4628      	mov	r0, r5
 8009a8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009a8e:	f000 b8e6 	b.w	8009c5e <__malloc_unlock>
 8009a92:	42a3      	cmp	r3, r4
 8009a94:	d90c      	bls.n	8009ab0 <_free_r+0x4c>
 8009a96:	6821      	ldr	r1, [r4, #0]
 8009a98:	1862      	adds	r2, r4, r1
 8009a9a:	4293      	cmp	r3, r2
 8009a9c:	bf04      	itt	eq
 8009a9e:	681a      	ldreq	r2, [r3, #0]
 8009aa0:	685b      	ldreq	r3, [r3, #4]
 8009aa2:	6063      	str	r3, [r4, #4]
 8009aa4:	bf04      	itt	eq
 8009aa6:	1852      	addeq	r2, r2, r1
 8009aa8:	6022      	streq	r2, [r4, #0]
 8009aaa:	6004      	str	r4, [r0, #0]
 8009aac:	e7ec      	b.n	8009a88 <_free_r+0x24>
 8009aae:	4613      	mov	r3, r2
 8009ab0:	685a      	ldr	r2, [r3, #4]
 8009ab2:	b10a      	cbz	r2, 8009ab8 <_free_r+0x54>
 8009ab4:	42a2      	cmp	r2, r4
 8009ab6:	d9fa      	bls.n	8009aae <_free_r+0x4a>
 8009ab8:	6819      	ldr	r1, [r3, #0]
 8009aba:	1858      	adds	r0, r3, r1
 8009abc:	42a0      	cmp	r0, r4
 8009abe:	d10b      	bne.n	8009ad8 <_free_r+0x74>
 8009ac0:	6820      	ldr	r0, [r4, #0]
 8009ac2:	4401      	add	r1, r0
 8009ac4:	1858      	adds	r0, r3, r1
 8009ac6:	4282      	cmp	r2, r0
 8009ac8:	6019      	str	r1, [r3, #0]
 8009aca:	d1dd      	bne.n	8009a88 <_free_r+0x24>
 8009acc:	6810      	ldr	r0, [r2, #0]
 8009ace:	6852      	ldr	r2, [r2, #4]
 8009ad0:	605a      	str	r2, [r3, #4]
 8009ad2:	4401      	add	r1, r0
 8009ad4:	6019      	str	r1, [r3, #0]
 8009ad6:	e7d7      	b.n	8009a88 <_free_r+0x24>
 8009ad8:	d902      	bls.n	8009ae0 <_free_r+0x7c>
 8009ada:	230c      	movs	r3, #12
 8009adc:	602b      	str	r3, [r5, #0]
 8009ade:	e7d3      	b.n	8009a88 <_free_r+0x24>
 8009ae0:	6820      	ldr	r0, [r4, #0]
 8009ae2:	1821      	adds	r1, r4, r0
 8009ae4:	428a      	cmp	r2, r1
 8009ae6:	bf04      	itt	eq
 8009ae8:	6811      	ldreq	r1, [r2, #0]
 8009aea:	6852      	ldreq	r2, [r2, #4]
 8009aec:	6062      	str	r2, [r4, #4]
 8009aee:	bf04      	itt	eq
 8009af0:	1809      	addeq	r1, r1, r0
 8009af2:	6021      	streq	r1, [r4, #0]
 8009af4:	605c      	str	r4, [r3, #4]
 8009af6:	e7c7      	b.n	8009a88 <_free_r+0x24>
 8009af8:	bd38      	pop	{r3, r4, r5, pc}
 8009afa:	bf00      	nop
 8009afc:	20002490 	.word	0x20002490

08009b00 <_malloc_r>:
 8009b00:	b570      	push	{r4, r5, r6, lr}
 8009b02:	1ccd      	adds	r5, r1, #3
 8009b04:	f025 0503 	bic.w	r5, r5, #3
 8009b08:	3508      	adds	r5, #8
 8009b0a:	2d0c      	cmp	r5, #12
 8009b0c:	bf38      	it	cc
 8009b0e:	250c      	movcc	r5, #12
 8009b10:	2d00      	cmp	r5, #0
 8009b12:	4606      	mov	r6, r0
 8009b14:	db01      	blt.n	8009b1a <_malloc_r+0x1a>
 8009b16:	42a9      	cmp	r1, r5
 8009b18:	d903      	bls.n	8009b22 <_malloc_r+0x22>
 8009b1a:	230c      	movs	r3, #12
 8009b1c:	6033      	str	r3, [r6, #0]
 8009b1e:	2000      	movs	r0, #0
 8009b20:	bd70      	pop	{r4, r5, r6, pc}
 8009b22:	f000 f89b 	bl	8009c5c <__malloc_lock>
 8009b26:	4a21      	ldr	r2, [pc, #132]	; (8009bac <_malloc_r+0xac>)
 8009b28:	6814      	ldr	r4, [r2, #0]
 8009b2a:	4621      	mov	r1, r4
 8009b2c:	b991      	cbnz	r1, 8009b54 <_malloc_r+0x54>
 8009b2e:	4c20      	ldr	r4, [pc, #128]	; (8009bb0 <_malloc_r+0xb0>)
 8009b30:	6823      	ldr	r3, [r4, #0]
 8009b32:	b91b      	cbnz	r3, 8009b3c <_malloc_r+0x3c>
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 f83d 	bl	8009bb4 <_sbrk_r>
 8009b3a:	6020      	str	r0, [r4, #0]
 8009b3c:	4629      	mov	r1, r5
 8009b3e:	4630      	mov	r0, r6
 8009b40:	f000 f838 	bl	8009bb4 <_sbrk_r>
 8009b44:	1c43      	adds	r3, r0, #1
 8009b46:	d124      	bne.n	8009b92 <_malloc_r+0x92>
 8009b48:	230c      	movs	r3, #12
 8009b4a:	6033      	str	r3, [r6, #0]
 8009b4c:	4630      	mov	r0, r6
 8009b4e:	f000 f886 	bl	8009c5e <__malloc_unlock>
 8009b52:	e7e4      	b.n	8009b1e <_malloc_r+0x1e>
 8009b54:	680b      	ldr	r3, [r1, #0]
 8009b56:	1b5b      	subs	r3, r3, r5
 8009b58:	d418      	bmi.n	8009b8c <_malloc_r+0x8c>
 8009b5a:	2b0b      	cmp	r3, #11
 8009b5c:	d90f      	bls.n	8009b7e <_malloc_r+0x7e>
 8009b5e:	600b      	str	r3, [r1, #0]
 8009b60:	50cd      	str	r5, [r1, r3]
 8009b62:	18cc      	adds	r4, r1, r3
 8009b64:	4630      	mov	r0, r6
 8009b66:	f000 f87a 	bl	8009c5e <__malloc_unlock>
 8009b6a:	f104 000b 	add.w	r0, r4, #11
 8009b6e:	1d23      	adds	r3, r4, #4
 8009b70:	f020 0007 	bic.w	r0, r0, #7
 8009b74:	1ac3      	subs	r3, r0, r3
 8009b76:	d0d3      	beq.n	8009b20 <_malloc_r+0x20>
 8009b78:	425a      	negs	r2, r3
 8009b7a:	50e2      	str	r2, [r4, r3]
 8009b7c:	e7d0      	b.n	8009b20 <_malloc_r+0x20>
 8009b7e:	428c      	cmp	r4, r1
 8009b80:	684b      	ldr	r3, [r1, #4]
 8009b82:	bf16      	itet	ne
 8009b84:	6063      	strne	r3, [r4, #4]
 8009b86:	6013      	streq	r3, [r2, #0]
 8009b88:	460c      	movne	r4, r1
 8009b8a:	e7eb      	b.n	8009b64 <_malloc_r+0x64>
 8009b8c:	460c      	mov	r4, r1
 8009b8e:	6849      	ldr	r1, [r1, #4]
 8009b90:	e7cc      	b.n	8009b2c <_malloc_r+0x2c>
 8009b92:	1cc4      	adds	r4, r0, #3
 8009b94:	f024 0403 	bic.w	r4, r4, #3
 8009b98:	42a0      	cmp	r0, r4
 8009b9a:	d005      	beq.n	8009ba8 <_malloc_r+0xa8>
 8009b9c:	1a21      	subs	r1, r4, r0
 8009b9e:	4630      	mov	r0, r6
 8009ba0:	f000 f808 	bl	8009bb4 <_sbrk_r>
 8009ba4:	3001      	adds	r0, #1
 8009ba6:	d0cf      	beq.n	8009b48 <_malloc_r+0x48>
 8009ba8:	6025      	str	r5, [r4, #0]
 8009baa:	e7db      	b.n	8009b64 <_malloc_r+0x64>
 8009bac:	20002490 	.word	0x20002490
 8009bb0:	20002494 	.word	0x20002494

08009bb4 <_sbrk_r>:
 8009bb4:	b538      	push	{r3, r4, r5, lr}
 8009bb6:	4c06      	ldr	r4, [pc, #24]	; (8009bd0 <_sbrk_r+0x1c>)
 8009bb8:	2300      	movs	r3, #0
 8009bba:	4605      	mov	r5, r0
 8009bbc:	4608      	mov	r0, r1
 8009bbe:	6023      	str	r3, [r4, #0]
 8009bc0:	f7f8 fc02 	bl	80023c8 <_sbrk>
 8009bc4:	1c43      	adds	r3, r0, #1
 8009bc6:	d102      	bne.n	8009bce <_sbrk_r+0x1a>
 8009bc8:	6823      	ldr	r3, [r4, #0]
 8009bca:	b103      	cbz	r3, 8009bce <_sbrk_r+0x1a>
 8009bcc:	602b      	str	r3, [r5, #0]
 8009bce:	bd38      	pop	{r3, r4, r5, pc}
 8009bd0:	2000249c 	.word	0x2000249c

08009bd4 <_raise_r>:
 8009bd4:	291f      	cmp	r1, #31
 8009bd6:	b538      	push	{r3, r4, r5, lr}
 8009bd8:	4604      	mov	r4, r0
 8009bda:	460d      	mov	r5, r1
 8009bdc:	d904      	bls.n	8009be8 <_raise_r+0x14>
 8009bde:	2316      	movs	r3, #22
 8009be0:	6003      	str	r3, [r0, #0]
 8009be2:	f04f 30ff 	mov.w	r0, #4294967295
 8009be6:	bd38      	pop	{r3, r4, r5, pc}
 8009be8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009bea:	b112      	cbz	r2, 8009bf2 <_raise_r+0x1e>
 8009bec:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009bf0:	b94b      	cbnz	r3, 8009c06 <_raise_r+0x32>
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	f000 f830 	bl	8009c58 <_getpid_r>
 8009bf8:	462a      	mov	r2, r5
 8009bfa:	4601      	mov	r1, r0
 8009bfc:	4620      	mov	r0, r4
 8009bfe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c02:	f000 b817 	b.w	8009c34 <_kill_r>
 8009c06:	2b01      	cmp	r3, #1
 8009c08:	d00a      	beq.n	8009c20 <_raise_r+0x4c>
 8009c0a:	1c59      	adds	r1, r3, #1
 8009c0c:	d103      	bne.n	8009c16 <_raise_r+0x42>
 8009c0e:	2316      	movs	r3, #22
 8009c10:	6003      	str	r3, [r0, #0]
 8009c12:	2001      	movs	r0, #1
 8009c14:	e7e7      	b.n	8009be6 <_raise_r+0x12>
 8009c16:	2400      	movs	r4, #0
 8009c18:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c1c:	4628      	mov	r0, r5
 8009c1e:	4798      	blx	r3
 8009c20:	2000      	movs	r0, #0
 8009c22:	e7e0      	b.n	8009be6 <_raise_r+0x12>

08009c24 <raise>:
 8009c24:	4b02      	ldr	r3, [pc, #8]	; (8009c30 <raise+0xc>)
 8009c26:	4601      	mov	r1, r0
 8009c28:	6818      	ldr	r0, [r3, #0]
 8009c2a:	f7ff bfd3 	b.w	8009bd4 <_raise_r>
 8009c2e:	bf00      	nop
 8009c30:	20000014 	.word	0x20000014

08009c34 <_kill_r>:
 8009c34:	b538      	push	{r3, r4, r5, lr}
 8009c36:	4c07      	ldr	r4, [pc, #28]	; (8009c54 <_kill_r+0x20>)
 8009c38:	2300      	movs	r3, #0
 8009c3a:	4605      	mov	r5, r0
 8009c3c:	4608      	mov	r0, r1
 8009c3e:	4611      	mov	r1, r2
 8009c40:	6023      	str	r3, [r4, #0]
 8009c42:	f7f8 fba7 	bl	8002394 <_kill>
 8009c46:	1c43      	adds	r3, r0, #1
 8009c48:	d102      	bne.n	8009c50 <_kill_r+0x1c>
 8009c4a:	6823      	ldr	r3, [r4, #0]
 8009c4c:	b103      	cbz	r3, 8009c50 <_kill_r+0x1c>
 8009c4e:	602b      	str	r3, [r5, #0]
 8009c50:	bd38      	pop	{r3, r4, r5, pc}
 8009c52:	bf00      	nop
 8009c54:	2000249c 	.word	0x2000249c

08009c58 <_getpid_r>:
 8009c58:	f7f8 bb94 	b.w	8002384 <_getpid>

08009c5c <__malloc_lock>:
 8009c5c:	4770      	bx	lr

08009c5e <__malloc_unlock>:
 8009c5e:	4770      	bx	lr

08009c60 <_init>:
 8009c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c62:	bf00      	nop
 8009c64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c66:	bc08      	pop	{r3}
 8009c68:	469e      	mov	lr, r3
 8009c6a:	4770      	bx	lr

08009c6c <_fini>:
 8009c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c6e:	bf00      	nop
 8009c70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009c72:	bc08      	pop	{r3}
 8009c74:	469e      	mov	lr, r3
 8009c76:	4770      	bx	lr
